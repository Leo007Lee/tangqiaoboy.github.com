<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2013-10-16T10:53:47+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C对象模型及应用]]></title>
    <link href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/"/>
    <updated>2013-10-15T20:31:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/10/15/objective-c-object-model</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>原创文章，转载请注明出自<a href="http://blog.devtang.com">唐巧的技术博客</a>。</p>

<p>本文主要介绍Objective-C对象模型的实现细节，以及Objective-C语言对象模型中对<code>isa swizzling</code>和<code>method swizzling</code>的支持。希望本文能加深你对Objective-C对象的理解。</p>

<h2>ISA指针</h2>

<p>Objective-C是一门面向对象的编程语言。每一个对象都是一个类的实例。在Objective-C语言的内部，每一个对象都有一个名为isa的指针，指向该对象的类。每一个类描述了一系列它的实例的特点，包括成员变量的列表，成员函数的列表等。每一个对象都可以接受消息，而对象能够接收的消息列表是保存在它所对应的类中。</p>

<p>在XCode中按<code>Shift + Command + O</code>, 然后输入NSObject.h和objc.h，可以打开NSObject的定义头文件，通过头文件我们可以看到，NSObject就是一个包含isa指针的结构体，如下图所示：</p>

<!-- more -->


<p><img src="http://blog.devtang.com/images/class-nsobject-isa.jpg">
<img src="http://blog.devtang.com/images/class-objc-object-isa.jpg"></p>

<p>按照面向对象语言的设计原则，所有事物都应该是对象（严格来说Objective-C并没有完全做到这一点，因为它有象int, double这样的简单变量类型）。在Objective-C语言中，每一个类实际上也是一个对象。每一个类也有一个名为isa的指针。每一个类也可以接受消息，例如<code>[NSObject alloc]</code>，就是向NSObject这个类发送名为<code>alloc</code>消息。</p>

<p>在XCode中按<code>Shift + Command + O</code>, 然后输入runtime.h，可以打开Class的定义头文件，通过头文件我们可以看到，Class也是一个包含isa指针的结构体，如下图所示。（图中除了isa外还有其它成员变量，但那是为了兼容非2.0版的Objective-C的遗留逻辑，大家可以忽略它。）</p>

<p><img src="http://blog.devtang.com/images/class-objc-class-isa.jpg"></p>

<p>因为类也是一个对象，那它也必须是另一个类的实列，这个类就是元类(<code>metaclass</code>)。元类保存了类方法的列表。当一个类方法被调用时，元类会首先查找它本身是否有该类方法的实现，如果没有，则该元类会向它的父类查找该方法，直到一直找到继承链的头。</p>

<p>元类(<code>metaclass</code>)也是一个对象，那么元类的isa指针又指向哪里呢？为了设计上的完整，所有的元类的isa指针都会指向一个根元类(root <code>metaclass</code>)。根元类(root metaclass)本身的isa指针指向自己，这样就行成了一个闭环。上面提到，一个对象能够接收的消息列表是保存在它所对应的类中的。在实际编程中，我们几乎不会遇到向元类发消息的情况，那它的isa指针在实际上很少用到。不过这么设计保证了面向对象的干净，即所有事物都是对象，都有isa指针。</p>

<p>我们再来看看继承关系，由于类方法的定义是保存在元类(<code>metaclass</code>)中，而方法调用的规则是，如果该类没有一个方法的实现，则向它的父类继续查找。所以，为了保证父类的类方法可以在子类中可以被调用，所以子类的元类会继承父类的元类，换而言之，类对象和元类对象有着同样的继承关系。</p>

<p>我很想把关系说清楚一些，但是这块儿确实有点绕，下面这张图或许能够让大家对isa和继承的关系清楚一些（该图片来自<a href="http://www.sealiesoftware.com/blog/class%20diagram.pdf">这里</a>）</p>

<p><img src="http://blog.devtang.com/images/class-diagram.jpg"></p>

<p>该图中，最让人困惑的莫过于Root Class了。在实现中，Root Class是指NSObject，我们可以从图中看出：</p>

<ol>
<li>NSObject类包括它的对象实例方法。</li>
<li>NSObject的元类包括它的类方法，例如alloc方法。</li>
<li>NSObject的元类继承自NSObject类。</li>
<li>一个NSObject的类中的方法同时也会被NSObject的子类在查找方法时找到。</li>
</ol>


<h2>类的成员变量</h2>

<p>如果把类的实例看成一个C语言的结构体（struct），上面说的isa指针就是这个结构体的第一个成员变量，而类的其它成员变量依次排列在结构体中。排列顺序如下图所示（图片来自《iOS 6 Programming Pushing the Limits》）：</p>

<p><img src="http://blog.devtang.com/images/class-member.jpg"></p>

<p>为了验证该说法，我们在XCode中新建一个工程，在main.m中运行如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Father</span> : <span class="nc">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_father</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">Father</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">Child</span> <span class="o">:</span> <span class="n">Father</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_child</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">Child</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Child</span> <span class="o">*</span> <span class="n">child</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Child</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将断点下在 <code>@autoreleasepool</code> 处，然后在Console中输入<code>p *child</code>,则可以看到Xcode输出如下内容，这与我们上面的说法一致。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">p</span> <span class="o">*</span><span class="n">child</span>
</span><span class='line'><span class="p">(</span><span class="n">Child</span><span class="p">)</span> <span class="n">$0</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="n">Father</span><span class="p">)</span> <span class="n">Father</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="n">NSObject</span><span class="p">)</span> <span class="n">NSObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">(</span><span class="n">Class</span><span class="p">)</span> <span class="n">isa</span> <span class="o">=</span> <span class="n">Child</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">_father</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">_child</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>可变与不可变</h2>

<p>因为对象在内存中的排布可以看成一个结构体，该结构体的大小并不能动态变化。所以无法在运行时动态给对象增加成员变量。</p>

<p>相对的，对象的方法定义都保存在类的可变区域中。Objective-C 2.0并未在头文件中将实现暴露出来，但在Objective-C 1.0中，我们可以看到方法的定义列表是一个名为 <code>methodLists</code>的指针的指针（如下图所示）。通过修改该指针指向的指针的值，就可以实现动态地为某一个类增加成员方法。这也是<code>Category</code>实现的原理。同时也说明了为什么<code>Category</code>只可为对象增加成员方法，却不能增加成员变量。</p>

<p><img src="http://blog.devtang.com/images/class-objc-class-isa.jpg"></p>

<p>需要特别说明一下，通过<code>objc_setAssociatedObject</code> 和 <code>objc_getAssociatedObject</code>方法可以变相地给对象增加成员变量，但由于实现机制不一样，所以并不是真正改变了对象的内存结构。</p>

<p>除了对象的方法可以动态修改，因为isa本身也只是一个指针，所以我们也可以在运行时动态地修改isa指针的值，达到替换对象整个行为的目的。不过该应用场景较少。</p>

<h2>系统相关API及应用</h2>

<h3>isa swizzling的应用</h3>

<p>系统提供的KVO的实现，就利用了动态地修改isa指针的值的技术。在<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/KeyValueObserving/Articles/KVOImplementation.html">苹果的文档</a>中可以看到如下描述：</p>

<blockquote><p>Key-Value Observing Implementation Details</p><p>Automatic key-value observing is implemented using a technique called isa-swizzling.</p><p>The isa pointer, as the name suggests, points to the object&#8217;s class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data.</p><p>When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance.</p><p>You should never rely on the isa pointer to determine class membership. Instead, you should use the class method to determine the class of an object instance.</p></blockquote>


<p><del>类似的，使用isa swizzling的技术的还有系统提供的Key-Value Coding（KVC）。</del> (谢谢大家指出错误，KVC并没有使用到isa swizzling)</p>

<h3>Method Swizzling API说明</h3>

<p>Objective-C提供了以下API来动态替换类方法或实例方法的实现：</p>

<ul>
<li><code>class_replaceMethod</code> 替换类方法的定义</li>
<li><code>method_exchangeImplementations</code> 交换2个方法的实现</li>
<li><code>method_setImplementation</code> 设置1个方法的实现</li>
</ul>


<p>这3个方法有一些细微的差别，给大家介绍如下：</p>

<ul>
<li><code>class_replaceMethod</code>在苹果的文档（如下图所示）中能看到，它有两种不同的行为。当类中没有想替换的原方法时，该方法会调用<code>class_addMethod</code>来为该类增加一个新方法，也因为如此，<code>class_replaceMethod</code>在调用时需要传入<code>types</code>参数，而<code>method_exchangeImplementations</code>和<code>method_setImplementation</code>却不需要。</li>
</ul>


<p><img src="http://blog.devtang.com/images/class-replace-method.jpg"></p>

<ul>
<li><code>method_exchangeImplementations</code> 的内部实现其实是调用了2次<code>method_setImplementation</code>方法，从苹果的文档中能清晰地了解到（如下图所示）</li>
</ul>


<p><img src="http://blog.devtang.com/images/class-method-exchange-imp.jpg"></p>

<p>从以上的区别我们可以总结出这3个API的使用场景:</p>

<ul>
<li><code>class_replaceMethod</code>, 当需要替换的方法可能有不存在的情况时，可以考虑使用该方法。</li>
<li><code>method_exchangeImplementations</code>，当需要交换2个方法的实现时使用。</li>
<li><code>method_setImplementation</code> 最简单的用法，当仅仅需要为一个方法设置其实现方式时使用。</li>
</ul>


<h3>使用示例</h3>

<p>我们在开发<a href="http://yuantiku.com">猿题库</a>客户端的笔记功能时，需要使用系统的<code>UIImagePickerController</code>。但是，我们发现，在iOS6.0.2系统下，系统提供的<code>UIImagePickerController</code>在iPad横屏下有转屏的Bug，造成其方向错误。具体的Bug详情可以见<a href="http://stackoverflow.com/questions/12522491/crash-on-presenting-uiimagepickercontroller-under-ios-6-0">这里</a>。</p>

<p>为了修复该Bug，我们需要替换<code>UIImagePickerController</code>的如下2个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们先实现了一个名为<code>ImagePickerReplaceMethodsHolder</code>的类，用于定义替换后的方法和实现。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// ImagePickerReplaceMethodsHolder.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ImagePickerReplaceMethodsHolder</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ImagePickerReplaceMethodsHolder.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ImagePickerReplaceMethodsHolder</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIInterfaceOrientationPortrait</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，我们在调用处，判断当前的iOS版本，对于[iOS6.0, iOS6.1)之间的版本，我们将<code>UIImagePickerController</code>的有问题的方法替换。具体代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</span>
</span><span class='line'><span class="cp">#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">hackForImagePicker</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hackForImagePicker</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// fix bug of image picker under iOS 6.0</span>
</span><span class='line'>    <span class="c1">// http://stackoverflow.com/questions/12522491/crash-on-presenting-uiimagepickercontroller-under-ios-6-0</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO</span><span class="p">(</span><span class="s">@&quot;6.0&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">SYSTEM_VERSION_LESS_THAN</span><span class="p">(</span><span class="s">@&quot;6.1&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">oldMethod1</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">UIImagePickerController</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">shouldAutorotate</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">newMethod1</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">ImagePickerReplaceMethodsHolder</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">shouldAutorotate</span><span class="p">));</span>
</span><span class='line'>        <span class="n">method_setImplementation</span><span class="p">(</span><span class="n">oldMethod1</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">newMethod1</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Method</span> <span class="n">oldMethod2</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">UIImagePickerController</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">preferredInterfaceOrientationForPresentation</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">newMethod2</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">ImagePickerReplaceMethodsHolder</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">preferredInterfaceOrientationForPresentation</span><span class="p">));</span>
</span><span class='line'>        <span class="n">method_setImplementation</span><span class="p">(</span><span class="n">oldMethod2</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">newMethod2</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过如上代码，我们就针对iOS特定版本的有问题的系统库函数打了Patch，使问题得到解决。</p>

<h3>开源界的使用</h3>

<p>有少量不明真相的同学以为苹果在审核时会拒绝App使用以上API，这其实是对苹果的误解。使用如上API是安全的。另外，开源界也对以上方法都适当的使用。例如：</p>

<ul>
<li>著名的网络库<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>。AFNetworking网络库(v1.x版本)使用了class_replaceMethod方法（AFHTTPRequestOperation.m文件第105行）</li>
<li><a href="https://github.com/jverkoey/nimbus">Nimbus</a>。Nimbus是著名的工具类库，它在其core模块中提供了<code>NIRuntimeClassModifications.h</code>文件，用于提供上述API的封装。</li>
<li>国内的大众点评iOS客户端。该客户端使用了他们自己开发的基于Wax修改而来的<a href="https://github.com/mmin18/WaxPatch">WaxPatch</a>，WaxPatch可以实现通过服务器更新来动态修改客户端的逻辑。而WaxPatch主要是修改了wax中的wax_instance.m文件，在其中加入了class_replaceMethod来替换原始实现，从而实现修改客户端的原有行为。</li>
</ul>


<h2>总结</h2>

<p>通过本文，我们了解到了Objective-C语言的对象模型，以及Objective-C语言对象模型中对<code>isa swizzling</code>和<code>method swizzling</code>的支持。本文也通过具体的实例代码和开源项目，让我们对该对象模型提供的动态性有了更加深刻的认识。</p>

<h2>后记</h2>

<p>文章发表后，一些同行指出在ARM64的CPU下，isa的内部结构有变化。这点我是知道的，不过希望以后再撰文讨论。感兴趣的同学可以查看苹果今年WWDC2013的视频：《Session 404 Advanced in Objective-C》。</p>

<h3>参考链接</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html</a></li>
<li><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html">http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html</a></li>
<li><a href="http://www.devalot.com/articles/2011/11/objc-object-model.html">http://www.devalot.com/articles/2011/11/objc-object-model.html</a></li>
<li><a href="http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html">http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html</a></li>
<li><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html">http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html</a></li>
<li><a href="http://wwwmain.gnustep.org/resources/downloads.php">gunstep的实现源码</a></li>
<li><a href="http://algorithm.com.au/downloads/talks/objective-c-internals/objective-c-internals.pdf">http://algorithm.com.au/downloads/talks/objective-c-internals/objective-c-internals.pdf</a></li>
<li><a href="http://opensource.apple.com/source/objc4/objc4-532/runtime/">http://opensource.apple.com/source/objc4/objc4-532/runtime/</a></li>
<li><a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a></li>
<li><a href="https://github.com/jverkoey/nimbus">https://github.com/jverkoey/nimbus</a></li>
<li><a href="https://github.com/mmin18/WaxPatch">https://github.com/mmin18/WaxPatch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[动态下载苹果提供的多种中文字体]]></title>
    <link href="http://blog.devtang.com/blog/2013/08/11/ios-asian-font-download-introduction/"/>
    <updated>2013-08-11T16:00:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/08/11/ios-asian-font-download-introduction</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/wawati-sample.jpg"></p>

<h2>引言</h2>

<p>在今年WWDC的内容公开之前，大家都以为iOS系统里面只有一种中文字体。为了达到更好的字体效果，有些应用在自己的应用资源包中加入了字体文件。但自己打包字体文件比较麻烦，原因在于：</p>

<p>1、字体文件通常比较大，10M - 20M是一个常见的字体库的大小。大部分的非游戏的app体积都集中在10M以内，因为字体文件的加入而造成应用体积翻倍让人感觉有些不值。如果只是很少量的按钮字体需要设置，可以用一些工具把使用到的汉字字体编码从字体库中抽取出来，以节省体积。但如果是一些变化的内容需要自定义的字体，那就只有打包整个字体库了。</p>

<p>2、中文的字体通常都是有版权的。在应用中加入特殊中文字体还需要处理相应的版权问题。对于一些小公司或个人开发者来说，这是一笔不小的开销。</p>

<p>以上两点造成App Store里面使用特殊中文字库的iOS应用较少。现在通常只有阅读类的应用才会使用特殊中文字库。</p>

<p>但其实从iOS6开始，苹果就支持动态下载中文字体到系统中。只是苹果一直没有公开相应的API。最终，相应的API在今年的WWDC大会上公开，接下来就让我们来一起了解这个功能。</p>

<!-- more -->


<h2>功能介绍</h2>

<p>使用动态下载中文字体的API可以动态地向iOS系统中添加字体文件，这些字体文件都是下载到系统的目录中（目录是<code>/private/var/mobile/Library/Assets/com_apple_MobileAsset_Font/</code>），所以并不会造成应用体积的增加。并且，由于字体文件是iOS系统提供的，也免去了字体使用版权的问题。虽然第一次下载相关的中文字体需要一些网络开销和下载时间，但是这些字体文件下载后可以在所有应用间共享，所以可以遇见到，随着该API使用的普及，大部分应用都不需要提示用户下载字体，因为很可能这些字体在之前就被其它应用下载下来了。</p>

<h2>字体列表</h2>

<p>在<a href="http://support.apple.com/kb/HT5484?viewlocale=zh_CN">这个链接</a>中，苹果列出了提供动态下载和使用中文字体文件列表。不过，由于下载的时候需要使用的名字是PostScript名称，所以如果你真正要动态下载相应的字体的话，还需要使用Mac内自带的应用“字体册“来获得相应字体的PostScript名称。如下显示了从”字体册“中获取《兰亭黑-简 特黑》字体的PostScript名称的截图：</p>

<p><img src="http://blog.devtang.com/images/font-postscript-name.jpg"></p>

<h2>API介绍</h2>

<p>苹果提供的动态下载代码的<a href="http://developer.apple.com/library/ios/#samplecode/DownloadFont/Listings/DownloadFont_ViewController_m.html">Demo工程</a> 链接在这里。将此Demo工程下载下来，即可学习相应API的使用。下面我对该工程中相应API做简单的介绍。</p>

<p>假如我们现在要下载娃娃体字体，它的PostScript名称为<code>DFWaWaSC-W5</code>。具体的步骤如下：</p>

<p>1、我们先判断该字体是否已经被下载下来了，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isFontDownloaded:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">fontName</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIFont</span><span class="o">*</span> <span class="n">aFont</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="n">fontName</span> <span class="nl">size:</span><span class="mf">12.0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aFont</span> <span class="o">&amp;&amp;</span> <span class="p">([</span><span class="n">aFont</span><span class="p">.</span><span class="n">fontName</span> <span class="nl">compare:</span><span class="n">fontName</span><span class="p">]</span> <span class="o">==</span> <span class="n">NSOrderedSame</span>
</span><span class='line'>               <span class="o">||</span> <span class="p">[</span><span class="n">aFont</span><span class="p">.</span><span class="n">familyName</span> <span class="nl">compare:</span><span class="n">fontName</span><span class="p">]</span> <span class="o">==</span> <span class="n">NSOrderedSame</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、如果该字体下载过了，则可以直接使用。否则我们需要先准备下载字体API需要的一些参数，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 用字体的PostScript名字创建一个Dictionary</span>
</span><span class='line'><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">attrs</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="n">fontName</span><span class="p">,</span> <span class="n">kCTFontNameAttribute</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 创建一个字体描述对象CTFontDescriptorRef</span>
</span><span class='line'><span class="n">CTFontDescriptorRef</span> <span class="n">desc</span> <span class="o">=</span> <span class="n">CTFontDescriptorCreateWithAttributes</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)</span><span class="n">attrs</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 将字体描述对象放到一个NSMutableArray中</span>
</span><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">descs</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithCapacity:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">descs</span> <span class="nl">addObject:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">desc</span><span class="p">];</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">desc</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、准备好上面的<code>descs</code>变量后，则可以进行字体的下载了，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="kt">BOOL</span> <span class="n">errorDuringDownload</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">CTFontDescriptorMatchFontDescriptorsWithProgressHandler</span><span class="p">(</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFArrayRef</span><span class="p">)</span><span class="n">descs</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>  <span class="o">^</span><span class="p">(</span><span class="n">CTFontDescriptorMatchingState</span> <span class="n">state</span><span class="p">,</span> <span class="n">CFDictionaryRef</span> <span class="n">progressParameter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">progressValue</span> <span class="o">=</span> <span class="p">[[(</span><span class="n">__bridge</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">progressParameter</span> <span class="nl">objectForKey:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTFontDescriptorMatchingPercentage</span><span class="p">]</span> <span class="n">doubleValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDidBegin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;字体已经匹配&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDidFinish</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">errorDuringDownload</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;字体%@ 下载完成&quot;</span><span class="p">,</span> <span class="n">fontName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingWillBeginDownloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;字体开始下载&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDidFinishDownloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;字体下载完成&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 可以在这里修改UI控件的字体</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDownloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;下载进度 %.0f%% &quot;</span><span class="p">,</span> <span class="n">progressValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDidFailWithError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[(</span><span class="n">__bridge</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">progressParameter</span> <span class="nl">objectForKey:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTFontDescriptorMatchingError</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_errorMessage</span> <span class="o">=</span> <span class="p">[</span><span class="n">error</span> <span class="n">description</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_errorMessage</span> <span class="o">=</span> <span class="s">@&quot;ERROR MESSAGE IS NOT AVAILABLE!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 设置标志</span>
</span><span class='line'>        <span class="n">errorDuringDownload</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;下载错误: %@&quot;</span><span class="p">,</span> <span class="n">_errorMessage</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常需要在下载完字体后开始使用字体，一般是将相应代码放到 kCTFontDescriptorMatchingDidFinish 那个条件中做，可以象苹果官网的示例代码上那样，用GCD来改UI的逻辑，也可以发Notification来通知相应的Controller。</p>

<p>以下是通过以上示例代码下载下来的娃娃体字体截图：</p>

<p><img src="http://blog.devtang.com/images/wawati-sample.jpg"></p>

<h2>iOS版本限制</h2>

<p>以上代码只能运行在iOS6以上的系统，但当前还有不少用户是iOS5的系统。不过，随着苹果在WWDC2013中推出iOS7的beta版，很多人都期待着使用iOS7。从历史数据上看，苹果iOS新版本推出后，通常3个月内就可以达到50%以上的使用比例。所以，可以遇见到在今年年底，iOS5的用户将所剩无几。如果我们打算在年底只支持iOS6以上的系统，那么就可以通过上面介绍的方法使用大量中文字体来美化你的应用。</p>

<p>愿新的API能让大家的应用更加美观，have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈Objective-C block的实现]]></title>
    <link href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/"/>
    <updated>2013-07-28T10:42:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p><a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">这里</a>有关于block的5道测试题，建议你阅读本文之前先做一下测试。</p>

<p>先介绍一下什么是闭包。在wikipedia上，<a href="http://en.wikipedia.org/wiki/Closure_(computer_science">闭包的定义</a>)是:</p>

<blockquote><p>In programming languages, a closure is a function or reference to a function together with a referencing environment—a table storing a reference to each of the non-local variables (also called free variables or upvalues) of that function.</p></blockquote>


<p>翻译过来，闭包是一个函数（或指向函数的指针），再加上该函数执行的外部的上下文变量（有时候也称作自由变量）。</p>

<p>block实际上就是Objective-C语言对于闭包的实现。
block配合上dispatch_queue，可以方便地实现简单的多线程编程和异步编程，关于这个，我之前写过一篇文章介绍：<a href="http://blog.devtang.com/blog/2012/02/22/use-gcd/">《使用GCD》</a>。</p>

<p>本文主要介绍Objective-C语言的block在编译器中的实现方式。主要包括：</p>

<ol>
<li>block的内部实现数据结构介绍</li>
<li>block的三种类型及其相关的内存管理方式</li>
<li>block如何通过capture变量来达到访问函数外的变量</li>
</ol>


<!-- more -->


<h2>实现方式</h2>

<h3>数据结构定义</h3>

<p>block的数据结构定义如下（图片来自<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">这里</a>)：</p>

<p><img src="http://blog.devtang.com/images/block-struct.jpg"></p>

<p>对应的结构体定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">Block_descriptor</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">copy</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Block_layout</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">invoke</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_descriptor</span> <span class="o">*</span><span class="n">descriptor</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Imported variables. */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过该图，我们可以知道，一个block实例实际上由6部分构成：</p>

<ol>
<li>isa指针，所有对象都有该指针，用于实现对象相关的功能。</li>
<li>flags，用于按bit位表示一些block的附加信息，本文后面介绍block copy的实现代码可以看到对该变量的使用。</li>
<li>reserved，保留变量。</li>
<li>invoke，函数指针，指向具体的block实现的函数调用地址。</li>
<li>descriptor， 表示该block的附加描述信息，主要是size大小，以及copy和dispose函数的指针。</li>
<li>variables，capture过来的变量，block能够访问它外部的局部变量，就是因为将这些变量（或变量的地址）复制到了结构体中。</li>
</ol>


<p>该数据结构和后面的clang分析出来的结构实际是一样的，不过仅是结构体的嵌套方式不一样。但这一点我一开始没有想明白，所以也给大家解释一下，如下2个结构体SampleA和SampleB在内存上是完全一样的，原因是结构体本身并不带有任何额外的附加信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">SampleA</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SampleB</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Part1</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Part2</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Objective-C语言中，一共有3种类型的block：</p>

<ol>
<li>_NSConcreteGlobalBlock 全局的静态block，不会访问任何外部变量。</li>
<li>_NSConcreteStackBlock  保存在栈中的block，当函数返回时会被销毁。</li>
<li>_NSConcreteMallocBlock 保存在堆中的block，当引用计数为0时会被销毁。</li>
</ol>


<p>我们在下面会分别来查看它们各自的实现方式上的差别。</p>

<h3>研究工具：clang</h3>

<p>为了研究编译器是如何实现block的，我们需要使用clang。clang提供一个命令，可以将Objetive-C的源码改写成c语言的，借此可以研究block具体的源码实现方式。该命令是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">clang</span> <span class="o">-</span><span class="n">rewrite</span><span class="o">-</span><span class="n">objc</span> <span class="n">block</span><span class="p">.</span><span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSConcreteGlobalBlock 类型的block的实现</h3>

<p>我们先新建一个名为block1.c的源文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">^</span><span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="p">}</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在命令行中输入<code>clang -rewrite-objc block1.c</code>即可在目录中看到clang输出了一个名为block1.cpp的文件。该文件就是block在c语言实现，我将block1.cpp中一些无关的代码去掉，将关键代码引用如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__block_impl</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">FuncPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">)</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们就具体看一下是如何实现的。__main_block_impl_0就是该block的实现，从中我们可以看出：</p>

<ol>
<li>一个block实际是一个对象，它主要由一个 isa 和 一个 impl 和 一个descriptor组成。</li>
<li><del>在本例中，isa指向 _NSConcreteGlobalBlock， 主要是为了实现对象的所有特性，在此我们就不展开讨论了。</del></li>
<li>由于clang改写的具体实现方式和LLVM不太一样，并且这里没有开启ARC。所以这里我们看到isa指向的还是<code>_NSConcreteStackBlock</code>。但在LLVM的实现中，开启ARC时，block应该是_NSConcreteGlobalBlock类型，具体可以看<a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">《objective-c-blocks-quiz》</a>第二题的解释。</li>
<li>impl是实际的函数指针，本例中，它指向__main_block_func_0。这里的impl相当于之前提到的invoke变量，只是clang编译器对变量的命名不一样而已。</li>
<li>descriptor是用于描述当前这个block的附加信息的，包括结构体的大小，需要capture和dispose的变量列表等。结构体大小需要保存是因为，每个block因为会capture一些变量，这些变量会加到__main_block_impl_0这个结构体中，使其体积变大。在该例子中我们还看不到相关capture的代码，后面将会看到。</li>
</ol>


<h3>NSConcreteStackBlock 类型的block的实现</h3>

<p>我们另外新建一个名为block2.c的文件，输入以下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block2</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">block2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用之前提到的clang工具，转换后的关键代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">a</span><span class="p">(</span><span class="n">_a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// bound by copy</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">block2</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">))((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block2</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FuncPtr</span><span class="p">)((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在本例中，我们可以看到：</p>

<ol>
<li>本例中，isa指向_NSConcreteStackBlock，说明这是一个分配在栈上的实例。</li>
<li><strong>main_block_impl_0 中增加了一个变量a，在block中引用的变量a实际是在申明block时，被复制到</strong>main_block_impl_0结构体中的那个变量a。因为这样，我们就能理解，在block内部修改变量a的内容，不会影响外部的实际变量a。</li>
<li><strong>main_block_impl_0 中由于增加了一个变量a，所以结构体的大小变大了，该结构体大小被写在了</strong>main_block_desc_0中。</li>
</ol>


<p>我们修改上面的源码，在变量前面增加__block关键字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__block</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="mi">1023</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">block1</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的关键代码如下，可以看到，差异相当大：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">__Block_byref_i_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">__isa</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">__forwarding</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">__flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">__size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">i</span><span class="p">;</span> <span class="c1">// by ref</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">_i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">i</span><span class="p">(</span><span class="n">_i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">i</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">;</span> <span class="c1">// bound by ref</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1023</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_copy_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_dispose_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_dispose</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">copy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">),</span> <span class="n">__main_block_copy_0</span><span class="p">,</span> <span class="n">__main_block_dispose_0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__attribute__</span><span class="p">((</span><span class="n">__blocks__</span><span class="p">(</span><span class="n">byref</span><span class="p">)))</span> <span class="n">__Block_byref_i_0</span> <span class="n">i</span> <span class="o">=</span> <span class="p">{(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">,(</span><span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">__Block_byref_i_0</span><span class="p">),</span> <span class="mi">1024</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">,</span> <span class="p">(</span><span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="mi">570425344</span><span class="p">);</span>
</span><span class='line'>    <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">))((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block1</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FuncPtr</span><span class="p">)((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从代码中我们可以看到：</p>

<ol>
<li>源码中增加一个名为__Block_byref_i_0 的结构体，用来保存我们要capture并且修改的变量i。</li>
<li><strong>main_block_impl_0 中引用的是</strong>Block_byref_i_0的结构体指针，这样就可以达到修改外部变量的作用。</li>
<li>__Block_byref_i_0结构体中带有isa，说明它也是一个对象。</li>
<li>我们需要负责<strong>Block_byref_i_0结构体相关的内存管理，所以</strong>main_block_desc_0中增加了copy和dispose函数指针，对于在调用前后修改相应变量的引用计数。</li>
</ol>


<h2>NSConcreteMallocBlock 类型的block的实现</h2>

<p>NSConcreteMallocBlock类型的block通常不会在源码中直接出现，因为默认它是当一个block被copy的时候，才会将这个block复制到堆中。以下是一个block被copy时的示例代码(来自<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">这里</a>)，可以看到，在第8步，目标的block类型被修改为_NSConcreteMallocBlock。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">_Block_copy_internal</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">bool</span> <span class="n">wantsOne</span> <span class="o">=</span> <span class="p">(</span><span class="n">WANTS_ONE</span> <span class="o">&amp;</span> <span class="n">flags</span><span class="p">)</span> <span class="o">==</span> <span class="n">WANTS_ONE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">arg</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">aBlock</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_NEEDS_FREE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// latches on high</span>
</span><span class='line'>        <span class="n">latching_incr_int</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 4</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_IS_GLOBAL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 5</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 6</span>
</span><span class='line'>    <span class="n">memmove</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">,</span> <span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span> <span class="c1">// bitcopy first</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 7</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">);</span>    <span class="c1">// XXX not needed</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">BLOCK_NEEDS_FREE</span> <span class="o">|</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 8</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">isa</span> <span class="o">=</span> <span class="n">_NSConcreteMallocBlock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 9</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_HAS_COPY_DISPOSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">copy</span><span class="p">)(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">);</span> <span class="c1">// do fixup</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>变量的复制</h3>

<p>对于block外的变量引用，block默认是将其复制到其数据结构中来实现访问的，如下图所示（图片来自<a href="http://rypress.com/tutorials/objective-c/blocks.html">这里</a>）：</p>

<p><img src="http://blog.devtang.com/images/block-capture-1.jpg"></p>

<p>对于用__block修饰的外部变量引用，block是复制其引用地址来实现访问的，如下图所示（图片来自<a href="http://rypress.com/tutorials/objective-c/blocks.html">这里</a>）：</p>

<p><img src="http://blog.devtang.com/images/block-capture-2.jpg"></p>

<h3>LLVM源码</h3>

<p>在LLVM开源的关于<a href="https://llvm.org/svn/llvm-project/compiler-rt/trunk/BlocksRuntime/Block_private.h">block的实现源码</a>，其内容也和我们用clang改写得到的内容相似，印证了我们对于block内部数据结构的推测。</p>

<h3>ARC对block类型的影响</h3>

<p>在ARC开启的情况下，将只会有 NSConcreteGlobalBlock和 NSConcreteMallocBlock类型的block。</p>

<p>原本的NSConcreteStackBlock的block会被NSConcreteMallocBlock类型的block替代。证明方式是以下代码在XCode中，会输出 <code>&lt;__NSMallocBlock__: 0x100109960&gt;</code>。在苹果的<a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">官方文档</a>中也提到，当把栈中的block返回时，不需要调用copy方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="n">block1</span><span class="p">();</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">block1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我个人认为这么做的原因是，由于ARC已经能很好地处理对象的生命周期的管理，这样所有对象都放到堆上管理，对于编译器实现来说，会比较方便。</p>

<h3>参考链接</h3>

<p>希望本文能加深你对于block的理解。我在学习中，查阅了以下文章，一并分享给大家。祝大家玩得开心～</p>

<ul>
<li><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/">A look inside blocks: Episode 1</a></li>
<li><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/">A look inside blocks: Episode 2</a></li>
<li><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">A look inside blocks: Episode 3</a></li>
<li><a href="http://www.cnblogs.com/biosli/archive/2013/05/29/iOS_Objective-C_Block.html">对Objective-C中Block的追探</a></li>
<li><a href="https://llvm.org/svn/llvm-project/compiler-rt/trunk/BlocksRuntime/Block_private.h">LLVM中block实现源码</a></li>
<li><a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">objective-c-blocks-quiz</a></li>
<li><a href="http://rypress.com/tutorials/objective-c/blocks.html">Blocks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Crashlytics来保存应用崩溃信息]]></title>
    <link href="http://blog.devtang.com/blog/2013/07/24/use-crashlytics/"/>
    <updated>2013-07-24T20:56:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/07/24/use-crashlytics</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/crashlytics-logo.jpg"></p>

<p>本文首发于InfoQ，版权归InfoQ所有，转载请保留<a href="http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools">原文链接</a>。</p>

<h2>简介</h2>

<p><a href="http://try.crashlytics.com/">Crashlytic</a> 成立于2011年，是专门为移动应用开者发提供的保存和分析应用崩溃信息的工具。Crashlytics的使用者包括：支付工具Paypal, 点评应用Yelp, 照片分享应用Path, 团购应用GroupOn等移动应用。</p>

<p>2013年1月，Crashlytics<a href="http://www.crashlytics.com/blog/crashlytics-is-joining-forces-with-twitter/">被Twitter收购</a>，成为又一个成功的创业产品。被收购之后，由于没有了创业公司的不稳定因素，我们更有理由使用它来分析应用崩溃信息。</p>

<!-- more -->


<p>使用Crashlytics的好处有：</p>

<p>1、Crashlytics不会漏掉任何应用崩溃信息。拿我的应用举例来说，在iTunes Connect的后台查看不到任何崩溃信息。但是用户确实会通过微博或者客服电话反馈应用崩溃的情况。而这些在Crashlytics中都可以统计到。如下截图分别显示了我的某应用在苹果iTunes Connect后台和Crashlytics中的差别：</p>

<p><img src="http://blog.devtang.com/images/crashlytics-vs-itunes-1.jpg">
<img src="http://blog.devtang.com/images/crashlytics-vs-itunes-2.jpg"></p>

<p>2、Crashlytics可以象Bug管理工具那样，管理这些崩溃日志。例如：Crashlytics会根据每种类型的Crash的出现频率以及影响的用户量来自动设置优先级。对于每种类型的Crash，Crashlytics除了会像一般的工具提供Call Stack外，还会显示更多相关的有助于诊断的信息例如设备是否越狱，当时的内存量，当时的iOS版本等。对于修复掉的Crash日志，可以在Crashlytics的后台将其关掉。下图所示的是一个我的早期应用的崩溃记录，在我修复后，我将其更新为已修复状态。</p>

<p><img src="http://blog.devtang.com/images/crashlytics-close-issue.jpg"></p>

<p>3、Crashlytics可以每天和每周将崩溃信息汇总发到你的邮箱，所有信息一目了然。</p>

<p>下面我就给大家介绍如何使用Crashlytics。</p>

<h2>使用介绍</h2>

<h3>申请帐号</h3>

<p>Crashlytics的服务是免费提供的，但是并不能直接注册使用，需要先申请，打开<a href="http://try.crashlytics.com/">Crashlytic的官网</a> ，输入自己的邮箱申请使用。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/crashlytics-1.jpg"></p>

<p>提交完邮箱之后，你的申请会放在Crashlytics的申请队列中，网页跳转到如下界面。在这个界面的右侧，你可以提供更多有效信息来让Crashlytics优先处理你的申请，建议大家都填上更多自己的信息。</p>

<p><img src="http://blog.devtang.com/images/crashlytics-2.jpg"></p>

<p>如果顺利，通常1-2天左右，你就会收到Crashlytics发来的申请通过邮件，如下图所示，通过邮件链接跳转到注册界面，填写密码即可完成注册。</p>

<p><img src="http://blog.devtang.com/images/crashlytics-3.jpg"></p>

<h3>设置工程</h3>

<p>在使用Crashlytics前需要对原有的XCode工程进行配置，在这一点上，Crashlytics做得比其它任何我见过的SDK提供商都体贴。因为Crashlytics专门做了一个Mac端的App来帮助你进行配置，所以，在配置前你先需要去<a href="https://www.crashlytics.com/downloads/xcode">这里</a>下载该应用。</p>

<p>应用下载后，运行该应用并登录帐号。然后选择应用中的&#8221;New App&#8221;按钮，然后选择自己要增加Crashlytics的工程，然后Crashlytics的应用会提示你为工程增加一个Run Script，如果你不知道如何添加，这里有一个<a href="http://www.runscriptbuildphase.com/?utm_source=desktopapp&amp;utm_medium=setup&amp;utm_campaign=mac">帮助的文档</a>。添加好之后的工程截图如下所示</p>

<p><img src="http://blog.devtang.com/images/crashlytics-4.jpg"></p>

<p>接着，Crashlytics的本地应用会提示你将Crashlytics相关的framework拖到工程中。如下所示：</p>

<p><img src="http://blog.devtang.com/images/crashlytics-5.jpg"></p>

<p>按照提示做完之后，就到了最后一步了，在<code>AppDelegate</code>的<code>didFinishLaunchingWithOptions</code>方法中加入如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Crashlytics/Crashlytics.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
</span><span class='line'>    <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">Crashlytics</span> <span class="nl">startWithAPIKey:</span><span class="s">@&quot;your identify code&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后，运行一下程序，Crashlytics就会检测到你设置成功。如果你感兴趣，可以自己手工触发一个崩溃记录，看Crashlytics能否帮你收集到。使用如下代码即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">Crashlytics</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">crash</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想测试一个Exception导致的崩溃，可以使用如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">NSObject</span> <span class="n">doesNotRecognizeSelector</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">arrayWithOnlyTwoElements</span> <span class="nl">objectAtIndex:</span><span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>应用对外发布后，就可以在Crashlytics后台查看和修改相关的记录。另外，Crashlytics还支持将数据导入到其它项目管理工具（例如Redmine或Jira）如下所示，配置都非常简单。</p>

<p><img src="http://blog.devtang.com/images/crashlytics-6.jpg"></p>

<h2>实现原理和使用体会</h2>

<h3>实现原理</h3>

<p>在原理上，Crashlytics的通过以下2步完成崩溃日志的上传和分析：</p>

<ol>
<li>提供应用SDK，你需要在应用启动时调用其SDK来设置你的应用。SDK会集成到你的应用中，完成Crash信息的收集和上传。</li>
<li>修改工程的编译配置，加入一段代码，在你每次工程编译完成后，上传该工程对应的dSYM文件。研究过手工分析Crash日志的同学应该知道，只有通过该文件，才能将Crash日志还原成可读的Call Stack信息。</li>
</ol>


<h3>使用体会</h3>

<p>为了更加方便开发者设置相应的工程，Crashlytics提供了mac端的应用程序，帮助你检测相关工程是否正确设置并且提供相应的帮助信息。后来我还发现，该程序还会自动帮你升级Crashlytics的SDK文件。虽然这一点很体贴，但是我个人觉得还是不太友好。因为毕竟修改SDK会影响应用编译后的内部逻辑，在没有任何通知的情况下升级，我都无法确定Crashlytics有没有干坏事。不过国外的服务，特别是象Twitter这种相对较大知名度公司提供的服务要有节操得多，所以在这一点上我还是比较放心的。</p>

<p>使用Crashlytics可以让你摆脱管理应用崩溃记录的烦恼。并且帮助你找出应用的一些重大隐藏性Bug。例如我之前写的一个应用就过一个缓存过期的问题，只有当缓存过期时才会触发这个Bug，这样的问题在测试人员那边很难触发，因为他们不可能了解你的应用内部实现细节。通过Crashlytics，使我清楚了解到应用Crash的数量和位置，结合自己的开发经验，就很容易找到问题所在了。</p>

<p>值得一提的是，Crashlytics本身的<a href="http://support.crashlytics.com/knowledgebase/topics/14721-crashlytics-sdk-for-ios">官方文档</a>也非常健全，如果你在使用中遇到任何问题，也可以上去查看详细的文档。</p>

<p>愿Crashlytics能让大家的应用都更加健壮～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分析支付宝客户端的插件机制]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism/"/>
    <updated>2013-06-23T12:39:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/alipay-plugin-1.jpg"></p>

<h2>前言</h2>

<p>因为开了iOSDevTips的微信公共账号，老收到各种iOS开发的问题，前两天收到一个问题的内容是：</p>

<pre><code>请问像支付宝钱包那样可以在应用里安装自己的应用，是已经在应用里写了逻辑，还是可以向应用里发送代码?
</code></pre>

<p>我觉得这个问题挺有意思的，估计大家都感兴趣，所以今天就抽空研究了一下，将支付宝客户端的插件机制具体实现方式介绍给大家。</p>

<p>先介绍一下该插件机制，如上图所示，支付宝客户端在安装后，对于像“彩票”、“爱心捐赠”这类功能，需要再点击安装一次，然后才可以使用。有些时候该插件功能进行了升级，需要点击升级才可以继续使用。插件的方式有利于软件动态增加新的功能或升级功能，而不用再一次向AppStore提交审核。另外，由于用户不需要的插件可以不用安装，也缩小了应用本身的体积大小，节省了下载流量。</p>

<!-- more -->


<h2>分析过程</h2>

<h3>截取网络请求</h3>

<p>分析第一步，截取网络请求。截取网络请求可以查看当用户点击“彩票”进行安装的时候，客户端到底做了什么事情。使用Charles的代理设置功能，启动一个http代理，然后在iPhone上设置连接此代理，则可以看到，当点击“彩票”插件时，客户端下载了一个名为 10000011.amr的文件。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-2.jpg"></p>

<h3>下载插件文件</h3>

<p>尝试用wget将文件下载下来，发现其没有验证cookie，下载成功，命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://download.alipay.com/mobilecsprod/alipay.mobile/20130601021432806/xlarge/10000011.amr
</span></code></pre></td></tr></table></div></figure>


<p>amr本意表示是一个音频文件，明显不对，尝试将其后缀名改成zip，成功将其解压。用itools连接上支付宝的客户端，同样能看到客户端将其下载后，也是解压到document目录下的。解压后的内容与应用内新增加的内容一致，如图所示：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-3.jpg"></p>

<h3>分析文件内容</h3>

<p>大概浏览了一下解压后的文件，主要包括html、css和js文件。可见支付宝的插件机器是通过UIWebView来展示内容的方式来实现的，那为什么要先下载安装这些内容而不通过UIWebView实时下载html呢？这主要应该是为了节省相应的流量。我看了一下，10000011.amr文件整个有将近1M大小，如果不通过插件机制预先下载，则只能依赖系统对于UIWebView的缓存来节省流量，这相对来说没有前者靠谱。</p>

<p>另外，使用基于UIWebView的方式来展示插件，也有利于代码的复用。因为这些逻辑都是用js来写的，可以同样应用于Android平台，在Config.js文件中，明显可以看到对于各类平台的判断逻辑。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-4.jpg"></p>

<p>另外，/www/demo/index-alipay-native.html 文件即该插件的首页，用浏览器打开就可以看到和手机端一样的内容。如下载图所示（左半边是手机上的应用截图，右半边是浏览器打开该html文件的截图）：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-5.jpg"></p>

<h3>插件的网络通讯</h3>

<p>接下来感兴趣的是该插件是如何完成和支付宝后台的网络通讯的。可以想到有两种可能的方式：</p>

<ol>
<li>直接和支付宝后台通讯</li>
<li>和Native端通讯，然后Native端和服务器通讯。</li>
</ol>


<p>要验证这个需要读该插件的js源代码，整个js源码逻辑还是比较干净的，主要用了玉伯写的<a href="http://seajs.org/docs/">seajs</a>做模块化加载，<a href="http://backbonejs.org/">backbone.js</a>是一个前端的MVC框架，<a href="http://zeptojs.com/">zepto.js</a>是一个更适合于移动端使用的&#8221;JQuery&#8221;。</p>

<p>大概扫了一下，感觉更可能是用的方法一：直接和支付宝后台通讯, 因为Config.js中都明确将网络通讯的地址写下来了。另一个证据是，利用下面的脚本扫描整个js源码，只能在backbone中搜到对于iframe的使用。而在iOS开发中，如果js端和native端要通讯，是需要用到iframe的，详细原理可以参见我的另一篇文章<a href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/">《关于UIWebView和PhoneGap的总结》</a>。不过我不能完全确认，因为我还没有找到相应控制页面切换和跳转的js代码，如果你找到了，麻烦告诉我。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -type f -name <span class="s2">&quot;*.js&quot;</span> | xargs grep <span class="s2">&quot;iframe&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>交易的安全</h3>

<p>用Charles可以截取到，当有网络交易时，应用会另外启动一个https的安全链接，完成整个交易过程的加密。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-6.jpg"></p>

<h2>总结</h2>

<p>支付宝的插件机制整体上就是通过html和javascript方式实现的，主要的好处是：</p>

<ol>
<li>跨平台(可以同时用在iOS和Android客户端）</li>
<li>省流量（不需要的插件不用下载，插件本地缓存长期存在不会过期，自己管理插件更新逻辑）</li>
<li>更新方便（不用每次提交AppStore审核）</li>
</ol>


<p>坏处如果非要说有的话，就是用javascript写iOS界面，无法提供非常炫的UI交互以及利用到iOS的所有平台特性。不过象支付宝这种工具类应用，也不需要很复杂的UI交互效果。</p>

<p>另外教大家一个小技巧，如果你不确定某个页面是不是UIWebView做的，直接在那个页面长按，如果弹出&#8221;拷贝，定义，学习&#8221;这种菜单，那就是确定无疑是UIWebView的界面了。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/ios-menu-2.jpg"></p>

<h2>相关工具</h2>

<p>欢迎关注我的技术微博 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 和微信公共账号 <a href="http://chuansong.me/account/iosDevTips">iOSDevTips</a> ，每天收获一些关于iOS开发的学习资料和技巧心得。</p>

<p>我在研究时使用了<a href="http://www.charlesproxy.com/">Charles</a>来截获支付宝客户端的网络请求，用<a href="http://itools.hk/">iTools</a>来查看支付宝客户端的本地内容。如果你想自行验证本文内容，请先下载上述工具。在此就不额外介绍它们的使用了。</p>

<h2>后记（2013-7-7）</h2>

<ol>
<li><p>在完成上文后，Allen在他的博客上先后分享了两篇更深入分析的文章<a href="http://imallen.com/blog/2013/06/26/inside-alipay-plugin.html">《浅析支付宝钱包插件》</a> 和 <a href="http://imallen.com/blog/2013/07/06/about-alipay-plugin-and-phonegap.html">《再谈支付宝钱包插件和说好的 Demo》</a>。 这两篇文章都比本文深入得多，值得大家阅读。</p></li>
<li><p>写完上文，居然收到了来自支付宝卫朴（花名）的工作邀请。不过我现在创业正在努力当中，所以我拒绝了邀请。看来这也是一种找工作的办法啊，比投简历管用，呵呵。</p></li>
<li><p>从一些朋友那儿了解到，支付宝因为本文而会在以后的版本中加强安全性，至少不会像现在这样，所有逻辑都在写在javascript中，并且还带有注释，这也是我希望看到的结果。愿支付宝越做越好。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在创业一周年]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note/"/>
    <updated>2013-06-17T20:56:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/startup-anniversary.jpg"></p>

<h2>前言</h2>

<p>大约在去年这个时候，我离开网易有道，开始了自己的创业不归路。一年过去了，总是在忙碌，在最忙的时候，我连博客都没有时间更新了。但是这一年的经历对我的成长重大，还是挺值得写下来的，在此将我的故事分享给那些一同走在创业路上的朋友。</p>

<!-- more -->


<h2>当初的选择</h2>

<p>这次的创业其实并不算是真正意义上的创业，因为我并不是创业合伙人，也没有股权，对于公司的发展，我更多是执行者，很少有参与讨论的机会。但与此同时，我的薪水并没有大幅度减少，期权所画出的大饼也确实有些吸引力，另外，我可以独立负责iOS开发，对我来说是一个不小的挑战，作为一个早期加入的核心员工，我可以享受到公司成长带来的好处，也可以和公司一起成长，承担更多责任，学习和体会创业的过程。</p>

<p>所以，如果我这次创业失败，对我的影响相当小，我不用担心交不起房租，更不用担心找不到工作。不管创业成功与否，我都将收获在iOS开发领域快速的成长，也可以感受和学习创业公司的工作方式。现在一年过去了，创业发展顺利，我还可以进一步感受和思考公司规模扩大所带来的各种问题，以及一起参与解决这些问题。</p>

<p>某种程度上说，这符合我对于第一次创业的期望方式：有挑战，有收获，风险小，潜在收益也不错。因为我工作才3年，在各方面还很嫩，选择加入一个创业团队比直接自己当创业合伙人要安全得多。</p>

<h2>技术成长</h2>

<p>由于我不是合伙人，所以我可以继续专注于iOS开发，不用管市场，运营以及产品的事情。以前在前公司，我只是负责某iOS产品的UI部分，我甚至都没有机会了解将App发布到AppStore的过程。在这次创业中，整个iOS端的开发都是由我一人负责，我学习和接触了很多以前没有机会了解的东西。</p>

<p>在项目开发中学习是最好的学习方式，这次创业我也不止做了一个App，每做一个App，我就会尝试一些新的技术方案和挑战。</p>

<ul>
<li>在做粉笔网客户端时，我尝试了完全使用ARC，也尝试用UIWebView写了很多javascript。</li>
<li>在做猿题库行测时，我尝试了使用AVFoundation来自定义扫描界面，尝试用<a href="http://blog.devtang.com/blog/2012/10/27/use-opencv-in-ios/">OpenCV</a>来实现答题卡识别算法，尝试用CoreText做部分界面的渲染。</li>
<li>在做猿题库申论时，我尝试用<a href="http://blog.devtang.com/blog/2012/12/15/do-not-use-storyboard/">Storyboard</a>和<a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">cocoapod</a>来做包管理。</li>
<li>在做猿题库司法考试时，考虑到团队可能扩大，我尝试用全手写界面的方式来开发。并且用<a href="http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/">Git Submodule</a>来管理猿题库公用模块。</li>
<li>在即将上线的猿题库新课程中，我尝试了结合多target编译和Submodule来管理多个猿题库之间的差别，力求将新课程的开发成本减少到只需一些配置文件即可。</li>
</ul>


<p>如果不是因为创业，我可能都无法决定使用这些技术方案，更别说负责整个iOS端了。</p>

<h2>眼界变宽</h2>

<p>以前在网易，公司里有很多做iOS开发的同事，偶尔有一些技术交流，现在创业只有我一个人做iOS开发，我最担心的是我自己由于交流太少而眼界变窄。于是我想只有通过网络和同行进行更多的交流了。于是我就建了一个QQ群，然后把以前的同事都拉到群里面，但是大家还是交流还是比较少，我想了想，主要是因为这些同事都不太喜欢交流和分享，强行把他们拉到QQ群里面，并不能促使他们交流，于是我就开始在网上寻找一些喜欢交流的同行，邀请他们加到群里面一起聊技术。这样慢慢地，群里面就有自发的讨论出现了。</p>

<p>有一段时间，我发现讨论的内容还挺有价值的，于是就觉得QQ群不能将讨论内容沉淀下来太可惜了，当时正好微信公共账号比较火，我就想试试把有价值的内容通过微信公共账号发出去。刚开始很难，原因一方面是整理信息的成本很高，写成微信很花时间。另一方面，我也没有那么多时间来写微信。不过我坚持了一段时间后，渐渐发现有一些牛人会被吸引到我们的QQ群里面，这样就行成了一个良性循环。QQ群不断有牛人加入贡献高质量的讨论，讨论内容通过微信发出去后，又吸引更多牛人要求加入。由于申请加入的人太多，我提高了申请加群的要求，因为群里人数一旦过多，就会影响平时的工作了。所以现在QQ群的人数基本稳定了。群里面的人员组成主要分以下几类：</p>

<ol>
<li>比较大的IT公司的iOS开发者，包括腾讯、百度、新浪、搜狐、网易、阿里、人人等</li>
<li>比较小的IT公司的iOS开发者，包括豆瓣、美团、知乎、拓词、花瓣、Clover、流利说等</li>
<li>自由职业者或自己在创业中的iOS开发者</li>
<li>海外的iOS开发者</li>
</ol>


<p>如果说有什么特点，就是他们都是喜欢分享的人，大部分人都维护着自己的原创博客，这保证了群里面讨论内容的活跃。同时他们都还很忙，这保证了群里面不会很水，有问题讨论问题，没问题的时候就很安静。这是我非常喜欢的。因为这样的讨论组一方面保证了讨论的即时性，另一方面又不至于太吵而干扰平时的工作。</p>

<p>如果不是因为创业，我可能也不会被迫组建并维护这么一个高质量的QQ群，进而也不会有这么好的交流圈子了。</p>

<p>我的微信公众账号是iOSDevTips, 现在关注人数有3000人。6月6日，微信公共账号同时得到了<a href="http://hutu.me/">@Fenng</a>和<a href="http://macshuo.com/">@池建强</a>在各自的微信公共账号上的<a href="http://macshuo.com/?p=529">推荐</a>，关注人数也暴涨。很高兴自己最终坚持下来了。如果你是iOS开发者，欢迎关注我的微信公共账号，只发干货。用微信扫描下面的二维码即可关注：</p>

<p><img src="http://blog.devtang.com/images/weixin-qr.jpg"></p>

<h2>工作上的反思和改进</h2>

<p>虽然我在创业中专注于iOS开发，但是我还是会参与一些产品讨论，也会负责面试招人，也会反思现有工作方式的各种问题。这种反思的过程持续地在每一天进行。这种反思和改进包括如下几个方面。</p>

<h3>执行力变强</h3>

<p>似乎什么事情都可以归结到对资源和时间的合理分配和控制。对于创业公司来说，对于产品开发进度的控制是尤其重要的，我们很高兴地看到，我们的创业团队在过去的一年，不但保证了所有开发项目不延期，并且还保证了很快的开发进度。在过去一年，我们花4个月完成了粉笔网的开发，3个月完成了猿题库行测的开发，2个月完成了猿题库司法考试的开发，7天完成了猿题库申论的开发，这些项目的开发进度和我们之前计划的完全一样，没有任何延期。在软件开发领域，项目延期对于很多公司来说从来都是常态，我们通过团队的努力以及一些合理的进度管理方法来让按期交付变成了常态。</p>

<p>首先说说团队的努力，团队的努力主要在于团队每个人都努力工作，提高效率。就我个人来说，我会更加关注自己每天花在写代码上面的时间和沟通的时间，以及工作间隙刷微博的时间。我有些时候状态好，可以一连写好几个小时代码，有些时候状态不好，写一会儿代码就会分神干别的，这个时候我会把所有干扰工作的QQ,邮箱都关掉，然后戴上耳机，给自己设置一个45分钟的番茄钟（不知道这个是什么的，可以搜一下番茄工作法），然后每个番茄钟到了再休息一下，一般连续做过3个番茄钟之后，精力就又容易集中了，之后就不用设置番茄钟又可以连续写上好几个小时。当然，适当活动也是必要的，我有时候会注意每一个小时动一下，公司里面也有哑铃可以举几个。另外，我还安装了<a href="https://www.rescuetime.com/">rescue time软件</a> ，可以方便自己回顾每天的工作效率变化情况。</p>

<p>然后说说我们的进度管理方法，我们使用scrum来进行进度管理，但是根据我们创业团队的情况，我们做了不少改变，我们对于scrum的主要改变是：</p>

<ol>
<li>scrum中每个sprint的周期变为1周。下面会展开阐述理由。</li>
<li>scrum会议中的回顾会议和计划会议一起开。主要是为了减少会议的次数。</li>
</ol>


<p>1周的sprint相比传统的2周或4周sprint最大的优点是，可以对进度有较强的控制，因为迭代周期减小为一周，所以可以更早地发现开发中可以出现的问题，进而进行微调。微调的粒度变小，就保证了整体进度的可控。我们对开发进度的微调包括：</p>

<ol>
<li>通过每周的sprint，尽早发现开发进度上的风险，合理加班或者减少部分需求开发。</li>
<li>通过每周的sprint，尽早地将产品功能的改变融入到新的sprint中，使得产品能够尽快应对来自市场需求或产品需求的变化。</li>
</ol>


<p>1周的sprint也有一定的缺点，首先是它的时间非常紧，除去开回顾会议和计划会议的时间，通常只剩下4天半。4天半时间通常会排满开发进度，常常会造成留给测试同事的时间比较少。对于要上线的sprint，sprint结束日那天的上线工作也会占据不少时间，因为上线通常会涉及很多系统运维相关的操作。另一个缺点是，它无法安排一些长期并且重要的事情，例如技术分享和讨论，新技术调研等。</p>

<p>但整体说来，对于创业公司来说，活下去才是最重要的，1周的sprint可以带来产品按时交付的巨大优势。所以我们直到现在还是坚持1周的sprint。或许以后公司大了，时间不是最最紧迫的资源时，我们可能会考虑2周的sprint。</p>

<h3>对scrum有了更深认识</h3>

<p>scrum很容易被误解，也容易被错误地实践。</p>

<p>对于高压型的Leader, scrum很容易成为他压榨程序员的工具，因为程序员通常在估计工作量时很乐观，但是执行时就会出现各种问题，scrum将任务拆分到每天做什么的时候，很容易造成程序员为了完成当天的工作而加班。如果管理者在回顾会议不能很好的处理这个问题，程序员就会认为这是一种管理者控制进度的工具，然后在以后的计划会议中故意将时间估长。</p>

<p>对于温和的Leader, scrum中的sprint很可能成为一句空话，每个sprint都会出现完不成的情况，每次当然都会有合理的理由：例如功能开发量估计不足，需求没有讨论清楚，遇到的技术难点等等。当大家对于sprint的按时完成没有压力的时候，scrum本身就成了一个可有可无的东西了。</p>

<p>执行了一年多scrum，我感觉scrum最核心的思想就是强调团队的自我反思和进步，而这一点要求scrum团队成员有较强的能力和素质。所以很多公司没有把scrum执行好，就是简单地执行了scrum中的各种流程和方法，而忽视了其中最重要的基础：团队成员的能力。如果团队成员本身能力不行，也不能为整个团队着想，为公司着想，搞scrum就是一句空话。只有大家真正相互欣赏，相互理解和配合，团队的作用才能发挥起来。我们通过一年多对scrum的实践和改进，最终形成了我们自己的团队工作方式和团队文化，这一点是非常棒的。</p>

<p>如果不是因为创业，我可能至今还以为scrum只是管理者为了压榨程序员的劳动力而建立的工具，也无法体会到scrum的好处。</p>

<h3>更注意沟通效率</h3>

<p>上面也说过，时间是创业公司最大的敌人。而对于我来说，除了写代码的时间外，最大的时间开销就是沟通了。我们想了很多办法来提高沟通的效率。比如重要的信息，我们都会记录在wiki上，比如每次scrum的回顾会议的总结，我们就会放到wiki上，服务器端的接口信息，我们也会整理到wiki上。wiki对于新来的同事特别有用，因为他可以通过wiki了解到整个团队工作的历史，进而方便他熟悉和融入团队。对于一些相互依赖的接口信息，放到wiki上也省去了我们为了弄清楚接口而打断别人的工作，提高了大家的工作效率。</p>

<p>为了提高沟通效率，我们也把所有能省去的会议都省去了，我们没有产品评审会议，没有美术评审会议，我们也不会评审测试用例，以上这些会议，如果我们觉得有必要进行沟通的，就私下沟通，一切从简。</p>

<p>我们尽量减少打断别人工作的行为，如果我觉得有一件事情需要让所有人知道，我就会发一封邮件出来，如果该事情值得记录下来，我可能会同时把内容整理到wiki上。如果我在开发上的一些任务依赖后台相应的功能，我就会给相关人员报一个Bug，让他抽时间处理这个Bug即可。小的产品文案的改动也是以报Bug的形式来沟通。如果有些事情急需要让大家知道，比如服务器正在重启，测试和开发暂时不可连接服务器，我们就会在QQ群里面说一声。只有当我的工作被严重block的时候，例如需要服务器同事的确认才能进一步开发，例如需要产品的确认才能进一步开发的时候，我才会去打断别人的工作当面询问。尽量保证别人的工作可以不被打断，其实也是提高了大家工作的效率。</p>

<p>回想起以前在大公司，所有的沟通大多是在QQ一类的聊天工具中完成，打字交流，效率极低。开组会的时候，很多人无所事事，玩手机开小差，效率低下。创业让我感受到了效率至上的工作态度，让自己每天的工作高效是非常快乐的事情。由于我们不鼓励加班，所以我们自然也享受到了高效工作的回报：自己有更多时间做自己的事情。我每天都比同屋的另一个在美团工作的朋友下班早，晚上下班回到家，有时候我会看看书，有时候看看电影，有时候也会研究一些新的技术，创业的生活不再变得苦逼了。</p>

<p>如果不是因为创业，我根本无法体会到创业带来的高效地工作环境，每天自己的时间都在做具体的事情上，而不是大量的沟通上。</p>

<h2>总结</h2>

<p>如果不是因为创业，我无法在iOS开发上负责更多事情并且快速成长，无法扩大眼界认识很多iOS同行并和他们组建高质量讨论圈子，无法成功地连续一年执行scrum并且保证所有项目不延期，也无法享受高效工作不加班的生活。有这么多收获，创业本身能不能成功反倒不是最重要的事情了，每天能够开心，认真，充实地工作本身就是一种享受。</p>

<p>身边有不少朋友都在创业，有失败的，也有发展顺利的，和他们聊天常常会谈到，创业是一条不归路，因为创业的过程就象是打开了潘多拉的盒子，你见识到了外面世界的精彩，就再也不能忍受在大公司的平庸生活了。愿所有在创业路上奔跑的人们，找到属于自己的精彩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发工具篇-AppStore统计工具]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/16/ios-dev-tool-app-store-tool/"/>
    <updated>2013-06-16T12:26:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/16/ios-dev-tool-app-store-tool</id>
    <content type="html"><![CDATA[<p>本文首发于InfoQ，本文版权归InfoQ所有，转载请保留<a href="http://www.infoq.com/cn/articles/appstore-statistical-tool">原文链接</a>。</p>

<h2>前言</h2>

<p>随着iOS开发的流行，针对iOS开发涉及的方方面面，早有一些公司提供了专门的解决方案或工具。这些解决方案或工具包括：用户行为统计工具（友盟，Flurry，Google Analytics等),  App Store销售分析工具（例如App annie)， App crash收集工具（例如Crashlytics)，App测试发布工具（Test Flight）, App Push服务等。</p>

<p>这些解决方案或工具节省了iOS开发者大量的开发时间，但是由于相关介绍文章的缺乏，许多开发者都在重复着自己一次又一次重新造轮子。所以我希望，将我自己使用和调研的相关的第三方服务使用经验，整理成一系列文章，以便广大开发者能够省去大量的重复性工作。</p>

<p>今天介绍AppStore统计工具：App Annie和苹果的命令行统计工具。</p>

<!-- more -->


<h2>App Annie介绍</h2>

<p><img src="http://blog.devtang.com/images/app-annie-homepage.jpg"></p>

<p>苹果官方的iTunes Connect提供的销售数据统计功能比较弱，例如只能保存最近30天的详细销售数据，界面丑陋，
无法查看App的排名历史变化情况等。</p>

<p><a href="http://www.appannie.com/">AppAnnie</a>是一个专门为开发者提供的，针对AppStore相关数据的统计分析工具。
该工具可以统计App在AppStore的下载量，排名变化，销售收入情况以及用户评价等信息。</p>

<h3>原理</h3>

<p>AppAnnie实现的原理是：通过你配置的管理账号，向itunes connect请求获得你的App的相关数据，包括每日下载量，用户的评分数据，以及销售数据。</p>

<h3>注册Sales类型的账号</h3>

<p>使用AppAnnie，首先需要在苹果官方的itunes connect中配置一个Sales类型的账号。
因为默认的开发者账号是Admin级的权限，该权限是非常高的，可以修改App的价格或者直接下架商品。
如果将这个账号直接配置在AppAnnie中，虽然不影响其获得相关数据，但是有一定的账号安全风险。</p>

<p>配置该账号的详细步骤如下：</p>

<p>1、登录itunes connect，选择Manager Users</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-1.jpg"></p>

<p>2、选择iTunes Connect User</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-2.jpg"></p>

<p>3、点击Add new User</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-3.jpg"></p>

<p>4、填写新用户的相关信息</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-4.jpg"></p>

<p>5、勾选用户类型为Sales</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-5.jpg"></p>

<p>6、选择Notifications为All Notifications。点击图中所指的位置即可全选。</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-6.jpg"></p>

<p>7、之后，邮箱中会收到iTunes Connect发来的激活邮件。
点击邮件中的激活链接，即可进入到账号注册界面，之后注册账号即可激活。如果该邮箱已经注册过Apple Id，则会进入到登录界面，登录后即可激活。</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-7.jpg"></p>

<h2>注册 App Annie账号及配置</h2>

<p>打开App Annie的官方网站:<a href="http://www.appannie.com/">http://www.appannie.com/</a>，
注册步骤和一般网站的步骤一样，我就不介绍了，注册完成之后的配置步骤如下：</p>

<p>1、在设置页面中增加iTunes Connect账号</p>

<p><img src="http://blog.devtang.com/images/app-annie-1.jpg"></p>

<p>2、填写你的之前在iTunes Connect中增加的Sales类型的账号及密码</p>

<p><img src="http://blog.devtang.com/images/app-annie-2.jpg"></p>

<p>3、在User Setting中勾选上接收每日Report</p>

<p><img src="http://blog.devtang.com/images/app-annie-3.jpg"></p>

<p>4、这样，每天就可以收到AppAnnie发来的相关统计邮件了。如下是一封粉笔网的销售报告邮件截图：</p>

<p><img src="http://blog.devtang.com/images/app-annie-4.jpg"></p>

<h2>官方的命令行工具</h2>

<p>如果你觉得将自己的销售数据交给第三方统计服务商，有一些不太安全。可以考虑使用苹果官方提供的Autoingestion.class工具来获得每天的销售数据，然后存到本地的数据库中。</p>

<p>该工具的下载地址是<a href="http://www.apple.com/itunesnews/docs/Autoingestion.class.zip">这里</a>，
苹果对于该用户的帮助文档在<a href="http://www.apple.com/itunesnews/docs/AppStoreReportingInstructions.pdf">这里</a>。</p>

<p>下面介绍一下这个工具的使用，将Autoingestion.class下载下来后，切换到class文件所在目录，执行如下命令，即可获得对应的统计数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java Autoingestion &lt;帐号名&gt; &lt;密码&gt; &lt;vendorId&gt; &lt;报告类型&gt; &lt;时间类型&gt; &lt;报告子类型&gt; &lt;时间&gt;</span></code></pre></td></tr></table></div></figure>


<p>其中vendor Id在iTunes Connect的如下图所示位置获得，是一个数字8开头的序列。</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-vendor-id.jpg"></p>

<p>&lt;报告类型>可选的值是：Sales 或 Newsstand</p>

<p>&lt;时间类型>可选的值是：Daily, Weekly, Monthly 或 Yearly</p>

<p>&lt;报告子类型>可选的值是：Summary, Detailed 或 Opt-In</p>

<p>&lt;时间>以如下的格式给出：YYYYMMDD</p>

<p>以下是一个示例，它将获得2013年5月8日的日销售摘要数据。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java Autoingestion username@fenbi.com password 85587619 Sales Daily Summary 20130508</span></code></pre></td></tr></table></div></figure>


<p>我试用了一下该工具，觉得还是太糙了一些，仅仅能够将销售数据备份下来，如果要做AppAnnie那样的统计报表，还需要写不少代码。而且，该工具并不象App Annie那样，还提供应用在App Store的排名变化情况。虽然可以自己再做抓取，但也是需要工作量的。</p>

<h2>其它类似App Annie的服务</h2>

<p>类似App Annie这样的服务还有：<a href="http://appfigures.com">AppFigures</a>。我试用过之后，发现它不如App Annie功能强大。不过作为一个替代方案，也一并介绍给大家。</p>

<p>在Github上也有一些开源的<a href="https://github.com/alexvollmer/itunes-connect">统计工具</a>，感兴趣的朋友也可以尝试一下。这些工具基本上也就是对苹果的命令行工具的增强，例如增加了将数据导入到数据库中等功能。</p>

<h2>功能对比</h2>

<p>App Annie和苹果本身提供的命令行工具虽然都能统计App Store的数据，但是二者功能相差悬殊。苹果的命令行工具仅仅能提供销售数据的按日、周、月、年等方式的统计和备份。而App Annie除了以更加良好的界面和交互提供这些功能外，还能跟踪App的排名变化，以及App在苹果的各种榜单中所处位置的情况。</p>

<p>建议大家都可以尝试使用App Annie或AppFigures这类统计工具，帮助你方便地查看App的销售和排名情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见，viewDidUnload方法]]></title>
    <link href="http://blog.devtang.com/blog/2013/05/18/goodbye-viewdidunload/"/>
    <updated>2013-05-18T17:37:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/05/18/goodbye-viewdidunload</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>我在去年的一篇文章<a href="http://blog.devtang.com/blog/2012/02/06/new-methods-in-uiviewcontroller-of-ios5/">《iOS5中UIViewController的新方法》</a>中介绍了iOS5引入的关于ViewController的新方法。但是现在如果运行该文章中的Sample代码的话，你会发现Log中不会再出现viewDidUnload方法被调用的记录。这是因为在iOS6中，viewDidUnload回调方法被Deprecated掉了。查看苹果的文档，可以看到如下的说明。</p>

<p><img src="http://blog.devtang.com/images/viewdidunload-1.jpg"></p>

<p>那么，原本在viewDidUnload中的代码应该怎么处理？在iOS6中，又应该怎么处理内存警告？带着这些问题，我查找了一些资料，在此分享给大家。</p>

<!-- more -->


<h3>分析</h3>

<p>在iOS4和iOS5系统中，当内存不足，应用收到Memory warning时，系统会自动调用当前没在界面上的ViewController的viewDidUnload方法。
通常情况下，这些未显示在界面上的ViewController是UINavigationController Push栈中未在栈顶的ViewController，以及UITabBarViewController中未显示的子ViewController。这些View Controller都会在Memory Warning事件发生时，被系统自动调用viewDidUnload方法。</p>

<p>在iOS6中，由于viewDidUnload事件在iOS6下任何情况都不会被触发，所以苹果在文档中建议，应该将回收内存的相关操作移到另一个回调函数：didReceiveMemoryWarning 中。但是如果你仅仅是把以前写到viewDidUnload函数中的代码移动到didReceiveMemoryWarning函数中，那么你就错了。以下是一个 <font color=red>错误的示例代码</font> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="p">([</span><span class="n">self</span> <span class="n">isViewLoaded</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">[[</span><span class="n">self</span> <span class="n">view</span><span class="p">]</span> <span class="n">window</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">setView:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://thejoeconwayblog.wordpress.com/2012/10/04/view-controller-lifecycle-in-ios-6/">这篇文章</a>解释了iOS6不推荐你将view置为nil的原因（链接打开需要翻墙）, 翻译过来如下：</p>

<ol>
<li><p>UIView有一个CALayer的成员变量，CALayer是具体用于将自己画到屏幕上的。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/viewdidunload-2.jpg"></p></li>
<li><p>CALayer是一个bitmap图象的容器类，当UIView调用自身的drawRect时，CALayer才会创建这个bitmap图象类。</p></li>
<li><p>具体占内存的其实是一个bitmap图象类，CALayer只占48bytes, UIView只占96bytes。而一个iPad的全屏UIView的bitmap类会占到12M的大小！</p></li>
<li><p>在iOS6时，当系统发出MemoryWarning时，系统会自动回收bitmap类。但是不回收UIView和CALayer类。这样即回收了大部分内存，又能在需要bitmap类时，通过调用UIView的drawRect: 方法重建。</p></li>
</ol>


<h3>内存优化</h3>

<p>另外文章中还提到苹果的操作系统对此做的一个内存优化技巧，解释如下：</p>

<ol>
<li><p>当一段内存被分配时，它会被标记成“In use“, 以防止被重复使用。当内存被释放时，这段内存会被标记成&#8221;Not in use&#8221;，这样，在有新的内存申请时，这块内存就可能被分配给其它变量。</p></li>
<li><p>CALayer包括的具体的bitmap内容的私有成员变量类型为<a href="http://blog.spacemanlabs.com/2011/08/calayer-internals-contents/">CABackingStore</a>， 当收到MemroyWarning时，
CABackingStore类型的内存区会被标记成volatile类型（这里的volatile和 C以及Java语言的volatile不是一个意思），volatile表示，这块内存可能被再次被原变量重用。</p></li>
</ol>


<p>这样，有了上面的优化后，当收到Memoy Warning时，虽然所有的CALayer所包含的bitmap内存都被标记成volatile了，但是只要这块内存没有再次被复用，那么当需要重建bitmap内存时，
它就可以直接被复用，而避免了再次调用 UIView的 drawRect: 方法。</p>

<h3>总结</h3>

<p>所以，简单来说，对于iOS6，你不需要做任何以前viewDidUnload的事情，更不需要把以前viewDidUnload的代码移动到 didReceiveMemoryWarning方法中。</p>

<p>引用WWDC 2012 中的一段话来给viewDidUnload说再见：</p>

<blockquote><p>The method viewWillUnload and viewDidUnload. We&#8217;re not going to call them anymore. I mean, there&#8217;s kind of a cost-benifit equation and analysis that we went through. In the early days, there was a real performance need for us to ensure that on memory warnings we unloaded views. There was all kinds of graphics and backing stores and so forth that would also get unloaded. We now unload those independently of the view, so it isn&#8217;t that big of a deal for us for those to be unloaded, and there were so many bugs where there would be pointers into。</p></blockquote>


<h3>参考链接</h3>

<ul>
<li><a href="http://thejoeconwayblog.wordpress.com/2012/10/04/view-controller-lifecycle-in-ios-6/">View Controller Lifecycle in iOS 6</a></li>
<li><a href="http://blog.spacemanlabs.com/2011/08/calayer-internals-contents/">CALayer Internals: Contents</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git submodule的坑]]></title>
    <link href="http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/"/>
    <updated>2013-05-08T21:44:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/05/08/git-submodule-issues</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>随着近几年的发展，Git已经成为开源界的标准的版本控制工具。开源界的重量级项目，如Linux, Android, Eclipse, Gnome, KDE, Qt, ROR, Debian，无一例外的都是使用git来进行版本控制。如果你还不会Git，那么恕我直言，你已经out了，赶紧抽空充充电吧。本文并不打算做Git入门级介绍，想学习git的同学，推荐国内作者蒋鑫写的<a href="http://book.douban.com/subject/6526452/">《Git权威指南》</a>。</p>

<p>对于一些比较大的工程，为了便于复用，常常需要抽取子项目。例如我开发的猿题库客户端现在包括3门考试，客户端涉及的公共UI、公共底层逻辑、公共的第三方库、以及公共的答题卡扫描算法就被我分别抽取成了子项目。这些子项目都以git submodule的形式，增加到工程中。</p>

<p>在使用了git submodule一段时间后，我发现了一些submodule的问题，在此分享给大家。</p>

<!-- more -->


<h2>更新submodule的坑</h2>

<p>submodule项目和它的父项目本质上是2个独立的git仓库。只是父项目存储了它依赖的submodule项目的版本号信息而已。如果你的同事更新了submodule，然后更新了父项目中依赖的版本号。你需要在git pull之后，调用 git submodule update来更新submodule信息。</p>

<p>这儿的坑在于，如果你git pull之后，忘记了调用 git submodule update，那么你极有可能再次把旧的submodule依赖信息提交上去。对于那些习惯使用 git commit -a的人来说，这种危险会更大一些。所以建议大家:</p>

<ol>
<li>git pull之后，立即执行git status, 如果发现submodule有修改，立即执行git submodule update</li>
<li>尽量不要使用 git commit -a， git add命令存在的意义就是让你对加入暂存区的文件做二次确认，而 git commit -a相当于跳过了这个确认过程。</li>
</ol>


<p>更复杂一些，如果你的submodule又依赖了submodule，那么很可能你需要在git pull 和 git submodule update之后，再分别到每个submodule中再执行一次git submodule update，这里可以使用 git submodule foreach命令来实现： <code>git submodule foreach git submodule update</code></p>

<h2>修改submodule的坑</h2>

<p>有些时候你需要对submodule做一些修改，很常见的做法就是切到submodule的目录，然后做修改，然后commit和push。</p>

<p>这里的坑在于，默认git submodule update并不会将submodule切到任何branch，所以，默认下submodule的HEAD是处于游离状态的(&#8216;detached HEAD&#8217; state)。所以在修改前，记得一定要用git checkout master将当前的submodule分支切换到master，然后才能做修改和提交。</p>

<p>如果你不慎忘记切换到master分支，又做了提交，可以用cherry-pick命令挽救。具体做法如下：</p>

<ol>
<li>用 <code>git checkout master</code> 将HEAD从游离状态切换到 master 分支, 这时候，git会报Warning说有一个提交没有在branch上，记住这个提交的change-id（假如change-id为 aaaa)</li>
<li>用 <code>git cherry-pick aaaa</code> 来将刚刚的提交作用在master分支上</li>
<li>用 <code>git push</code> 将更新提交到远程版本库中</li>
</ol>


<p>以下是相关命令的操作示范和命令行输出结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜ ui_common git:<span class="o">(</span>df697f9<span class="o">)</span> git checkout master
</span><span class='line'>Warning: you are leaving 1 commit behind, not connected to
</span><span class='line'>any of your branches:
</span><span class='line'>
</span><span class='line'>  df697f9 forget to check out master
</span><span class='line'>
</span><span class='line'>If you want to keep them by creating a new branch, this may be a good <span class="nb">time</span>
</span><span class='line'>to <span class="k">do </span>so with:
</span><span class='line'>
</span><span class='line'> git branch new_branch_name df697f911e5a0f09d883f8f360977e470c53d81e
</span><span class='line'>
</span><span class='line'>Switched to branch <span class="s1">&#39;master&#39;</span>
</span><span class='line'>➜ ui_common git:<span class="o">(</span>master<span class="o">)</span> git cherry-pick df697f9
</span></code></pre></td></tr></table></div></figure>


<h2>使用第三方工具</h2>

<p>对于submodule的重度使用者，有几个工具可作推荐：</p>

<ol>
<li><a href="http://source.android.com/source/version-control.html">Repo</a>  Google用于管理Android项目的工具。</li>
<li><a href="http://gitslave.sourceforge.net/">Gitslave</a></li>
<li><a href="https://github.com/apenwarr/git-subtree/">Git Subtree</a></li>
</ol>


<p>以上工具，我都没有实际用过，所以无法提供更多信息。</p>

<h2>Tips</h2>

<p>由于常常使用submodule的相关命令，可以在 ~/.gitconfig文件中将其设置别名，方便操作，我设置的所有相关别名如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">st</span> <span class="o">=</span> status -s
</span><span class='line'>  <span class="nv">ci</span> <span class="o">=</span> commit
</span><span class='line'>  <span class="nv">l</span> <span class="o">=</span> log --oneline --decorate -12 --color
</span><span class='line'>  <span class="nv">ll</span> <span class="o">=</span> log --oneline --decorate --color
</span><span class='line'>  <span class="nv">lc</span> <span class="o">=</span> log --graph --color
</span><span class='line'>  <span class="nv">co</span> <span class="o">=</span> checkout
</span><span class='line'>  <span class="nv">br</span> <span class="o">=</span> branch
</span><span class='line'>  <span class="nv">rb</span> <span class="o">=</span> rebase
</span><span class='line'>  <span class="nv">dci</span> <span class="o">=</span> dcommit
</span><span class='line'>  <span class="nv">sbi</span> <span class="o">=</span> submodule init
</span><span class='line'>  <span class="nv">sbu</span> <span class="o">=</span> submodule update
</span><span class='line'>  <span class="nv">sbp</span> <span class="o">=</span> submodule foreach git pull
</span><span class='line'>  <span class="nv">sbc</span> <span class="o">=</span> submodule foreach git co master
</span></code></pre></td></tr></table></div></figure>


<h2>参考链接</h2>

<ol>
<li><p><a href="http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/">《why-your-company-shouldnt-use-git-submodules》</a> (需翻墙)</p></li>
<li><p><a href="http://fiji.sc/Git_submodule_tutorial">《Git_submodule_tutorial》</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[历史上的WWDC门票售空图片]]></title>
    <link href="http://blog.devtang.com/blog/2013/04/30/the-history-of-wwdc/"/>
    <updated>2013-04-30T22:40:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/04/30/the-history-of-wwdc</id>
    <content type="html"><![CDATA[<h2>2008年</h2>

<p>62天售空。介绍了iPhone 3G。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2008.jpg" width="500px" /></p>

<h2>2009年</h2>

<p>33天售空。介绍了iPhone 3GS。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2009.png" width="500px" /></p>

<h2>2010年</h2>

<p>8天售空。介绍了iPhone 4。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2010.png" width="500px" /></p>

<h2>2011年</h2>

<p>12小时售空。介绍了iOS5, ARC, Storyboard, iCloud, Mac OS X Lion。</p>

<p>从这一年开始，iPhone新品都没能赶上在WWDC中介绍。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2011.jpg" width="500px" /></p>

<h2>2012年</h2>

<p>2小时售空。介绍了iOS6。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2012.jpg" width="500px" /></p>

<h2>2013年</h2>

<p>2分钟售空。期待。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2013.jpg" width="500px" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些被遗漏的Objective-C保留字]]></title>
    <link href="http://blog.devtang.com/blog/2013/04/29/the-missing-objc-keywords/"/>
    <updated>2013-04-29T20:22:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/04/29/the-missing-objc-keywords</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/forget.jpeg"></p>

<p>今天翻到很久以前自己在网易博客上写的<a href="http://tangqiaoboy.blog.163.com/blog/static/116114258201110133108545/">这篇文章</a>，惊奇地发现自己都忘记了里面的一些内容。所以我又重新学习了一下，然后改了改内容，挪到这里。</p>

<h2>前言</h2>

<p><a href="http://www.amazon.cn/s?ie=UTF8&amp;search-alias=books&amp;field-author=Steffen%20Itterheim">Steffen Itterheim</a>是<a href="http://www.amazon.cn/Learn-Iphone-and-Ipad-Cocos2d-Game-Development-The-Leading-Framework-for-Building-2D-Graphical-and-Interactive-Applications-Itterheim-Steffen/dp/1430233036/ref=sr_1_1?ie=UTF8&amp;qid=1321168092&amp;sr=8-1">《Learn Iphone and Ipad Cocos2d Game Development》</a>作者。cocos2d和cocos2d-x现在已成为著名的游戏开发引擎。在AppStore上有超过100个游戏是基于Cocos2D。</p>

<p>Steffen Itterheim在<a href="http://www.learn-cocos2d.com/2011/10/complete-list-objectivec-20-compiler-directives">他的博客</a>中总结了 Objective-C 2.0 所有的编译器保留字，并且对这些保留字做了介绍和使用示例。这些保留字如下：</p>

<pre>
@class
@defs
@protocol @required @optional @end
@interface @public @package @protected @private @property @end
@implementation @synthesize @dynamic @end
@throw @try @catch @finally
@synchronized @autoreleasepool
@selector @encode
@compatibility_alias
@”string”
</pre>


<p>我把这些保留字过了一遍，发现很少用到的有 @dynamic @defs @encode @compatibility_alis，所以就给大家介绍一下这几个关键字吧。</p>

<!-- more -->


<h2>@dynamic</h2>

<p>@dynamic 是相对于 @synthesize的，它们用样用于修饰 @property，用于生成对应的的getter和setter方法。但是@ dynamic表示这个成员变量的getter和setter方法并不是直接由编译器生成，而是手工生成或者运行时生成。</p>

<p>示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">ClassName</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">aProperty</span><span class="p">,</span> <span class="n">bProperty</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">cProperty</span><span class="o">=</span><span class="n">instanceVariableName</span><span class="p">;</span>
</span><span class='line'><span class="k">@dynamic</span> <span class="n">anotherProperty</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// method implementations</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@defs</h2>

<p>@defs 用于返回一个Objective-C类的struct结构，这个struct与原Objective-C类具有相同的内存布局。就象你所知的那样，Objective-C类可以理解成由基本的C struct加上额外的方法构成。</p>

<p>示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="p">{</span> <span class="err">@</span><span class="n">defs</span><span class="p">(</span> <span class="n">NSObject</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可能会想，什么情况下才会需要使用这个关键字。答案是涉及非常底层的操作或优化的时候才会用到。像如这篇讨论<a href="http://www.mulle-kybernetik.com/artikel/Optimization/opti-3-imp-deluxe.html">Objective-C如何做缓存优化</a>的文章中，就用到了该关键字。</p>

<h2>@encode</h2>

<p>@encode 是用于表示一个类型的字符串，对此，苹果有专门的<a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">介绍文档</a></p>

<p>示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">aMethod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">enc1</span> <span class="o">=</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>                 <span class="c1">// enc1 = &quot;i&quot;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">enc2</span> <span class="o">=</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">id</span><span class="p">);</span>                  <span class="c1">// enc2 = &quot;@&quot;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">enc3</span> <span class="o">=</span> <span class="k">@encode</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">aMethod</span><span class="p">));</span>  <span class="c1">// enc3 = &quot;:&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// practical example:</span>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSValue</span> <span class="o">*</span><span class="n">v</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">value:</span><span class="o">&amp;</span><span class="n">rect</span> <span class="nl">withObjCType:</span><span class="k">@encode</span><span class="p">(</span><span class="n">CGRect</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@compatibility_alis</h2>

<p>@compatibility_alis 是用于给一个类设置一个别名。这样就不用重构以前的类文件就可以用新的名字来替代原有名字。</p>

<p>示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="n">compatibility_alias</span> <span class="n">AliasClassName</span> <span class="n">ExistingClassName</span>
</span></code></pre></td></tr></table></div></figure>


<h2>@autoreleasepool</h2>

<p>@autoreleasepool 是用于ARC下代替 NSAutoreleasePool的保留字，我把它写在这里，是想告诉那些以为ARC慢的同学，在苹果的<a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">这篇官方文档</a>中有提到， @autoreleasepool 比 NSAutoreleasePool快6倍。当然，文档中也提到，ARC下不止Autorelease Pool的实现变快了，retain和release也快很多。如果你还没有在工程中使用ARC，推荐看看我的<a href="http://blog.devtang.com/blog/2013/03/27/should-we-use-arc/">《是否应该使用ARC》</a>。</p>

<h2>Cheat Sheet</h2>

<p>有一个热心者根据他的博文，制作了一张<a href="http://maniacdev.com/cheatsheetobjccd.pdf">《Objective-C 2.0保留字速查表》</a>，对于新手来说，把这张速查表打印出来，对于熟悉现在的保留字还是很有用的，它的下载地址是：<a href="http://maniacdev.com/cheatsheetobjccd.pdf">http://maniacdev.com/cheatsheetobjccd.pdf</a></p>

<p>五一节到了，祝大家节日快乐！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS应用内支付(IAP)的那些坑]]></title>
    <link href="http://blog.devtang.com/blog/2013/04/07/tricks-in-iap/"/>
    <updated>2013-04-07T20:14:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/04/07/tricks-in-iap</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/iap-icon.jpg"></p>

<h2>前言</h2>

<!--
[udacity](https://www.udacity.com/)中的在线课程[《How to build a startup》](https://www.udacity.com/course/ep245)中提到，所谓创业，就是尝试寻找新的赢利模式。正因为这是一种尝试，所以不可避免地需要调整产品方向，寻找市场中还未被发现的用户需求，给用户创造价值，进而获得收入。最近很火的[精益创业](http://book.douban.com/subject/10945606/)的观点，则是强调将这种尝试成本降到最小，使得自己可以根据市场反馈迅速调整产品。-->


<p>我们在今年春节后上线了新的在线智能题库：<a href="http://yuantiku.com/">猿题库</a>。<!-- 这应该是我们在互联网教育这个创业领域的早已计划好的第二个方向。--></p>

<p>猿题库现在推出了公务员考试行测和申论2个产品，均包括web, iOS和Android三个平台。这次我们尝试做一个收费的产品，所以在iOS端集成了应用内支付（IAP）功能。在开发过程中和上线后，我们遇到了IAP中的一些坑，在此分享给各位。</p>

<!-- more -->


<h2>IAP 审核相关的坑</h2>

<p>IAP开发的详细步骤我写在<a href="http://blog.devtang.com/blog/2012/12/09/in-app-purchase-check-list/">另一篇博客</a>中了。在此主要介绍审核时遇到的问题。</p>

<h3>IAP类型错误</h3>

<p>由于我们是按月付费的产品，所以在设置IAP类型时，我没有经验，只是简单设置成了可重复消费(Consumable)的IAP项目。但是我不知道，苹果对于这种按时间收费的产品，应该使用不可更新的定阅（Non-Renewing Subscription）类型。这个类型设置错误造成了我们app的一次审核被拒。</p>

<h3>IAP验证逻辑</h3>

<p>由于苹果在iOS5.0以下有IAP的bug，使得攻击者可以伪造支付成功的凭证。而iOS6.0的系统在越狱后同样可以伪造凭证，所以我们对于应用内支付，增加了服务器端的验证。
服务器端会将支付凭证发给苹果的服务器进行二次验证，以保证凭证是真实有效的。</p>

<p>在我们公司的测试服务器中，我们会连接苹果的测试服务器（https://sandbox.itunes.apple.com/verifyReceipt）验证。</p>

<p>在我们部署在线上的正式服务器中，我们会连接苹果的正式服务器（https://buy.itunes.apple.com/verifyReceipt ）验证。</p>

<p>我们提交给苹果审核的是正式版，我们以为苹果审核时，我们应该连接苹果的线上验证服务器来验证购买凭证。结果我理解错了，苹果在审核App时，只会在sandbox环境购买，其产生的购买凭证，也只能连接苹果的测试验证服务器。但是审核的app又是连接的我们的线上服务器。所以我们这边的服务器无法验证通过IAP购买，造成我们app的又一次审核被拒。</p>

<p>解决方法是判断苹果正式验证服务器的返回code，如果是21007，则再一次连接测试服务器进行验证即可。苹果的<a href="http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/StoreKitGuide/RenewableSubscriptions/RenewableSubscriptions.html">这一篇文档</a>上有对返回的code的详细说明。</p>

<h2>IAP上线后的遇到的情况</h2>

<p>我们在服务器端增加了验证IAP是否有效的逻辑。在产品上线后，如我们所料，我们收到了大量的欺骗性购买，这些都被我们的服务器识别出来了，但是我们也遇到了以下这次没有想到的情况:</p>

<p>1、由于国内越狱用户的比例比较大(2012年底国内越狱比例是42%),所以虽然我们服务器会验证购买凭证，但是每天有超过50%以上的凭证都是伪造的。同时由于苹果的验证服务器在美国，凭证验证请求响应的时间比较慢，大量的伪造凭证发给苹果服务器，不知道会不会被苹果认为我们是在恶意进行DDOS。至少我们发现有些时候，验证请求会超时。</p>

<p>2、由于国内有许多小白用户，他们的手机从购买时就被渠道商帮忙越狱过了并且安装了IAP free插件。所以对于这类用户，他们即使想付费购买，由于系统原有的IAP支付功能已经被破坏，所以他们是无法正常付费的。麻烦的是，他们会以为这是我们的app的问题，转而给我们的客服打电话投诉。这让我们非常郁闷。</p>

<p>3、苹果的验证服务器有时候会出问题，我们发现本来约定好返回的JSON数据在有几次返回的居然是一个XML格式的文件。造成我们将正常的付费IAP凭证验证失败。所以，在服务器记录下所有的验证凭证非常有必要，一来可以防止黑客多次提交同一个成功凭证的重放攻击，二来在需要时可以手工进行再验证。</p>

<h2>越狱手机可能被黑客窃取购买凭证！！</h2>

<p>我们发现有一部分用户反馈说已经收到苹果的扣费账单，但是我们从服务器的验证记录看，他上传的凭证却是虚假的。由于这些用户不太多，我们一开始以为是用户在恶意欺骗我们，后来我们让他将苹果的付费账单邮件转发给我们，以及将itunes的购买记录截图转发给我们，随着讨论的深入，我们越来越怀疑这里面有一个黑色的产业链。越狱手机的正常购买凭证可能被黑客的恶意程序截获，具体的攻击方式我们讨论了一下，其实就是被<a href="http://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">中间人攻击</a>，详细的过程如下:</p>

<ol>
<li>越狱手机的在被破解后，可能从一些破解渠道安装了黑客的恶意程序。</li>
<li>黑客将越狱手机所有https请求都经过他的中间服务器。</li>
<li>当有支付请求时，黑客先将请求发给苹果服务器，待苹果将成功的凭证返回后，黑客将这个凭证替换成假的凭证，完全支付凭证的偷取。</li>
</ol>


<p>或许有人会问，这个凭证拿来有什么用呢?很简单 ，因为苹果为了保护用户的隐私，支付凭证中并不包含任何用户的apple id信息，所以我们的app和服务器无法知道这个凭证是谁买的，而只能知道这个凭证是真的还是假的。于是黑客就可以用这个凭证，在另外的账号中通知我们完成了购买，而发来的验证凭证又是真实的，所以我们的服务器就会误认为是黑客的账号完成了购买，继而把会员期算在黑客的账号上。</p>

<p>再举一个简单的例子，你拿500块钱买了顺风优选的500元购物券，由于这个购物券是不记名的，所以顺风优选无法知道是谁买的。如果这个购物券在发放过程中被人掉包，那么偷购物券的人就可以拿这个偷来的真购物券来购物，而顺风优选的卡因为是不记名的，所以也无法查证这件事情。在这个例子中，购物券的不记名和苹果的支付凭证无账号信息是同一个道理。</p>

<p>鉴于以上情况，考虑到越狱手机不但不能成功支付，还会有安全问题，所以我们在新版中取消了越狱手机中的IAP支付功能。</p>

<p><font color=red>所以，请大家还是不要越狱自己的手机，iPhone手机越狱后风险相当大。实在不值得为了免费玩几个游戏就丢掉安全性。</font></p>

<h2>后记</h2>

<h3>中间人攻击的演示</h3>

<p>iOS独立开发者<a href="http://weibo.com/indiebros">王轲_IndieBros</a>在他的博客文章<a href="http://www.iwangke.me/2013/02/18/get-itunes-raw-response-with-mitmproxy/">《使用mitmproxy获取iTunes 11的Raw HTTPs Response》</a>中演示了如何使用中间人攻击来修改Game Center游戏数据。王轲还把我的例子白话翻译了一下（可见我还是说得太绕了，囧）：</p>

<blockquote><p>坏人在购买过程中插了一腿，换走了用户的无记名发票（购物小票形象些），然后手持无记名小票伪装成真实顾客或者转手出售获利。</p></blockquote>


<h3>关于越狱与盗版</h3>

<p>不少细心的同学评论纠正我，指出越狱并不等同于使用盗版。确实，如果说严格的定义，越狱只是让iPhone获得root权限，进而可以做任何事情。如果越狱的同学在越狱后不安装IAP free插件，不使用app sync插件，不使用任何国内的和非bigboss的cydia源，不使用任何盗版软件，所有应用都是从app store官方网站上下载的话，被黑客攻击的可能性会降低一些。</p>

<p>即使这样，由于手机已经被root了，苹果的沙盒安全机制失效，所以风险还是很大的。</p>

<h3>关于越狱用户的比例</h3>

<p>有同学提出我文章中写的越狱手机比例太高了，想询问数据来源。这个比例主要来自我们自己的app的统计信息，以及结合国内的统计工具友盟的<a href="http://www.umeng.com/umengdata_reports">越狱手机比例统计</a>，去年底国内的越狱比例是42%。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[是否应该使用ARC?]]></title>
    <link href="http://blog.devtang.com/blog/2013/03/27/should-we-use-arc/"/>
    <updated>2013-03-27T21:23:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/03/27/should-we-use-arc</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/arc-logo.jpg"></p>

<p>我和身边做iOS开发的同事组建了一个QQ群，每隔一段时间，大家就会讨论是否应该使用ARC。所以我觉得有必要将这些讨论分享出来，让大家消除对于ARC的疑虑。</p>

<!-- more -->


<p>关于ARC的介绍文章网上已经很多，苹果的官方文档也不少。担心使用ARC会带来问题的同学主要的理由有以下5点:</p>

<ol>
<li>担心这个技术方案不靠谱。苹果大多数时候的技术方案都是比较靠谱的，但也有一些技术方案有很多坑，例如storyboard。关于storyboard的问题可以参看我的<a href="http://blog.devtang.com/blog/2012/12/15/do-not-use-storyboard/">这篇文章</a>。</li>
<li>原有的项目在非ARC环境下运行良好，担心迁移成本或引入新的问题。</li>
<li>苹果以前手工管理内存需要非常小心，稍微不注意应用程序就崩溃了。有过这段经历的iOS开发老手，心里上还是觉得自己手工管理内存更踏实一些。</li>
<li>使用ARC需要了解ARC的一些细节，还需要引入_bridge等新的关键字，学习成本还是有的。</li>
<li>以为ARC只能支持iOS5.0以上（这是非常大的误解）。</li>
</ol>


<p>对于上面提到5点问题，我认为相应的回答如下:</p>

<ol>
<li>ARC是WWDC2011大会时提出的技术，离现在已经快2年了，而且苹果现在将MacOS上的垃圾回收机制废弃(Deprecated)，采用ARC替代，无疑证明了ARC是成熟的了。</li>
<li>确实有一些迁移成本，但苹果在Xcode中专门集成了迁移工具，成本已经非常小了。如下图就是Xcode集成的将非ARC工程转换成ARC工程的工具。另外，为了兼容第三方的非ARC开源库，你也可以在工程中随意使用编译参数：<code>-fno-objc-arc</code> ,这个参数允许对部分文件关闭ARC。</li>
<li>手工管理内存虽然踏实，但是泄露很容易发生。常常开发完成后，需要使用Instruments来检测泄露。但用了ARC后，基本不会出现泄露了，我在开发粉笔网iPhone客户端时，由于使用了ARC，花三个月开发完的应用，用instruments检测后，没有发现任何内存泄漏问题。这在没有使用ARC的工程中是不可想象的。</li>
<li>确实有学习成本。但是非常值得学习，能省不少开发精力。</li>
<li><p>虽然ARC是与iOS5一同推出，但是由于ARC的实现机制是在编译期完成，所以使用ARC之后App仍然可以支持iOS4.3。稍微需要注意的是，如果要在ARC开启的情况下支持iOS4.3，需要将weak关键字换成 __unsafe_unretained，另外还有一些细节需要处理，在这里我就不展开说了。</p>

<p><img src="http://blog.devtang.com/images/xcode-convert-to-arc.jpg"></p></li>
</ol>


<p>所以，希望大家都能在项目中使用ARC，一旦你感受到它带来的好处，你就离不开它了。它也能让你从繁琐的内存管理代码中解放出来，将精力更多关注于代码结构、设计模式而不是底层的内存管理。</p>

<p>关于ARC的教程，除了苹果的官方文档外，推荐易飞杨写的<a href="http://www.yifeiyang.net/category/embedded/iphone-embedded/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/arc/">ARC相关的文章</a>（注：链接需要翻墙才能打开）。易飞杨的博客中关于iPhone开发的文章都写得很深入，值得好好阅读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享iOS开发技巧的微信公共账号]]></title>
    <link href="http://blog.devtang.com/blog/2013/02/21/introduction-of-weixin-public-account/"/>
    <updated>2013-02-21T20:02:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/02/21/introduction-of-weixin-public-account</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/weixin-why.jpg" width="300px" /></p>

<p>记得我以前刚学iOS开发的时候，常常会遇到各种问题，身边没有人交流，遇到问题只能上网搜。虽然stackoverflow能解决大部分问题，但是还是很渴望和身边的一些同行进行讨论和交流。</p>

<p>后来，我组建了一个QQ群，尽力把自己通过各种渠道认识的iOS同行聚集到群里面，希望形成一个讨论环境。现在群里面加入了包括网易，腾讯，百度，新浪，搜狐，美团，豆瓣等公司的iOS程序员以及一些自由职业者。因为大家都是比较有经验的开发者，所以每天大家的讨论不太多，但是都很有价值。</p>

<!-- more -->


<p>但是，我发现QQ群对于讨论的归档性太弱。很多有代表意义的讨论，对于其他人可能是有用的，但是由于群的归档性太差，随着时间流逝，这些信息无法被有效沉淀。</p>

<p>所以我想做一个尝试。我想把这个QQ群里面有价值的讨论信息整理归档到这个公共账号上。希望大部分iOS同行每天都能得到少量的，但是有价值的信息。对于特别有价值的信息，我也会在后期整理成博客，发表在博客上。</p>

<p>希望这能对你平时的工作有所帮助。</p>

<p>如果你感兴趣，那么可以扫描以下二维码加该账号为好友，或者在微信中搜索“iOS开发”。</p>

<p><img src="http://blog.devtang.com/images/weixin-qr.jpg"></p>

<hr>


<h1>后记1（2013年3月27日）</h1>

<h3>微信公共账号的运营感受</h3>

<p>上面的提到的公共账号，我尝试运营了半个月，有如下感受：</p>

<ol>
<li>微信公共平台实时性太高，文章归档性弱，微信4.5才增加查看所有历史消息的功能，而且很多人还不知道从哪儿查看历史消息。</li>
<li>微信公共平台相对微博或RSS订阅，对订阅人的干扰强度更大。因为消息会实时推送到订阅人手机上，并且有消息收到提醒。</li>
<li>微信公共平台上的消息因为是在手机上阅读，不适合作长篇的，深度的技术讲解，但适合作简单入门的技术介绍</li>
<li>微信公共平台的后台管理太弱，不适宜代码的排版。</li>
<li>微信公共平台上的消息不能被搜索引擎检索，阻碍了有价值的信息的传播。</li>
</ol>


<p>综上所述，微信公共平台更适合于发表新闻类或漫谈的文章（例如Fenng的小道消息），或者入门性技术介绍（例如池建强的Mac技巧）。不适合长篇的技术深入讨论，更不适合贴代码，也不适合归档文章（要归档得自己另外整理）。</p>

<p>另外，每天通过公共账号发表文章相当费时间精力，至少需要1个小时的时间。对于我这个身处于创业公司的人来说，实在没有那么多时间花在这上面。所以现在该公共账号已经基本处于停止更新状态。</p>

<h1>后记2（2013年6月16日）</h1>

<p>维护这个微信号刚开始很难，原因一方面是整理信息的成本很高，写成微信很花时间。另一方面，我也没有那么多时间来写微信。不过我坚持了一段时间后，渐渐发现有一些牛人会被吸引到我们的QQ群里面，这样就行成了一个良性循环。QQ群不断有牛人加入贡献高质量的讨论，讨论内容通过微信发出去后，又吸引更多牛人要求加入。</p>

<p>所以，该微信公共账号经过近四个月的坚持，最终不但度过了最艰难的时期，还引吸了大量牛人加入到我们的讨论群中。现在每天群里都有足够多的内容分享出来组织成文。我自己也慢慢找到了该微信公众号的定位，即给大家分享一些信息，而不是进行知识的长篇大论。很多时候，提供一些链接给大家就足够了，感兴趣的人自然会去深入阅读。</p>

<p>另外，6月6日，本微信公共账号同时得到了<a href="http://hutu.me/">@Fenng</a>和<a href="http://macshuo.com/">@池建强</a>在各自的微信公共账号上的<a href="http://macshuo.com/?p=529">推荐</a>，关注人数也暴涨。很高兴自己最终坚持下来了。</p>

<h3>如何申请加群？</h3>

<p>有很多朋友留言问我们的QQ群号并想申请加入，在此我统一回复一下。</p>

<p>QQ群由于实时性太强，所以一旦有讨论，就会对平时的工作造成影响。所以QQ群里面的讨论不应该太热烈，否则每天就没法干活了。</p>

<p>所以我希望群里面的人都足够精通iOS开发，对于在群里面提出来的问题，都是值得讨论的问题。通过讨论，大家都有了收获，才不致于觉得这个群太打扰而把它屏蔽掉。</p>

<p>因此，我不希望群里面加太多的人，现在人数基本上有讨论的气氛，对于技术问题的讨论也都会有结果。所以，<font color="red">暂时不接受任何加群申请。</font></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置应用内的系统控件语言]]></title>
    <link href="http://blog.devtang.com/blog/2013/01/23/set-ios-system-ui-language/"/>
    <updated>2013-01-23T21:05:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/01/23/set-ios-system-ui-language</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/bdj-rank.jpg"></p>

<p>在iOS应用中，有时候会需要调用系统的一些UI控件，例如：</p>

<ol>
<li>在UIWebView中长按会弹出系统的上下文菜单</li>
<li>在UIImagePickerController中会使用系统的照相机界面</li>
<li>在编译状态下的UITableViewCell，处于待删除时，会有一个系统的删除按钮。</li>
</ol>


<p>以上这些UI控件中，其显示的语言并不是和你当前手机的系统语言一致的。而是根据你的App内部的语言设置来显示。结果就是，如果你没有设置恰当的话，你的中文App可能会出现一些英文的控件文字。</p>

<!-- more -->


<p>例如下图中，一个名为“百思不得姐”的应用，其在AppStore免费总榜中排名前100，图书类分类榜排名第一的应用，就闹出了系统控件显示成了英文的笑话，在其软件界面中长按，就会出如下的菜单，可以看到，这个菜单的文字全是英文的：</p>

<p><img src="http://blog.devtang.com/images/ios-menu-1.jpg"></p>

<p>而正常的菜单应该是中文的，如下是新浪微博的正文长按之后的效果：</p>

<p><img src="http://blog.devtang.com/images/ios-menu-2.jpg"></p>

<p>如何解决这个问题呢？方法如下:</p>

<p>用vim直接打开工程的Info.plist文件，在文件中增加如下内容即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;key&gt;</span>CFBundleLocalizations<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>   <span class="nt">&lt;array&gt;</span>
</span><span class='line'>           <span class="nt">&lt;string&gt;</span>zh_CN<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>           <span class="nt">&lt;string&gt;</span>en<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/array&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>TO: 百思不得姐的开发者，不用谢：）你们应用的内容挺有意思的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈ObjC对象的两段构造模式]]></title>
    <link href="http://blog.devtang.com/blog/2013/01/13/two-stage-creation-on-cocoa/"/>
    <updated>2013-01-13T10:15:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/01/13/two-stage-creation-on-cocoa</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>Objective-c语言在申请对象的时，需要使用两段构造(<a href="http://volonbolon.net/post/634999801/two-stage-creation-in-cocoa">Two Stage Creation</a>)的模式。一个对象的创建，需要先调用alloc方法或allocWithZone方法，再调用init方法或initWithSomething方法。如下是一个NSString对象的创建示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot;http://blog.devtang.com&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于该语言的对象创建方法和大多数其它语言（如C、C++、Java、JavaScript）都不一样，所以引起了我的好奇。是什么原因促使Objective-C做了这种设计，而又是什么原因促使大多数其它语言都采用&#8221;new&#8221;方法来一次性创建对象呢？</p>

<p>在看了<a href="http://www.amazon.com/Cocoa-Design-Patterns-Erik-Buck/dp/0321535022">《Cocoa Design Patterns》</a>一书（顺便吐槽一下该书中文版翻译质量不高，建议看英文版），并且做了一些调研之后，我将总结分享给大家，欢迎大家讨论。</p>

<!-- more -->


<h2>对象的创建</h2>

<p>我们先来看看在对象的创建过程中，alloc和init到底做了哪些事情。</p>

<h3>alloc方法</h3>

<p>根据苹果的<a href="https://developer.apple.com/library/mac/#documentation/cocoa/conceptual/CocoaFundamentals/CocoaObjects/CocoaObjects.html#//apple_ref/doc/uid/TP40002974-CH4-SW54">官方文档</a>。当对象创建时，cocoa会从应用程序的虚拟地址空间上为该对象分配足够的内存。cocoa会遍历该对象所有的成员变量，通过成员变量的类型来计算所需占用的内存。</p>

<p>当我们通过alloc或allocWithZone方法创建对象时，cocoa会返回一个未”初使化“过的对象。在这个过程中，cocoa除了上面提到的申请了一块足够大的内存外，还做了以下3件事：</p>

<ol>
<li>将该新对象的引用计数(Retain Count)设置成1。</li>
<li>将该新对象的isa成员变量指向它的类对象。</li>
<li>将该新对象的所有其它成员变量的值设置成零。（根据成员变量类型，零有可能是指nil或Nil或0.0）</li>
</ol>


<p>isa成员变量是在<a href="https://developer.apple.com/library/mac/#documentation/cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html#//apple_ref/occ/cl/NSObject">NSObject</a>中定义的，所以保证Cocoa的所有对象都带有此成员变量。借助该变量可以实现Cocoa对象在运行时的自省(Introspection)功能。</p>

<h3>init方法</h3>

<p>大部分情况下，我们都不希望所有成员变量都是零，所以init方法会做真正的初使化工作，让对象的成员变量的值符合我们程序逻辑中的初始化状态。例如，NSMutableString可能就会额外再申请一块字符数组，用于动态修改字符串。</p>

<p>init还有一个需要注意的问题。某些情况下，init会造成alloc的原本空间不够用，而第二次分配内存空间。所以下面的写法是错的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">s</span> <span class="n">init</span><span class="p">];</span> <span class="c1">// 这儿init返回的地址可能会变。s原本的指针地址可能是无效的地址。</span>
</span></code></pre></td></tr></table></div></figure>


<p>为此，苹果引入了一个编程规范，让大家写的时候将alloc 和init写在一行。所以上面的代码正确的写法是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>new</h3>

<p>在后来，苹果也引入了类方法：new。但是由于历史原因，init方法是实例方法而非类方法，所以作为类方法的new，只能简单地等价于 alloc + init，不能指定init的参数，所以用处不大。苹果在设计上也禁止多次调用init方法，例如如下代码会抛出 NSInvalidArgumentException。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="p">[</span><span class="n">str</span> <span class="nl">initWithString:</span><span class="s">@&quot;Bar&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>为什么这么设计</h2>

<p>说回来文章开始时提出来问题，为什么苹果要这么设计而其它语言不这么设计？</p>

<p>上面提到，alloc其实不只干了申请内存的事情，还做了：
 1. 内存管理的事情，设置Retain Count。
 2. 运行时自省的功能，设置isa变量。
 3. 非逻辑性的初使化功能，设置所有成员变量为零。</p>

<p>简单看来，根据设计模式的Single Responsibility的设计原则，苹果觉得alloc和init是做的2件不同的事情，把这两件事情分开放在2个函数中，对于程序员更加清楚明了。更详细查阅文档后，我觉得这是由于历史原因，让苹果觉得alloc方法过于复杂，在历史上，alloc不仅仅是分配内存，还可以详细的指定该内存所在的内存分区（用NSZone表示）。这就是下面要提到的allocWithZone方法。</p>

<p>在<a href="http://www.amazon.com/Cocoa-Design-Patterns-Erik-Buck/dp/0321535022">《Cocoa Design Patterns》</a>一书也提到，早期苹果是建议程序员使用 allocWithZone来管理内存分配的，每个NSZone表示一块内存分区，allowWithZone方法可以允许对象从指定分区分配内存。了解到这段历史后，也不难理解苹果这么设计的原因了。因为在这种情况下，alloc要处理的情况复杂，和init放到一起不合适。</p>

<p>而对于大多数出生在90年代的语言来说(例如Java,JavaScript,C#)，由于内存具体的分配方案都不需要程序员操心了，所以就不需要单独为内存分配实现一个alloc方法了。</p>

<h2>后记</h2>

<h3>allocWithZone被废弃</h3>

<p>自从Mac OS X 10.5上引入了垃圾回收机制后，苹果就不建议程序员使用allocWithZone了，事实上，cocoa框架也会忽略allocWithZone指定的分区。苹果在文档中也<a href="https://developer.apple.com/library/mac/#documentation/cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html#//apple_ref/occ/clm/NSObject/allocWithZone:">提到</a>，allocWithZone仅仅是一个历史遗留设计了。下图是苹果的文档截图：</p>

<p><img src="http://blog.devtang.com/images/allocWithZone.png" title="" ></p>

<h3>Objective-C的历史</h3>

<p>Objective-C是一门非常老的语言。如果你查阅文档，你会发现它和C++出生在同一时代（两种语言的发行年份都是<a href="http://en.wikipedia.org/wiki/Stepstone">1983年</a>），都是作为C语言的面向对象的接班人被推出。当然，最终C++胜出。由于历史久远，Objective-C也无法有太多优秀的语言做参考，所以，有很多历史遗留的设计。在2007年苹果公司发布了Obj-C 2.0, 对其进行了大量改进。</p>

<p>在最近几年的WWDC大会上，每年苹果都会对Objective-C和其对应的LLVM编译器进行改进，例如WWDC2011推出的ARC，WWDC2012推出的Object Literals等。所以现在使用Objective-C做开发已经非常舒服了。期待苹果给开发者带来更多惊喜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2013/01/01/2012-summary/"/>
    <updated>2013-01-01T14:31:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/01/01/2012-summary</id>
    <content type="html"><![CDATA[<p>和<a href="http://blog.devtang.com/blog/2012/01/01/2011-summary/">去年</a>一样，记录一下今年的成长和收获。</p>

<!-- more -->


<h2>主要工作</h2>

<p>自己这一年主要的工作是：</p>

<ul>
<li>2012年1-4月份，有道云笔记iOS端开发</li>
<li>2012年4-9月份，粉笔网iPhone端开发</li>
<li>2012年11月份-2013年1月，猿题库-公务员考试行测、猿题库-公务员考试申论iPhone端的开发</li>
</ul>


<h3>有道云笔记开发</h3>

<!--
1月26日，结婚。从2004年1月26日我和她相识，再到今年的同一天结婚。8年过去了，我和她因为相伴，过得快乐和充实。在承诺“执子之手，与之携老”的誓言后，我们也学会了相互诉说，相互迁就和相互照顾。
-->


<p>1-4月份，我继续开发了有道云笔记iOS端的新功能。做得最费劲的功能是和<a href="http://weibo.com/perfectworks">perfectworks</a>一起做iPad版的图文混排编缉器。本来想iOS的UIWebView是基于webkit内核的，把PC版的编辑器代码移植一下就行了。可真正做的时候，遇到很多问题。</p>

<p>首先是我们发现UIWebView有一些平台特有的javascript兼容性Bug。当时苹果官方的用Safari直接连接模拟器进行调试的工具还没有推出，我们只能用<a href="http://phonegap.github.com/weinre/">weinre</a>这个第三方工具来调试js，但是weinre有时候会出Bug，这个时候就只能用Alert来把调试信息打出来了，真是比IE6还苦。</p>

<p>然后是在iOS平台上，native端调js是同步的，但js调native调是异步的。所以原有的js代码需要做很多重构。关于这里面的技术细节，我总结在<a href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/">这里</a>。</p>

<p>最后是联调，因为js和ios两边同时开发，我们需要大量的联调工作。所以我每天抱着笔记本跑到前端组和perfectworks坐到一起。另外，我们还相互之间互相暴露了git的地址，然后相互pull各自调试代码，待各自都调试完成了，再把代码rebase整理一下，push到服务器上。最后，我们将这种实践整理成文<a href="http://blog.devtang.com/blog/2012/02/29/collaboration-with-git/">《用Git进行协同开发》</a>。</p>

<p>另外，在2-3月份，我还和c4pt0r一起，通过有道的个人项目时间，开发了有道云笔记的Mac版。不过这个版本由于是非正式项目，所以应该还有很多需要完善的Feature。最终c4pt0r将其取名为<a href="https://github.com/c4pt0r/notever/wiki/NotEver">NotEver</a>，发布到了github上。</p>

<h3>粉笔网开发</h3>

<p>在粉笔网我花了3个多月时间，独立完成了粉笔网iPhone客户端开发工作。整个代码量除去第三方库，有3万多行。那段时间非常辛苦，每周6天，每天11个小时，最终产品如期上线。在产品上线后，我写了<a href="http://blog.devtang.com/blog/2012/09/15/talk-about-my-startup-exp/">一篇博客</a>来专门讲述这中间的感悟。那篇文章发出后，在微博上得到了大量的转发，最终引起了CSDN的<a href="http://weibo.com/cmdnclub">炫姐姐</a>的关注。在她的邀请下，我们进行了一次技术和项目管理的<a href="http://blog.devtang.com/blog/2012/10/15/scrum-and-architecture-in-fenbi/">分享</a>。</p>

<h3>猿题库开发</h3>

<p>猿题库算是我们创业的第二个产品尝试。这是一个收费产品，同样开发时间很紧张，最终我们延续了粉笔网之前快速开发的经验，用3个月时间再次推出了一个全平台（Web,iOS,Android)产品。</p>

<p>这次在猿题库中，我还花时间调研并实现了扫描答题卡算法。也算是对我多年搞ACM的积累的一点算法的使用，否则都快忘完了。扫描答题卡使用了OpenCV库和ZXing库，所以我撰写了相关的经验文章发表在博客上。</p>

<p>猿题库在春节后上线。希望它能给我们一个惊喜。</p>

<h2>创业</h2>

<p>5月12日，我离职加入了由前网易同事创立的一家创业公司：<a href="http://fenbi.com/">粉笔网</a>。离职前纠结了相当长时间，主要是有道是一家非常棒的公司，在有道的工作非常开心，而且我们的产品有道云笔记一直在国内占据着云笔记类用户量第一的位置。不过最终我还是选择了离职，主要的原因是：</p>

<ol>
<li>想接受更大的挑战。在粉笔网我会独立负责整个iOS端的开发工作，会辛苦很多，但是成长也会快很多。</li>
<li>想有更大的潜在经济回报。在大公司拿死工资总还是无法摆脱财务自由，创业虽然成功率很低，但至少有希望，并且希望把握在自己手中。</li>
<li>想和大家一起打造一个小而精的技术团队。</li>
</ol>


<p>现在回过头来看，创业确实比较辛苦，但我也确实成长了很多。并且由于我们团队成员大多已经结婚，所以我们努力打造着一个不加班的创业公司文化。我们从9月份产品上线后，就一直坚持正常的上下班时间。</p>

<p>但是另一方面，我们的工作并不轻松。我们每周一个Scrum，每天的工作量很大，所以我们会尽量高效地沟通，做好自己的时间管理。这里面Scrum和番茄钟帮了我很大的忙。我现在每天除去沟通的时间，常常能花4-5小时专注地写代码，而这在以前，常常只有3小时左右。</p>

<p>有一些朋友很关心我，问我：“如果创业失败了怎么办？”。其实失败了能怎么样呢？失败无非就是损失掉了短期的利益。但长远来看，我比以前更加专业了，我们团队更加牛逼了，不管我们是继续另一份创业或者去大公司找工作，我相信都有这个实力。</p>

<h2>技术成长</h2>

<p>这一年专心于iOS开发的积累，已经能够非常熟练地进行iOS日常的开发。</p>

<p>另外在这一年，我注意在工作的时候记下一些总结，然后在周末有空的时候，就会花时间把这些整理成文章。回顾2012年，我一共写了36篇博客文章，平均每月3篇。写博客有助于我梳理自己的知识，同时也结交了不少iOS开发的同行。</p>

<h2>个人Milestone</h2>

<ul>
<li>2012-5-10 离职创业</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS中使用ZXing库]]></title>
    <link href="http://blog.devtang.com/blog/2012/12/23/use-zxing-library/"/>
    <updated>2012-12-23T17:03:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/12/23/use-zxing-library</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/zxing-icon.png"></p>

<h2>前言</h2>

<p><a href="https://code.google.com/p/zxing/">ZXing</a>(<a href="https://github.com/zxing/zxing">Github镜像地址</a>)是一个开源的条码生成和扫描库（开源协议为<a href="http://www.apache.org/licenses/LICENSE-2.0">Apache2.0</a>)。它不但支持众多的条码格式，而且有各种语言的实现版本，它支持的语言包括：Java, C++, C#, Objective-C, ActionScript和Ruby。</p>

<p>我上周在iOS项目开发中使用了ZXing的扫描二维码功能。在此总结一下如何将ZXing集成到已有的iOS工程中，分享给大家。</p>

<!-- more -->


<h2>集成步骤</h2>

<p>首先去Google Code或Github将ZXing的代码下载下来，整个工程比较大，我们只需要其中涉及iOS的部分，所以最好做一些裁剪。简单来说，我们只需要保留cpp和iphone这2个文件夹，其余的全部删掉。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/zxing-step-1.png"></p>

<p>接着我们继续裁剪，对于cpp这个目录，只保留cpp/core/src/zxing下面的内容，其余内容也可以删掉了。但是整个目录结构必须保持原样。裁剪完后，整个目录结构如下所示：</p>

<p><img src="http://blog.devtang.com/images/zxing-step-2.png"></p>

<p>接下来，我们把裁剪后的zxing目录整个移动到我们的iOS项目的目录下，并且把上图中可以看到的ZXingWidget.xcodeproj文件拖动到我们的iOS工程中。</p>

<p>下一步，我们需要设置ZXing项目和我们原本的iOS项目之间的依赖关系。在我们的iOS项目的设置中，点击build phases tab，然后增加 Target Dependencies 和 Link binary，并且增加这些framework依赖：</p>

<pre><code>a. AVFoundation
b. AudioToolbox
c. CoreVideo
d. CoreMedia
e. libiconv
f. AddressBook
g. AddressBookUI
</code></pre>

<p>完成之后如下图所示：</p>

<p><img src="http://blog.devtang.com/images/zxing-step-3.jpg"></p>

<p>最后一步，在设置中增加如下2个header search path:</p>

<ul>
<li>./zxing/iphone/ZXingWidget/Classes</li>
<li>./zxing/cpp/core/src</li>
</ul>


<p>需要注意的是，第一个path要设置成循环查找子目录，而第二个不循环查找，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/zxing-step-4.png"></p>

<p>恭喜你，完成这步之后，你就已经完成ZXing库的集成了。下面谈谈如何使用ZXing库来做二维码识别。</p>

<h2>二维码识别</h2>

<p>ZXing的iOS版本提供2种方法来做二维码识别功能，第一种方法比较简单，第二种方法比较复杂。我在做Demo时使用了第一种方法，做真正项目开发的时候使用了第二种方法，所以都给大家介绍一下。</p>

<h3>使用方法一</h3>

<p>ZXing直接提供了一个扫描二维码的View Controller，即ZXingWidgetController。在需要使用的界面代码中，加入文件依赖：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;ZXingWidgetController.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;QRCodeReader.h&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>
然后在需要扫描的时候，调用如下代码即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">scanPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ZXingWidgetController</span> <span class="o">*</span><span class="n">widController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ZXingWidgetController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDelegate:</span><span class="n">self</span> <span class="nl">showCancel:</span><span class="n">YES</span> <span class="nl">OneDMode:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSMutableSet</span> <span class="o">*</span><span class="n">readers</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableSet</span> <span class="n">alloc</span> <span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">QRCodeReader</span><span class="o">*</span> <span class="n">qrcodeReader</span> <span class="o">=</span> <span class="p">[[</span><span class="n">QRCodeReader</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">readers</span> <span class="nl">addObject:</span><span class="n">qrcodeReader</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">qrcodeReader</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>  <span class="n">widController</span><span class="p">.</span><span class="n">readers</span> <span class="o">=</span> <span class="n">readers</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">readers</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">presentModalViewController:</span><span class="n">widController</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">widController</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在ZXing扫描有结果时，会调用如下回调函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">ZXingDelegate</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">zxingController:</span><span class="p">(</span><span class="n">ZXingWidgetController</span><span class="o">*</span><span class="p">)</span><span class="nv">controller</span> <span class="nf">didScanResult:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">zxingControllerDidCancel:</span><span class="p">(</span><span class="n">ZXingWidgetController</span><span class="o">*</span><span class="p">)</span><span class="nv">controller</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用方法二</h3>

<p>方法二与方法一的区别就相当于AVFoundation和UIImagePickerController的区别一样。简单来说，就是使用方法二比方法一更加麻烦，但是获得的可定制性更高。</p>

<p>使用方法二时，你需要自己用AVFoundation获得Camera返回的实时图象，然后转成UIImage，最后传给ZXing的Decoder类完成二维码的识别。由于使用AVFoundation涉及的代码略多，我写的示意代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;Decoder.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;TwoDDecoderResult.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;QRCodeReader.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// setup QR reader</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">qrReader</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableSet</span> <span class="n">alloc</span> <span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">QRCodeReader</span><span class="o">*</span> <span class="n">qrcodeReader</span> <span class="o">=</span> <span class="p">[[</span><span class="n">QRCodeReader</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">qrReader</span> <span class="nl">addObject:</span><span class="n">qrcodeReader</span><span class="p">];</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">scanningQR</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">step</span> <span class="o">=</span> <span class="n">STEP_QR</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// AVFoundation的回调函数</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">captureOutput:</span><span class="p">(</span><span class="n">AVCaptureOutput</span> <span class="o">*</span><span class="p">)</span><span class="nv">captureOutput</span> <span class="nf">didOutputSampleBuffer:</span><span class="p">(</span><span class="n">CMSampleBufferRef</span><span class="p">)</span><span class="nv">sampleBuffer</span> <span class="nf">fromConnection:</span><span class="p">(</span><span class="n">AVCaptureConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 第一步，将sampleBuffer转成UIImage</span>
</span><span class='line'>  <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">getCaptureImage:</span><span class="n">sampleBuffer</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// 第二步，用Decoder识别图象</span>
</span><span class='line'>  <span class="n">Decoder</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Decoder</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="n">d</span><span class="p">.</span><span class="n">readers</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">qrReader</span><span class="p">;</span>
</span><span class='line'>  <span class="n">d</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">scanningQR</span> <span class="o">=</span> <span class="p">[</span><span class="n">d</span> <span class="nl">decodeImage:</span><span class="n">image</span><span class="p">]</span> <span class="o">==</span> <span class="n">YES</span> <span class="o">?</span> <span class="n">NO</span> <span class="o">:</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ZXing的Decoder类提供了以下回调函数获得识别结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">DecoderDelegate</span><span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">@</span><span class="n">optional</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">decoder:</span><span class="p">(</span><span class="n">Decoder</span> <span class="o">*</span><span class="p">)</span><span class="n">decoder</span> <span class="nl">willDecodeImage:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="n">image</span> <span class="nl">usingSubset:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="n">subset</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">decoder:</span><span class="p">(</span><span class="n">Decoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">decoder</span> <span class="nf">didDecodeImage:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span> <span class="nf">usingSubset:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">subset</span> <span class="nf">withResult:</span><span class="p">(</span><span class="n">TwoDDecoderResult</span> <span class="o">*</span><span class="p">)</span><span class="nv">result</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;result = %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">result</span> <span class="n">text</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">decoder:</span><span class="p">(</span><span class="n">Decoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">decoder</span> <span class="nf">failedToDecodeImage:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">image</span> <span class="nf">usingSubset:</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nv">subset</span> <span class="nf">reason:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">reason</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">decoder:</span><span class="p">(</span><span class="n">Decoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">decoder</span> <span class="nf">foundPossibleResultPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="nv">point</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Trouble Shoot &amp; Tips</h2>

<p>我在使用中遇到了一些问题，主要是编译的问题。</p>

<ol>
<li>一个是找不到 <iostream> 头文件。解决方法：把用到ZXing的源文件扩展名由.m改成.mm。</li>
<li>报错：Undefined symbols for architecture armv7s，<a href="http://stackoverflow.com/questions/12968369/undefined-symbols-for-architecture-armv7-when-using-zxing-library-in-xcode-4-5">解决方法</a>：把ZXingWidget的一个build target参数：&#8221;Build Active Architecture Only&#8221; 修改成 &#8220;NO&#8221;.</li>
<li>报错：No such file or directory，出现该错误可能是你的Header Search Path写错了，或者就是你的zxing库的目录结构不是我上面强调的，好好检查一下吧。</li>
<li>如果你需要生成二维码做测试，推荐一个不错的在线生成二维码的网站：<a href="http://cli.im/">http://cli.im/</a></li>
</ol>


<h2>ZXing和OpenCV的兼容问题</h2>

<p>ZXing 2.1 和OpenCV 2.4.3的iOS库有一些兼容问题，他们对C++标准库的版本和编译器版本都有一些需求，造成满足一方了，另一方就编译不通过了。Stackoverflow上有人终于找到了一个让它们和平共处的方法，但是只适用于iOS5.0以上版本。正好我们的App只支持iOS5.0+，所以就搞定了。所以如果你也正好遇到这个问题，可以参考<a href="http://stackoverflow.com/questions/13498581/opencv-zxing-incompatibility-on-ios">这个贴子</a>。</p>

<p>希望本文对大家有用，Have Fun~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StoryBoard--看上去很美]]></title>
    <link href="http://blog.devtang.com/blog/2012/12/15/do-not-use-storyboard/"/>
    <updated>2012-12-15T10:21:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/12/15/do-not-use-storyboard</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>StoryBoard是苹果在2011年的WWDC Session 309《Introducing Interface Builder Storyboarding》中介绍的Interface Builder的新功能。其基本想法是将原本的xib进行升级，引入一个容器用于管理多个xib文件，并且这个容器可以通过拖拽设置xib之间的界面跳转。而这个容器就是被苹果称做的StoryBoard。下图是一个Storyboard的截图。</p>

<p><img src="http://blog.devtang.com/images/enbrace-ios5-1.png"></p>

<!-- more -->


<h2>优点</h2>

<p>总体上来说，Storyboard有以下好处：</p>

<ol>
<li>你可以从storyboard中很方便地梳理出所有View Controller的界面间的调用关系。这一点对于新加入项目组的开发同事来说，比较友好。</li>
<li>使用Storyboard可以使用Table View Controller的Static Cell功能。对于开发一些Cell不多，但每个Cell都不一样的列表类设置界面会比较方便。</li>
<li>通过实现 - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender 方法，每个View Controller的跳转逻辑都聚集在一处，这方便我们统一管理界面跳转和传递数据。</li>
<li>Storyboard可以方便将一些常用功能模块化和复用。例如WWDC2011年介绍Storyboard的视频就将微博分享功能模块化成一个单独的Storyboard。我在开发App时，也将例如通过第三方注册登录模块做成一个单独的Storyboard，便于以后复用。</li>
</ol>


<h2>缺点</h2>

<p>我在新项目使用Storyboard时，却发现它只是看上去很美，真正用起来，却有很多问题，我发现的问题有：</p>

<ol>
<li>首先它和xib一样，对版本管理是灾难。因为是它实际上的多个xib的集合，所以更容易让多人编辑产生冲突。苹果对storyboard的设计也不好，基本上你只要打开，什么都不做，这个文件就会被更改，所以冲突几乎是不可避免的&#8212;除非你不打开，实在不小心打开看了，需要在提交前回退成服务器上的版本。</li>
<li>Storyboard提供的 Static cell特性只适合于UITableViewController的子类。我很多时候的用法是一个TableView嵌套在另一个UIView中，static cell就不能用了。</li>
<li>segue的概念对于开发来说并不省事，如果是用程序内部trigger一个segue，那么需要在另一个回调的地方设置dest view controller的参数信息。</li>
</ol>


<h2>总结</h2>

<p>我仔细比较权衡了一下优缺点，最主要的问题是我的版本管理在多人协作开发时将陷入灾难，而这是完全不能接受的。而最主要的好处就是，你可以在一个类似白板的地方“一揽众山小“一样了解所有界面之间的切换关系，但这个有那么重要吗？我自已其实很清楚跳转逻辑，这个只是对新同事了解项目代码时有帮助，那我花一点时间直接给他讲讲画画不就搞定的吗？为了这点好处而让版本管理无法使用，是完全不能接受的。</p>

<p>所以最终我决定放弃使用StoryBoard了，这个“看上去很美”的功能有着不可接受的缺陷。现在看来，它仅适用于做一些Demo的开发。苹果一直没有处理好这类可视化界面设计功能的版本管理，象xib文件，虽然是xml格式的，但如果多人编辑了，合并起来也会很麻烦。所以业界好多同行都不用xib,直接用纯代码来写界面，虽然稍慢一点儿，但是工程很干净，也基本没有了多人协作的版本冲突问题。</p>

<h2>2013-10-6更新</h2>

<p>苹果在WWDC2013之后发布了Xcode5，storyboard和xib的内部实现进行了大量修改，使得其格式更加简单和易读，最终的效果是在版本冲突时，合并冲突变得可能。所以，现在我对于storyboard和xib不再象以前那么排斥了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于IAP的破解]]></title>
    <link href="http://blog.devtang.com/blog/2012/12/09/iap-crack-issue/"/>
    <updated>2012-12-09T15:06:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/12/09/iap-crack-issue</id>
    <content type="html"><![CDATA[<h3>介绍</h3>

<p>大概在今年7月份，有俄罗斯黑客<a href="http://www.in-appstore.com/">破解</a>了苹果的应用内付费（In-App Purchases），设备在不越狱的情况下就可以免费获得来自苹果官网App Store里应用的收费道具。受影响的产品众多，包括著名的Angry Birds，切水果，Mega Jump, Pandora等。<a href="https://docs.google.com/spreadsheet/ccc?key=0AvSXyNTiqEXMdGRKZlN1Snl5S3h1Z1NsTTFYTlJPTUE#gid=0">这里</a>有一份受影响的著名的游戏应用列表。</p>

<p>正常的越狱行为还是比较复杂的，需要下载破解软件，并且操作进入DFU模式，所以大部分人并不能够方便地越狱。但该方案不需要越狱就可以破解应用内付费，给用户实施该行为提供了方便。</p>

<!-- more -->


<p>为了验证破解的有效性，我今天试了一下，确实能够直接绕开苹果的应用内付费就直接完成购买操作。而苹果也在它的官方文档上<a href="http://developer.apple.com/library/ios/#releasenotes/StoreKit/IAP_ReceiptValidation/_index.html">特别注明</a>了该漏洞的存在，截图如下：</p>

<p><img src="http://blog.devtang.com/images/iap-crack-issue.png"></p>

<p>从该文档中我们可以知道，iOS6以下的所有设备（包括越狱或非越狱设备），都会受到该漏洞的影响。</p>

<h3>攻击原理</h3>

<p>我们知道通常的IAP购买行为，从逻辑上就是设备向App Store发起一个购买操作，App Store在验证过用户的密码确认身份后，扣费并返回购买成功的凭证，整个网络操作是通过SSL加密的。</p>

<p>该IAP破解方法，是让设备误以为另一个网站就是AppStore，而向它通讯，而这个假AppStore返回一个假的购买成功的凭证，这样就欺骗设备完成了购买。整个欺骗使用的手段包括：</p>

<ol>
<li>用户给自己添加一个受信任的证书以完成SSL通讯的证书校验</li>
<li>设置一个伪DNS（域名解析服务）地址，把AppStore的域名指向假的地址。</li>
</ol>


<h3>应对措施</h3>

<p>现在看来，暂时有效的应对方法是，将该交易凭证上传到我们自己的服务器上，然后让我们自己的服务器与AppStore进行验证，以确认该凭证是否是伪造的，然后将验证结果返回给设备。苹果的官方网站上也是这么介绍的。这样做麻烦的地方是，对于那些游戏和工具类应用，增加了服务器开发和维护的开销。</p>

<p>但是就象苹果自己也意识到的那样（如下图），既然破解者可以欺骗设备来和AppStore通讯，那么同样破解者从原理上，也可以欺骗设备同我们自己的服务器通讯，到头来，设备本身无论如何是无法知道自己的信息的真实性的。</p>

<p><img src="http://blog.devtang.com/images/iap-crack-isuue-2.png"></p>

<p>对于这件事，我们只能期望于：因为我们的应用用户量不大，验证协议又不是通用的，所以破解者需要专门针对我们的通讯协议进行破解，这需要他本身有动力做这个事情，并且要花费他一些时间。所以可能他觉得做这个事情没什么挑战和意义，就不破解我们了。在这件事情上，“希望他不要破解”，好象也是我们唯一能做的事情。</p>

<p>乐观一点讲，AppStore上有上百万的应用，如果所有应用都采用服务器验证购买凭证，黑客一一针对破解，确实也太不可能了，所以这件事情还是很有必要的。另外随着iOS6的普及，该漏洞也将被修补掉，所以大家也不用过于悲观。</p>
]]></content>
  </entry>
  
</feed>
