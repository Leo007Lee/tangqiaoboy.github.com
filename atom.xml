<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐巧的开发总结博客]]></title>
  <link href="http://blog.devtang.com/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2012-02-04T15:30:21+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[Tang Qiao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Git来管理xcode4中的代码片段]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets/"/>
    <updated>2012-02-04T14:32:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets</id>
    <content type="html"><![CDATA[<h3>代码片段介绍</h3>

<p>xcode4引入了一个新feature: code snippets，在整个界面的右下角，可以通过快捷键：cmd + ctrl + opt + 2 调出来。code snippets是一些代码的模版，对于一些常见的编程模式，xcode都将这些代码抽象成模版放到code snippet中，使用的时候，只需要键入快捷键，就可以把模版的内容填到代码中。</p>

<p>例如，在引入GCD(Grand Central Dispatch)后，当我们需要一个延时的操作时，只需要在xcode中键入：dispatch
, 就可以看到xcode中弹出一个上下文菜单，第一项就是相应的代码片段。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/dispatch_after_snippet.jpg"></p>

<!--more-->


<h3>定义自己的代码片段</h3>

<p>那么如何自定义code snippet呢，相当简单，当你觉得某段代码很有用，可以当作模版的时候，将其整块选中，
拖动到xcode右下角的code snippets区域中即可。xcode会自动帮你创建一个新的代码片段。
之后你可以单击该代码片段，在弹出的界面中选择edit，即可为此代码片段设置快捷键等信息。</p>

<p>如果有些地方你想让用户替换掉，可以用 &lt;#被替换的内容#> 的格式。
这样在代码片段被使用后，焦点会自动移到该处，你只需要连贯的键入替换后的内容即可。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/edit_code_snippet.jpg"></p>

<p>关于xcode的一些代码片段，<a href="http://nearthespeedoflight.com/article/xcode_4_code_snippets">这里</a>有一些用户的总结心得。</p>

<h3>使用Git管理代码片段</h3>

<p>在了解了code snippet之后，我在想能不能用Git来管理它，于是就研究了一下，发现它都存放于目录 ~/Library/Developer/Xcode/UserData/CodeSnippets 中。于是，我就将这个目录设置成一个Git的版本库，然后将自己整理
的代码片段都放到Github上了。现在我有2台mac机器，一台笔记本，一台公司的iMac，我常常在2台机器间切换着工作，由于将代码片段都放在github上，所以我在任何一端有更新，另一端都可以很方便的用git pull将更新拉到本地。前两天将公司机器升级到lion，又重装了lion版的xcode，简单设置一下，所有代码片段都回来了，非常方便。</p>

<p>我的代码片段所在的github地址是<a href="https://github.com/tangqiaoboy/xcode_tool">https://github.com/tangqiaoboy/xcode_tool</a>,使用它非常方便，只需要如下3步即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/tangqiaoboy/xcode_tool
</span><span class='line'>cd xcode_tool
</span><span class='line'>./setup_snippets.sh</span></code></pre></td></tr></table></div></figure>


<p>大家也可以将我的github项目fork一份，改成自己的。这样可以方便地增加和管理自己的代码片段。</p>

<p>祝大家玩得开心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVN和Git的使用感受]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/03/talk-about-svn-and-git/"/>
    <updated>2012-02-03T21:08:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/03/talk-about-svn-and-git</id>
    <content type="html"><![CDATA[<p>从开始工作到现在，在公司里面一直用svn来做版本管理。大约半年前听说了Git，因为Git的光辉相当耀眼，作者是Linus Torvalds，被大量的开源软件采用，如jQuery, Perl, Qt, ROR, YUI, GNOME等，所以决定学一学。
比较庆幸的是，国内有一本较好的介绍Git的书：<a href="http://www.amazon.cn/Git%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E8%92%8B%E9%91%AB/dp/B0058FLC40/ref=sr_1_1?ie=UTF8&amp;qid=1328277616&amp;sr=8-1">《Git权威指南》</a>。
我大概花了一个月的周末时间来学习它。在这里总结一下使用Git的感受，主要是和SVN来做一些比较，以便突出Git的特点。</p>

<!--more-->


<h3>学习成本</h3>

<p>首先我感觉Git的学习成本还是比较高的。svn基本上不到20个命令就可以应付日常的工作了，而Git有上百个命令。我在学习SVN的时候，基本上没有看什么书，最多就是在网上随便看了一些贴子，就基本会使用SVN了。而我花在Git的学习时间算下来，至少有1周。</p>

<p>因为Git的学习成本较高，所以当一个会svn的同学刚刚接触Git的时候，如果简单地把Git当SVN用，就会感觉Git相当难用。我在公司就时常听到同事抱怨它。所以我认为，要想真正用好Git，还是需要投入时间来学习它，否则是很难使用的。</p>

<h3>Git的内部结构</h3>

<p>Git真正是一个面向程序员的工具，它的内部数据结构是一个有向无环图，并且，你必须理解它的内部数据结构后，才能掌握它。因为你的很多操作，都其实对应的是这个有向无环图的操作。比如:</p>

<ul>
<li>git commit就是增加一个结点。</li>
<li>git commit &#8211;amend就是改发一个结点。</li>
<li>git reset就是修改HEAD指向的结点。</li>
</ul>


<p>另外，Git内部包括三个区域：工作区，暂存区和版本库。</p>

<ul>
<li>git add 是将工作区的内容保存到暂存区</li>
<li>git checkout 是将暂存区的内容覆盖工作区</li>
<li>git commit 是将暂存区的内容保存到版本库</li>
<li>git reset 默认情况下是将版本库的内容覆盖工作区</li>
<li>git diff 也有三种情况，分别是比较工作区与暂存区，工作区与版本库，暂存区与版本库之间的差别</li>
</ul>


<p>了解了Git的内部结构，对于这些Git的命令就更加理解了。</p>

<h3>svn的坑</h3>

<p>svn在平常使用上基本没什么坑，平时通过</p>

<pre>svn pe svn:ignore . </pre>


<p>设置好忽略的文件，以免误把不应该加入版本管理的文件加进来。</p>

<p>我唯一遇到的一次问题是这样的：我有一个目录要加入svn的版本库，但是目录里面的一些文件不想加入。如果直接输入svn add 目录名，就会把目录下所有文件都加入到版本管理中。如果cd到那个目录里面配置svn:ignore，又会因为当前目录还不在版本管理中，设置不了。最后找到的解决办法是在svn add的时候增加 &#8211;non-recursive 参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn add dirname --non-recursive
</span><span class='line'>或者是：
</span><span class='line'>$ svn add dirname --depth empty</span></code></pre></td></tr></table></div></figure>


<p>还有就是对于一些不小心用svn add加入了版本管理，但实际上不应该加的目录。可以这么做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn export spool spool-tmp    (这里export可以将原目录中的.svn目录给清除掉)
</span><span class='line'>svn rm spool
</span><span class='line'>svn ci -m 'Removing inadvertently added directory "spool".'
</span><span class='line'>mv spool-tmp spool
</span><span class='line'>svn propset svn:ignore 'spool' .
</span><span class='line'>svn ci -m 'Ignoring a directory called "spool".'</span></code></pre></td></tr></table></div></figure>


<h3>Git的坑</h3>

<ul>
<li>在windows下的文件的权限因为无法和linux上完全一致，所以用Git检出的文件权限可能显示为被更改。
另外因为windows下的换行和linux上也不一样，协作开发时也容易出问题。所以在windows上使用Git的同学需要加上以下2行配置参数：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global core.filemode false
</span><span class='line'>git config --global core.autocrlf true
</span><span class='line'>第一句是忽略文件权限的改动。
</span><span class='line'>第二句是将文件checkout时自动把LF转成CRLF，check in 时自动把CRLF转成LF</span></code></pre></td></tr></table></div></figure>


<ul>
<li>svn的svn revert filename 对应的其实是 git checkout &#8211; filename, 而git revert xxx是基于xxx提交所做的改动，做一次反向提交，和svn revert 完全不一样。</li>
</ul>


<h3>Git的一些小技巧</h3>

<ul>
<li>一旦推送到远程仓库后，就不要用类似git reset, git ci &#8211;amend, git rebase等破坏性提交了，否则远程仓库会因为你的新推送不是Fast Forward而拒绝提交(关于什么是Fast Forward要讲的太多了，自已看书吧)。如果实在不小心做了。在确定别人没有检出前，用git push -f 可以强制推送到远程仓库中。如下图:</li>
</ul>


<p><img src="http://blog.devtang.com/images/git_push_f.jpg"></p>

<ul>
<li>在公司没有应用git前，你可以用git svn 来做管理。 git svn 相关命令：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git svn clone -r REV1:HEAD svn_addr local_addr
</span><span class='line'> git svn dcommit  提交到SVN
</span><span class='line'> git svn rebase   将从svn up过来的信息，rebase成git提交
</span><span class='line'> git svn rebase --continue  冲突后继续rebase信息
</span><span class='line'> git svn fetch    从svn up信息</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在用户的home目录下，有一个.gitconfig文件，里面可以配置一些别名，方便平时的git操作。
特别是那些平日使用SVN的短命令习惯了的同学，配置一下别名后，使用git就会相当顺手了。我配置的别名如下。这里特别多说一句，有些人喜欢将ci设置成commit -a，这样就不用git add来把需要提交的文件加入到暂存区了。在《Git权威指南》中，作者极力反对这样做。因为Git本身在提交前有add这步，就是为了让提交者能够审视自己的提交文件，以防止错误的提交发生。</li>
</ul>


<pre>
[alias]
    st = status -s
    ci = commit
    l = log --oneline --decorate -13
    ll = log --oneline --decorate
    co = checkout
    br = branch
    rb = rebase
    dci = dcommit
</pre>


<ul>
<li>如果你需要删除Git下没有加入到版本库中的文件，可以使用：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -nd 测试删除
</span><span class='line'>git clean -fd 真实删除</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>用git svn clone 的时候，带上 -r rev1:HEAD参数，可以省去将SVN整个提交历史抓取下来的时间。</p></li>
<li><p>搭建一个Git远程仓库相当简单，直接在一台带SSH的服务器上用git init &#8211;bare dirname即可。本地可以用git remote命令来设置多个远程分支。另外，第一次提交的时候，因为远程仓库中没有任何分支，需要用如下指令建立master分支：</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin yourname@yourhost.com:~/path/repository_name
</span><span class='line'>git remote add add2 yourname@yourhost.com:~/path/repository_name
</span><span class='line'>git push origin master
</span><span class='line'>git push add2 master
</span><span class='line'>如果git remote add设置地址写错了，可以用git remote set-url更改：
</span><span class='line'>git remote set-url origin yourname@yourhost.com:~/path/repository_name</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Objective-C的文档生成工具:appledoc]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/"/>
    <updated>2012-02-01T20:37:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>做项目的人多了，就需要文档了。今天开始尝试写一些项目文档。但是就源代码来说，文档最好和源码在一起，这样更新起来更加方便和顺手。象Java语言本身就自带javadoc命令，可以从源码中抽取文档。今天抽空调研了一下objective-c语言的类似工具。</p>

<p>从<a href="http://stackoverflow.com/questions/813529/documentation-generator-for-objective-c">stackoverflow</a> 上找到三个比较popular的工具：doxygen, headdoc和appledoc 。它们分别的官方网址如下：</p>

<ul>
<li>docxygen <a href="http://www.stack.nl/~dimitri/doxygen/index.html">http://www.stack.nl/~dimitri/doxygen/index.html</a></li>
<li>headdoc <a href="http://developer.apple.com/opensource/tools/headerdoc.html">http://developer.apple.com/opensource/tools/headerdoc.html</a></li>
<li>appledoc <a href="http://gentlebytes.com/appledoc/">http://gentlebytes.com/appledoc/</a></li>
</ul>


<!-- more -->


<h2>介绍</h2>

<p>我把这3个工具都大概调研了一下，说一下我的感受。</p>

<h3>docxygen</h3>

<p>docxygen感觉是这3个工具中支持语言最多的，可以配置的地方也比较多。我大概看了一下文档，觉得还是比较复杂，而且默认生成的风格与苹果的风格不一致。就去看后面2个工具的介绍了。另外，它虽然是开源软件，但是没有将源码放到github上让我感觉这个工具的开发活跃度是不是不够。</p>

<h3>headerdoc</h3>

<p>headerdoc是xcode 自带的文档生成工具。在安装完xcode后，就可以用命令行：headdoc2html + 源文件名 来生成对应的文档。我个人试用了一下，还是比较方便的，不过headerdoc的注释生成规则比较特别，只生成以 /*! */ 的格式的注释。还有一个缺点是每个类文件对应一个注释文件，没有汇总的文件，这点感觉有点不爽。</p>

<h3>appledoc</h3>

<p>appledoc是在stackoverflow上被大家推荐的一个注释工具。有几个原因造成我比较喜欢它：</p>

<ol>
<li>它默认生成的文档风格和苹果的官方文档是一致的，而doxygen需要另外配置。</li>
<li>appledoc就是用objective-c生成的，必要的时候调试和改动也比较方便。</li>
<li>可以生成docset，并且集成到xcode中。这一点是很赞的，相当于在源码中按住option再单击就可以调出相应方法的帮助。</li>
<li>appledoc源码在github上，而doxygen在svn上。我个人比较偏激地认为比较活跃的开源项目都应该在github上。</li>
<li>相对于headerdoc，它没有特殊的注释要求，可以用/** */ 的格式，也可以兼容/*! */的格式的注释，并且生成的注释有汇总页面。</li>
</ol>


<h2>安装</h2>

<p>那么简单介绍一下如何安装appledoc，安装非常简单，只需要2步：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git clone git://github.com/tomaz/appledoc.git
</span><span class='line'> cd appledoc
</span><span class='line'> sudo sh install-appledoc.sh</span></code></pre></td></tr></table></div></figure>


<h2>使用</h2>

<p>使用appledoc时，只需要用如下命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appledoc -o ./doc --project-name ynote --project-company youdao .</span></code></pre></td></tr></table></div></figure>


<p>appledoc会扫描当前路径下的所有文件，然后生成好文档放到doc目录下。你也可以用appledoc &#8211;help查看所有可用的参数。</p>

<p>基本上使用起来还是比较方便的，详细的信息可以查看官方的文档：<a href="http://gentlebytes.com/appledoc/">http://gentlebytes.com/appledoc/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用javascript协助导入图片]]></title>
    <link href="http://blog.devtang.com/blog/2012/01/23/use-javascript-to-import-pictures/"/>
    <updated>2012-01-23T23:10:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/01/23/use-javascript-to-import-pictures</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>先说说需求。春节回家见爸妈，老爸迷上了摄影。他把平时的照片都上传到了<a href="http://photo.chengdu.cn/">成都图片网</a>,这个成都图片网专门有一个“快拍成都”的版块，用于大家将随手拍的生活中的图片分享上去。每天编辑还会选出一张最有特色的图片，刊登到《成都商报》上。快拍成都版块的网址是：<a href="http://photo.chengdu.cn/diary.php">http://photo.chengdu.cn/diary.php</a>，另外，这个成都图片网还带有一个&#8221;拍客论坛&#8221;，论坛的网址是：<a href="http://photo.chengdu.cn/bbs/">http://photo.chengdu.cn/bbs/</a>。</p>

<p>老爸在兴奋地给我介绍完他的光辉成果之后,提出了他的需求：他希望在“快拍成都”发完图片后，能够自动将图片保存到他在&#8221;拍客论坛&#8221;上的“个人相册”中。</p>

<!--more-->


<h2>调研</h2>

<p>简单研究了一个这个网站。明显这个网站自带的论坛是改的别人的开源系统，而“快拍成都”这个功能由于需求比较特别，能看出来是另外开发的另一套系统。这2套系统仅仅是将用户个人认证功能合在一起。并没有实现图片从“快拍成都”导入到“论坛相册”的功能。所以说，只能自己想办法实现了。要么全部手工弄一遍，要么写程序来做。</p>

<p>简单尝试了一下手工copy，发现完全不可行，主要是图片介绍的文字是用css来排版到一起的，如果单纯复制文字出来，文字的顺序会乱掉。所以只能编程搞了。</p>

<p>我们需要用编程实现的技术步骤很简单：</p>

<ol>
<li>模拟登陆到快拍成都。</li>
<li>从个人页面中点击“我的作品”，查看自己的作品列表。</li>
<li>将自己的作品列表中的每一个作品中，包括的所有图片及相对应的介绍文字都下载下来。</li>
<li>模拟登陆到&#8221;拍客论坛“中。</li>
<li>对于每一个作品，在论坛的相册中建立一个对应的相册，然后将对应的图片上传上去，并且配上对应的文字。</li>
</ol>


<h2>技术方案</h2>

<p>其实我最熟的语言是Java，但是如果用Java来做这件事情的话，我需要：</p>

<ol>
<li>了解登陆的Form，模拟浏览器进行登陆过程，然后保存登陆成功后的Cookie.</li>
<li>模拟各种网页请求，将对应的页面内容抓取过来。</li>
<li>解析html内容，用正则表达式匹配到图片的url和介绍文字的内容。然后把这些都保存下来。</li>
<li>了解拍客论坛这个bbs的相应Form的内容，模拟上传图片和介绍。</li>
</ol>


<p>这些步骤比较麻烦，而且有些做得好的网站，为了防止模拟登陆，通常在登陆前会执行一段混淆的javascript，把Form中的用户名和密码进行进一步的加工再POST到服务器上。考虑到这个网站是改的开源的bbs，可能会有相应的功能。那这样的话我还需要看js的代码，了解它又做了哪些事，把对应的逻辑用Java实现了。</p>

<p>每种语言都有它擅长的地方，对于网页来说，最方便处理的当然是Javascript了。如果用Javascript，上面的那些麻烦的步骤都可以省略掉了。于是最后，我写了2段Javascript来处理这个工作。</p>

<p>第一段Javascript，取出相应的图片url和介绍文字，生成第二个Javascript代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ps</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.lazyload&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ts</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h5&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">ps</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;original&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;h2&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">text</span><span class="p">());</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;document.getElementsByTagName(&quot;textarea&quot;)[&#39;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39;].value=&quot;\\&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;图片属性：&quot;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="nx">ts</span><span class="p">[</span><span class="nx">i</span><span class="o">*</span><span class="mi">2</span><span class="p">]).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;\\&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot; 图片描述：&quot;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="nx">ts</span><span class="p">[</span><span class="nx">i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">]).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;&quot;;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二段Javascript由第一段Js生成，用于在论坛相册中将对应图片的介绍文字填上。</p>

<p>有了上面的那段JS，我导照片的步骤如下：</p>

<ol>
<li>打开“快拍成都”的页面，找到需要导出的照片专题。</li>
<li>执行我上面提到的那段js，它会将需要下载的图片列出来，并且生成另一段js.</li>
<li>手工下载上面列出来的图片到本地。</li>
<li>在论坛的个人相册中，把这些图片选择上传上去，然后执行生成的另一段js，图片介绍就会自动填上了。</li>
</ol>


<p>本来上传图片这一步也应该自动完成的，但是我无法解决浏览器对于js的限制：浏览器不允许js帮用户选择本地文件。所以这一步只能用手动来完成。</p>

<p>导图片的工作最终在js脚本的协助下，花了1个半小时完成了。不过心里还是有点不爽，听zyc说可以用nodejs和jsdom来在命令行中模拟浏览器相关的功能，所以打算试试把这个工作用nodejs和jsdom来完成。正在研究中，完成后再写一篇总结的博客。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我们必须自学]]></title>
    <link href="http://blog.devtang.com/blog/2012/01/20/we-must-self-learning/"/>
    <updated>2012-01-20T23:53:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/01/20/we-must-self-learning</id>
    <content type="html"><![CDATA[<p>前两天看到一个文章，题名为<a href="http://www.aqee.net/all-programmers-are-self-taught/">《所有的程序员都是自学成才》</a>。当时没有什么特别的想法，只是觉得自己也确实是基本上靠自学来掌握新的知识的。但是今天在公车上没事好好想了一想，想明白了，原来对于程序员来说，只能自学才能成才。</p>

<!--more-->


<p>这个道理似乎有点奇怪，因为我们从小都是由老师教授新知识的。我自己也实验过，掌握同样的高中课本上的知识，自己自学的速度通常比老师讲授的速度要慢一倍的时间。即一个知识点，如果你自己要看2小时的书才能理解的话，有好的老师给你讲解的话，只需要一个小时就够了。所以，我一直希望在学习各种东西的时候都能去听一些课程，因为我认为这样节省了我学习的时间。</p>

<p>但是这个道理在程序员这一行行不通，为什么这么说呢？原因有2点：</p>

<ol>
<li>计算机编程相关的知识更新速度很快。同时，国内的IT类资料的翻译质量相当差，原创的优秀书籍也很少。所以，我们通常需要靠阅读英文才能掌握最新的资料。</li>
<li>计算机编程知识需要较多的专业知识积累和实践。</li>
</ol>


<p>如果一个培训机构有一个老师，他强到能够通过自己做一些项目来积累很多专业知识和实践，并且不断地从国外资料上学习最新的技术。那么这个人在企业里面会比在国内的培训机构更有施展自己能力的空间。国内的培训机构因为受众面的原因，基本上还是培养那种没有自学能力，只能做低级技术活的代码民工，所以对老师的技术要求不会那么高，自然也不会给出很诱人的薪水。但是企业就不一样了，企业需要不停地利用新技术来增强自己的产品竞争力，所以对于IT企业来说，产品的竞争就是人才的竞争，所以给优秀的人能够开出很高的薪水。</p>

<p>所以，我们不能期望从IT类培训机构中学习到最新的技术，一切只能通过我们自学。当然，自学之后在同行之间相互交流，对于我们的技术成长也是很有用的。</p>

<p>所以，各位同行，别想有人能够教你，一切还是靠自己吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2012/01/01/2011-summary/"/>
    <updated>2012-01-01T18:47:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/01/01/2011-summary</id>
    <content type="html"><![CDATA[<p>2011年的过去了，总结一下今年的成长和收获。</p>

<h3>流水账</h3>

<p>2011年是我完整工作的一年。不过这一年的工作也变动频繁。</p>

<p>首先是从1月份专门搞uvs，把uvs升级成ouvs。升级后增加了对于时间段搜索的支持。另一方面，周末在家做的topcoder component终于拿到了一次第一。这是一个做IBM Symphony插件的项目，因为之前在IBM实习一直做相关的东西，所以能够很快的做出来，那个东西tricky的东西很多，所以基本上没有人做。不过除我之外还有一个会做的，竞争就只是我和他之间了，不过最终我比他得分稍高一点，拿到了800$的第一名奖金，另外digital run的排名还多拿了100多$。一月份的时候把这个钱通过wireless
transfer转到了我的工商银行账号，然后马上换成了人民币。第一次尝到拿美元，还是很开心的。</p>

<!--more-->


<p>Topcoder比赛结果，<a href="http://community.topcoder.com/tc?module=CompContestDetails&amp;pj=30014856">来源</a>
<img src="http://blog.devtang.com/images/topcoder_component_rank.png"></p>

<p>3月份，oxygen离职去了知乎。其实我也明白微博的竞争似乎已经结束，某浪和某迅基本已经占位成功。在产品上没有新意，宣传上没有增加投入的情况下，要超过他们似乎是不可能的事。并且我也渐渐意识到微博本身的价值有些被过高估计，新浪的股票一路从50多涨到120多，现在又回归50多似乎说明了这一点。也是从3月份开始，我开始带实习生tianye了。这是我第一次带实习生，感觉自己很多细节上还是没有处理好，比起郭老大来说，有很多考虑不周的地方。不过至少我是尽力想做好这个mentor的。</p>

<p><img src="http://blog.devtang.com/images/sina_stock_2011.png"></p>

<p>也是从3月份开始，我开始跟着perfectworks做前端开发了。前端开发在春节就翻过一些书，有一些基本概念了。perfectworks在前端开发这块很牛，也很希望跟着他多学习一些东西。因为前端的tricky很多，如果没有牛人带的话，成长会很慢。后来果然在他的指导下，进步很快，没多久就开始写前端代码了，后来因为转组，没有再做前端，但js相关的开发经验在后来给我带来了挺多优势，比如做笔记的一些功能的时候，就是内嵌web浏览器来完成的，这里面就涉及挺多的js开发。由于有前端开发的经验，这部分的开发工作在我转到做笔记开发之后都派上了用场。</p>

<p>5月份做了一次组内的talk，讲java gc。这也是我们开始尝试把有道的技术分享的文化带到微博组。开始的分享都是大家先自己研究，然后做报告。做java
gc的分享也让我好好学习了一下java的内存回收技术。后来面试的时候发现，真正研究过这块的人还真是少之又少。从5月份开始，我们也尝试进行用scrum的方式进行项目开发。每2周一个sprint。后来回有道发现，在实施scrum开发实践方面，我们是贯彻的最彻底的。我们坚持了每天的站会，出牌方式的评估时间，严格按照scrum的要求来做项目计划和功能分解。每天会详细标明每个功能点的开发进度以及遇到的问题。后来了解到其他组的实践，都比我们山寨得多，比如有些组开发时间是由产品经理定的，有些组没有站会，有些组根本没有详细做功能分解，更别说每天更新status了。这一点也让我认识到微博团队是一个很优秀的团队。</p>

<p>6月份，我经历了很大的变动,最终选择回到有道，在选组上，river给了我们很多帮助，各组的leader的热情也让我们受宠若惊。一开始我是坚定想选择infra组，做搜索的底层开发的，因为这样我的工作也算是有延续的。但是后来了解到ouvs开发已经基本完毕，只剩下一些bug fix或者小修小改的事情，我就感觉没那么有热情了。加上jwh说云存储这边需要iOS开发的人。正好当时xc把他的mac bookpro转让给了我，让我也有机会去了解iphone开发。其实从去年就觉得移动开发这块会是一个趋势，可能造就很多伟大的公司和产品。当时就买了android开发相关的书籍在看。所以自己觉得这正好是一个机会，可以转到移动开发这个领域。在决定之前，自己还是犹豫了好久，因为在后端做了一年多了，多少也积累了不少经验。转到移动开发，又是一个全新的开始，一切又需要重头做起。不过最终还是觉得应该乘年轻做自己喜欢做的事情，加上自己看好这个领域，所以就决定去云存储组做有道笔记的开发了。</p>

<p>7月份初，微博的工作交接完毕，我专心开始学习iOS开发。其实公司给我的时间不多，差不多只有2周的时间学习，中间还要处理一些交接的遗留问题以及iphone版javascript相关的bug。对，我差不多刚进去就开始改js的bug了。那段时间是我最辛苦的一段时间，因为组内也没有对iOS开发特别熟的人，我只有自己学习，而公司内部的iOS交流气氛又不太好，各组的iOS开发同事交流不多。我基本上把周末和晚上的时间都用来学习iOS开发了。半个月之后，基本能够上手写代码了。之后做了2次关于iphone开发的talk,拉huangdx做了一次facebook320的Talk,给测试的同事做了一次iphone模拟器使用的talk,另外也组织建了一个iOS开发的泡泡群，拉上了网站部的同事来一起交流。基本上有一个交流的环境了，不过大家交流的习惯还不怎么强，所以群里面很多时候都比较冷清，这一点使我比较苦恼。</p>

<p>9月初，完成了有道笔记手写和涂鸦功能的开发。中间也被拉去开发了有道词典的图片广告功能。9月底开始思考如何做ipad版笔记。</p>

<p>10月份开始做ipad版的开发，最终于12月初提交上线。上线后排名一路上升，最高达到了效率类第一名的位置。现在一直稳定在效率类前5名。</p>

<p>2011-12-20的app store截图：<img src="http://blog.devtang.com/images/ynote_ipad_rank_2011-12-20.png"></p>

<p>10月份做了一个个人项目，图书馆借书系统的改造。把借书改成分布式的，每个人都要承担图书的保管任务，这样就不会丢书了。虽然只用了3天时间，但是能在工作时间做个人项目感觉还是挺爽的。</p>

<p>12月份开始带第二个实习生maojj了。希望能把他带好。</p>

<h3>主要工作</h3>

<p>总结起来，自己这一年主要的工作是：</p>

<ul>
<li>1月-3月 微博搜索功能开发和维护</li>
<li>4月-6月 微博前端开发</li>
<li>7月-12月 有道笔记iphone,ipad版开发</li>
</ul>


<h3>技术成长</h3>

<p>今年是自己技术语言扩张最快的一年，学习并掌握了：</p>

<ul>
<li>javascript、objectiveC 2种新的开发语言。</li>
<li>对于shell脚本的掌握也有提升。</li>
<li>git版本管理。基本可以用git来做代码管理了。</li>
<li>正在看python语言，打算进一步提高自己的脚本能力。</li>
</ul>


<p>值得一提的是，由于iphone开发的中文资料太少，今年接触和阅读了大量英文书和视频。在听完stanford的iphone开发课程和苹果的WWDC2011视频后，英语的听力水平提高不少。iphone开发的各种问题，也基本只能在stackoverflow.com上找到解答，所以现在已经很习惯直接阅读英文资料了。</p>

<h3>读书</h3>

<p>这一年，我也看了很多书，包括：</p>

<ul>
<li>后端开发的各种书：《java程序员职场全攻略》等</li>
<li>前端开发的各种书：《ppk谈javascript》, 《Professional Javascript for Web Developers》等</li>
<li>iphone开发的各种书：《iphone3开发基础教程》《iphone开发秘籍》、《iOS4 in Action》等</li>
<li>工作效率类的书：《git权威指南》，《鸟哥的linux私房菜》，《vim book》，《番茄工作法》等</li>
<li>传记类：《乔布斯传》，《编程人生》，《黑客与画家》，《软件随想录》</li>
</ul>


<h3>变化</h3>

<p>这一年感觉自己比较大的变化：</p>

<ul>
<li>在买了mac book后，由于mac book下的游戏比较少，所以更加注重学习脚本和工具了。脚本能力有不少长进。</li>
<li>在做完图书馆个人项目后，更加强调执行力了。推动了公司内部iOS开发的交流。也更加注意通过写博客或wiki来总结知识。</li>
<li>感觉身体由于久坐更差了，脖子和肩膀，还有手腕都常常有疼痛现象。所以开始注意加强锻炼了。除了早上打五禽戏，晚上周三会去游泳。</li>
</ul>


<h3>个人Milestone</h3>

<ul>
<li>2011-04-07 开始维护自己的原创博客, 原本在<a href="http://tangqiaoboy.blog.163.com">网易博客</a>上,2011-11-05购买了个人域名devtang.com, 12月份将博客移动到github下，地址是: <a href="http://blog.devtang.com">http://blog.devtang.com</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下的top命令]]></title>
    <link href="http://blog.devtang.com/blog/2011/12/27/mac-top/"/>
    <updated>2011-12-27T13:30:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2011/12/27/mac-top</id>
    <content type="html"><![CDATA[<p>以前只是在linux机器上使用top命令。常用的快键键是:</p>

<ul>
<li>p键 - 按cpu使用率排序</li>
<li>m键 - 按内存使用量排序</li>
</ul>


<p>这2个快捷键在mac上都不一样。对应的是，先输入o，然后输入cpu则按cpu使用量排序，输入rsize则按内存使用量排序。</p>

<p>如果记不清了，可以在top的界面上按?，在弹出的帮助界面中即可看到。</p>
]]></content>
  </entry>
  
</feed>
