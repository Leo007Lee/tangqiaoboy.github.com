<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2012-09-15T17:07:58+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈我的创业感受]]></title>
    <link href="http://blog.devtang.com/blog/2012/09/15/talk-about-my-startup-exp/"/>
    <updated>2012-09-15T13:50:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/09/15/talk-about-my-startup-exp</id>
    <content type="html"><![CDATA[<p>5个程序员，3个多月时间，30多万行代码，1000个bug，只为打造卓越产品。</p>

<h2>开发历程</h2>

<p>先简单介绍一下产品。我们的产品叫“<a href="http://fenbi.com">粉笔网</a>”，这是一个新颖的学习社区。我们公司的创始人是前网易高管<a href="http://baike.baidu.com/view/2264197.htm">李勇</a>。我们团队从4月份开始筹备，5月份开始工作，整个开发历经3个多月，其中网站于8月28号顺利上线，<a href="http://itunes.apple.com/cn/app/fen-bi-wang/id551540593">iPhone客户端</a>和<a href="http://cdn.fen.bi/sc/app/fenbi.apk">Android客户端</a>于9月8日顺利通过审核上线。</p>

<!-- more -->


<p>对于互联网行业的功能开发，项目延期是很常见的，但是我们的程序员虽然只有5个人（后台2人，Web前端1人，iPhone端1人，Android端1人），但整个项目（包括Web网站，iPhone端和Android端）都顺利地在3个多月完成了开发和上线。我觉得这里面主要得益于团队成员之前默契的配合，以及用scrum让我们的整个工作安全紧张有序，但是又不慌乱。</p>

<p>在这三个多月里，我们制定了紧张的时间安排。我们一开始就知道任务很重，所以，我们定制了合理的加班计划。简单来说，就是6乘11，即工作6天，每天11个小时（早上10点到晚上9点），每个月的最后一个周末，我们可以双休。在工作时间上，我们每周的工作时间是66个小时，比正常的每周40个小时的工作时间，多了50%，这基本上达到我们的精力极限了。</p>

<p>但加班并不是我们期望的长期的工作方式，所以在9月28号产品正式上线后，我们即恢复了早10晚7的正常每天8小时的工作时间。</p>

<p>以下是我们整个项目的进展图，我们每周一个sprint，每3周一个Milestone，需求在中间经历过一些变动，但都是在对项目进度的影响在可控的范围内。</p>

<p><img src="http://blog.devtang.com/images/fenbi_dev.png"></p>

<h2>代码总结</h2>

<p>回顾我们团队这3个多月的代码贡献，可以用惊人来形容。除去第三方的开源库依赖，后台写了将近10万行代码，前端8万行代码，iPhone端7万行，android端7万行。一共30多万行代码。</p>

<p>以下是用<a href="http://gitstats.sourceforge.net/">gitstat软件</a>统计出来的代码增长图，首先是web前端和后台，它们在一个项目里面：
<img src="http://blog.devtang.com/images/fenbi_web_commit_log.jpeg"></p>

<p>然后是iPhone端：
<img src="http://blog.devtang.com/images/fenbi_iphone_commit_log.jpeg"></p>

<h2>创业感受</h2>

<p>我在经历了2年大公司实习，2年半大公司工作后，现在在这样一个创业期的小公司工作。我感觉到最明显的差别是工作效率上的。我们的团队很小，所以我们的交流沟通很多时候都只需要扭头喊一嗓子就行了，对于一些架构设计的讨论，很多时候都是在饭桌上以及午饭后晒太阳时进行的。我们没有各种设计评审会议，接受合理的需求变动和改进，最大限度地保证产品按期完成而不是延期。</p>

<p>在8月28号Web版(<a href="http://fenbi.com">http://fenbi.com</a>)上线后，我们保持了每周一个迭代更新的速度。每周一个scrum相当刺激，除去开scrum meeting和上线的时间，留给我们的开发和测试改bug的时间只有4天左右。大家每天都非常有活力地工作，但是，我们却保证了严格的code review制度，所有提交都会汇集到gerrit上进行code review，通过之后再由gerrit自动merge到工作分支上。</p>

<p>很多人说，创业公司每个人都是多面手，但我们的团队更强调每个人都能精通一方面，成为某一方面的专家。所以，我们会抽时间去一起阅读redis代码，读amazon关于dynamo的论文。我们希望我们的技术成长能够跟上公司的成长速度，在各方面都积累。只有这样，当有一天，由于用户大量增长带来服务器访问压力时，我们能够从容地提出解决方案，不至于象京东那样搞个活动就把系统搞挂了。</p>

<p>我们也把大公司的好习惯带进了创业公司，比如我们强调wiki的撰写。wiki相比文档来说要敏捷很多，我们只写别人需要看的和重要的信息。比如我们对于系统的所有接口设计，代码规范，美术设计流程，上线流程，部署方案，每次scrum的总结等。这样一个新人进来之后，他很容易从wiki上找到他需要的信息而不是靠我们口口相传。又比如我们会做code review和持续集成测试，客户端会做daily build，这些都是非常规范的。</p>

<h2>总结</h2>

<p>回想这几个月的经历，感觉最大的收获是能够和一帮志趣相投的人一起快乐的工作。我想，创业的风险是相当大的，如果我们最后成功了，我们将摆脱基本的财务压力，追求更高的理想，但即使这个创业项目最终失败了，我相信我们的团队也能够凝聚起来，迎接下一份挑战。</p>

<h2>题外话&#8211;招聘</h2>

<p>嗯，是的，这部分就是一个广告。我们希望有更多的产品、技术同事加入我们。</p>

<h3>我们能提供的</h3>

<p>由于有风险投资，我们的创业一点也不苦逼。我们的工作地点远离码农离散地中关村和五道口，座落在高富帅云集的CBD朝外SOHO，我最大的体会是即使是上下班高峰期，这里的10号线也常常也很宽松，不会象五道口那样使劲挤还挤不上去。我们的技术配27寸的iMac（也可选择21.5的iMac加双显），我们有食品间提供免费的可乐、加多宝，茶叶，水果。我们也有每周一次的羽毛球俱乐部。中午吃完饭觉得困，我们有4个沙发加一个躺椅可供休息。</p>

<p>我们的公司才刚刚成立不到半年，产品上线后反馈很好，我们也不缺资金。这个时候加入我们，你可以得到不输于一线互联网公司的待遇，加上一个在回报上无限可能的期权。我们的初始技术团队都有过多年大公司的工作经验，所以在这里你可以学到大公司的好的一面（包括规范的scrum开发，code review，wiki, 代码规范和追求代码质量），又可以享受创业公司的灵活（几乎没有会议，高效地沟通）。</p>

<h3>我们的要求</h3>

<p>由于我们整个团队有极强的代码洁癖和编码热情，我们也希望找到符合团队气质的人。我们不希望招那种把编程仅仅当做一份工作的人，因为我们认为，兴趣是最好的老师，对编程没有兴趣的人，是不可能把工作做到卓越的。</p>

<p>所以，如果你和我们一样，对编程这件事情上抱有热情的话，希望你能邮件联系我们的Tech Leader郭常圳: gcz(at)fenbi.com 。如果你能附上一段你放在github上的开源代码，会让我们更加充分了解你，当然如果没有也没关系。我们相信，社区代码是价值，商业代码也是价值。</p>

<p>我个人主要负责粉笔网iPhone端的开发，我非常希望能够找到一个iOS开发的同事能够相互交流和学习。我不期望你是一个iOS大牛，甚至你现在完全不会iOS开发也没关系，但是希望我们能够一起成长为iOS开发的专家。</p>

<p>另外，我们对于Linux系统管理都不太懂，特别希望能找到一个系统管理高手加入我们团队，我们乐意向你学习。同时，如果你对学习开发有兴趣，那就太好不过了，我们的目标是DevOps。</p>

<p>我们也欢迎实习生申请加入，但要求每周至少全职实习4天。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用脚本来简化iOS美术同学的工作]]></title>
    <link href="http://blog.devtang.com/blog/2012/08/26/use-script-to-power-up-ui-work/"/>
    <updated>2012-08-26T20:34:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/08/26/use-script-to-power-up-ui-work</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>我们知道，在iOS开发中，为了使我们的app能够同时支持iPhone的Retina屏幕和普通屏幕，美术同学需要对UI设计稿中的每个元素进行2次切图。苹果要求对图片元素的命名分别为 name.png 和 name@2x.png，带@2x的表示是Retina屏幕的贴图，不带@2x的同名文件为普通屏幕的贴图。</p>

<p>我在开发的时候发现很难要求美术同学按照开发的要求来对图片命名。她们通常对于切图的命名是例如 <em>登录按钮大.png</em> ，<em>登录按钮小.png</em>, <em>登录按钮按下大.png</em> <em>登录按钮按下小.png</em> 这样的形式。于是，对这些文件按照苹果的要求进行重命名就成了我这个码农的一个体力活。</p>

<!-- more -->


<h2>解决方案</h2>

<p>有什么方法能减少开发和美术的体力活呢？想到因为 name@2x.png 的图片是 name.png 图片的2整倍，所以，我们完全可以让美术只切@2x的大图，而我们使用脚本来生成小图。于是我写了下面这样的一个脚本，我只需要将所有的大图按照类似 name-1@2x.png , name-2@2x.png 方式命名，然后脚本就会自动帮我生成对应的名为 name-1.png 和 name-2.png的小图。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#! /bin/bash</span>
</span><span class='line'><span class="cp"># File name : convertImage.sh</span>
</span><span class='line'><span class="cp"># Author: Tang Qiao</span>
</span><span class='line'><span class="cp"># </span>
</span><span class='line'>
</span><span class='line'><span class="cp"># print usage</span>
</span><span class='line'><span class="n">usage</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cat</span> <span class="o">&lt;&lt;</span> <span class="n">EOF</span>
</span><span class='line'>    <span class="nl">Usage:</span>
</span><span class='line'>        <span class="n">convertImage</span><span class="p">.</span><span class="n">sh</span> <span class="o">&lt;</span><span class="n">src</span> <span class="n">directory</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">dest</span> <span class="n">directory</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">EOF</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">[</span> <span class="n">$</span><span class="err">#</span> <span class="o">-</span><span class="n">ne</span> <span class="mi">2</span> <span class="p">];</span> <span class="n">then</span>
</span><span class='line'>    <span class="n">usage</span>
</span><span class='line'>    <span class="n">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="n">SRC_DIR</span><span class="o">=</span><span class="n">$1</span>
</span><span class='line'><span class="n">DEST_DIR</span><span class="o">=</span><span class="n">$2</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># check src dir</span>
</span><span class='line'><span class="k">if</span> <span class="p">[</span> <span class="o">!</span> <span class="o">-</span><span class="n">d</span> <span class="n">$SRC_DIR</span> <span class="p">];</span> <span class="n">then</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s">&quot;src directory not exist: $SRC_DIR&quot;</span>
</span><span class='line'>    <span class="n">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># check dest dir</span>
</span><span class='line'><span class="k">if</span> <span class="p">[</span> <span class="o">!</span> <span class="o">-</span><span class="n">d</span> <span class="n">$DEST_DIR</span> <span class="p">];</span> <span class="n">then</span>
</span><span class='line'>    <span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="n">$DEST_DIR</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">src_file</span> <span class="k">in</span> <span class="n">$SRC_DIR</span><span class="o">/*</span><span class="p">.</span><span class="o">*</span> <span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s">&quot;process file name: $src_file&quot;</span>
</span><span class='line'><span class="cp">    # 获得去掉文件名的纯路径</span>
</span><span class='line'>    <span class="n">src_path</span><span class="o">=</span><span class="err">`</span><span class="n">dirname</span> <span class="n">$src_file</span><span class="err">`</span>
</span><span class='line'><span class="cp">    # 获得去掉路径的纯文件名</span>
</span><span class='line'>    <span class="n">filename</span><span class="o">=</span><span class="err">`</span><span class="n">basename</span> <span class="n">$src_file</span><span class="err">`</span>
</span><span class='line'><span class="cp">    # 获得文件名字(不包括扩展名)</span>
</span><span class='line'>    <span class="n">name</span><span class="o">=</span><span class="err">`</span><span class="n">echo</span> <span class="s">&quot;$filename&quot;</span> <span class="o">|</span> <span class="n">cut</span> <span class="o">-</span><span class="n">d</span><span class="sc">&#39;.&#39;</span> <span class="o">-</span><span class="n">f1</span><span class="err">`</span>
</span><span class='line'><span class="cp">    # remove @2x in filename if there is</span>
</span><span class='line'>    <span class="n">name</span><span class="o">=</span><span class="err">`</span><span class="n">echo</span> <span class="s">&quot;$name&quot;</span> <span class="o">|</span> <span class="n">cut</span> <span class="o">-</span><span class="n">d</span><span class="s">&quot;@&quot;</span> <span class="o">-</span><span class="n">f1</span><span class="err">`</span>
</span><span class='line'><span class="cp">    # 获得文件扩展名</span>
</span><span class='line'>    <span class="n">extension</span><span class="o">=</span><span class="err">`</span><span class="n">echo</span> <span class="s">&quot;$filename&quot;</span> <span class="o">|</span> <span class="n">cut</span> <span class="o">-</span><span class="n">d</span><span class="sc">&#39;.&#39;</span> <span class="o">-</span><span class="n">f2</span><span class="err">`</span>
</span><span class='line'>    <span class="n">dest_file</span><span class="o">=</span><span class="s">&quot;$DEST_DIR/${name}.${extension}&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">convert</span> <span class="n">$src_file</span> <span class="o">-</span><span class="n">resize</span> <span class="mi">50</span><span class="o">%</span> <span class="n">$dest_file</span>
</span><span class='line'><span class="n">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>脚本使用方法：将以上代码另存为 convertImage.sh，然后用以下方式调用此脚本，即可将源文件夹中所有以@2x结尾的图片文件转成一半大小的、去掉@2x的小图片。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>convertImage.sh 源文件夹 目标文件夹
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>使用以上脚本后，美术只用切一半的图了。因为给我的切图少了，所以我可以更加方便地找到对应的切图了。另外，我也减少了一半对切图进行重命名的工作。</p>

<h2>Tips</h2>

<h3>imagemagick</h3>

<p>如果你运行以上脚本失败，请先用brew 或 port安装 imagemagick。imagemagick是一个相当强大的图象处理库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install imagemagick
</span></code></pre></td></tr></table></div></figure>


<h3>检查图片</h3>

<p>在使用该脚本一段时间后，我发现美术同学给我的大图的长宽常常不是偶数，这样造成缩小的图就不是原图的整倍数了。为了方便我检查美术给我的图片是否宽高都是偶数，我写了如下检查的脚本，这样就可以检查图片的宽高是否符合要求了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="c"># File name : checkImageSize.sh</span>
</span><span class='line'><span class="c"># Author: Tang Qiao</span>
</span><span class='line'><span class="c"># </span>
</span><span class='line'>
</span><span class='line'>usage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    cat <span class="s">&lt;&lt;EOF</span>
</span><span class='line'><span class="s">    Usage:</span>
</span><span class='line'><span class="s">        checkImageSize.sh &lt;directory&gt;</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-ne 1 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>usage
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">SRC_DIR</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>
</span><span class='line'><span class="c"># check src dir</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="nv">$SRC_DIR</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;src directory not exist: $SRC_DIR&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>src_file in <span class="nv">$SRC_DIR</span>/*.png ; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;process file name: $src_file&quot;</span>
</span><span class='line'>    <span class="nv">width</span><span class="o">=</span><span class="sb">`</span>identify -format <span class="s2">&quot;%[fx:w]&quot;</span> <span class="nv">$src_file</span><span class="sb">`</span>
</span><span class='line'>    <span class="nv">height</span><span class="o">=</span><span class="sb">`</span>identify -format <span class="s2">&quot;%[fx:h]&quot;</span> <span class="nv">$src_file</span><span class="sb">`</span>
</span><span class='line'>    <span class="c"># check width</span>
</span><span class='line'>    <span class="nv">modValue</span><span class="o">=</span><span class="sb">`</span>awk -v <span class="nv">a</span><span class="o">=</span><span class="nv">$width</span> <span class="s1">&#39;BEGIN{printf &quot;%d&quot;, a % 2}&#39;</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$modValue&quot;</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">       </span><span class="nb">echo</span> <span class="s2">&quot;[Error], the file $src_file width is $width&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>    <span class="c"># check height</span>
</span><span class='line'>    <span class="nv">modValue</span><span class="o">=</span><span class="sb">`</span>awk -v <span class="nv">a</span><span class="o">=</span><span class="nv">$height</span> <span class="s1">&#39;BEGIN{printf &quot;%d&quot;, a % 2}&#39;</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$modValue&quot;</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">       </span><span class="nb">echo</span> <span class="s2">&quot;[Error], the file $src_file height is $height&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<h3>问题</h3>

<p>我在使用以上方法时，发现由于imagemagick压缩比太高，生成的图片如果象素太小，它就会生成索引图片，而不知道何故，少量索引图片在iPhone 3GS上会显示出一条黑线在图片底部。对于这些图片，用photoshop将其模式改成RGB颜色即可。如下所示：</p>

<p><img src="http://blog.devtang.com/images/ui-script-tips.png" title="" ></p>

<p>用脚本代替体力活是一件很happy的事情，因为你可以用省下来的时间多做一些有意思的事情了。</p>

<p>Have fun !</p>

<h3>后记</h3>

<p>在发表完这篇文章后，得到了很多反馈。</p>

<p>其中<a href="http://weibo.com/wangyihan01">李祎</a>同学提到了一个iOS独立开发者的解决思路：<a href="http://kevincao.com/2011/08/prepare-png-for-iphone-app/">http://kevincao.com/2011/08/prepare-png-for-iphone-app/</a> ，我感觉该博客中提到的方法，或许更加适合美术同学，因为整个操作都是图形化的。所以附在这里，希望对大家有用。</p>

<p>另外，网易杭研院的<a href="http://weibo.com/myerlang">施强</a>同学推荐了一个用于缩图的软件:<a href="http://www.xnconvert.com/">http://www.xnconvert.com/</a> ，据说也能很好的解决以上问题。一并在此推荐给大家作为参考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C的新特性]]></title>
    <link href="http://blog.devtang.com/blog/2012/08/05/use-modern-objective-c/"/>
    <updated>2012-08-05T21:50:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/08/05/use-modern-objective-c</id>
    <content type="html"><![CDATA[<p>苹果在今年的WWDC2012大会上介绍了大量Objective-C的新特性，能够帮助iOS程序员更加高效地编写代码。在不久前更新的XCode4.4版本中，这些新特性已经可以使用了。让我们看看这些新特性有哪些：</p>

<!-- more -->


<h2>Object Literals</h2>

<p>这个是我认为最赞的一个改进。Object Literals允许你方便地定义数字、数组和字典对象。这个功能类似于java5提供的auto boxing功能。这虽然是一个语法糖，但我认为对提高写代码效率帮助很大。让我们先来看看以前定义数字、数组和字典对象的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span> <span class="n">number</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;one&quot;</span><span class="p">,</span> <span class="s">@&quot;two&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="s">@&quot;value1&quot;</span><span class="p">,</span> <span class="s">@&quot;key1&quot;</span><span class="p">,</span> <span class="s">@&quot;value2&quot;</span><span class="p">,</span> <span class="s">@&quot;key2&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很恶心？现在以上代码可以简化成以下形式，注意到没有，不用再在参数的最后加恶心的nil了，字典的key和value也不再是倒着先写value,再写key了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span> <span class="n">number</span> <span class="o">=</span> <span class="err">@</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;one&quot;</span><span class="p">,</span> <span class="s">@&quot;two&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;key1&quot;</span><span class="o">:</span><span class="s">@&quot;value1&quot;</span><span class="p">,</span> <span class="s">@&quot;key2&quot;</span><span class="o">:</span><span class="s">@&quot;value2&quot;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多的示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="c1">// 整数</span>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortyTwo</span> <span class="o">=</span> <span class="err">@</span><span class="mi">42</span><span class="p">;</span>             <span class="c1">// 等价于 [NSNumber numberWithInt:42]</span>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortyTwoUnsigned</span> <span class="o">=</span> <span class="err">@</span><span class="mi">42</span><span class="n">U</span><span class="p">;</span>    <span class="c1">// 等价于 [NSNumber numberWithUnsignedInt:42U]</span>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortyTwoLong</span> <span class="o">=</span> <span class="err">@</span><span class="mi">42L</span><span class="p">;</span>        <span class="c1">// 等价于 [NSNumber numberWithLong:42L]</span>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortyTwoLongLong</span> <span class="o">=</span> <span class="err">@</span><span class="mi">42L</span><span class="n">L</span><span class="p">;</span>   <span class="c1">// 等价于 [NSNumber numberWithLongLong:42LL]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 浮点数</span>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span><span class="n">piFloat</span> <span class="o">=</span> <span class="err">@</span><span class="mf">3.141592654F</span><span class="p">;</span>    <span class="c1">// 等价于 [NSNumber numberWithFloat:3.141592654F]</span>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span><span class="n">piDouble</span> <span class="o">=</span> <span class="err">@</span><span class="mf">3.1415926535</span><span class="p">;</span>   <span class="c1">// 等价于 [NSNumber numberWithDouble:3.1415926535]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 布尔值</span>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span><span class="n">yesNumber</span> <span class="o">=</span> <span class="err">@</span><span class="n">YES</span><span class="p">;</span>           <span class="c1">// 等价于 [NSNumber numberWithBool:YES]</span>
</span><span class='line'>  <span class="n">NSNumber</span> <span class="o">*</span><span class="n">noNumber</span> <span class="o">=</span> <span class="err">@</span><span class="n">NO</span><span class="p">;</span>             <span class="c1">// 等价于 [NSNumber numberWithBool:NO]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 空数组</span>
</span><span class='line'>  <span class="n">NSArray</span> <span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[];</span>                <span class="c1">// 等价于 [NSArray array]</span>
</span><span class='line'>  <span class="c1">// 空的字典</span>
</span><span class='line'>  <span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="err">@</span><span class="p">{};</span>            <span class="c1">// 等价于 [NSDictionary dictionary]</span>
</span></code></pre></td></tr></table></div></figure>


<p>怎么样？是不是简单多了？而且，为了方便你的旧代码迁移到新的写法，xcode专门还提供了转换工具，在xcode4.4中，选择 Edit -> Refactor -> Convert to Modern Objective-C Syntax即可。如下所示：
<img src="http://blog.devtang.com/images/modern-objc-convert-tool.png"></p>

<h2>局部的函数调用不用前向申明</h2>

<p>这虽然是一个挺小的改进，但是很贴心。假如我们在一个源文件中有2个函数：分别名为foo 和 bar，其中foo的定义在bar前面。那如果在foo函数内部直接调用bar，编译器会报警告说找不到函数bar。</p>

<p>而现在，我们可以随意地在源文件中放置函数bar的位置。编译器在找不到bar时，会再源码后面找，如果找到了bar，就不会报错了。</p>

<h2>带有类型的enum</h2>

<p>现在我们可以定义enum是无符号整数还是整数，这样编译器会更加智能的做类型检查。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">TableViewCellType</span> <span class="o">:</span> <span class="n">NSInteger</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">TableViewCellTypeQueue</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TableViewCellTypeNewFans</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TableViewCellTypeUserInfo</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TableViewCellTypeOrganization</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TableViewCellTypeFeedback</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TableViewCellTypeRateApp</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TableViewCellTypeRecommendation</span><span class="p">,</span>
</span><span class='line'>    <span class="n">TableViewCellTypeLogout</span>
</span><span class='line'><span class="p">}</span><span class="n">TableViewCellType</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>默认生成@synthesize代码</h2>

<p>以前写完一个诸如 @property (nonatomic, strong) NSString * username; 变量定义后，马上得转到 .m文件中去增加相应的 @synthesize username = _username; 代码。</p>

<p>现在，编辑器发现你没有写 @synthesize时，会自动帮你加上这一行。这同时在另一方面，起到了鼓励大家使用以下划线开头的变量名作为成员变量名的作用。</p>

<p>当然，为了向下兼容，如果你的程序里面已经有了 @property 变量对应的 @synthesize 代码时，编辑器就不会自动帮你增加这个代码了。</p>

<p>另外有2种特殊情况下，即使你没有写 @synthesize ，编辑器也不会自动帮你加上，这2种情况是：</p>

<ol>
<li>你同时提供了该property的setter 和 getter方法。</li>
<li>你的这个property是 readonly 的。</li>
</ol>


<h2>遍历元素</h2>

<p>你是如何遍历数组的元素的？通常我们有2种做法，一种是用 for in，另一种是用一个变量来循环数组下标。如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span> <span class="n">lines</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span> <span class="n">line</span> <span class="k">in</span> <span class="n">lines</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lines</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">lines</span> <span class="nl">objectAtIndex:</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是字典，遍历的代码就要稍微复杂一点了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="err">…</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span> <span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="n">dict</span> <span class="n">allKeys</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span> <span class="n">key</span> <span class="k">in</span> <span class="n">keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">dict</span> <span class="nl">objectForKey:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>现在，xcode对于iOS4.0以上的系统，支持用block来遍历元素了。用block来遍历字典可以简化代码的编写，建议大家都使用上这个新特性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">lines</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">_urlArguments</span> <span class="nl">enumerateKeysAndObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">key</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Subscripting Methods</h2>

<p>这个新特性在WWDC2012的视频中提到了，但是在XCode4.4中没有实现。也是一个很体贴的语法糖，它允许你用中括号来代替原本的方法来获取和设置数组元素。</p>

<p>简单来说，以前的 [array objectAtIndex:idx] 和 [array replaceObjectAtIndex:idx withObject:obj]，可以直接写作 array[idx] 和 array[idx] = obj了。其实这个特性在很多高级语言中都实现了，只是Objective-C生于80年代，一直没改进这个。</p>

<p>这个改进同样对NSDictionary有效。甚至，你也可以给你自己的类提供中括号操作符对应的方法。具体做法是实现如下两个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">objectAtIndexedSubscript:</span><span class="p">(</span><span class="n">NSUInterger</span><span class="p">)</span><span class="nv">idx</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span> <span class="nf">atIndexedSubscript:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">idx</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>期等XCode4.5中能够使用上这个特性。</p>

<h2>Tips</h2>

<p>上面提到了不用写 @synthesize 了，那原本写的那么多 @synthesize 怎么办呢？作为有代码洁癖的我很想把它们删掉，但怎么删呢？一个文件一个文件打开，然后行一行删掉吗？放心，苹果已经帮我们想了解决方案。在WWDC2012 Session 400 Developer Tools Kickoff 中，苹果介绍了具体做法。步骤如下：</p>

<ol>
<li>首先使用区域查找，因为一般项目都会依赖第三方的开源库，我们可不想更改别人的库，所以我们只查找我们库中的文件，如下图所示：</li>
</ol>


<p><img src="http://blog.devtang.com/images/modern-objc-remove-synthesize-1.png"></p>

<ol>
<li>接着我们用正则匹配，找到以 @synthesize开头，后面接着是 var = _var; 格式的行。插入正则表达式很简单，直接点击查找输入框左边的放大镜，选择“insert pattern&#8221;，苹果就会把常见的正则表达式都列出来，你直接选择就可以了，非常方便。如下图所示：</li>
</ol>


<p><img src="http://blog.devtang.com/images/modern-objc-insert-pattern.png"></p>

<p>在插入好合适的正则表达式后，我们按回车，就可以搜索到结果。</p>

<p><img src="http://blog.devtang.com/images/modern-objc-search-result.png"></p>

<ol>
<li>我们点击搜索界面的preview按钮，查看替换效果，可以看到，对于我们测试代码，XCode生成的预览图已经正确地当对应代码删掉了。然后我们就可以点击替换，去掉所有的 @synthesize 代码了。</li>
</ol>


<p><img src="http://blog.devtang.com/images/modern-objc-replace-review.png"></p>

<p>在下载完XCode4.4后，我就把我们的工程代码都转换成了新特性的语法。在转换后，我发现原本25000行的代码少了将近1000行。心里还是很开心的，因为又可以少写一些体力活类型的代码了。</p>

<p>还是那句话，希望这些新特性能够让大家玩得开心。</p>

<h3>参考资料</h3>

<ul>
<li>LLVM官方网站比较全面地介绍了 Object Literal： <a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html">http://clang.llvm.org/docs/ObjectiveCLiterals.html</a></li>
<li>WWDC2012 Session 400 Developer Tools Kickoff</li>
<li>WWDC2012 Session 405 Modern Objective-C</li>
<li>WWDC2012 Session 413 Migrating to Modern Objective-C</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[封装同步的UIActionSheet]]></title>
    <link href="http://blog.devtang.com/blog/2012/06/24/enhance-uiactionsheet/"/>
    <updated>2012-06-24T21:51:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/06/24/enhance-uiactionsheet</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>做iOS开发的同学想必都用过UIActionSheet。UIActionSheet可以弹出一个选择列表，让用户选择列表中的某一项操作。使用UIActionSheet非常简单，以下是一个简单的示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">someButtonClicked</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIActionSheet</span> <span class="o">*</span> <span class="n">sheet</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIActionSheet</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="nb">nil</span> <span class="nl">delegate:</span><span class="n">self</span> <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;ddd&quot;</span> <span class="nl">destructiveButtonTitle:</span><span class="s">@&quot;aaa&quot;</span> <span class="nl">otherButtonTitles:</span><span class="s">@&quot;bbb&quot;</span><span class="p">,</span> <span class="s">@&quot;ccc&quot;</span><span class="p">,</span> <span class="s">@&quot;ddd&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">sheet</span><span class="p">.</span><span class="n">destructiveButtonIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">sheet</span> <span class="nl">showInView:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">actionSheet:</span><span class="p">(</span><span class="n">UIActionSheet</span> <span class="o">*</span><span class="p">)</span><span class="nv">actionSheet</span> <span class="nf">clickedButtonAtIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">buttonIndex</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;result = %d&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但我个人在使用时，感觉UIActionSheet有以下2个问题：</p>

<!-- more -->


<ol>
<li><p>UIActionSheet是一个异步的调用，需要设置delegate来获得用户选择的结果。这么小粒度的选择界面，把调用显示和回调方法分开写在2个方法中，使得原本简单的逻辑复杂了。虽然也不会复杂到哪儿去，但是每次调用UIActionSheet就需要另外写一个delegate回调方法，让我觉得这是一个过度的设计。如果UIActionSheet在弹出界面时，是一个同步调用，在调用完 showInView方法后，就能获得用户的点击结果，那该多方便。</p></li>
<li><p>UIActionSheet默认的init方法比较恶心。cancel Button其实默认是在最底部的，但是在init方法中是放在第一个参数。destructive默认是列表的第一个。如果你需要的界面不是将destructive button放在第一个，就需要再指定一次destructiveButtonIndex，而这个index的下标，是忽略cancel button来数的，虽说也不是很麻烦，但是心里感觉比较恶心。</p></li>
</ol>


<h2>改造UIActionSheet</h2>

<p>基于上面2个原因，我想把UIActionSheet改造成一个同步的调用。这样，在我调用它的 showInView方法后，我希望它直接同步地返回用户的选择项，而不是通过一个Delegate方法来回调我。另外，我也不希望init方法有那么多麻烦的参数，我只希望init的时候，指定一个数组能够设置每个button的title就行了。</p>

<p>于是我写了一个 SynchronizedUIActionSheet 类，这个类将 UIActionSheet简单封装了一下，利用 CFRunLoopRun 和 CFRunLoopStop 方法来将UIActionSheet改造成同步的调用。整个代码如下所示：</p>

<p>SynchronizedUIActionSheet.h 文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">// SynchronizedUIActionSheet.h</span>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SynchronizedUIActionSheet</span> : <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">UIActionSheetDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span> <span class="n">titles</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">destructiveButtonIndex</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">NSInteger</span> <span class="n">cancelButtonIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithTitles:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">titles</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">showInView:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>SynchronizedUIActionSheet.m 文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;SynchronizedUIActionSheet.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SynchronizedUIActionSheet</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIActionSheet</span> <span class="o">*</span> <span class="n">_actionSheet</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">_selectedIndex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">titles</span> <span class="o">=</span> <span class="n">_titles</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">destructiveButtonIndex</span> <span class="o">=</span> <span class="n">_destructiveButtonIndex</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">cancelButtonIndex</span> <span class="o">=</span> <span class="n">_cancelButtonIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithTitles:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">titles</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_titles</span> <span class="o">=</span> <span class="n">titles</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_destructiveButtonIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_cancelButtonIndex</span> <span class="o">=</span> <span class="n">titles</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTitles:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">titles</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_titles</span> <span class="o">=</span> <span class="n">titles</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_cancelButtonIndex</span> <span class="o">=</span> <span class="n">titles</span><span class="p">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">showInView:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_actionSheet</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIActionSheet</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span> <span class="n">title</span> <span class="k">in</span> <span class="n">_titles</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_actionSheet</span> <span class="nl">addButtonWithTitle:</span><span class="n">title</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_destructiveButtonIndex</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_actionSheet</span><span class="p">.</span><span class="n">destructiveButtonIndex</span> <span class="o">=</span> <span class="n">_destructiveButtonIndex</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_cancelButtonIndex</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_actionSheet</span><span class="p">.</span><span class="n">cancelButtonIndex</span> <span class="o">=</span> <span class="n">_cancelButtonIndex</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_actionSheet</span> <span class="nl">showInView:</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFRunLoopRun</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_selectedIndex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">actionSheet:</span><span class="p">(</span><span class="n">UIActionSheet</span> <span class="o">*</span><span class="p">)</span><span class="nv">actionSheet</span> <span class="nf">clickedButtonAtIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_selectedIndex</span> <span class="o">=</span> <span class="n">buttonIndex</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_actionSheet</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CFRunLoopStop</span><span class="p">(</span><span class="n">CFRunLoopGetCurrent</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在改造后，调用ActionSheet的示例代码如下，是不是感觉逻辑清爽了一些？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">testButtonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SynchronizedUIActionSheet</span> <span class="o">*</span> <span class="n">synActionSheet</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SynchronizedUIActionSheet</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">synActionSheet</span><span class="p">.</span><span class="n">titles</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;aaa&quot;</span><span class="p">,</span> <span class="s">@&quot;bbb&quot;</span><span class="p">,</span> <span class="s">@&quot;ccc&quot;</span><span class="p">,</span> <span class="s">@&quot;ddd&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">synActionSheet</span><span class="p">.</span><span class="n">destructiveButtonIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSUInteger</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">synActionSheet</span> <span class="nl">showInView:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;result = %d&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>利用NSRunLoop来将原本的异步方法改成同步，可以使我们在某些情形下，方便地将异步方法变成同步方法来执行。</p>

<p>例如以前我们在做有道云笔记iPad版的时候，采用的图片多选控件需要用户允许我们获得地理位置信息，如果用户没有选择允许，那个这个图片多选控件就会执行失败。为了不让这个控件挂掉，我们想在用户禁止访问地理位置时，不使用该控件，而使用系统自带的图片单选的UIImagePickerController 控件来选择图片。对于这个需求，我们明显就希望将获得地理位置信息这个系统确认框做成同步的，使得我们可以根据用户的选择再决定用哪种图片选择方式。最终，我们也用类似上面的方法，用NSRunLoop来使我们的异步方法调用暂停在某一行，直到获得用户的反馈后，再往下执行，示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">someCheck</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">isOver</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// do the async check method, after the method return, set isOver to YES</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">isOver</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">runMode:</span><span class="n">NSDefaultRunLoopMode</span> <span class="nl">beforeDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">distantFuture</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上Demo代码我放到github上了,地址是<a href="https://github.com/tangqiaoboy/SynchronizedUIActionSheetDemo">这里</a>，请随意取用。祝端午节快乐。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要使用SBJSON(json-framework)]]></title>
    <link href="http://blog.devtang.com/blog/2012/05/05/do-not-use-sbjson/"/>
    <updated>2012-05-05T09:35:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/05/05/do-not-use-sbjson</id>
    <content type="html"><![CDATA[<p>不知道为什么，在iOS开发中，有很多人使用 <a href="https://github.com/stig/json-framework">SBJSON</a> （又被称作json-framework)来做JSON解析库。我想这是因为SBJSON是最早在iOS上出现的JSON解析库。但是随着iOS开发的流行，越来越多优秀的JSON解析库也涌现出来, SBJSON和它们相比，性能上有很大的差距。</p>

<!-- more -->


<p>现在iOS行业内主要流行的JSON解析库有：
<a href="http://developer.apple.com/library/ios/#documentation/Foundation/Reference/NSJSONSerialization_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40010946">NSJSONSerialization</a>、
<a href="http://samsoff.es/posts/parsing-json-with-the-iphones-private-json-framework">Apple JSON</a>、
<a href="http://github.com/schwa/TouchJSON">TouchJSON</a>、
<a href="http://github.com/stig/json-framework">SBJSON</a>、
<a href="http://github.com/gabriel/yajl-objc">YAJL</a>、
<a href="http://github.com/johnezang/JSONKit">JSONKit</a></p>

<p>行业内许多同行都对这些库进行过benchmark测试。我在网上搜到的测试文章包括：</p>

<ul>
<li><a href="https://github.com/samsoffes/json-benchmarks">https://github.com/samsoffes/json-benchmarks</a></li>
<li><a href="http://blog.csdn.net/arthurchenjs/article/details/7009995">http://blog.csdn.net/arthurchenjs/article/details/7009995</a></li>
<li><a href="http://blog.csdn.net/ccat/article/details/7207871">http://blog.csdn.net/ccat/article/details/7207871</a></li>
<li><a href="http://omegadelta.net/2011/11/04/json-framework-now-sbjson-is-evil/">http://omegadelta.net/2011/11/04/json-framework-now-sbjson-is-evil/</a></li>
<li><a href="http://stackoverflow.com/questions/2256625/comparison-of-json-parser-for-objective-c-json-framework-yajl-touchjson-etc">http://stackoverflow.com/questions/2256625/comparison-of-json-parser-for-objective-c-json-framework-yajl-touchjson-etc</a></li>
</ul>


<p>下图是我从<a href="http://my.csdn.net/ArthurChenJS">ArthurChenJS</a>的<a href="http://blog.csdn.net/arthurchenjs/article/details/7009995">博客文章</a>中截取的一张benchmark测试结果图(横条越短，解析速度越快)：</p>

<p><img src="http://blog.devtang.com/images/json_benchmark.gif"></p>

<p>从这些文章中可以看到，SBJSON在多数测试中都处于倒数的第一或倒数第二的位置。所以说，SBJSON实际上在性能这一点上讲，确实是非常“SB”的，实在不值得大家留念。赶快把你的JSON解析库换成其它的吧！</p>

<p>那么应该换成哪个呢？
如果你的app只支持iOS 5.0以上系统，那么直接用苹果官方提供的JSON库：<a href="http://developer.apple.com/library/ios/#documentation/Foundation/Reference/NSJSONSerialization_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40010946">NSJSONSerialization</a>
库即可。
如果你的app要支持iOS 5.0以下的系统，那么我个人推荐JSONKit，不过JSONKit本身做了很多内存上的优化，所以不支持ARC，你在使用时可以对其加上 -fno-objc-arc 的编译标志即可，设置这个编译标志的详细步骤可以见<a href="http://stackoverflow.com/questions/6308425/ios-5-best-practice-release-retain">这篇文章</a>。</p>

<p>JSONKit的使用也非常方便，在使用上只需要把SBJSON的JSONValue方法换成objectFromJSONData，JSONRepresentation方法换成JSONString即可。附上一段使用示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;JSONKit.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">path</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;data&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;json&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">content</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithContentsOfFile:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">kitData</span> <span class="o">=</span> <span class="p">[</span><span class="n">content</span> <span class="n">objectFromJSONData</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">kitString</span> <span class="o">=</span> <span class="p">[</span><span class="n">kitData</span> <span class="n">JSONString</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>祝大家玩得开心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS开发中使用FMDB]]></title>
    <link href="http://blog.devtang.com/blog/2012/04/22/use-fmdb/"/>
    <updated>2012-04-22T14:11:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/04/22/use-fmdb</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>SQLite (<a href="http://www.sqlite.org/docs.html">http://www.sqlite.org/docs.html</a>) 是一个轻量级的关系数据库。iOS SDK很早就支持了SQLite，在使用时，只需要加入 libsqlite3.dylib 依赖以及引入 sqlite3.h 头文件即可。但是，原生的SQLite API在使用上相当不友好，在使用时，非常不便。于是，开源社区中就出现了一系列将SQLite API进行封装的库，而FMDB (<a href="https://github.com/ccgus/fmdb">https://github.com/ccgus/fmdb</a>) 则是开源社区中的优秀者。</p>

<!-- more -->


<p>FMDB在使用上相当方便。以下是一个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span><span class="o">*</span> <span class="n">docsdir</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span> <span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">)</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span><span class="o">*</span> <span class="n">dbpath</span> <span class="o">=</span> <span class="p">[</span><span class="n">docsdir</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;user.sqlite&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">FMDatabase</span><span class="o">*</span> <span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMDatabase</span> <span class="nl">databaseWithPath:</span><span class="n">dbpath</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">];</span>
</span><span class='line'><span class="n">FMResultSet</span> <span class="o">*</span><span class="n">rs</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery:</span><span class="s">@&quot;select * from people&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">while</span> <span class="p">([</span><span class="n">rs</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@ %@&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">[</span><span class="n">rs</span> <span class="nl">stringForColumn:</span><span class="s">@&quot;firstname&quot;</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="n">rs</span> <span class="nl">stringForColumn:</span><span class="s">@&quot;lastname&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，使用FMDB后的数据库代码清晰明了，比原生的API优雅多了。另外，FMDB同时兼容ARC和非ARC工程，会自动根据工程配置来调整相关的内存管理代码。</p>

<h2>使用说明</h2>

<p>该使用说明主要翻译自fmdb的github项目说明文档: <a href="https://github.com/ccgus/fmdb">https://github.com/ccgus/fmdb</a></p>

<h3>引入相关文件</h3>

<p>首先将FMDB从github上clone下来，然后将以下文件copy到你的工程中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">FMDatabase</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">FMDatabase</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="n">FMDatabaseAdditions</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">FMDatabaseAdditions</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="n">FMDatabasePool</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">FMDatabasePool</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="n">FMDatabaseQueue</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">FMDatabaseQueue</span><span class="p">.</span><span class="n">m</span>
</span><span class='line'><span class="n">FMResultSet</span><span class="p">.</span><span class="n">h</span>
</span><span class='line'><span class="n">FMResultSet</span><span class="p">.</span><span class="n">m</span>
</span></code></pre></td></tr></table></div></figure>


<h3>建立数据库</h3>

<p>建立数据库只需要如下一行即可,当该文件不存在时，fmdb会自己创建一个。如果你传入的参数是空串：@&#8221;&#8221; ，则fmdb会在临时文件目录下创建这个数据库，如果你传入的参数是 NULL，则它会建立一个在内存中的数据库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMDatabase</span> <span class="nl">databaseWithPath:</span><span class="s">@&quot;/tmp/tmp.db&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>打开数据库</h3>

<p>使用如下语句，如果打开失败，可能是权限不足或者资源不足。通常打开完操作操作后，需要调用close方法来关闭数据库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">db</span> <span class="n">open</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// error </span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// some operation</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="n">close</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>执行更新操作</h3>

<p>除了Select操作之外，其它的都是更新操作。更新操作使用如下方法，如果有错误，可以用error参数中获得。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span><span class="p">[</span><span class="n">FMDatabase</span> <span class="nl">executeUpdate:error:withArgumentsInArray:orVAList:</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>执行查询操作</h3>

<p>查询操作示例如下。注意：即使操作结果只有一行，也需要先调用FMResultSet的next方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">FMResultSet</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery:</span><span class="s">@&quot;SELECT * FROM myTable&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">while</span> <span class="p">([</span><span class="n">s</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//retrieve values for each record</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">FMResultSet</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery:</span><span class="s">@&quot;SELECT COUNT(*) FROM myTable&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">s</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">totalCount</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="nl">intForColumnIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>FMDB提供如下多个方法来获取不同类型的数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">intForColumn:</span>
</span><span class='line'><span class="nl">longForColumn:</span>
</span><span class='line'><span class="nl">longLongIntForColumn:</span>
</span><span class='line'><span class="nl">boolForColumn:</span>
</span><span class='line'><span class="nl">doubleForColumn:</span>
</span><span class='line'><span class="nl">stringForColumn:</span>
</span><span class='line'><span class="nl">dateForColumn:</span>
</span><span class='line'><span class="nl">dataForColumn:</span>
</span><span class='line'><span class="nl">dataNoCopyForColumn:</span>
</span><span class='line'><span class="nl">UTF8StringForColumnIndex:</span>
</span><span class='line'><span class="nl">objectForColumn:</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常情况下，你并不需要关闭FMResultSet，因为相关的数据库关闭时，FMResultSet也会被自动关闭。</p>

<h3>数据参数</h3>

<p>通常情况下，你可以按照标准的SQL语句，用?表示执行语句的参数，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">INSERT</span> <span class="n">INTO</span> <span class="n">myTable</span> <span class="n">VALUES</span> <span class="p">(</span><span class="o">?</span><span class="p">,</span> <span class="o">?</span><span class="p">,</span> <span class="o">?</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，可以我们可以调用executeUpdate方法来将?所指代的具体参数传入，通常是用变长参数来传递进去的，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="s">@&quot;insert into User (name, password) values (?, ?)&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="n">sql</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">password</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里需要注意的是，参数必须是NSObject的子类，所以象int,double,bool这种基本类型，需要封装成对应的包装类才行，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 错误，42不能作为参数</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 正确，将42封装成 NSNumber 类</span>
</span><span class='line'><span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">42</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>线程安全</h3>

<p>如果我们的app需要多线程操作数据库，那么就需要使用FMDatabaseQueue来保证线程安全了。
切记不能在多个线程中共同一个FMDatabase对象并且在多个线程中同时使用，这个类本身不是线程安全的，这样使用会造成数据混乱等问题。</p>

<p>使用FMDatabaseQueue很简单，首先用一个数据库文件地址来初使化FMDatabaseQueue，然后就可以将一个闭包(block)传入inDatabase方法中。
在闭包中操作数据库，而不直接参与FMDatabase的管理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建，最好放在一个单例的类中</span>
</span><span class='line'><span class="n">FMDatabaseQueue</span> <span class="o">*</span><span class="n">queue</span> <span class="o">=</span> <span class="p">[</span><span class="n">FMDatabaseQueue</span> <span class="nl">databaseQueueWithPath:</span><span class="n">aPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">inDatabase:</span><span class="o">^</span><span class="p">(</span><span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">3</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FMResultSet</span> <span class="o">*</span><span class="n">rs</span> <span class="o">=</span> <span class="p">[</span><span class="n">db</span> <span class="nl">executeQuery:</span><span class="s">@&quot;select * from foo&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">([</span><span class="n">rs</span> <span class="n">next</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// …</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 如果要支持事务</span>
</span><span class='line'><span class="p">[</span><span class="n">queue</span> <span class="nl">inTransaction:</span><span class="o">^</span><span class="p">(</span><span class="n">FMDatabase</span> <span class="o">*</span><span class="n">db</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">rollback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">3</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">whoopsSomethingWrongHappened</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">*</span><span class="n">rollback</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// etc…</span>
</span><span class='line'>    <span class="p">[</span><span class="n">db</span> <span class="nl">executeUpdate:</span><span class="s">@&quot;INSERT INTO myTable VALUES (?)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">4</span><span class="p">]];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>工具</h2>

<p>为了查看Sqlite中的数据，一个好的图形化界面的数据库管理程序是必不可少的。mysql有phpMyAdmin，那么sqlite呢？</p>

<p>我主要使用的是Firefox的一个名为SQLite Manager的插件，安装此插件后，可以直接打开后缀名为sqlite的数据库文件。SQLite Manager提供一个图形化的界面来执行数据查询或更改操作。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/sqlite_manager.jpg"></p>

<h2>总结</h2>

<p>FMDB将SQLite API进行了很友好的封装，使用上非常方便，对于那些使用纯Sqlite API来进行数据库操作的app，可以考虑将其迁移到基于FMDB上，这对于以后数据库相关功能的开发维护，可以提高不少效率。</p>

<p>我在学习fmdb的时候做了一个小工程用于练习，我把它放到github上了。感兴趣的可以自行下载：<a href="https://github.com/tangqiaoboy/FmdbSample">https://github.com/tangqiaoboy/FmdbSample</a></p>

<p>祝大家玩得开心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于iOS测试机个数上限的详细规则]]></title>
    <link href="http://blog.devtang.com/blog/2012/04/06/about-100-devices-limit/"/>
    <updated>2012-04-06T16:50:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/04/06/about-100-devices-limit</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>公司的iOS测试机快达到苹果规定的100个上限了，而因为the new iPad新出，我们需要新的quota来测试新iPad，所以就仔细研究了一下苹果关于100个测试设备上限的规则。在这里分享给大家。规则的详细内容主要来自 <a href="https://developer.apple.com/support/ios/program-renewals.html">苹果的官网文档</a>。</p>

<!-- more -->


<h2>规则</h2>

<p>我总结出来的规则如下（附上原文以便对应）：</p>

<ul>
<li>每一个开发者membership year,只能有100次增加设备的名额。如果你增加一个设备,之后又将该设备删除,并不会将用掉的名额恢复.</li>
</ul>


<p>You can register up to 100 devices per year for development purposes. Any devices added, then later removed, still count towards your maximum number of registered devices per year.</p>

<ul>
<li>在每一个开发者membership year开始的时候,Team Agent和Admin角色可以选择删掉一些设备来恢复资格, 也可以清空所有设备来恢复到最多100次设备的名额。这个操作在Team Agent和Admin在一次新的membership year开始后即可使用，在使用时，需要注意，先将需要删除的设备删掉，然后才能添加需要新增的设备。一旦开始增加新设备，删除设备以恢复名额的功能将不再可用。</li>
</ul>


<p>At the start of a new membership year, Team Agents and Admins can remove devices and restore the available device count for their development team to 100 devices.</p>

<p>When Team Agents or Admins first sign in to the iOS Provisioning Portal at the start of a new membership year, they will be presented with the option to remove devices and restore the device count for those removed devices.</p>

<p>Important Note: At the start of your membership year, make sure to remove all devices you no longer use for development prior to adding any new devices.</p>

<ul>
<li>在以后整个membership year中，删除设备不会增加新的名额。</li>
</ul>


<p>Removing devices during your membership year will not open these slots to add new devices.</p>

<h2>举例</h2>

<p>直接看规则比较晦涩，举个例子：</p>

<p>假如第一年，你增加了70个设备，同时删除了10个设备，这个时候，虽然你的设备数是60，但是可用的增加测试机的名额却只有30个了。</p>

<p>到了第二年，你续费了开发者身份，在你第一次登陆进去后，你可以看到你的可用设备恢复成 100 - 60 = 40个了。这个时候，你可以选择删除一些设备，例如你又删除了20个设备，这样你的名额数变成60个。之后你增加了一个设备，因为你选择了增加新设备，苹果认为你已经放弃删除设备以恢复设备数的机会，这样，你的名额就固定成59个。以后删除设备都不会增加新名额了，直到你的下一个membership year开始时才又会有这样的机会来删除设备释放名额。</p>

<h2>总结</h2>

<p>所以说，不管怎么样，你的账号下的可用测试设备始终不会超过100个。不会象有些人想的那样，每过一年名额就直接变成100了。另外，每年删除设备以恢复名额的机会只有开始的时候，以后删除设备也不会恢复名额。</p>

<p>那如果万一我的设备数达到上限，我又急需要增加新设备怎么办呢？我们不久前就遇到了这种情况。我们的解决办法是给苹果的技术客服发邮件要求他们帮助我们删除所有设备并且恢复到增加100个测试设备的名额。最终在过了2天后，苹果答应并帮助我们解决了问题。</p>

<p>具体做法是访问：<a href="https://developer.apple.com/contact/">https://developer.apple.com/contact/</a>，点击 Program Benefits， 然后在新出来的提交界面中将需求填上。之后苹果会发邮件过来告诉你处理结果，可能需要打电话过去和他们沟通一些细节。在沟通完成后，苹果就可以立即帮助你状态修改到“可删除设备来增加测试设备名额”。这样，你就可以选择性的删除一些不需要的设备来释放一些名额了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于UIWebView和PhoneGap的总结]]></title>
    <link href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/"/>
    <updated>2012-03-24T20:19:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>今天参加了Adobe和CSDN组织的一个关于<a href="http://hui.csdn.net/MeetingInfo.aspx?mid=99">PhoneGap的开发讲座</a> ，而PhoneGap在iOS设备上的实现就是通过UIWebView控件来展示html内容，并且与native代码进行交互的。</p>

<p>正好我们在做有道云笔记的iPad版，因为我们也是使用UIWebView来展示笔记内容，所以也需要做js与native代码相互调用的事情。所以在这儿顺便总结一下UIWebView在使用上的细节，以及谈谈我对PhoneGap的看法。</p>

<!-- more -->


<h2>机制</h2>

<p>首先我们需要让UIWebView加载本地HTML。使用如下代码完成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">path</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundlePath</span><span class="p">];</span>
</span><span class='line'><span class="n">NSURL</span> <span class="o">*</span> <span class="n">baseURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="n">path</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">htmlFile</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;index&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;html&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="n">htmlString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithContentsOfFile:</span><span class="n">htmlFile</span> <span class="nl">encoding:</span><span class="p">(</span><span class="n">NSUTF8StringEncoding</span><span class="p">)</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">webView</span> <span class="nl">loadHTMLString:</span><span class="n">htmlString</span> <span class="nl">baseURL:</span><span class="n">baseURL</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着，我们需要让js能够调用native端。iOS SDK并没有原生提供js调用native代码的API。但是UIWebView的一个delegate方法使我们可以做到让js需要调用时，通知native。在native执行完相应调用后，可以用stringByEvaluatingJavaScriptFromString方法，将执行结果返回给js。这样，就实现了js与native代码的相互调用。</p>

<p>以下是PhoneGap相关调用的示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Objective-C语言</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">webView:</span><span class="p">(</span><span class="n">UIWebView</span> <span class="o">*</span><span class="p">)</span><span class="nv">webView</span>
</span><span class='line'>    <span class="nf">shouldStartLoadWithRequest:</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span>
</span><span class='line'>    <span class="nf">navigationType:</span><span class="p">(</span><span class="n">UIWebViewNavigationType</span><span class="p">)</span><span class="nv">navigationType</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">NSURL</span> <span class="o">*</span> <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">request</span> <span class="n">URL</span><span class="p">];</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">([[</span><span class="n">url</span> <span class="n">scheme</span><span class="p">]</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;gap&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 在这里做js调native的事情</span>
</span><span class='line'>            <span class="c1">// ....</span>
</span><span class='line'>            <span class="c1">// 做完之后用如下方法调回js</span>
</span><span class='line'>            <span class="p">[</span><span class="n">webView</span> <span class="nl">stringByEvaluatingJavaScriptFromString:</span><span class="s">@&quot;alert(&#39;done&#39;)&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体让js通知native的方法是让js发起一次特殊的网络请求。这里，我们和PhoneGap都是使用加载一个隐藏的iframe来实现的，通过将iframe的src指定为一个特殊的URL，实现在delegate方法中截获这次请求。</p>

<p>以下是PhoneGap相关调用的示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Javascript语言</span>
</span><span class='line'><span class="c1">// 通知iPhone UIWebView 加载url对应的资源</span>
</span><span class='line'><span class="c1">// url的格式为: gap:something</span>
</span><span class='line'><span class="n">function</span> <span class="nf">loadURL</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">iFrame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">iFrame</span> <span class="o">=</span> <span class="n">document</span><span class="p">.</span><span class="n">createElement</span><span class="p">(</span><span class="s">&quot;iframe&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iFrame</span><span class="p">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s">&quot;src&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iFrame</span><span class="p">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s">&quot;style&quot;</span><span class="p">,</span> <span class="s">&quot;display:none;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iFrame</span><span class="p">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s">&quot;height&quot;</span><span class="p">,</span> <span class="s">&quot;0px&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iFrame</span><span class="p">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s">&quot;width&quot;</span><span class="p">,</span> <span class="s">&quot;0px&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iFrame</span><span class="p">.</span><span class="n">setAttribute</span><span class="p">(</span><span class="s">&quot;frameborder&quot;</span><span class="p">,</span> <span class="s">&quot;0&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">document</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">appendChild</span><span class="p">(</span><span class="n">iFrame</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// 发起请求后这个iFrame就没用了，所以把它从dom上移除掉</span>
</span><span class='line'>    <span class="n">iFrame</span><span class="p">.</span><span class="n">parentNode</span><span class="p">.</span><span class="n">removeChild</span><span class="p">(</span><span class="n">iFrame</span><span class="p">);</span>
</span><span class='line'>    <span class="n">iFrame</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里，可能有些人说，通过改document.location也可以达到相同的效果。关于这个，我和zyc专门试过，一般情况下，改document.location是可以，但是改document.location有一个很严重的问题，就是如果我们连续2个js调native，连续2次改document.location的话，在native的delegate方法中，只能截获后面那次请求，前一次请求由于很快被替换掉，所以被忽略掉了。</p>

<p>我也专门去Github上查找相关的开源代码，它们都是用过iframe来实现调用的，例如这个：<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">https://github.com/marcuswestin/WebViewJavascriptBridge</a></p>

<p>关于这个，我也做了一个Demo来简单示例，地址如下：<a href="https://github.com/tangqiaoboy/UIWebViewSample">https://github.com/tangqiaoboy/UIWebViewSample</a></p>

<h2>参数的传递</h2>

<p>以上的示例代码为了讲清楚机制，所以只是示例了最简单的相互调用。但实际上js和native相互调用时，常常需要传递参数。</p>

<p>例如，有道云笔记iPad版用UIWebView显示笔记的内容，当用户点击了笔记中的附件，这个时候，js需要通知native到后台下载这个笔记附件，同时通知js当前的下载进度。对于这个需求，js层获得用户点击事件后，就需要把当前点击的附件的ID传递给native，这样native才能知道下载哪个附件。</p>

<p>参数传递最简单的方式是将参数作为url的一部分，放到iFrame的src里面。这样UIWebView通过截取分析url后面的内容即可获得参数。但是这样的问题是，该方法只能传递简单的参数信息，如果参数是一个很复杂的对象，那么这个url的编解码将会很复杂。对此，我们的有道云笔记和PhoneGap采用了不同的技术方案。</p>

<ul>
<li>我们的技术方案是将参数以JSON的形式传递，但是因为要附加在url之后，所以我们将JSON进行了Base64编码，以保证url中不会出现一些非法的字符。</li>
<li>PhoneGap的技术方案是，也是用JSON传递参数，但是将JSON放在UIWebView中的一个全局数组中，UIWebView当需要读取参数时，通过读取这个全局数组来获得相应的参数。</li>
</ul>


<p>相比之下，应该说PhoneGap的方案更加全面，适用于多种场景。而我们的方案简洁高效，满足了我们自己产品的需求。</p>

<h2>同步和异步</h2>

<p>因为iOS SDK没有天生支持js和native相互调用，大家的技术方案都是自己实现的一套调用机制，所以这里面有同步异步的问题。细心的同学就能发现，js调用native是通过插入一个iframe，这个iframe插入完了就完了，执行的结果需要native另外用stringByEvaluatingJavaScriptFromString方法通知js，所以这是一个异步的调用。</p>

<p>而stringByEvaluatingJavaScriptFromString方法本身会直接返回一个NSString类型的执行结果，所以这显然是一个同步调用。</p>

<p>所以js call native是异步，native call js是异步。在处理一些逻辑的时候，不可避免需要考虑这个特点。</p>

<p>这里顺便说一个android，其实在android开发中，js调native是同步的，但是PhoneGap为了将自己做成一个跨平台的框架，所以在android的js call native的native端，用 new Thread新建了一个执行线程，这样把android的js call native也变成了异步调用。</p>

<h2>UIWebView的问题</h2>

<h3>线程阻塞问题</h3>

<p>我们在开发中发现，当在native层调用stringByEvaluatingJavaScriptFromString方法时，可能由于javascript是单线程的原因，会阻塞原有js代码的执行。这里我们的解决办法是在js端用defer将iframe的插入延后执行。</p>

<h3>主线程的问题</h3>

<p>UIWebView的stringByEvaluatingJavaScriptFromString方法必须是主线程中执行，而主线程的执行时间过长就会block UI的更新。所以我们应该尽量让stringByEvaluatingJavaScriptFromString方法执行的时间短。</p>

<p>有道云笔记在保存的时候，需要调用js获得笔记的完整html内容，这个时候如果笔记内容很复杂，就会执行很长一段时间，而因为这个操作必须是主线程执行，所以我们显示“正在保存”的UIAlertView完全无法正常显示，整个UI界面完全卡住了。在新的编辑器里，我们更新了获得html内容的代码，才将这个问题解决。</p>

<h3>键盘控制</h3>

<p>做iOS开发的都知道，当我们需要键盘显示在某个控件上时，可以调用[obj becomeFirstResponder]方法来让键盘出来，并且光标输入焦点出现在该控件上。</p>

<p>但是这个方法对于UIWebView并不可用。也就是说，我们无法通过程序控制让光标输入焦点出现在UIWebView上。
关于这个问题，我在stackoverflow上专门<a href="http://stackoverflow.com/questions/9835956/show-keyboard-in-contenteditable-uiwebview-programmatically">问了一下</a>，还是没有得到很好的解决办法。</p>

<h3>CommonJS规范</h3>

<p>commonJS是一个模块块加载的规范。而AMD是该规范的一个草案，CommonJS AMD规范描述了模块化的定义，依赖关系，引用关系以及加载机制，其规范原文在<a href="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition">这里</a> 。它被requireJS，NodeJs，Dojo，jQuery等开源框架广泛使用。<a href="http://blog.csdn.net/dojotoolkit/article/details/6076668">这里</a>还有一篇不错的中文介绍文章。</p>

<p>AMD规范需要用目录层级当作包层次，这一点就象java一样。之前我以为iOS打包后的ipa资源文件中不能有资源目录层级关系，今天在会上问了一下，原来是我自己弄错了。如果需要将目录层级带入ipa资源文件中，只需要将该目录拖入工程中，然后选择“Create groups for any added folders”。如下图所示，这样目录层级能够打包到ipa文件中。</p>

<p><img src="http://blog.devtang.com/images/uiwebview-commonjs-folder.jpg"></p>

<h2>调试</h2>

<p>在iOS设备中调试javascript是一件相当苦逼的事情，拿pw的话来说：“一下子回到了ie6时代”。当然，业界也有一些调试工具可以用的。</p>

<p>我们在开发时主要采用的是<a href="http://phonegap.github.com/weinre/">weinre</a>这个框架。用这个框架，可以做一些基本的调试工作，但是它现在功能还没有象pc上的js调试器那么强大，例如它不能下断点，另外如果有js执行错误，它也无法正确的将错误信息报出。它还有一些bug，例如在mac机下，如果你同时连接了有线网和无线网，那么weinre将无法正确地连接到调试页面。</p>

<p>但终究，它是现在业界现存的唯一相对可用的调试工具了。本次的PhoneGap讲座的第一位演讲者董龙飞有一篇博客很好地介绍了weinre的使用，地址是<a href="http://www.donglongfei.com/2012/03/debug-phonegap-app-using-weinre/">这里</a>，推荐感兴趣的同学看看。即使不用PhoneGap，weinre也能给你在移动设备上设计网页带来方便。</p>

<h2>我对PhoneGap的看法</h2>

<p>今天的大会上，2位演讲者把PhoneGap吹得相当牛。但是其实真正用过的人才能知道，PhoneGap还是有相当多的问题的。至少我知道在网易就有一个使用PhoneGap而失败的项目，所以我认为PhoneGap还是有它相当大的局限性的。</p>

<p>我认为PhoneGap有以下3大问题：</p>

<ol>
<li><p>首先，PhoneGap的编程语言其实是javascript，这对于非前端工作者来说，其实学习起来和学习原生的objective-C或Java编程语言难度差不多，而且由于历史原因，javascript语言本身的问题比其它语言都多。要想精通javascript，相当不易。</p></li>
<li><p>然后，PhoneGap的目标是方便地创建跨平台的应用。但是其实苹果和google都发布了自己的人机交互指南。有些情况下，苹果的程序和android程序有着不同的交互原则的。象有道云笔记的<a href="http://itunes.apple.com/us/app/id450748070?ls=1&amp;mt=8">iPhone版</a>和<a href="http://m.note.youdao.com/noteproxy/download?todo=download&amp;platform=android&amp;keyfrom=note.web">android版</a>，就有着完全不同的界面和交互。使用PhoneGap就意味着你的程序在UI和交互上，既不象原生的iphone程序，又不象原生的android程序。</p></li>
<li><p>最后，性能问题。Javascript终究无法和原生的程序比运行效率，这一点在当你要做一些动画效果的时候，就能显现得很明显。</p></li>
</ol>


<p>当然，PhoneGap的优势也很明显，如果你是做图书类，查询类，小工具类应用的话，这些应用UI交互不复杂，也不占用很高的cpu资源，PhoneGap将很好地发挥出它的优势。对于这类应用：</p>

<ol>
<li><p>你只需要编写一次，则可以同时完成iOS, android, windows phone等版本的开发。</p></li>
<li><p>如果改动不大，只是内容升级，那它升级时只需要更新相应的js文件，而不需要提交审核，而一般正常提交苹果的app store审核的话，常常需要一周时间。</p></li>
</ol>


<p>所以PhoneGap不是万能的，但也不是没有用，它有它擅长的领域，一切都看你是否合理地使用它。</p>

<p>最后，推荐<a href="http://www.phonegap.cn/">PhoneGap中国网站</a> ，在这里，你可以找到为数不多的中文资料。也推荐本次PhoneGap的演讲者<a href="http://weibo.com/donglongfei">董龙飞的微博</a>， 它是Adobe中国平台技术经理，应该能为你解答不少关于PhoneGap的问题。</p>

<h2>对js的感想</h2>

<p>现在前端工程师相当牛逼啊。前端工程师不但可以写前端网页，还可以用Flex写桌面端程序，可以用nodejs写server端程序，可以用PhoneGap写移动端程序，这一切，都是基于javascript语言的，还有最新出的windows 8，原生支持用js来写Metro程序，世界已经无法阻止前端工程师了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone开发常问的十个问题(2012年3月版)]]></title>
    <link href="http://blog.devtang.com/blog/2012/03/15/10-most-common-questions-on-stackoverflow-201203/"/>
    <updated>2012-03-15T22:04:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/03/15/10-most-common-questions-on-stackoverflow-201203</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>今天去stackoverflow.com上看了一下iPhone标签下排名最高的10个问题，将它们整理出来，希望这些常见问题能帮到一些iPhone开发的初学者。本来想把答案也翻译过来的，后来发现答案资料通常都比较复杂，翻译起来太麻烦。所以大家还是看英文的答案吧，我只顺带用中文总结一下答案。</p>

<!-- more -->


<h3>问题一: <a href="http://stackoverflow.com/questions/1939/how-to-articles-for-iphone-development-and-objective-c">有哪些iPhone开发和Objective-C的入门资料</a></h3>

<p>这个确实是最常问的问题了。对于我个人来说，入门时所看的资料主要是《From C++ to Objective-c》和《iPhone开发基础教程》，另外，我也把stanford的iphone视频课程看完了，链接是：<a href="http://www.stanford.edu/class/cs193p/cgi-bin/index.php">http://www.stanford.edu/class/cs193p/cgi-bin/index.php</a></p>

<p>个人体会是边学边做，上手会比较快。编程这东西，不自己上手做做，没感觉。另外，如果入门之后想提高的话，我觉得还是需要把苹果每年的WWDC视频都下载下来看看，里面讲的东西还是非常有用的, 链接是: <a href="http://developer.apple.com/WWDC/">http://developer.apple.com/WWDC/</a></p>

<h3>问题二: <a href="http://stackoverflow.com/questions/113547/iphone-development-on-windows">如何在Windows中进行iPhone开发</a></h3>

<p>大家还是把Windows想太全能了。至少在开发这一块上，Windows对于程序员来说，还是相当不友好的。这一点在使用Mac系统后，差别一下子就体会到了。就比如说git，在Windows下使用就有很多问题。另外话说回来，Mac机也不是什么都好，在中国，Mac系统相关的国内软件相当少，Mac下的游戏也相对Windows少很多，如果你想用Mac机来娱乐的话，会比较受限制。</p>

<h3>问题三: <a href="http://stackoverflow.com/questions/392464/any-base64-library-on-iphone-sdk">有哪些基于iPhone的base64编码的库</a></h3>

<p>从这个问题的答案中，我选了一个我个人觉得比较好用的Base64编码库，放到我的Xcode Tool中了。地址是：<a href="https://github.com/tangqiaoboy/xcode_tool/tree/master/Encoding">https://github.com/tangqiaoboy/xcode_tool/tree/master/Encoding</a>。</p>

<h3>问题四: <a href="http://stackoverflow.com/questions/1083701/how-to-check-for-an-active-internet-connection-on-iphone-sdk">如何判断当前iPhone是否联网</a></h3>

<p>最佳的答案是用苹果提供的Reachability类。详细的使用方式大家自己看答案吧，写得很清楚。</p>

<h3>问题五: <a href="http://stackoverflow.com/questions/3889634/fast-and-lean-pdf-viewer-for-iphone-ipad-ios-tips-and-hints">如何做一个快速并且轻量级的PDF阅读器</a></h3>

<p>我暂时没这个需求，就没有详细看答案。</p>

<h3>问题六: <a href="http://stackoverflow.com/questions/2774343/how-do-i-associate-file-types-with-an-iphone-application">如何让我的app支持打开一种格式的文件</a></h3>

<p>在iPhone 3.2以上系统中，使用URL schemes即可完成这个需求。详细见答案。</p>

<h3>问题七: <a href="http://stackoverflow.com/questions/1126726/how-to-make-a-uitextfield-move-up-when-keyboard-is-present">当键盘出现的时候，如何让UITextField自动上移</a></h3>

<p>对于iPhone界面控件的操作应该算是开发中必备的能力。键盘出现的时候上移相关的控件算是常见的需求，但是从这么多人问这个问题就可以看出，还是有很多人对这些需求的实现方式有疑问。</p>

<p>对于这个问题，主要是通过增加对键盘出现和消失的相应的Notification，然后在键盘出现和消息的时候，通过设置相关控件的frame来实现。相关代码如下，来源自stackoverflow。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">textFieldDidBeginEditing:</span><span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">sender</span> <span class="nl">isEqual:</span><span class="n">_textField</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//move the main view, so that the keyboard does not hide it.</span>
</span><span class='line'>        <span class="k">if</span>  <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="nl">setViewMovedUp:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//method to move the view up/down whenever the keyboard is shown/dismissed</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setViewMovedUp:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">movedUp</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">beginAnimations:</span><span class="nb">nil</span> <span class="nl">context:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="nl">setAnimationDuration:</span><span class="mf">0.5</span><span class="p">];</span> <span class="c1">// if you want to slide up the view</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">movedUp</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 1. move the view&#39;s origin up so that the text field that will be hidden come above the keyboard </span>
</span><span class='line'>        <span class="c1">// 2. increase the size of the view so that the area behind the keyboard is covered up.</span>
</span><span class='line'>        <span class="n">rect</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">-=</span> <span class="n">kOFFSET_FOR_KEYBOARD</span><span class="p">;</span>
</span><span class='line'>        <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+=</span> <span class="n">kOFFSET_FOR_KEYBOARD</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// revert back to the normal state.</span>
</span><span class='line'>        <span class="n">rect</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">kOFFSET_FOR_KEYBOARD</span><span class="p">;</span>
</span><span class='line'>        <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-=</span> <span class="n">kOFFSET_FOR_KEYBOARD</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">rect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">UIView</span> <span class="n">commitAnimations</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">keyboardWillShow:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notif</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//keyboard will be shown now. depending for which textfield is active, move up or move down the view appropriately</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">_textField</span> <span class="n">isFirstResponder</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">setViewMovedUp:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">_textField</span> <span class="n">isFirstResponder</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">setViewMovedUp:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// register for keyboard notifications</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">keyboardWillShow:</span><span class="p">)</span>
</span><span class='line'>                                                 <span class="nl">name:</span><span class="n">UIKeyboardWillShowNotification</span> <span class="nl">object:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">window</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>     <span class="c1">// unregister for keyboard notifications while not visible.</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">removeObserver:</span><span class="n">self</span> <span class="nl">name:</span><span class="n">UIKeyboardWillShowNotification</span> <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>问题八: <a href="http://stackoverflow.com/questions/1282830/uiimagepickercontroller-uiimage-memory-and-more">有关UIImagePickerController, Image, Memory的问题和答案整理</a></h3>

<p>这个其实是一个相关问题的汇总贴。其中对于UIImage的操作示例挺有用处。做iPhone开发，总是会遇到一些图象处理相关的东西，能够从这儿积累一些相应的知识，到真正自己需要的时候帮助就大了。</p>

<h3>问题九: <a href="http://stackoverflow.com/questions/805547/how-to-sort-an-nsmutablearray-with-custom-objects-in-it">如何对包含自定义元素类型的NSMutableArray排序</a></h3>

<p>答案讨论了各种方法，下面是其中提到的最简单的方法：定义一个比较用的selector</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSComparisonResult</span><span class="p">)</span><span class="nf">compare:</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span><span class="p">)</span><span class="nv">otherObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="nl">compare:</span><span class="n">otherObject</span><span class="p">.</span><span class="n">birthDate</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">sortedArray</span><span class="p">;</span>
</span><span class='line'><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">drinkDetails</span> <span class="nl">sortedArrayUsingSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">compare:</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>问题十: <a href="http://stackoverflow.com/questions/360751/can-i-embed-a-custom-font-in-an-iphone-application">如何在iPhone中使用自定义字体</a></h3>

<p>答案讨论了在iOS3.2以前及以后的做法，现在都5.1了，估计支持3.2以前的app很少了吧。所以我把iOS3.2以后的办法附在下面。简单来说，就是iOS3.2苹果支持自定义字体，只需要在Info.plist文件中设置UIAppFonts相关的信息即可。步骤如下：</p>

<ol>
<li>将自定义字体加到你的工程资源文件中</li>
<li>在 info.plist 文件中增加一名为 UIAppFonts 的key</li>
<li>将这个key修改成array</li>
<li>将你用到的所有字体的名字，作为这个array的值，一项一项填进去（包括扩展名）</li>
<li>保存 info.plist</li>
<li>现在就可以在代码中直接用[UIFont fontWithName:@”CustomFontName” size:12]来取得你自定义的字体了。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode4使用技巧]]></title>
    <link href="http://blog.devtang.com/blog/2012/03/10/xcode4-tips/"/>
    <updated>2012-03-10T20:42:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/03/10/xcode4-tips</id>
    <content type="html"><![CDATA[<p>使用xcode4也有一段时间了，今天整理了一下xcode4的一些使用技巧，在这里分享给大家。</p>

<!-- more -->


<h3>设置作者</h3>

<p>这里所指的作者就是每个源文件头部注释中的“Created by xxx&#8221;中的作者名。
我很长一段时间不知道应该在哪里设置它。后来终于找到了。</p>

<p>原来这个作者名是来自”地址薄“这个程序中”我“的姓名。在sportlight中输入”地“即可找到这个程序。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/xcode-set-author-name.jpg"></p>

<h3>设置公司（组织）</h3>

<p>这里所指的公司也是指源文件头部注释中的”Copyright (c) xxx&#8221;中的公司名字。这个相对好找一些。
点击工程，在右边的工具栏中就可以找到&#8221;Organization&#8221;这一项。</p>

<h3>模拟器</h3>

<p>iOS模拟器也算是xcode的一部分。在刚开始使用时，不知道如何把照片导入到模拟器中。后来在网上搜到了方法：
将照片拖到iOS模拟器中，iOS模拟器会用safari打开该图片，然后在safari中长按该图，就会弹出菜单，选择“保存到相册”即可。</p>

<p>另外，模拟器也有一些快捷键，我常用的是 cmd + 左/右 来调整Orientation。另外，如果是iPad模拟器，可以按cmd + 1使其变成100%的大小。还有cmd + s可以将模拟器截图。</p>

<h3>获得模拟器中的程序数据</h3>

<p>其实模拟器中的程序存储在：/yourHome/Library/Application Support/iPhone Simulator/5.0/Applications 目录下，你可以直接进去找。</p>

<p>另外，如果要删除所安装的程序，也可以直接将Applications目录下的文件夹删掉，这比在模拟器中删更方便。</p>

<h3>安装旧版本的模拟器</h3>

<p>在xcode中，只会带最新版的模拟器，虽然有些模拟器可以在设置里面下载，但是更老的版本就无法在xcode的设置页下载了。</p>

<p>这个问题的解决办法是把以前的xcode和对应的模拟器装上，然后将模拟器复制或链接到最新的xcode目录下，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs
</span><span class='line'>sudo ln -s /Developer-3.2.5/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.0.sdk .
</span><span class='line'>sudo ln -s /Developer-3.2.5/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.1.sdk .
</span></code></pre></td></tr></table></div></figure>


<p>以前的xcode可以从<a href="http://tangqiaoboy.blog.163.com/blog/static/116114258201191323919494/">以下地址</a>下载到(需要开发者账号),建议大家每次安装新xcode的时候，把模拟器都备份一下，安装完再恢复回来，这样就不用这么每次折腾了。</p>

<h3>Behaviors</h3>

<p>Behaviors是设置页面里的一栏，通过cmd + 逗号可以调出设置页面看到。
在Behaviors里可以设置各种行为发生时，界面应该做何改变。</p>

<p>例如，如果我们要每次运行结束后，就关闭Console界面，可以在Behaviors下面的&#8221;Run completes&#8221;一栏的右边，选中&#8221;Hide debugger&#8221;一项即可（如下图红色标识所示)。</p>

<p>另外，我们也可以点击左下角的“+”来增加一些自定义的行为，例如我就增加了2个行为，分别用于把导航栏和工具栏同时隐藏和显示（如下图蓝色标识所示）。Behavior的扩展性很强，你甚至可以定义执行一些脚本，所以可以做的事情很多。</p>

<p><img src="http://blog.devtang.com/images/xcode-behaviors.jpg"></p>

<h3>快捷键</h3>

<p>如果能慢慢熟悉一些快捷键，对于提高工作效率是有很大帮助的。虽然设置页面有所有的快键键列表，但是估计没人能全部记住并且用上，我个人总结出来常用的快键键如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cmd + 1              切换成Project Navigator <span class="o">(</span>cmd + 2~7 也可以做相应切换，不过不常用）
</span><span class='line'>cmd + <span class="nb">shift</span> + 上     在.h和.m文件之间切换
</span><span class='line'>cmd + enter          切换成 standard editor
</span><span class='line'>cmd + opt + enter    切换成 assistant editor
</span><span class='line'>cmd + <span class="nb">shift</span> + y      切换 Console View的显示或隐藏
</span><span class='line'>cmd + 0              隐藏左边的导航<span class="o">(</span>Navigator<span class="o">)</span>区
</span><span class='line'>cmd + opt + 0        隐藏右边的工具<span class="o">(</span>Utility<span class="o">)</span>区
</span><span class='line'>ctrl  + 6            列出当前文件中所有的方法，可以输入关键词来过滤。这个相当赞，可以快速定位到想编辑的方法。
</span><span class='line'>                     我直接把这个快键盘改成了ctrl+o，这样按起来更顺手。
</span><span class='line'>cmd + ctrl + 左/右   到上/下一次编辑的位置，在2个编辑位置跳转的时候很方便。
</span><span class='line'>cmd + opt + j        跳转到文件过滤区
</span><span class='line'>cmd + <span class="nb">shift</span> + f      在工程中查找
</span><span class='line'>cmd + r              运行，如果选上直接kill掉上次进程的话，每次直接一按就可以重新运行了
</span><span class='line'>cmd + b              编译工程
</span><span class='line'>cmd + <span class="nb">shift</span> + k      清空编译好的文件
</span><span class='line'>cmd + .              结束本次调试
</span><span class='line'>ESC                  调出代码补全
</span><span class='line'>cmd + 单击           查看该方法的实现
</span><span class='line'>opt + 单击           查看该方法的文档
</span><span class='line'>cmd + t              新建一个tab栏
</span><span class='line'>cmd + <span class="nb">shift</span> + <span class="o">[</span>      在tab栏之间切换
</span></code></pre></td></tr></table></div></figure>


<h3>Snippets</h3>

<p>代码片段(Snippets)是xcode4新增的功能。用于管理一些常用的代码段，在需要时通过代码补全自动生成出来，可以提高工作效率。</p>

<p>关于这个，可以参见我的另一篇文章：<a href="http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets/">http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets/</a></p>

<h3>下载xcode</h3>

<p>从Xcode4.3开始，苹果将Xcode的下载放到了Lion的mac app store中。郁闷的是，中国区连接app store下载的速度相当慢，在试了一些方法（例如设置hosts,设置dns）之后，我发现最好的办法如下：</p>

<p>用开发者账号登陆：<a href="https://developer.apple.com/downloads/index.action">https://developer.apple.com/downloads/index.action</a>，然后点击下载获得下载地址，然后将地址复制到mac版迅雷中，用迅雷下载，速度可以达到200K左右。</p>

<p>希望这些技巧能提高你的工作效率，祝玩得开心:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Git进行协同开发]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/29/collaboration-with-git/"/>
    <updated>2012-02-29T19:08:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/29/collaboration-with-git</id>
    <content type="html"><![CDATA[<h2>问题场景描述</h2>

<p>常常会遇到这样的协同场景：后台的同事和前端的同事需要共同开发一个新功能，而他们的代码相互依赖，所以需要不停地更新各自的代码进行联调。</p>

<p>对于这种场景，最简单的方式就是，这2个同事坐到一起，然后把svn当作一个共享代码的中转站来共享开发中的代码。</p>

<p>在这种方式下，大家各自写自己的代码，提交到svn上，然后用svn up获得对方的代码。在调试问题的时候，大家可能不停地更新代码，然后让对方用svn up来更新。最终，虽然开发能够顺利进行，但是svn上会积累大量调试中的代码历史。所以，这样把svn当作代码中转站是一个很山寨的行为。</p>

<p>在开发<a href="http://note.youdao.com">有道云笔记</a>新的<a href="http://itunes.apple.com/cn/app/id483995181">iPad版</a>时，我和前端同事zyc尝试用git进行了协同开发。在这里把具体方案分享给大家，欢迎大家讨论。</p>

<!--More-->


<h2>Git相关协议介绍</h2>

<p>Git对于你本机的代码项目，允许用很方便的方式进行非授权的只读访问,<a href="http://progit.org/book/zh/ch4-9.html">相关介绍链接</a>。简单来说，就是可以用Git自带的Git daemon命令在本机的9418端口启动一个守护进程，然后其它机器就可以以只读方式访问你开放出来的项目代码。</p>

<p>具体步骤如下：</p>

<ul>
<li>在你的Git工程下新建一个名为git-daemon-export-ok的文件放到.git目录下，表明该工程允许非授权访问。示例代码如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /path/to/project.git
</span><span class='line'>touch git-daemon-export-ok
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>执行git daemon命令，设置你要Export出的项目目录的父目录，例如工程的代码地址是：/opt/git/project的话，则示例代码如下：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git daemon --reuseaddr --base-path<span class="o">=</span>/opt/git/ /opt/git/
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>告知对方你的机器的IP，然后在对方的机器，用下列命令即可检出你的代码：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout git://your_ip_address/project
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果对方有更新，只需要 git pull 一下。</li>
</ul>


<h2>协作</h2>

<p>对于这种基于Git的协作，我们可以在本地随意的提交代码，让对方用git pull更新。当开发完成，需要push到公共仓库的时候，再用git rebase -i将本地的提交进行清理即可。并且由于大家都是在机器间互拷，不依赖svn公共服务器，更新代码的速度也要快得多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用GCD]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/22/use-gcd/"/>
    <updated>2012-02-22T20:44:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/22/use-gcd</id>
    <content type="html"><![CDATA[<h2>什么是GCD</h2>

<p>Grand Central Dispatch (GCD)是Apple开发的一个多核编程的解决方法。该方法在Mac OS X 10.6雪豹中首次推出，并随后被引入到了iOS4.0中。GCD是一个替代诸如NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术，它看起来象就其它语言的闭包(Closure)一样，但苹果把它叫做blocks。</p>

<!--More-->


<h2>应用举例</h2>

<p>让我们来看一个编程场景。我们要在iphone上做一个下载网页的功能，该功能非常简单，就是在iphone上放置一个按钮，点击该按钮时，显示一个转动的圆圈，表示正在进行下载，下载完成之后，将内容加载到界面上的一个文本控件中。</p>

<h3>不用GCD前</h3>

<p>虽然功能简单，但是我们必须把下载过程放到后台线程中，否则会阻塞UI线程显示。所以，如果不用GCD, 我们需要写如下3个方法：</p>

<ul>
<li>someClick 方法是点击按钮后的代码，可以看到我们用NSInvocationOperation建了一个后台线程，并且放到NSOperationQueue中。后台线程执行download方法。</li>
<li>download 方法处理下载网页的逻辑。下载完成后用performSelectorOnMainThread执行download_completed 方法。</li>
<li>download_completed 进行clear up的工作，并把下载的内容显示到文本控件中。</li>
</ul>


<p>这3个方法的代码如下。可以看到，虽然 开始下载 -> 下载中 -> 下载完成 这3个步骤是整个功能的三步。但是它们却被切分成了3块。他们之间因为是3个方法，所以还需要传递数据参数。如果是复杂的应用，数据参数很可能就不象本例子中的NSString那么简单了，另外，下载可能放到Model的类中来做，而界面的控制放到View Controller层来做，这使得本来就分开的代码变得更加散落。代码的可读性大大降低。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSOperationQueue</span> <span class="o">*</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">someClick:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">indicator</span> <span class="n">startAnimating</span><span class="p">];</span>
</span><span class='line'>    <span class="n">queue</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSOperationQueue</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSInvocationOperation</span> <span class="o">*</span> <span class="n">op</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSInvocationOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">download</span><span class="p">)</span> <span class="nl">object:</span><span class="nb">nil</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="nl">addOperation:</span><span class="n">op</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">download</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span> <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://www.youdao.com&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithContentsOfURL:</span><span class="n">url</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">performSelectorOnMainThread:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">download_completed:</span><span class="p">)</span> <span class="nl">withObject:</span><span class="n">data</span> <span class="nl">waitUntilDone:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error when download:%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">queue</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">download_completed:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="n">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;call back&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">indicator</span> <span class="n">stopAnimating</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">queue</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用GCD后</h3>

<p>如果使用GCD，以上3个方法都可以放到一起，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 原代码块一</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">indicator</span> <span class="n">startAnimating</span><span class="p">];</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 原代码块二</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span> <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://www.youdao.com&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithContentsOfURL:</span><span class="n">url</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 原代码块三</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">indicator</span> <span class="n">stopAnimating</span><span class="p">];</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">hidden</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error when download:%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先我们可以看到，代码变短了。因为少了原来3个方法的定义，也少了相互之间需要传递的变量的封装。</p>

<p>另外，代码变清楚了，虽然是异步的代码，但是它们被GCD合理的整合在一起，逻辑非常清晰。如果应用上MVC模式，我们也可以将View Controller层的回调函数用GCD的方式传递给Modal层，这相比以前用@selector的方式，代码的逻辑关系会更加清楚。</p>

<h2>GCD的定义</h2>

<p>简单GCD的定义有点象函数指针，差别是用 ^ 替代了函数指针的 * 号，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="c1">// 申明变量</span>
</span><span class='line'> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">(</span><span class="o">^</span><span class="n">loggerBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'> <span class="c1">// 定义</span>
</span><span class='line'>
</span><span class='line'> <span class="n">loggerBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello world&quot;</span><span class="p">);</span>
</span><span class='line'> <span class="p">};</span>
</span><span class='line'> <span class="c1">// 调用</span>
</span><span class='line'> <span class="n">loggerBlock</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是大多数时候，我们通常使用内联的方式来定义它，即将它的程序块写在调用的函数里面，例如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// something</span>
</span><span class='line'> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面大家可以看出，block有如下特点：</p>

<ol>
<li>程序块可以在代码中以内联的方式来定义。</li>
<li>程序块可以访问在创建它的范围内的可用的变量。</li>
</ol>


<h2>系统提供的dispatch方法</h2>

<p>为了方便地使用GCD，苹果提供了一些方法方便我们将block放在主线程 或 后台线程执行，或者延后执行。使用的例子如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="c1">//  后台执行：</span>
</span><span class='line'> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// something</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="c1">// 主线程执行：</span>
</span><span class='line'> <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// something</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="c1">// 一次性执行：</span>
</span><span class='line'> <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'> <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>     <span class="c1">// code to be executed once</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="c1">// 延迟2秒执行：</span>
</span><span class='line'> <span class="kt">double</span> <span class="n">delayInSeconds</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'> <span class="n">dispatch_time_t</span> <span class="n">popTime</span> <span class="o">=</span> <span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="n">delayInSeconds</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">);</span>
</span><span class='line'> <span class="n">dispatch_after</span><span class="p">(</span><span class="n">popTime</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>     <span class="c1">// code to be executed on the main queue after delay</span>
</span><span class='line'> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>dispatch_queue_t 也可以自己定义，如要要自定义queue，可以用dispatch_queue_create方法，示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">urls_queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;blog.devtang.com&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">urls_queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>     <span class="c1">// your code</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">dispatch_release</span><span class="p">(</span><span class="n">urls_queue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，GCD还有一些高级用法，例如让后台2个线程并行执行，然后等2个线程都结束后，再汇总执行结果。这个可以用dispatch_group, dispatch_group_async 和 dispatch_group_notify来实现，示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// 并行执行的线程一</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// 并行执行的线程二</span>
</span><span class='line'> <span class="p">});</span>
</span><span class='line'> <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// 汇总结果</span>
</span><span class='line'> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>修改block之外的变量</h2>

<p>默认情况下，在程序块中访问的外部变量是复制过去的，即写操作不对原变量生效。但是你可以加上 __block来让其写操作生效，示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="n">__block</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="kt">void</span>  <span class="p">(</span><span class="o">^</span><span class="n">foo</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="n">foo</span><span class="p">();</span>
</span><span class='line'> <span class="c1">// 这里，a的值被修改为1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>后台运行</h2>

<p>GCD的另一个用处是可以让程序在后台较长久的运行。在没有使用GCD时，当app被按home键退出后，app仅有最多5秒钟的时候做一些保存或清理资源的工作。但是在使用GCD后，app最多有10分钟的时间在后台长久运行。这个时间可以用来做清理本地缓存，发送统计数据等工作。</p>

<h2>总结</h2>

<p>总体来说，GCD能够极大地方便开发者进行多线程编程。如果你的app不需要支持iOS4.0以下的系统，那么就应该尽量使用GCD来处理后台线程和UI线程的交互。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给iOS工程增加Daily Build]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/16/apply-daily-build-in-ios-project/"/>
    <updated>2012-02-16T19:27:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/16/apply-daily-build-in-ios-project</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>Daily Build是一件非常有意义的事情，也是敏捷开发中关于“持续集成”的一个实践。Daily Build对于开发来说有如下好处：</p>

<ul>
<li>保证了每次check in的代码可用，不会造成整个工程编译失败。</li>
<li>进度跟进。产品经理可以每天看到最新的开发进度，并且试用产品，调整一些细节。很多时候，一个新功能，你真正用了一下才能有体会好或不好，所以daily build也给产品经理更多时间来调理他的设计。</li>
<li>需求确认。产品经理可以确认开发的功能细节是他的预期。因为我们的开发比较紧凑，所以都没有传统的需求说明文档，所以daily build也给产品经理用于尽早确认开发的功能细节是他的预期，我就遇到一次产品经理发现开发出的一个功能细节和他的预期不一致，但是因为有daily build，使得我可以尽早做修改，把修改的代价减小了。</li>
<li>测试跟进。如果功能点是独立的话，测试同事完全可以根据daily build来进行一些早期的测试。越早的Bug反馈可以使得修改bug所需的时间越短。</li>
</ul>


<!--more-->


<h2>步骤</h2>

<h3>xcodebuild命令</h3>

<p>如何做daily build呢？其实Xcode就提供了命令行build的命令，这个命令是xcodebuild，用xcodebuild -usage
可以查看到所有的可用参数，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>tangqiao ~<span class="o">]</span><span class="nv">$xcodebuild</span> -usage
</span><span class='line'>Usage: xcodebuild <span class="o">[</span>-project &lt;projectname&gt;<span class="o">]</span> <span class="o">[[</span>-target &lt;targetname&gt;<span class="o">]</span>...|-alltargets<span class="o">]</span> <span class="o">[</span>-configuration &lt;configurationname&gt;<span class="o">]</span> <span class="o">[</span>-arch &lt;architecture&gt;<span class="o">]</span>... <span class="o">[</span>-sdk <span class="o">[</span>&lt;sdkname&gt;|&lt;sdkpath&gt;<span class="o">]]</span> <span class="o">[</span>&lt;buildsetting&gt;<span class="o">=</span>&lt;value&gt;<span class="o">]</span>... <span class="o">[</span>&lt;buildaction&gt;<span class="o">]</span>...
</span><span class='line'>       xcodebuild <span class="o">[</span>-project &lt;projectname&gt;<span class="o">]</span> -scheme &lt;schemeName&gt; <span class="o">[</span>-configuration &lt;configurationname&gt;<span class="o">]</span> <span class="o">[</span>-arch &lt;architecture&gt;<span class="o">]</span>... <span class="o">[</span>-sdk <span class="o">[</span>&lt;sdkname&gt;|&lt;sdkpath&gt;<span class="o">]]</span> <span class="o">[</span>&lt;buildsetting&gt;<span class="o">=</span>&lt;value&gt;<span class="o">]</span>... <span class="o">[</span>&lt;buildaction&gt;<span class="o">]</span>...
</span><span class='line'>       xcodebuild -workspace &lt;workspacename&gt; -scheme &lt;schemeName&gt; <span class="o">[</span>-configuration &lt;configurationname&gt;<span class="o">]</span> <span class="o">[</span>-arch &lt;architecture&gt;<span class="o">]</span>... <span class="o">[</span>-sdk <span class="o">[</span>&lt;sdkname&gt;|&lt;sdkpath&gt;<span class="o">]]</span> <span class="o">[</span>&lt;buildsetting&gt;<span class="o">=</span>&lt;value&gt;<span class="o">]</span>... <span class="o">[</span>&lt;buildaction&gt;<span class="o">]</span>...
</span><span class='line'>       xcodebuild -version <span class="o">[</span>-sdk <span class="o">[</span>&lt;sdkfullpath&gt;|&lt;sdkname&gt;<span class="o">]</span> <span class="o">[</span>&lt;infoitem&gt;<span class="o">]</span> <span class="o">]</span>
</span><span class='line'>       xcodebuild -list <span class="o">[[</span>-project &lt;projectname&gt;<span class="o">]</span>|<span class="o">[</span>-workspace &lt;workspacename&gt;<span class="o">]]</span>
</span><span class='line'>       xcodebuild -showsdks
</span></code></pre></td></tr></table></div></figure>


<p>一般情况下的命令使用如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xcodebuild -configuration Release -target <span class="s2">&quot;YourProduct&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但在daily build中，用Release用为configuration其实不是特别好。因为Release的证书可能会被经常修改。我们可以基于Release的Configuation，建一个专门用于daily build的configuration。方法是：在工程详细页面中，选择Info一栏，在Configurations一栏的下方点击“+”号，然后选择&#8221;Duplicate Release Configuration&#8221;, 新建名为&#8221;DailyBuild&#8221;的Configuration, 如下图所示：</p>

<p><img src="http://blog.devtang.com/images/daily_build_1.png"></p>

<p>之后就可以用如下命令来做daily build了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xcodebuild -configuration DailyBuild -target <span class="s2">&quot;YourProduct&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行完命令后，会在当前工程下的 build/DailyBuild-iphoneos/目录下生成一个名为： YourProduct.app的文件。这个就是我们Build成功之后的程序文件。</p>

<h3>生成ipa文件</h3>

<p>接下来我们需要生成ipa文件，在生成ipa文件这件事情上，xcode似乎没有提供什么工具，不过这个没什么影响，因为ipa文件实际上就是一个zip文件，我们使用系统的zip命令来生成ipa文件即可。需要注意的是，ipa文件并不是简单地将编辑好的app文件打成zip文件，它需要将app文件放在一个名为Payload的文件夹下，然后将整个Payload目录打包成为.ipa文件，命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="nv">$BUILD_PATH</span>
</span><span class='line'>mkdir -p ipa/Payload
</span><span class='line'>cp -r ./DailyBuild-iphoneos/<span class="nv">$PRODUCT_NAME</span> ./ipa/Payload/
</span><span class='line'><span class="nb">cd </span>ipa
</span><span class='line'>zip -r <span class="nv">$FILE_NAME</span> *
</span></code></pre></td></tr></table></div></figure>


<h3>生成安装文件</h3>

<p>苹果允许用itms-services协议来直接在iphone/ipad上安装应用程序，我们可以直接生成该协议需要的相关文件，这样产品经理和测试同学都可以直接在设备上安装新版的应用了。相关的参考资料可以见：<a href="http://blog.encomiabile.it/2010/12/21/ios4-and-wireless-application-deploy/">这里</a>和 <a href="http://blog.s135.com/itms-services/">这里</a></p>

<p>具体来说，就是需要生成一个带 itms-services 协议的链接的html文件，以及一个 plist 文件。</p>

<p>生成html的示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="s">&lt;&lt; EOF &gt; install.html</span>
</span><span class='line'><span class="s">&lt;!DOCTYPE HTML&gt;</span>
</span><span class='line'><span class="s">&lt;html&gt;</span>
</span><span class='line'><span class="s">  &lt;head&gt;</span>
</span><span class='line'><span class="s">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span>
</span><span class='line'><span class="s">    &lt;title&gt;安装此软件&lt;/title&gt;</span>
</span><span class='line'><span class="s">  &lt;/head&gt;</span>
</span><span class='line'><span class="s">  &lt;body&gt;</span>
</span><span class='line'><span class="s">    &lt;ul&gt;</span>
</span><span class='line'><span class="s">      &lt;li&gt;安装此软件:&lt;a href=&quot;itms-services://?action=download-manifest&amp;url=http%3A%2F%2Fwww.yourdomain.com%2Fynote.plist&quot;&gt;$FILE_NAME&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="s">    &lt;/ul&gt;</span>
</span><span class='line'><span class="s">    &lt;/div&gt;</span>
</span><span class='line'><span class="s">  &lt;/body&gt;</span>
</span><span class='line'><span class="s">&lt;/html&gt;</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成plist文件的代码如下，注意，需要将下面的涉及 www.yourdomain.com的地方换成你线上服务器的地址，将ProductName换成你的app安装后的名字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="s">&lt;&lt; EOF &gt; ynote.plist</span>
</span><span class='line'><span class="s">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="s">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="s">&lt;plist version=&quot;1.0&quot;&gt;</span>
</span><span class='line'><span class="s">&lt;dict&gt;</span>
</span><span class='line'><span class="s">   &lt;key&gt;items&lt;/key&gt;</span>
</span><span class='line'><span class="s">   &lt;array&gt;</span>
</span><span class='line'><span class="s">       &lt;dict&gt;</span>
</span><span class='line'><span class="s">           &lt;key&gt;assets&lt;/key&gt;</span>
</span><span class='line'><span class="s">           &lt;array&gt;</span>
</span><span class='line'><span class="s">               &lt;dict&gt;</span>
</span><span class='line'><span class="s">                   &lt;key&gt;kind&lt;/key&gt;</span>
</span><span class='line'><span class="s">                   &lt;string&gt;software-package&lt;/string&gt;</span>
</span><span class='line'><span class="s">                   &lt;key&gt;url&lt;/key&gt;</span>
</span><span class='line'><span class="s">                   &lt;string&gt;http://www.yourdomain.com/$FILE_NAME&lt;/string&gt;</span>
</span><span class='line'><span class="s">               &lt;/dict&gt;</span>
</span><span class='line'><span class="s">               &lt;dict&gt;</span>
</span><span class='line'><span class="s">                   &lt;key&gt;kind&lt;/key&gt;</span>
</span><span class='line'><span class="s">                   &lt;string&gt;display-image&lt;/string&gt;</span>
</span><span class='line'><span class="s">                   &lt;key&gt;needs-shine&lt;/key&gt;</span>
</span><span class='line'><span class="s">                   &lt;true/&gt;</span>
</span><span class='line'><span class="s">                   &lt;key&gt;url&lt;/key&gt;</span>
</span><span class='line'><span class="s">                   &lt;string&gt;http://www.yourdomain.com/icon.png&lt;/string&gt;</span>
</span><span class='line'><span class="s">               &lt;/dict&gt;</span>
</span><span class='line'><span class="s">           &lt;dict&gt;</span>
</span><span class='line'><span class="s">                   &lt;key&gt;kind&lt;/key&gt;</span>
</span><span class='line'><span class="s">                   &lt;string&gt;full-size-image&lt;/string&gt;</span>
</span><span class='line'><span class="s">                   &lt;key&gt;needs-shine&lt;/key&gt;</span>
</span><span class='line'><span class="s">                   &lt;true/&gt;</span>
</span><span class='line'><span class="s">                   &lt;key&gt;url&lt;/key&gt;</span>
</span><span class='line'><span class="s">                   &lt;string&gt;http://www.yourdomain.com/icon.png&lt;/string&gt;</span>
</span><span class='line'><span class="s">               &lt;/dict&gt;</span>
</span><span class='line'><span class="s">           &lt;/array&gt;&lt;key&gt;metadata&lt;/key&gt;</span>
</span><span class='line'><span class="s">           &lt;dict&gt;</span>
</span><span class='line'><span class="s">               &lt;key&gt;bundle-identifier&lt;/key&gt;</span>
</span><span class='line'><span class="s">               &lt;string&gt;com.yourdomain.productname&lt;/string&gt;</span>
</span><span class='line'><span class="s">               &lt;key&gt;bundle-version&lt;/key&gt;</span>
</span><span class='line'><span class="s">               &lt;string&gt;1.0.0&lt;/string&gt;</span>
</span><span class='line'><span class="s">               &lt;key&gt;kind&lt;/key&gt;</span>
</span><span class='line'><span class="s">               &lt;string&gt;software&lt;/string&gt;</span>
</span><span class='line'><span class="s">               &lt;key&gt;subtitle&lt;/key&gt;</span>
</span><span class='line'><span class="s">               &lt;string&gt;ProductName&lt;/string&gt;</span>
</span><span class='line'><span class="s">               &lt;key&gt;title&lt;/key&gt;</span>
</span><span class='line'><span class="s">               &lt;string&gt;ProductName&lt;/string&gt;</span>
</span><span class='line'><span class="s">           &lt;/dict&gt;</span>
</span><span class='line'><span class="s">       &lt;/dict&gt;</span>
</span><span class='line'><span class="s">   &lt;/array&gt;</span>
</span><span class='line'><span class="s">&lt;/dict&gt;</span>
</span><span class='line'><span class="s">&lt;/plist&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<h3>定时运行</h3>

<p>这一点非常简单，使用crontab -e命令即可。大家可以随意google一下crontab命令，可以找到很多相关文档。假如我们要每周1-5的早上9点钟执行daily build，则crontab的配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0 9 * * * 1-5 /Users/tangqiao/dailybuild.sh &gt;&gt; /Users/tangqiao/dailybuild.log 2&gt;&amp;1
</span></code></pre></td></tr></table></div></figure>


<h3>失败报警</h3>

<p>在daily build脚本运行失败时，最好能发报警邮件或者短信，以便能够尽早发现。发邮件可以用python的smtplib来写，示例如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">smtplib</span>
</span><span class='line'>
</span><span class='line'><span class="n">sender</span> <span class="o">=</span> <span class="s">&#39;sender@devtang.com&#39;</span>
</span><span class='line'><span class="n">receivers</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;receiver@devtang.com&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;From: Alert &lt;sender@devtang.com&gt;</span>
</span><span class='line'><span class="s">To: Some one &lt;receiver@devtang.com&gt;</span>
</span><span class='line'><span class="s">Subject: SMTP email sample</span>
</span><span class='line'>
</span><span class='line'><span class="s">Hope you can get it.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">obj</span> <span class="o">=</span> <span class="n">smtplib</span><span class="o">.</span><span class="n">SMTP</span><span class="p">(</span><span class="s">&#39;server.mail.devtang.com&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">obj</span><span class="o">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">receivers</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;OK: send mail succeed&#39;</span>
</span><span class='line'><span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Error: unable to send mail&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>上传</h3>

<p>daily build编译出来如果需要单独上传到另外一台web机器上，可以用ftp或者scp协议。如果web机器悲剧的是windows机器的话，可以在windows机器上开一个共享，然后用 mount -t smbfs来将这个共享mount到本地，相关的示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir upload
</span><span class='line'>mount -t smbfs //<span class="nv">$SMB_USERNAME</span>:<span class="nv">$SMB_PASSWORD</span>@<span class="nv">$SMB_TARGET</span> ./upload
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$?&quot;</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Failed to mount smb directory&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>mkdir ./upload/<span class="nv">$FOLDER</span>
</span><span class='line'>cp <span class="nv">$FILE_NAME</span> ./upload/<span class="nv">$FOLDER</span>/
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$?&quot;</span> -eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;[OK] $FILE_NAME is uploaded to $SMB_TARGET&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;[ERROR] $FILE_NAME is FAILED to  uploaded to $SMB_TARGET&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>umount ./upload
</span></code></pre></td></tr></table></div></figure>


<h2>遇到的问题</h2>

<p>本来我写的自动化脚本在Mac OS X 10.6下运行得很好。但是升级到lion后，脚本在手动执行时很正常，但是在用crontab启动时就会出现找不到开发者证书的错误。在网上搜了很久也没有找到解决办法。最后我试了一下在“钥匙串访问”中把开发者证书从“登录”那栏拖动到“系统”那栏，居然就解决了，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/dailybuild_issue.jpg"></p>

<p>另外我搜到2个类似的问题的解决方案，虽然对我这个没起作用，也一并放在这儿，或许对遇到类似问题的人有帮助：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/7635143/cannot-build-xcode-project-from-command-line-but-can-from-xcode">http://stackoverflow.com/questions/7635143/cannot-build-xcode-project-from-command-line-but-can-from-xcode</a></li>
<li><a href="http://shappy1978.iteye.com/blog/765842">http://shappy1978.iteye.com/blog/765842</a></li>
</ul>


<h2>总结</h2>

<p>将以上各点结合起来，就可以用bash写出一个daily build脚本了。每天这一切都会自动完成，心情相当好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给NSString增加Java风格的方法]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/14/nsstring-java-like-wrapper/"/>
    <updated>2012-02-14T17:17:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/14/nsstring-java-like-wrapper</id>
    <content type="html"><![CDATA[<p>我实在受不了NSString冗长的方法调用了，每次写之前都要查文档。特别是那个去掉前后多余的空格的方法，长得离谱。与之对应的别的语言，拿java来说，对应的方法名叫trim。拿python来说，对应的方法名叫strip。但是Objective-C呢？是下面这段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">stringByTrimmingCharactersInSet:</span><span class="p">[</span><span class="n">NSCharacterSet</span> <span class="n">whitespaceAndNewlineCharacterSet</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>其实我也明白Objective-C这种长函数名的好处，就是能很清楚地了解当前的方法是干什么的。但是一些常用的方法，简单的方法名同样能表达清楚意思，并且更容易记住。长方法名的最大的问题是，代码写到一半得查文档，直接把思路打断了，所以我上周末花了一天时间把Objective-C的NSString类给封装了一下，把相应的方法调用都换成与Java类似的了。这样我每次用的时候就不用写那么长又记不住的方法名了。</p>

<p>主要封装后的方法定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">NSString</span><span class="nl">(Wrapper)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">unichar</span><span class="p">)</span> <span class="nf">charAt:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">compareTo:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">anotherString</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">compareToIgnoreCase:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">contains:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">startsWith:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">prefix</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">endsWith:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">suffix</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">equals:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">anotherString</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nf">equalsIgnoreCase:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">anotherString</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">indexOfChar:</span><span class="p">(</span><span class="n">unichar</span><span class="p">)</span><span class="nv">ch</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">indexOfChar:</span><span class="p">(</span><span class="n">unichar</span><span class="p">)</span><span class="nv">ch</span> <span class="nf">fromIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">indexOfString:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">str</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">indexOfString:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">str</span> <span class="nf">fromIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">lastIndexOfChar:</span><span class="p">(</span><span class="n">unichar</span><span class="p">)</span><span class="nv">ch</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">lastIndexOfChar:</span><span class="p">(</span><span class="n">unichar</span><span class="p">)</span><span class="nv">ch</span> <span class="nf">fromIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">lastIndexOfString:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">str</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nf">lastIndexOfString:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">str</span> <span class="nf">fromIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">index</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">substringFromIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">beginIndex</span> <span class="nf">toIndex:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">endIndex</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">toLowerCase</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">toUpperCase</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">trim</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">replaceAll:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">origin</span> <span class="nf">with:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">replacement</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span> <span class="nf">split:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">separator</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>看着方法体，一下子感觉轻松了好多，以后再也不必每次写的时候查文档了。代码放到github上了，你可以用如下命令获得代码或者直接访问网址<a href="https://github.com/tangqiaoboy/xcode_tool">https://github.com/tangqiaoboy/xcode_tool</a> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:tangqiaoboy/xcode_tool.git
</span><span class='line'><span class="nb">cd </span>xcode_tool/NSStringWrappeer
</span></code></pre></td></tr></table></div></figure>


<p>如果要把这个Wrapper加到现有工程中，只需要拷贝我的文件：NSStringWrapper.h和NSStringWrapper.m到你自己的工程中即可。在使用的时候注意我修改了一点，我将查找不存在的返回值设置成了-1，这样和java语言保持一致，如果你想用 NSNotFound作为查找不存在时的结果，请修改文件NSStringWrapper.m顶部的宏定义:JavaNotFound即可，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">// 如果不喜欢，可以将-1改成 NSNotFound即可</span>
</span><span class='line'><span class="cp">#define JavaNotFound -1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[象写程序一样写博客：搭建基于github的博客]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/"/>
    <updated>2012-02-10T19:55:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github</id>
    <content type="html"><![CDATA[<p>github真是无所不能。其<a href="http://pages.github.com/">Pages功能</a>支持上传html，并且在页面中显示。于是有好事者做了一个基于github的博客管理工具：<a href="http://octopress.org/">octopress</a>，基本原理是用git来管理你的文章，然后最终发布到github上成为一个独立博客站点。由于github支持CNAME域名指向，所以如果有独立域名的话，可以基于这些做出一个专业的博客站点出来。</p>

<p>本博客就是完全基于此搭建起来的，在使用了2个月之后，我将原系统根据中国人的需求做了一些配置，去掉了GFW会挡住的google font api，以及替换掉了速度超慢的国外的评论系统，也加上了分享到国内的微博的功能。现在把这些都总结出来，希望大家都可以方便地搭建基于github的博客来。</p>

<!--more-->


<h2>安装</h2>

<p>首先说说怎么安装相应的工具。其实这些内容在 <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> 上都有，我只是把它大概翻译了一下。</p>

<h3>安装rvm和ruby</h3>

<p>参考文档：<a href="http://octopress.org/docs/setup/rvm/">http://octopress.org/docs/setup/rvm/</a>，主要3步：</p>

<p>首先安装：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)</span></code></pre></td></tr></table></div></figure>


<p>然后设置classpath:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
</span><span class='line'>source ~/.bash_profile
</span><span class='line'>
</span><span class='line'># If using Zsh do this instead
</span><span class='line'>echo '[[ -s $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm' &gt;&gt; ~/.zshrc
</span><span class='line'>source ~/.zshrc</span></code></pre></td></tr></table></div></figure>


<p>最后安装ruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.2 && rvm use 1.9.2
</span><span class='line'>rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<h3>安装Octopress</h3>

<p>首先从github上将源码clone下来：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</span><span class='line'>ruby --version  # Should report Ruby 1.9.2</span></code></pre></td></tr></table></div></figure>


<p>然后安装依赖:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>最后安装Octopress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h3>配置</h3>

<p>安装好之后可以简单配置一下：</p>

<ul>
<li>主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。
注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。</li>
<li>修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。</li>
</ul>


<h2>设置github账号</h2>

<p>基于github的博客当然需要先注册github账号，Github的账号注册地址是：<a href="https://github.com/signup/free">https://github.com/signup/free</a> 。申请好github账号后，建一个名为 username.github.com 的代码仓库。这里注意username必须是和你的账号名一致。</p>

<h2>写博客方法</h2>

<p>然后就可以写博客啦～ 写博客主要是用以下几个命令，<a href="http://octopress.org/docs/blogging/">这里</a>有详细介绍：</p>

<ul>
<li>rake new_post[&#8216;article name&#8217;] 生成博文框架，然后修改生成的文件即可</li>
<li>rake generate 生成静态文件</li>
<li>rake watch 检测文件变化，实时生成新内容</li>
<li>rake preview 在本机4000端口生成访问内容</li>
<li>rake deploy 发布文件</li>
</ul>


<p>博文是采用markdown语法，另外增加了一些扩充的插件，markdown的介绍文章网上可以搜到很多，比如<a href="http://daringfireball.net/projects/markdown/">这个</a>。</p>

<h2>高级配置</h2>

<p>我主要介绍一下如何配置评论和分享到微博功能。步骤如下：</p>

<ul>
<li>在_config.yml中增加一项： weibo_share: true</li>
<li>修改 source/_includes/post/sharing.html ，增加：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  // 下面的大括号是全角的，如果复制，请自行改成半角
</span><span class='line'> ｛% if site.weibo_share %｝
</span><span class='line'>     ｛% include post/weibo.html %｝
</span><span class='line'> ｛% endif %｝</span></code></pre></td></tr></table></div></figure>


<ul>
<li>增加文件：source/_includes/post/weibo.html</li>
<li>访问 <a href="http://www.jiathis.com/">http://www.jiathis.com/</a> ，获取分享的代码</li>
<li>访问 <a href="http://uyan.cc/">http://uyan.cc/</a> ，获得评论的代码</li>
<li>将上面2步的代码都加入到weibo.html中即可</li>
</ul>


<h2>Tips</h2>

<h4>从wordpress迁移到github</h4>

<p>这儿有一篇文章介绍了如何做迁移：
<a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></p>

<h4>图片</h4>

<p>如果要在文章中上传图片，直接copy到 /source/images目录下即可。在文章中可以直接引用。也可以选一些大的图床站点，例如flickr之类的放在那边。</p>

<h4>域名</h4>

<p>如果你象我一样有自己的域名，可以将域名指向这个博客，具体步骤是：</p>

<ul>
<li>在域名管理中，建立一个CNAME指向，将你的域名指向 yourname.github.com</li>
<li>建一个名为CNAME的文件在source目录下，然后将自己的域名输入进去。</li>
<li>将内容push到github后，第一次生效大概等1小时，之后你就可以用自己的域名访问了。</li>
</ul>


<h4>参考</h4>

<p>这儿还有一些参考的文章：</p>

<ul>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">http://www.yangzhiping.com/tech/octopress.html</a></li>
<li><a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS5中UIViewController的新方法]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/06/new-methods-in-uiviewcontroller-of-ios5/"/>
    <updated>2012-02-06T21:19:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/06/new-methods-in-uiviewcontroller-of-ios5</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>在苹果的WWDC2011大会视频的
<a href="https://developer.apple.com/videos/wwdc/2011/?id=101">《Session 101 - What&#8217;s New in Cocoa》</a> 和
<a href="https://developer.apple.com/videos/wwdc/2011/?id=102">《Session 102 - Implementing UIViewController Containment》</a> 中介绍了苹果在iOS5中给UIViewController新增加的5方法以及一个属性:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 方法</span>
</span><span class='line'><span class="nl">addChildViewController:</span>
</span><span class='line'><span class="nl">removeFromParentViewController:</span>
</span><span class='line'><span class="nl">transitionFromViewController:toViewController:duration:options:animations:completion:</span>
</span><span class='line'><span class="nl">willMoveToParentViewController:</span>
</span><span class='line'><span class="nl">didMoveToParentViewController:</span>
</span><span class='line'><span class="c1">// 属性</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">readonly</span><span class="p">)</span> <span class="n">NSArray</span> <span class="o">*</span><span class="n">childViewControllers</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>原来的问题</h3>

<p>这些新增的方法和属性用于改进我们的编程方式。那么让我们先看看以前的对于UIViewController的使用有什么潜在的问题，认清问题，我们才能理解苹果改变的意义。</p>

<p>在以前，一个UIViewController的View可能有很多小的子view。这些子view很多时候被盖在最后，我们在最外层ViewController的viewDidLoad方法中，用addSubview增加了大量的子view。这些子view大多数不会一直处于界面上，只是在某些情况下才会出现，例如登陆失败的提示view，上传附件成功的提示view，网络失败的提示view等。但是虽然这些view很少出现，但是我们却常常一直把它们放在内存中。另外，当收到内存警告时，我们只能自己手工把这些view从super view中去掉。</p>

<h3>改变</h3>

<p>苹果新的API增加了addChildViewController方法，并且希望我们在使用addSubview时，同时调用[self addChildViewController:child]方法将sub view对应的viewController也加到当前ViewController的管理中。对于那些当前暂时不需要显示的subview，只通过addChildViewController把subViewController加进去。需要显示时再调用transitionFromViewController:toViewController:duration:options:animations:completion方法。</p>

<p>另外，当收到系统的Memory Warning的时候，系统也会自动把当前没有显示的subview unload掉，以节省内存。</p>

<h3>参考资料</h3>

<p>关于这个，<a href="http://wangjun.easymorse.com/?p=1630">这儿</a>有一篇不错的文章介绍了一段sample代码用于演示新API的使用.</p>

<p>我也将其代码稍加修改，增加了view load, unload, appear, disappear的事件Log，以及收到Memory Warning时的Log。代码放在了github上，地址是<a href="https://github.com/tangqiaoboy/iOS5ViewCtrlerSample">这里</a>，感兴趣的同学可以自己下载下来看看源码。</p>

<p>可以看到，这些view在没有使用时，是不会被load的，并且当有Memory Warning时，当前没有显示的view自动被unload掉了。所以新的方法确实能有效地节省内存，也能方便地处理内存不足时的资源回收。运行Log如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">FirstViewController</span> <span class="nl">willMoveToParentViewController:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">SecondViewController</span> <span class="nl">willMoveToParentViewController:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">ThirdViewController</span> <span class="nl">willMoveToParentViewController:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">ThirdViewController</span> <span class="n">viewDidLoad</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">ThirdViewController</span> <span class="nl">viewWillAppear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">ThirdViewController</span> <span class="nl">viewDidAppear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="err">生日提醒</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">SecondViewController</span> <span class="n">viewDidLoad</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">ThirdViewController</span> <span class="nl">viewWillDisappear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">SecondViewController</span> <span class="nl">viewWillAppear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">SecondViewController</span> <span class="nl">viewDidAppear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">ThirdViewController</span> <span class="nl">viewDidDisappear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="err">留言及回复</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">FirstViewController</span> <span class="n">viewDidLoad</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">SecondViewController</span> <span class="nl">viewWillDisappear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">FirstViewController</span> <span class="nl">viewWillAppear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">FirstViewController</span> <span class="nl">viewDidAppear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">SecondViewController</span> <span class="nl">viewDidDisappear:</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="n">Received</span> <span class="n">memory</span> <span class="n">warning</span><span class="p">.</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">SecondViewController</span> <span class="n">viewDidUnload</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">7397</span><span class="o">:</span><span class="n">f803</span><span class="p">]</span> <span class="o">-</span><span class="p">[</span><span class="n">ThirdViewController</span> <span class="n">viewDidUnload</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[斯坦福大学iOS开发公开课总结]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/05/mvc-in-ios-develop/"/>
    <updated>2012-02-05T12:58:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/05/mvc-in-ios-develop</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>iphone开发相关的教程中最有名的，当数斯坦福大学发布的&#8221;iphone开发公开课&#8221;了。此公开课在以前叫做《iphone开发教程》，今年由于平板电脑的流行，所以也加入了ipad开发相关的课程。在<a href="http://v.163.com/special/opencourse/iphonekaifa.html">网易公开课</a>上，有<a href="http://v.163.com/special/opencourse/iphonekaifa.html">该教程</a>的2010年录象，并且前面15集带中文字幕文件，非常适合初学者学习。</p>

<!--more-->


<p>在这里顺便说一下，网易公开课上的28集其实并不需要全部看完。真正的课程只有前面12集。后面的课程都是请一些业界的名人讲他们成功的app以及学生的作品展示，可看可不看。所以大家不要被28集这么多吓到。</p>

<p>由于近一年来iOS5以及xcode4的发布，苹果对原有的开发环境xcode以及开发语言Objective-C都有改进，所以原有的教程中很多内容不再适用了。例如新的xcode4将Interface Builder集成到xcode中，整个IDE布局和快捷键完全大变样，又比如苹果为Objective-c引用了ARC和Storyboard，这些都使得app的编程方式大为不同。</p>

<p>值得高兴的是，斯坦福大学最近更新了该公开课的2011年秋季录象，免费下载地址是：<a href="http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=480479762">http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=480479762</a>，不过现在该公开课还没有翻译，只能看英文原版了。新的课程相比以前要短了许多，一共只有9课。我大概快速看了一遍，总结一些心得给大家。</p>

<h3>iOS的MVC模式</h3>

<p>MVC模式算是客户端类程序使用的设计模式的标配了。iOS对于Model, View和Controller之间的相互调用有它自己的规范和约定，在公开课的<a href="http://itunes.apple.com/itunes-u/ipad-iphone-application-development/id480479762#">第一课</a>中，就介绍了应该如何将MVC模式应用在iOS开发中。主要的内容就体现在如下这张图中(图片来自该公开课第一课的<a href="http://itunes.apple.com/itunes-u/ipad-iphone-application-development/id480479762#">配套pdf</a>的第37页)：</p>

<p><img src="http://blog.devtang.com/images/ios_mvc.jpg"></p>

<p>我下面详细介绍一下这幅图的意思。</p>

<ul>
<li><p>首先图中绿色的箭头表示直接引用。直接引用直观来说，就是说需要包含引用类的申明头文件和类的实例变量。可以看到，只有Controller中，有对Model和View的直接引用。其中对View的直接引用体现为IBOutlet。</p></li>
<li><p>然后我们看View是怎么向Controller通讯的。对于这个，iOS中有3种常见的模式:</p>

<ol>
<li>设置View对应的Action Target。如设置UIButton的Touch up inside的Action Target。</li>
<li>设置View的delegate，如UIAlertViewDelegate, UIActionSheetDelegate等。</li>
<li>设置View的data source, 如UITableViewDataSource。
通过这3种模式，View达到了既能向Controller通讯，又不需要知道具体的Controller是谁是目的，这样就和Controller解耦了。</li>
</ol>
</li>
<li><p>最后我们看Model。Model在图上有一个信号塔类似的图形，旁边写着Notification &amp; KVO。这表明Model主要是通过Notification和KVO来和Controller通讯的。关于Notification，我写了一个模版代码片段如下:（关于代码片段的管理，推荐大家看我写的另一篇文章：<a href="http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets/">使用Github来管理xcode4中的代码片段</a></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 监听通知</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="o">&lt;</span><span class="err">#</span><span class="n">methodName</span><span class="err">#</span><span class="o">&gt;</span><span class="p">)</span> <span class="nl">name:</span><span class="n">kLoginNotification</span> <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 取消监听</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">removeObserver:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 发送通知</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">userInfo</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">200</span><span class="p">]</span> <span class="nl">forKey:</span><span class="s">@&quot;code&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">postNotificationName:</span><span class="o">&lt;</span><span class="err">#</span><span class="n">notification_name</span><span class="err">#</span><span class="o">&gt;</span> <span class="nl">object:</span><span class="n">self</span> <span class="nl">userInfo:</span><span class="n">userInfo</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，对于初学者，要正确地使用MVC模式还是挺难的，回想我们以前做公司某产品iphone版的时候，就有一些Model层直接依赖了Controller层，比如Model层更新数据失败了，直接调用Controller层显示出一个失败的提示界面。这样层次划分不清，造成我们做ipad版的时候很痛苦。最后我们做了代码重构，把Model的相应改变都用Notification来完成，使得在做ipad版开发时轻松了很多。</p>

<h3>Convention About synthesize</h3>

<p>“Convention over configuration&#8221;（约定高于配置）成就了Ruby On Rails，而iOS也有很多编程的约定。这些约定单独看没有什么好处，约定的最大好处就是，如果大家都遵守它，那么代码风格会趋于一致，你会很方便地读懂或修改别人的代码。</p>

<p>我们可以从第一课PPT的第50页看到如下的代码：</p>

<p><img src="http://blog.devtang.com/images/synthesize_convention.jpg"></p>

<p>从图中可以看到，该课程推荐大家在使用synthesize关键字时，为property设置一个下划线前缀。我也看过一些iphone的开源项目，比如facebook开源的 <a href="https://github.com/facebook/three20/">three20</a> ，它是遵守了这样的约定的。</p>

<p>其它的约定还包括：</p>

<ul>
<li>以new, copy, alloc开头的方法，都应当由调用者来release，而其它方法，都返回一个autorelease对象。</li>
<li>通常iphone顶部的bar应该用UINavigation控件，而底部的bar应该用UIToolbar控件。</li>
<li>所有的UI操作都应该在主线程(UI线程)进行。这个似乎不是约定，但是好多同学不知道，也写在这儿吧。</li>
</ul>


<h3>UIView</h3>

<p>刚开始对界面之间的跳转很不理解，后来发现其实很简单，就是一层一层叠起来的View。从View A上点击一个按钮跳转到View B，其实就是把View B“盖”在View A上面而已。
而“盖”的方式有好多种，通常的方法有2种：</p>

<p> 一. 用UINavigationController把View B push进来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">nextView</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p> 二. 用presentModalViewController方法把View B盖在上面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">presentModalViewController:</span><span class="n">nextView</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>除此之外，其实还有一种山寨方法，即把View A和View B都用addSubView加到AppDelegate类的self.window上。然后就可以调用 bringSubviewToFront 把 View B显示出来了，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// AppDelegate.m类</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="nl">addSubview:</span><span class="n">viewB</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="nl">addSubview:</span><span class="n">viewA</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 在需要时调用</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="nl">bringSubviewToFront:</span><span class="n">viewB</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面说的是界面之间的跳转。对于一个界面内，其控件的布局其实也是一个一个叠起来的，之所以说叠，是指如果2个控件如果有重叠部分，那么处于上面的那个控件会盖住下面的。</p>

<h3>Nib File</h3>

<p>Nib文件实际上内部格式是XML，而它本身并不编译成任何二进制代码。所以你如果用iFile之类的软件在iPhone上查看一些安装好的软件的目录，可以看到很多的以nib结尾的文件，这些就是该软件的界面文件。虽然这些XML经过了一些压缩转换，但是我们还是可以看到一些信息，例如它使用了哪些系统控件等。</p>

<p>Nib文件刚开始给我的感觉很神秘，后来发现它其实就是用于可视化的编辑View类用的。其中的 File&#8217;s Owner一栏，用于表示这个View对应的Controller类。通常情况下，Controller类会有一个名为view的变量，指向这个view的实例，我们也可以建立多个IBOutlet变量，指向这个view上的控件，以便做一些界面上的控制。</p>

<p>在Interface Builder上还有一个好处，是可以方便的将View的事件与Controller的IBAction绑定。只需要按住Ctrl键，从控件往File&#8217;s Owner一栏拖拽，即可看到可以绑定的方法列表。其实这些只是简化了我们的工作，如果完全抛开Interface Builder，我们一样可以完成这些工作。我所知道业界的一些iOS开发部门，为了多人协作更加方便，更是强制不允许使用Interface Builder，一切界面工作都在代码中完成。如果你用文本编辑器打开Nib文件看过，就能理解这样做是有道理的。因为如果2个同时编辑一个界面文件，那么冲突的可能性是100%，而且，从svn结出的冲突信息上看，你根本无法修正它。下面的代码演示了如何不用Interface Builder来添加控件以及绑定UI事件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// SampleViewController.m的viewDidLoad方法片段</span>
</span><span class='line'><span class="c1">// 添加Table View控件</span>
</span><span class='line'><span class="n">UITableView</span> <span class="o">*</span> <span class="n">tableView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITableView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">400</span><span class="p">)];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">tableView</span><span class="p">];</span>
</span><span class='line'><span class="n">tableView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">tableView</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 添加Button控件</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">button</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">UIButton</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">100</span><span class="p">)]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">self</span><span class="p">.</span><span class="n">button</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 绑定事件</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">button</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">buttonPressed</span><span class="p">)</span> <span class="nl">forControlEvents:</span><span class="p">(</span><span class="n">UIControlEventTouchUpInside</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>总体来讲，学习iOS开发还是比较容易的。我大概花了一个月时间学习iPhone开发，就可以边做边学了。</p>

<p>苹果的设计对于开发者来说是非常友好的，很多时候使用相应的控件就行了，都不用操心底层细节。不象Android开发，一会儿要考虑不同手机分辨率不一样了，一会儿又要考虑有些不是触摸屏了，一会儿又发现某款手机的cpu内存太弱了跑不起来，需要优化程序。另外，Objective-C相对于C++语言来说，要简单优雅得多，而且更加强大，所以做iOS的开发者很省心。</p>

<p>要说到不爽的地方，就是iOS开发相关的中文资料实在是太少了。要学习它，基本上需要查看苹果的官方英文文档以及WWDC大会视频，还有去<a href="http://www.stackoverflow.com">stackoverflow</a>上问问题。这对于英文不太好的同学这可能是一个障碍。不过反过来，习惯之后，通过这个锻炼了自己的英文水平，倒也是一大收获。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Github来管理xcode4中的代码片段]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets/"/>
    <updated>2012-02-04T14:32:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets</id>
    <content type="html"><![CDATA[<h3>代码片段介绍</h3>

<p>xcode4引入了一个新feature: code snippets，在整个界面的右下角，可以通过快捷键：cmd + ctrl + opt + 2 调出来。code snippets是一些代码的模版，对于一些常见的编程模式，xcode都将这些代码抽象成模版放到code snippet中，使用的时候，只需要键入快捷键，就可以把模版的内容填到代码中。</p>

<!--more-->


<p>例如，在引入GCD(Grand Central Dispatch)后，当我们需要一个延时的操作时，只需要在xcode中键入：dispatch
, 就可以看到xcode中弹出一个上下文菜单，第一项就是相应的代码片段。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/dispatch_after_snippet.jpg"></p>

<h3>定义自己的代码片段</h3>

<p>那么如何自定义code snippet呢，相当简单，当你觉得某段代码很有用，可以当作模版的时候，将其整块选中，
拖动到xcode右下角的code snippets区域中即可。xcode会自动帮你创建一个新的代码片段。
之后你可以单击该代码片段，在弹出的界面中选择edit，即可为此代码片段设置快捷键等信息。</p>

<p>如果有些地方你想让用户替换掉，可以用 &lt;#被替换的内容#> 的格式。
这样在代码片段被使用后，焦点会自动移到该处，你只需要连贯的键入替换后的内容即可。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/edit_code_snippet.jpg"></p>

<p>关于xcode的一些代码片段，<a href="http://nearthespeedoflight.com/article/xcode_4_code_snippets">这里</a>有一些用户的总结心得。</p>

<h3>使用Git管理代码片段</h3>

<p>在了解了code snippet之后，我在想能不能用Git来管理它，于是就研究了一下，发现它都存放于目录 ~/Library/Developer/Xcode/UserData/CodeSnippets 中。于是，我就将这个目录设置成一个Git的版本库，然后将自己整理
的代码片段都放到Github上了。现在我有2台mac机器，一台笔记本，一台公司的iMac，我常常在2台机器间切换着工作，由于将代码片段都放在github上，所以我在任何一端有更新，另一端都可以很方便的用git pull将更新拉到本地。前两天将公司机器升级到lion，又重装了lion版的xcode，简单设置一下，所有代码片段都回来了，非常方便。</p>

<p>我的代码片段所在的github地址是<a href="https://github.com/tangqiaoboy/xcode_tool">https://github.com/tangqiaoboy/xcode_tool</a>,使用它非常方便，只需要如下3步即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/tangqiaoboy/xcode_tool
</span><span class='line'>cd xcode_tool
</span><span class='line'>./setup_snippets.sh</span></code></pre></td></tr></table></div></figure>


<p>大家也可以将我的github项目fork一份，改成自己的。这样可以方便地增加和管理自己的代码片段。</p>

<p>祝大家玩得开心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git的使用感受]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/03/talk-about-svn-and-git/"/>
    <updated>2012-02-03T21:08:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/03/talk-about-svn-and-git</id>
    <content type="html"><![CDATA[<p>从开始工作到现在，在公司里面一直用svn来做版本管理。大约半年前听说了Git，因为Git的光辉相当耀眼，作者是Linus Torvalds，被大量的开源软件采用，如jQuery, Perl, Qt, ROR, YUI, GNOME等，所以决定学一学。
比较庆幸的是，国内有一本较好的介绍Git的书：<a href="http://www.amazon.cn/Git%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E8%92%8B%E9%91%AB/dp/B0058FLC40/ref=sr_1_1?ie=UTF8&amp;qid=1328277616&amp;sr=8-1">《Git权威指南》</a>。
我大概花了一个月的周末时间来学习它。在这里总结一下使用Git的感受，主要是和SVN来做一些比较，以便突出Git的特点。</p>

<!--more-->


<h2>学习成本</h2>

<p>首先我感觉Git的学习成本还是比较高的。svn基本上不到20个命令就可以应付日常的工作了，而Git有上百个命令。我在学习SVN的时候，基本上没有看什么书，最多就是在网上随便看了一些贴子，就基本会使用SVN了。而我花在Git的学习时间算下来，至少有1周。</p>

<p>因为Git的学习成本较高，所以当一个会svn的同学刚刚接触Git的时候，如果简单地把Git当SVN用，就会感觉Git相当难用。我在公司就时常听到同事抱怨它。所以我认为，要想真正用好Git，还是需要投入时间来学习它，否则是很难使用的。</p>

<h2>Git的内部结构</h2>

<p>Git真正是一个面向程序员的工具，它的内部数据结构是一个有向无环图，并且，你必须理解它的内部数据结构后，才能掌握它。因为你的很多操作，都其实对应的是这个有向无环图的操作。比如:</p>

<ul>
<li>git commit就是增加一个结点。</li>
<li>git commit &#8211;amend就是改发一个结点。</li>
<li>git reset就是修改HEAD指向的结点。</li>
</ul>


<p>另外，Git内部包括三个区域：工作区，暂存区和版本库。</p>

<ul>
<li>git add 是将工作区的内容保存到暂存区</li>
<li>git checkout 是将暂存区的内容覆盖工作区</li>
<li>git commit 是将暂存区的内容保存到版本库</li>
<li>git reset 默认情况下是将版本库的内容覆盖工作区</li>
<li>git diff 也有三种情况，分别是比较工作区与暂存区，工作区与版本库，暂存区与版本库之间的差别</li>
</ul>


<p>了解了Git的内部结构，对于这些Git的命令就更加理解了。</p>

<h2>svn的坑</h2>

<p>svn在平常使用上基本没什么坑，平时通过</p>

<pre>svn pe svn:ignore . </pre>


<p>设置好忽略的文件，以免误把不应该加入版本管理的文件加进来。</p>

<p>我唯一遇到的一次问题是这样的：我有一个目录要加入svn的版本库，但是目录里面的一些文件不想加入。如果直接输入svn add 目录名，就会把目录下所有文件都加入到版本管理中。如果cd到那个目录里面配置svn:ignore，又会因为当前目录还不在版本管理中，设置不了。最后找到的解决办法是在svn add的时候增加 &#8211;non-recursive 参数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn add dirname --non-recursive
</span><span class='line'>或者是：
</span><span class='line'>$ svn add dirname --depth empty</span></code></pre></td></tr></table></div></figure>


<p>还有就是对于一些不小心用svn add加入了版本管理，但实际上不应该加的目录。可以这么做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn export spool spool-tmp    (这里export可以将原目录中的.svn目录给清除掉)
</span><span class='line'>svn rm spool
</span><span class='line'>svn ci -m 'Removing inadvertently added directory "spool".'
</span><span class='line'>mv spool-tmp spool
</span><span class='line'>svn propset svn:ignore 'spool' .
</span><span class='line'>svn ci -m 'Ignoring a directory called "spool".'</span></code></pre></td></tr></table></div></figure>


<h2>Git的坑</h2>

<ul>
<li>在windows下的文件的权限因为无法和linux上完全一致，所以用Git检出的文件权限可能显示为被更改。
另外因为windows下的换行和linux上也不一样，协作开发时也容易出问题。所以在windows上使用Git的同学需要加上以下2行配置参数：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global core.filemode false
</span><span class='line'>git config --global core.autocrlf true
</span><span class='line'>第一句是忽略文件权限的改动。
</span><span class='line'>第二句是将文件checkout时自动把LF转成CRLF，check in 时自动把CRLF转成LF</span></code></pre></td></tr></table></div></figure>


<ul>
<li>svn的svn revert filename 对应的其实是 git checkout &#8211; filename, 而git revert xxx是基于xxx提交所做的改动，做一次反向提交，和svn revert 完全不一样。</li>
</ul>


<h2>Git的一些小技巧</h2>

<h3>强制推送</h3>

<p> 一旦推送到远程仓库后，就不要用类似git reset, git ci &#8211;amend, git rebase等破坏性提交了，否则远程仓库会因为你的新推送不是Fast Forward而拒绝提交(关于什么是Fast Forward要讲的太多了，自已看书吧)。如果实在不小心做了。在确定别人没有检出前，用git push -f 可以强制推送到远程仓库中。如下图:</p>

<p><img src="http://blog.devtang.com/images/git_push_f.jpg"></p>

<h3>使用git svn</h3>

<p> 在公司没有应用git前，你可以用git svn 来做管理。 git svn 相关命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git svn clone -r REV1:HEAD svn_addr local_addr
</span><span class='line'> git svn dcommit  提交到SVN
</span><span class='line'> git svn fetch    从svn up信息
</span><span class='line'> git svn rebase   将从svn up过来的信息，rebase成git提交
</span><span class='line'> git svn rebase --continue  冲突后继续rebase信息</span></code></pre></td></tr></table></div></figure>


<p>用git svn clone 的时候，带上 -r rev1:HEAD参数，可以省去将SVN整个提交历史抓取下来的时间。</p>

<h3>设置常用命令的别名</h3>

<p> 在用户的home目录下，有一个.gitconfig文件，里面可以配置一些别名，方便平时的git操作。
特别是那些平日使用SVN的短命令习惯了的同学，配置一下别名后，使用git就会相当顺手了。我配置的别名如下。这里特别多说一句，有些人喜欢将ci设置成commit -a，这样就不用git add来把需要提交的文件加入到暂存区了。在《Git权威指南》中，作者极力反对这样做。因为Git本身在提交前有add这步，就是为了让提交者能够审视自己的提交文件，以防止错误的提交发生。</p>

<pre>
[alias]
    st = status -s
    ci = commit
    l = log --oneline --decorate -13
    ll = log --oneline --decorate
    co = checkout
    br = branch
    rb = rebase
    dci = dcommit
</pre>


<h3>删除不在git管理下的文件</h3>

<p> 如果你需要删除Git下没有加入到版本库中的文件，可以使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clean -nd 测试删除
</span><span class='line'>git clean -fd 真实删除</span></code></pre></td></tr></table></div></figure>


<h3>搭建自己的远程仓库</h3>

<p>搭建一个Git远程仓库相当简单，直接在一台带SSH的服务器上用git init &#8211;bare dirname即可。本地可以用git remote命令来设置多个远程分支。另外，第一次提交的时候，因为远程仓库中没有任何分支，需要用如下指令建立master分支：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin yourname@yourhost.com:~/path/repository_name
</span><span class='line'>git remote add add2 yourname@yourhost.com:~/path/repository_name
</span><span class='line'>git push origin master
</span><span class='line'>git push add2 master
</span><span class='line'>// 如果git remote add设置地址写错了，可以用git remote set-url更改：
</span><span class='line'>git remote set-url origin yourname@yourhost.com:~/path/repository_name</span></code></pre></td></tr></table></div></figure>


<h3>如何用Git将一个文件的历史提交恢复？</h3>

<p>上次遇到一个问题，我某次提交改动了很多文件，但是其中有一个是不应该改的。所以我需要把这次提交中关于那个文件的改动撤销。直接用git checkout命令可以检出某一个文件的历史版本，然后就可以将对这个文件的改动取消了。如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout CommitId fileName 
</span><span class='line'>git ci -m "revert a file modification"</span></code></pre></td></tr></table></div></figure>


<h3>本地工作区还有未提交的内容时，不能pull?</h3>

<p>可以先用 git stash 将内容暂存，然后再pull，成功后再git stash pop将修改恢复。</p>

<h3>提交的邮箱错了？</h3>

<p>有些时候，因为同时在github和公司内部做提交，所以用2个不同的邮箱。如果一个新工程clone下来，忘了用git config 来设置提交用户名和邮箱，就有可能用错误的邮箱作为账号名提交。这个时候，如果你只是错了最近的一次提交而已，可以用如下命令来将最近的一次提交作者名和邮箱修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config user.email your-email@163.com
</span><span class='line'>git config user.name your-name
</span><span class='line'>git commit --amend --reset-author
</span></code></pre></td></tr></table></div></figure>


<p>如果等你发现的时候，已经错了很多提交了。可以用如下命令来一次性修改多个提交的用户名和邮箱：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git filter-branch -f --env-filter <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">    GIT_AUTHOR_NAME=&#39;Tang Qiao&#39;</span>
</span><span class='line'><span class="s2">    GIT_AUTHOR_EMAIL=&#39;tangqiao@fenbi.com&#39;</span>
</span><span class='line'><span class="s2">    GIT_COMMITTER_NAME=&#39;Tang Qiao&#39;</span>
</span><span class='line'><span class="s2">    GIT_COMMITTER_EMAIL=&#39;tangqiao@fenbi.com&#39;</span>
</span><span class='line'><span class="s2">&quot;</span> HEAD
</span></code></pre></td></tr></table></div></figure>


<h3>提交的时候自动去掉源码末尾的空格</h3>

<p>源码末尾的空格几乎都是无意义的，应该去掉的。大多数review系统，都会将源码末尾的空格标红。所以，我们何不在提交时让git自动帮我们去掉这些空格呢？这个可以通过设置git的hook来实现，具体方法如下：</p>

<ol>
<li>用vim编辑一个名为pre-commit的文件：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vim .git/hooks/pre-commit
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>输入如下代码，保存退出vim</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="k">if </span>git-rev-parse --verify HEAD &gt;/dev/null 2&gt;&amp;1 ; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nv">against</span><span class="o">=</span>HEAD
</span><span class='line'><span class="k">else</span>
</span><span class='line'>   <span class="c"># Initial commit: diff against an empty tree object</span>
</span><span class='line'>   <span class="nv">against</span><span class="o">=</span>4b825dc642cb6eb9a060e54bf8d69288fbee4904
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Find files with trailing whitespace</span>
</span><span class='line'><span class="k">for </span>FILE in <span class="sb">`</span><span class="nb">exec </span>git diff-index --check --cached <span class="nv">$against</span> -- | sed <span class="s1">&#39;/^[+-]/d&#39;</span> | sed -E <span class="s1">&#39;s/:[0-9]+:.*//&#39;</span> | uniq<span class="sb">`</span> ; <span class="k">do</span>
</span><span class='line'>    <span class="c"># Fix them!</span>
</span><span class='line'>    sed -i <span class="s1">&#39;&#39;</span> -E <span class="s1">&#39;s/[[:space:]]*$//&#39;</span> <span class="s2">&quot;$FILE&quot;</span>
</span><span class='line'>    git add <span class="s2">&quot;$FILE&quot;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>增加pre-commit的运行权根：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x .git/hooks/pre-commit
</span></code></pre></td></tr></table></div></figure>


<h3>让常用操作自动带颜色</h3>

<p>默认的git diff, status, log什么的都是不带颜色的，可以用如下命令让它们都带上颜色。另外还有一些有趣的命令，一并列在下面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global --add user.email <span class="s2">&quot;email@163.com&quot;</span>
</span><span class='line'>git config --global --add user.name <span class="s2">&quot;your name&quot;</span>
</span><span class='line'>
</span><span class='line'>git config --global alias.co checkout
</span><span class='line'>git config --global alias.br branch
</span><span class='line'>git config --global alias.ci commit
</span><span class='line'>git config --global alias.st status -s
</span><span class='line'>git config --global alias.l log --oneline --decorate -12
</span><span class='line'>
</span><span class='line'>git config --global color.diff auto
</span><span class='line'>git config --global color.status auto
</span><span class='line'>git config --global color.branch auto
</span><span class='line'>git config --global merge.tool kdiff3
</span><span class='line'>git config --global meregtool.kdiff3.path <span class="s2">&quot;/usr/bin/kdiff3&quot;</span>
</span><span class='line'>git config --global alias.visual <span class="s2">&quot;!gitk&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>自动补全git命令</h3>

<p>1.安装bash-completion: brew install bash-completion</p>

<p>2.按要求把以下代码增加到 .bash_profile文件中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  <span class="k">if</span> <span class="o">[</span> -f <span class="sb">`</span>brew --prefix<span class="sb">`</span>/etc/bash_completion <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>    . <span class="sb">`</span>brew --prefix<span class="sb">`</span>/etc/bash_completion
</span><span class='line'>  <span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.下载bash-completion对于Git的支持</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /usr/local/etc/bash_completion.d/
</span><span class='line'>sudo curl -O https://raw.github.com/git/git/master/contrib/completion/git-completion.bash
</span></code></pre></td></tr></table></div></figure>


<h2>一些Git的资料</h2>

<ul>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/">Git Magic</a> 很通俗的一本介绍Git的书，比较短小精炼。</li>
<li><a href="http://progit.org/book/zh/">Pro Git</a> 全面介绍Git的书，非常详细。</li>
<li><a href="http://www.amazon.cn/Git%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E8%92%8B%E9%91%AB/dp/B0058FLC40/ref=sr_1_1?ie=UTF8&amp;qid=1328277616&amp;sr=8-1">《Git权威指南》</a> 中国人写的一本介绍Git的书，也非常通俗。我个人主要就是通过这本书来学习Git的。</li>
<li><a href="http://www.github.com">Github</a> 基于Git的开源网站。在Github的托管的项目相当多，著名的有：rails, jquery, node, homebrew, three20, jekyll, jquery-ui, backbone, coffee-script, tornado, redis, underscore, asi-http-request, django。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Objective-C的文档生成工具:appledoc]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/"/>
    <updated>2012-02-01T20:37:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>做项目的人多了，就需要文档了。今天开始尝试写一些项目文档。但是就源代码来说，文档最好和源码在一起，这样更新起来更加方便和顺手。象Java语言本身就自带javadoc命令，可以从源码中抽取文档。今天抽空调研了一下objective-c语言的类似工具。</p>

<!-- more -->


<p>从<a href="http://stackoverflow.com/questions/813529/documentation-generator-for-objective-c">stackoverflow</a> 上找到三个比较popular的工具：doxygen, headdoc和appledoc 。它们分别的官方网址如下：</p>

<ul>
<li>docxygen <a href="http://www.stack.nl/~dimitri/doxygen/index.html">http://www.stack.nl/~dimitri/doxygen/index.html</a></li>
<li>headdoc <a href="http://developer.apple.com/opensource/tools/headerdoc.html">http://developer.apple.com/opensource/tools/headerdoc.html</a></li>
<li>appledoc <a href="http://gentlebytes.com/appledoc/">http://gentlebytes.com/appledoc/</a></li>
</ul>


<h2>介绍</h2>

<p>我把这3个工具都大概调研了一下，说一下我的感受。</p>

<h3>docxygen</h3>

<p>docxygen感觉是这3个工具中支持语言最多的，可以配置的地方也比较多。我大概看了一下文档，觉得还是比较复杂，而且默认生成的风格与苹果的风格不一致。就去看后面2个工具的介绍了。另外，它虽然是开源软件，但是没有将源码放到github上让我感觉这个工具的开发活跃度是不是不够。</p>

<h3>headerdoc</h3>

<p>headerdoc是xcode 自带的文档生成工具。在安装完xcode后，就可以用命令行：headdoc2html + 源文件名 来生成对应的文档。我个人试用了一下，还是比较方便的，不过headerdoc的注释生成规则比较特别，只生成以 /*! */ 的格式的注释。还有一个缺点是每个类文件对应一个注释文件，没有汇总的文件，这点感觉有点不爽。</p>

<h3>appledoc</h3>

<p>appledoc是在stackoverflow上被大家推荐的一个注释工具。有几个原因造成我比较喜欢它：</p>

<ol>
<li>它默认生成的文档风格和苹果的官方文档是一致的，而doxygen需要另外配置。</li>
<li>appledoc就是用objective-c生成的，必要的时候调试和改动也比较方便。</li>
<li>可以生成docset，并且集成到xcode中。这一点是很赞的，相当于在源码中按住option再单击就可以调出相应方法的帮助。</li>
<li>appledoc源码在github上，而doxygen在svn上。我个人比较偏激地认为比较活跃的开源项目都应该在github上。</li>
<li>相对于headerdoc，它没有特殊的注释要求，可以用/** */ 的格式，也可以兼容/*! */的格式的注释，并且生成的注释有汇总页面。</li>
</ol>


<h2>安装</h2>

<p>那么简单介绍一下如何安装appledoc，安装非常简单，只需要2步：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git clone git://github.com/tomaz/appledoc.git
</span><span class='line'> cd appledoc
</span><span class='line'> sudo sh install-appledoc.sh</span></code></pre></td></tr></table></div></figure>


<h2>使用</h2>

<p>使用appledoc时，只需要用如下命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appledoc -o ./doc --project-name ynote --project-company youdao .</span></code></pre></td></tr></table></div></figure>


<p>appledoc会扫描当前路径下的所有文件，然后生成好文档放到doc目录下。你也可以用appledoc &#8211;help查看所有可用的参数。</p>

<p>基本上使用起来还是比较方便的，详细的信息可以查看官方的文档：<a href="http://gentlebytes.com/appledoc/">http://gentlebytes.com/appledoc/</a></p>
]]></content>
  </entry>
  
</feed>
