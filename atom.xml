<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-02-27T13:54:53+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用brew cask来安装Mac应用]]></title>
    <link href="http://blog.devtang.com/blog/2014/02/26/the-introduction-of-homebrew-and-brewcask/"/>
    <updated>2014-02-26T21:38:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/02/26/the-introduction-of-homebrew-and-brewcask</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p><a href="https://github.com/phinze/homebrew-cask"><code>brew cask</code></a>是一个用命令行管理Mac下应用的工具，它是基于<a href="http://brew.sh/"><code>homebrew</code></a>的一个增强工具。</p>

<p><code>homebrew</code>可以管理Mac下的命令行工具，例如<code>imagemagick</code>, <code>nodejs</code>，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install imagemagick
</span><span class='line'>brew install node
</span></code></pre></td></tr></table></div></figure>


<p>而使用上<code>brew cask</code>之后，你还可以用它来管理Mac下的Gui程序，例如<code>qq</code>, <code>chrome</code>, <code>evernote</code>等，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew cask install qq
</span><span class='line'>brew cask install google-chrome
</span><span class='line'>brew cask install evernote
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>安装</h2>

<h3>安装homebrew</h3>

<p>用以下一行命令即可安装homebrew</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<p>之后执行 <code>brew doctor</code> 命令可以看看<code>homebrew</code>的环境是否正常。通常第一次安装完brew之后，还需要安装苹果的<code>Command Line Tools</code>。</p>

<h3>安装cask</h3>

<p>用如下命令来安装cask:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap phinze/cask
</span><span class='line'>brew install brew-cask</span></code></pre></td></tr></table></div></figure>


<h2>LaunchRocket</h2>

<p>另外再附带推荐一个工具。</p>

<p><a href="https://github.com/jimbojsb/launchrocket">LaunchRocket</a>是一个管理brew安装的service的工具，安装之后可以看所有的service的运行状态，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/LaunchRocketUI.png"></p>

<p>安装<code>LaunchRocket</code>就要用到我刚刚提的<code>brew cask</code>，用如下命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap jimbojsb/launchrocket
</span><span class='line'>brew cask install launchrocket</span></code></pre></td></tr></table></div></figure>


<p>之后LauchRocket设置页面找到（如下图所示），它的启动项同时也保存在<code>/opt/homebrew-cask/Caskroom/launchrocket</code>目录中。</p>

<p><img src="http://blog.devtang.com/images/launchRocket.jpg"></p>

<p>启动LauchRocket有点麻烦，需要切换设置页面去手工启动。我自己想到一个办法，方法是把 <code>/opt/homebrew-cask</code>增加到 alfred 的search目录中，然后就可以用alfred来启动了，如下所示：</p>

<ol>
<li>设置alfred</li>
</ol>


<p><img src="http://blog.devtang.com/images/launch-cask-1.jpg"></p>

<ol>
<li>用alfred启动LauchRocket</li>
</ol>


<p><img src="http://blog.devtang.com/images/launch-cask-2.jpg"></p>

<p>大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa - iOS开发的新框架]]></title>
    <link href="http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction/"/>
    <updated>2014-02-11T18:47:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction</id>
    <content type="html"><![CDATA[<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/reactivecocoa-ios-new-develop-framework">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h2>什么是ReactiveCocoa</h2>

<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>（其简称为RAC）是由<a href="https://github.com/blog/1107-reactivecocoa-for-a-better-world">Github</a> 开源的一个应用于iOS和OS X开发的新框架。RAC具有函数式编程和响应式编程的特性。它主要吸取了.Net的 <a href="http://msdn.microsoft.com/en-us/data/gg577609">Reactive Extensions</a>的设计和实现。</p>

<h2>ReactiveCocoa试图解决什么问题</h2>

<p>经过一段时间的研究，我认为ReactiveCocoa试图解决以下3个问题：</p>

<ol>
<li>传统iOS开发过程中，状态以及状态之间依赖过多的问题</li>
<li>传统MVC架构的问题：Controller比较复杂，可测试性差</li>
<li>提供统一的消息传递机制</li>
</ol>


<!-- more -->


<h3>传统iOS开发过程中，状态以及状态之间依赖过多的问题</h3>

<p>我们在开发iOS应用时，一个界面元素的状态很可能受多个其它界面元素或后台状态的影响。</p>

<p>例如，在用户帐户的登录界面，通常会有2个输入框（分别输入帐号和密码）和一个登录按钮。如果我们要加入一个限制条件：当用户输入完帐号和密码，并且登录的网络请求还未发出时，确定按钮才可以点击。通常情况下，我们需要监听这两个输入框的状态变化以及登录的网络请求状态，然后修改另一个控件的<code>enabled</code>状态。</p>

<p>传统的写法如下（该示例代码修改自<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa官网</a> ） ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ObservationContext</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ObservationContext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">LoginManager</span><span class="p">.</span><span class="n">sharedManager</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>                                 <span class="nl">forKeyPath:</span><span class="s">@&quot;loggingIn&quot;</span>
</span><span class='line'>                                    <span class="nl">options:</span><span class="n">NSKeyValueObservingOptionInitial</span>
</span><span class='line'>                                    <span class="nl">context:</span><span class="o">&amp;</span><span class="n">ObservationContext</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">usernameTextField</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">updateLogInButton</span><span class="p">)</span>
</span><span class='line'>                     <span class="nl">forControlEvents:</span><span class="n">UIControlEventEditingChanged</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">passwordTextField</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">updateLogInButton</span><span class="p">)</span>
</span><span class='line'>                     <span class="nl">forControlEvents:</span><span class="n">UIControlEventEditingChanged</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateLogInButton</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">textFieldsNonEmpty</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">usernameTextField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">passwordTextField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">readyToLogIn</span> <span class="o">=</span> <span class="o">!</span><span class="n">LoginManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">.</span><span class="n">isLoggingIn</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">loggedIn</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">logInButton</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">textFieldsNonEmpty</span> <span class="o">&amp;&amp;</span> <span class="n">readyToLogIn</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span> <span class="nf">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
</span><span class='line'>                        <span class="nf">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span> <span class="nf">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">context</span> <span class="o">==</span> <span class="n">ObservationContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">updateLogInButton</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">super</span> <span class="nl">observeValueForKeyPath:</span><span class="n">keyPath</span> <span class="nl">ofObject:</span><span class="n">object</span>
</span><span class='line'>                               <span class="nl">change:</span><span class="n">change</span> <span class="nl">context:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>RAC通过引入信号（Signal）的概念，来代替传统iOS开发中对于控件状态变化检查的代理（delegate）模式或target-action模式。因为RAC的信号是可以组合（combine）的，所以可以轻松地构造出另一个新的信号出来，然后将按钮的<code>enabled</code>状态与新的信号绑定。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">RAC</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">logInButton</span><span class="p">,</span> <span class="n">enabled</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span><span class="n">RACSignal</span>
</span><span class='line'>    <span class="nl">combineLatest:</span><span class="err">@</span><span class="p">[</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">usernameTextField</span><span class="p">.</span><span class="n">rac_textSignal</span><span class="p">,</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">passwordTextField</span><span class="p">.</span><span class="n">rac_textSignal</span><span class="p">,</span>
</span><span class='line'>        <span class="n">RACObserve</span><span class="p">(</span><span class="n">LoginManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">,</span> <span class="n">loggingIn</span><span class="p">),</span>
</span><span class='line'>        <span class="n">RACObserve</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">loggedIn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span> <span class="nl">reduce:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">username</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">,</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">loggingIn</span><span class="p">,</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">loggedIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="err">@</span><span class="p">(</span><span class="n">username</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">password</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">loggingIn</span><span class="p">.</span><span class="n">boolValue</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">loggedIn</span><span class="p">.</span><span class="n">boolValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在引入RAC之后，以前散落在<code>action-target</code>或KVO的回调函数中的判断逻辑被统一到了一起，从而使得登录按钮的<code>enabled</code>状态被更加清晰地表达了出来。</p>

<p>除了组合（combine）之外，RAC的信号还支持链式（chaining）和过滤（filter)，以方便将信号进行进一步处理。</p>

<h3>试图解决MVC框架的问题</h3>

<p>对于传统的<a href="http://zh.wikipedia.org/zh-cn/MVC">Model-View-Controller</a>的框架，Controller很容易变得比较庞大和复杂。由于Controller承担了Model和View之间的桥梁作用，所以Controller常常与对应的View和Model的耦合度非常高，这同时也造成对其做单元测试非常不容易，对iOS工程的单元测试大多都只在一些工具类或与界面无关的逻辑类中进行。</p>

<p>RAC的信号机制很容易将某一个Model变量的变化与界面关联，所以非常容易应用<a href="http://en.wikipedia.org/wiki/Model_View_ViewModel">Model-View-ViewModel</a> 框架。通过引入ViewModel层，然后用RAC将ViewModel与View关联，View层的变化可以直接响应ViewModel层的变化，这使得Controller变得更加简单，由于View不再与Model绑定，也增加了View的可重用性。</p>

<p>因为引入了ViewModel层，所以单元测试可以在ViewModel层进行，iOS工程的可测试性也大大增强了。InfoQ也曾撰文介绍过MVVM：<a href="http://www.infoq.com/cn/articles/mvvm-revelation/">《MVVM启示录》</a> 。</p>

<h3>统一消息传递机制</h3>

<p>iOS开发中有着各种消息传递机制，包括KVO、Notification、delegation、block以及target-action方式。各种消息传递机制使得开发者在做具体选择时感到困惑，例如在objc.io上就有<a href="http://www.objc.io/issue-7/communication-patterns.html">专门撰文</a>（<a href="http://beyondvincent.com/blog/2013/12/14/124-communication-patterns/">破船的翻译</a> ），介绍各种消息传递机制之间的差异性。</p>

<p>RAC将传统的UI控件事件进行了封装，使得以上各种消息传递机制都可以用RAC来完成。示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// KVO</span>
</span><span class='line'><span class="p">[</span><span class="n">RACObserve</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">username</span><span class="p">)</span> <span class="nl">subscribeNext:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;成员变量 username 被修改成了：%@&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// target-action</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">button</span><span class="p">.</span><span class="n">rac_command</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RACCommand</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSignalBlock:</span><span class="o">^</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;按钮被点击&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="n">empty</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notification</span>
</span><span class='line'><span class="p">[[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">rac_addObserverForName:</span><span class="n">UIKeyboardDidChangeFrameNotification</span>
</span><span class='line'>                    <span class="nl">object:</span><span class="nb">nil</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">subscribeNext:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;键盘Frame改变&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Delegate</span>
</span><span class='line'><span class="p">[[</span><span class="n">self</span> <span class="nl">rac_signalForSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">viewWillAppear:</span><span class="p">)]</span> <span class="nl">subscribeNext:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">debugLog</span><span class="p">(</span><span class="s">@&quot;viewWillAppear方法被调用 %@&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>RAC的<code>RACSignal</code> 类也提供了<code>createSignal</code>方法来让用户创建自定义的信号，如下代码创建了一个下载指定网站内容的信号。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">urlResults</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithContentsOfURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://www.devtang.com&quot;</span><span class="p">]</span>
</span><span class='line'>                                                    <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span>
</span><span class='line'>                                                       <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;download&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendError:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext:</span><span class="n">result</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;clean up&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何使用ReactiveCocoa</h2>

<p>ReactiveCocoa可以在iOS和OS X的应用开发中使用，对于iOS开发者，可以将<a href="https://github.com/ReactiveCocoa/ReactiveCocoa.git">RAC源码</a>下载编译后，使用编译好的<code>libReactiveCocoa-iOS.a</code>文件。</p>

<p>开发者也可以用<a href="http://cocoapods.org/">CocoaPods</a>来设置目标工程对ReactiveCocoa的依赖，只需要编辑Podfile文件，增加如下内容即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">ReactiveCocoa</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ReactiveCocoa的特点</h2>

<p>RAC在应用中大量使用了block，由于Objective-C语言的内存管理是基于<a href="http://zh.wikipedia.org/zh-cn/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0">引用计数</a> 的，为了避免循环引用问题，在block中如果要引用self，需要使用<code>@weakify(self)</code>和<code>@strongify(self)</code>来避免强引用。另外，在使用时应该注意block的嵌套层数，不恰当的滥用多层嵌套block可能给程序的可维护性带来灾难。</p>

<p>RAC的编程方式和传统的MVC方式差异巨大，所以需要较长的学习时间。并且，业界内对于RAC并没有广泛应用，这造成可供参考的项目和教程比较欠缺。
另外，RAC项目本身也还在快速演进当中，1.x版本和2.x版本API改动了许多，3.0版本也正在快速开发中，对它的使用也需要考虑后期的升级维护问题。</p>

<p>作为一个iOS开发领域的新开源框架，ReactiveCocoa带来了函数式编程和响应式编程的思想，值得大家关注并且学习。</p>

<h2>一些学习资源</h2>

<h3>博客&amp;教程</h3>

<ul>
<li><a href="http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/">http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/</a></li>
<li><a href="http://blog.bignerdranch.com/4549-data-driven-ios-development-reactivecocoa/">http://blog.bignerdranch.com/4549-data-driven-ios-development-reactivecocoa/</a></li>
<li><a href="http://en.wikipedia.org/wiki/Functional_reactive_programming">http://en.wikipedia.org/wiki/Functional_reactive_programming</a></li>
<li><a href="http://www.teehanlax.com/blog/reactivecocoa/">http://www.teehanlax.com/blog/reactivecocoa/</a></li>
<li><a href="http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/">http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/</a></li>
<li><a href="http://nshipster.com/reactivecocoa/">http://nshipster.com/reactivecocoa/</a></li>
<li><a href="http://cocoasamurai.blogspot.com/2013/03/basic-mvvm-with-reactivecocoa.html">http://cocoasamurai.blogspot.com/2013/03/basic-mvvm-with-reactivecocoa.html</a></li>
<li><a href="http://iiiyu.com/2013/09/11/learning-ios-notes-twenty-eight/">http://iiiyu.com/2013/09/11/learning-ios-notes-twenty-eight/</a></li>
<li><a href="https://speakerdeck.com/andrewsardone/reactivecocoa-at-mobidevday-2013">https://speakerdeck.com/andrewsardone/reactivecocoa-at-mobidevday-2013</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/hh848246.aspx">http://msdn.microsoft.com/en-us/library/hh848246.aspx</a></li>
<li><a href="http://www.itiger.me/?p=38">http://www.itiger.me/?p=38</a></li>
<li><a href="http://blog.leezhong.com/ios/2013/12/27/reactivecocoa-2.html">http://blog.leezhong.com/ios/2013/12/27/reactivecocoa-2.html</a></li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md">https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md</a></li>
<li><a href="http://www.haskell.org/haskellwiki/Functional_Reactive_Programming">http://www.haskell.org/haskellwiki/Functional_Reactive_Programming</a></li>
<li><a href="http://blog.zhaojie.me/2009/09/functional-reactive-programming-for-csharp.html">http://blog.zhaojie.me/2009/09/functional-reactive-programming-for-csharp.html</a></li>
</ul>


<h3>代码</h3>

<ul>
<li><a href="https://github.com/Machx/MVVM-IOS-Example">https://github.com/Machx/MVVM-IOS-Example</a></li>
<li><a href="https://github.com/ReactiveCocoa/RACiOSDemo">https://github.com/ReactiveCocoa/RACiOSDemo</a></li>
</ul>


<h3>书籍</h3>

<ul>
<li><a href="https://leanpub.com/iosfrp">https://leanpub.com/iosfrp</a></li>
</ul>


<h3>视频</h3>

<ul>
<li><a href="http://vimeo.com/65637501">http://vimeo.com/65637501</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己动手给iMac换SSD]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/26/add-ssd-to-old-imac/"/>
    <updated>2014-01-26T22:06:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/26/add-ssd-to-old-imac</id>
    <content type="html"><![CDATA[<p>公司的iMac是2011年款的，经过2年的使用，现在已经变得比较慢了，用<code>htop</code>看了一下，其实cpu占用率一直不高，主要是磁盘IO比较慢，所以考虑自己动手给iMac换一个SSD。在此将整个过程分享给大家。</p>

<!-- more -->


<p>如果你需要备份系统，可以拿一个移动硬盘，使用<code>Time Machine</code>功能将需要的内容备份到移动硬盘上。</p>

<p>另外你还需要准备一些工具，我是借同事的<a href="http://www.amazon.cn/%E5%8F%B0%E6%B9%BE%E8%80%81A-38%E5%90%881%E6%89%8B%E6%9C%BA%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%BB%B4%E4%BF%AE%E7%B2%BE%E5%AF%86%E8%9E%BA%E4%B8%9D%E5%88%80%E5%A5%97%E8%A3%85-%E8%8B%B9%E6%9E%9C%E6%8B%86%E6%9C%BA%E5%B7%A5%E5%85%B7%E7%BB%84%E5%90%88-LA613138/dp/B00E7ICEXM/ref=sr_1_2?ie=UTF8&amp;qid=1390717853&amp;sr=8-2&amp;keywords=%E8%80%81A">老A苹果拆机工具组合</a>，这个工具箱可以拆苹果的各种设备，上次还用它拆了一次iPhone4s。</p>

<h2>硬件更换步骤</h2>

<p>换SSD的步骤主要参考自：<a href="http://www.ifixit.com/Guide/iMac+Intel+21.5-Inch+EMC+2428+Hard+Drive+Replacement/5954">ifixit上的教程</a>。感兴趣的朋友可以一试。其实步骤相当简单，简单说一下：</p>

<ol>
<li>把iMac平放，用吸盘吸开屏幕盖。</li>
<li>取下屏幕左右各4个螺丝，然后轻轻抬起屏幕（注意不要抬太高，因为后面连着线）。</li>
<li>把屏幕与主版连接的4根线拆下来，之后将屏幕移除。</li>
<li>取下硬盘上的2个螺丝，然后将硬盘的数据线和电源线拔掉，将硬盘轻轻取出来。</li>
<li>将SSD接上数据线和电源线。</li>
<li>做步骤3的逆向过程，把屏幕接上4根线，然后将屏幕左右各4个螺丝拧上。</li>
<li>盖上屏幕盖，这个磁力很强，要小心手不要被夹住。</li>
</ol>


<p>换好之后，接通电源听到正常的启动声音的话，就表示硬件自检没问题了。</p>

<h2>安装操作系统</h2>

<p>SSD上没有带Mac系统，所以要先把系统装上去。将苹果最新的系统刻录在U盘或SD卡上，然后接到iMac上。启动时按住<code>Option</code>键，等一段时间，就可以选择启动磁盘，我们选择从U盘启动。</p>

<p>U盘启动之后，先进入<code>Disk Utility</code>，将刚刚装上的SSD分区格式化成<code>Mac OS扩展（日志式）</code>。然后返回，选择安装Mac操作系统。</p>

<p>这个比较坑的一点是系统显示的<code>估计安装时间</code>只有大约15分钟，但是进行到最后1分钟时，却大概要再等15分钟才能结束，这个时候不要太心急。安装完成之后会进入第一次重启，然后再次显示正在安装，这个时候大概又需要等20分钟，不过不用任何操作，只用看着就行了。20分钟后会第二次重启，重启之后就进入到欢迎界面了。</p>

<p>进入欢迎界面后，先简单设置一下进入系统，安装2个小软件：</p>

<ol>
<li><a href="http://exirion.net/ssdfanctrl/">SSD fan control</a></li>
<li><a href="http://www.groths.org/software/trimenabler/">Trim Enabler</a></li>
</ol>


<p>这主要是因为iMac的温度感应模块在原有的硬盘上，换下来之后，风扇就会狂转，只能用第三方软件来控制其转速。另一个工具是朋友推荐我安装的，没有仔细研究用处。</p>

<h2>迁移数据</h2>

<p>之后，你可以用<code>Time machine</code>或<code>迁移助理</code>，将这台电脑的数据从备份中恢复。我是使用的<code>迁移助理</code>，将我另一台Macbook Air的系统恢复过去的。</p>

<h2>其它</h2>

<ol>
<li>我换的是21.5寸的iMac，如果是27寸的iMac，因为内部空间足够，所以可以尝试将SSD和原有的硬盘都保留，这样就可以自己组<code>fusion drive</code>。不过更换方式就要相对麻烦一些，感觉兴趣的可以自己在ifixit上找相关的教程。</li>
<li>显示屏上的连接线都很脆弱，更换的时候要小心，我在尝试能否象27寸iMac一样同时将原有硬盘和SSD保留的时候，就不小心压坏了显示屏上的连接线的一根针角。于是花了80块钱在<a href="http://item.taobao.com/item.htm?id=20038464332">淘宝</a>上重新买了一根线才安好。所以大家一定别着急，换的时候小心一些。附一张损坏的连接线照片。</li>
</ol>


<p><img src="http://blog.devtang.com/images/imac-broken-cable.jpg"></p>

<p>总之，自动动手换SSD不是那么复杂，胆大心细一些就可以轻松搞定。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非换行空格在CoreText排版上的问题]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/23/the-issue-of-non-breaking-space-in-coretext/"/>
    <updated>2014-01-23T17:36:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/23/the-issue-of-non-breaking-space-in-coretext</id>
    <content type="html"><![CDATA[<p>分享一个在使用Core Text时遇到的问题。</p>

<h2>问题描述</h2>

<p>我们的猿题库界面因为有图片、公式需要混排，所以用的是Core Text实现的排版。</p>

<p>在使用中，发现一些英文题目的换行方式不对，
我们设置的是按单词换行，但是总是有些题目的换行并不是按单词的，造成显示上比较错乱，如下图所示。图中unchangeable, study, falls 三个单词都被生生截断了，造成阅读上的不适。</p>

<!-- more -->


<p><img src="http://blog.devtang.com/images/non-breaking-space-1.png"></p>

<h2>解决方案</h2>

<p>经过我们的分析，我们最终发现这是由于题目内容中有<a href="http://en.wikipedia.org/wiki/Non-breaking_space">非换行空格</a>（<code>non-breaking-space</code>）造成的。根据<a href="(http://en.wikipedia.org/wiki/Non-breaking_space">wikipedia</a>)上的介绍，该字符的ASCII码为160，主要做用如下：</p>

<blockquote><p>Text-processing software typically assumes that an automatic line break may be inserted anywhere a space character occurs; a non-breaking space prevents this from happening (provided the software recognizes the character). For example, if the text &#8220;100 km&#8221; will not quite fit at the end of a line, the software may insert a line break between &#8220;100&#8221; and &#8220;km&#8221;. To avoid this undesirable behaviour, the editor may choose to use a non-breaking space between &#8220;100&#8221; and &#8220;km&#8221;. This guarantees that the text &#8220;100 km&#8221; will not be broken: if it does not fit at the end of a line it is moved in its entirety to the next line.</p></blockquote>

<p>于是我们大概知道整个原因了：编辑在后台录入题目时，是在网页做的富文本编辑器里面，里面的空格输入的是 <code>&amp;nbsp;</code>，然后这个空格转存到数据库中会转成 非换行空格（<code>non-breaking-space</code>），也就是ASCII为160的空格。最后传到iPhone这边，用Core Text排版时，Core Text认为遇到这个空白符不应该换行，于是就一直不换行，直到显示不了了才强制换行，就造成了单词被截断。</p>

<p>解决办法是在客户端上用以下代码将这种空格替换成普通的空格，普通的空格ASCII码为32。（附：<a href="http://www.weste.net/tools/ASCII.asp">ASCII码表</a>）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 因为显示效果原因，从直观上看不出2个空格在编码上的差异，不过代码复制到Xcode中能看出来。</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">content</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="p">[</span><span class="n">content</span> <span class="nl">stringByReplacingOccurrencesOfString:</span><span class="s">@&quot; &quot;</span> <span class="nl">withString:</span><span class="s">@&quot; &quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终改好的效果如下所示：</p>

<p><img src="http://blog.devtang.com/images/non-breaking-space-2.png"></p>

<h2>其它</h2>

<p>感谢 <a href="http://weibo.com/onevcat">@onevcat</a> 提供信息，让我找到问题的根源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[作为码农，我们为什么要写作]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/08/why-we-need-write/"/>
    <updated>2014-01-08T21:51:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/08/why-we-need-write</id>
    <content type="html"><![CDATA[<p>在程序员这个行业，坚持做技术写作的人一直比较少。我和身边的朋友沟通后，发现他们除了借口没有时间外，大多没有意识到写作带来的收益。在他们看来，将自己学到的知识简单记录下来就足够自己需要的时候回顾了。而技术写作通常需要花更多时间，因为需要将技术的细节以及来龙去脉讲清楚。</p>

<p>不得不承认，这的确是一个事实，通常情况下，把一个知识讲清楚比理解它更难。那我们为什么要花时间写作呢？我想写作至少有以下好处。</p>

<!-- more -->


<h2>提高自己对知识的掌握层次</h2>

<p>美国教育心理学家<a href="http://zh.wikipedia.org/wiki/%E6%9C%AC%E5%82%91%E6%98%8E%C2%B7%E5%B8%83%E9%AD%AF%E5%A7%86">Bloom</a>将知识认知分为了两个维度，其中认知历程维度又分为6个层次，分别为：记忆、理解、应用、分析、评鉴、创造。如下图所示，层次越高，表示对知识的掌握程度越深。</p>

<p><img src="http://blog.devtang.com/images/why-write-1.png"></p>

<p>对于写作者来说，在写作过程中，因为需要对知识进行精确地表述，常常要对知识的细节再次的探索。在这个过程中，写作者可能会发现自己的观点不清晰的地方，通过二次学习，使自己的理解更加完善。写作者也可能会发现自己观点中的错误，从而改正自己的曲解。在经历过这段过程后，通常对于自己所写的知识的掌握程度，都上升了一个层次。</p>

<p>我自己的每次技术写作都经历了这样的提高过程。所以，我更多时候是把写作当成学习的一种方式。这种学习方式比普通的学习方式更加深入，效果更好。当然，花费的时间也更多。</p>

<h2>提高表达和沟通的能力</h2>

<p>作为一个程序员，日常的工作大部分时间都是面对电脑。许多人周末也喜欢当一个技术宅，待在家里上网、看电影或者玩游戏来消遣。长时间的面对机器，使得我们的语言表达能力极度衰退。而写作是一个很好的机会，让我们练习自己的表达能力。</p>

<p>长时间写作之后，你会更加注意平时沟通的语言。你的用词更加精准，表达更加生动。在表达能力提高的同时，你的沟通效率也得到提高。</p>

<h2>接受读者的沟通和反馈</h2>

<p>当你的文章通过博客或者InfoQ网站发表出来后，你就会接着获得写作的第三个好处：来自读者的沟通和反馈。一篇好的文章通常会吸引一些读者回复，通过和读者的交流，你可以收获以下好处：</p>

<ol>
<li><p>错误内容反馈：尽管文章在写作时经历过二次学习，但是人难免会犯错。写作将你的思想完全暴露出来，有水平的读者可以指出你文章中的错误，从而使你对知识的理解更加准确。我的很多博客文章都有一些细微错误，通过读者的找反馈，我很快就将错误内容改正过来了，自己的水平也得到了提高。</p></li>
<li><p>认识朋友：一个乐于分享的人总会比沉默寡言的人更招人喜欢。所以通过写作，你可以结交很多和你一样，乐于分享的朋友。</p></li>
<li><p>了解更多相关信息：一些读者会回复说：&#8221;某某框架也用了这个技术方案&#8221;，或者是：&#8221;你的这个实现方案没有另一个某某开源方案好&#8221;。这些信息，作为你当前文章知识点的补充，使你能够了解更多相关的资料，再一次完善自己所学的知识。</p></li>
</ol>


<h2>影响力</h2>

<p>当你持续的写作，坚持一年以上，你就会慢慢收获影响力。这个时候，你也会收到技术大会的分享邀请，出版社的约稿邀请，著名互联网公司的工作邀请，甚至是创业项目的合伙人邀请。你相比那些不分享的人，获得了更多的机会。当然你的技术观点也会被更多人接受，你也会收获到传递知识的乐趣。</p>

<h1>结束语</h1>

<p>在写作过程中，你将收获<code>提高自己对知识的掌握层次</code>和<code>提高表达和沟通的能力</code>的好处。</p>

<p>在写作结束后，你将收获<code>错误内容反馈</code>、<code>认识朋友</code>和<code>了解更多相关信息</code>的好处。</p>

<p>在坚持写作一段时间，你将收获<code>影响力</code>和<code>传递知识的乐趣</code>。</p>

<p>另外，<a href="http://book.douban.com/subject/6709809/">《暗时间》</a>的作者刘未鹏在<a href="http://blog.csdn.net/pongba/article/details/3896311">他的文章</a>，也总结了很多写作的好处，大家也可以看看。</p>

<p>看了写作的这么多好处，你是否心动？那赶快创建一个博客，开始你的技术写作之旅吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/01/2013-summary/"/>
    <updated>2014-01-01T19:04:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/01/2013-summary</id>
    <content type="html"><![CDATA[<p>2013这一年值得总结的有两方面的事情：一是技术分享和收获，二是创业感悟。</p>

<h2>技术分享</h2>

<p>我这一年在技术分享上投入了更多的时间，也得到了非常大的收获。</p>

<p>我主要的技术分享渠道包括：</p>

<ol>
<li><p>个人博客。今年一共完成了24篇原创博客。相比于去年的36篇，少了很多。主要是因为很多精力分散到微信公共帐号上去了。不过今年文章的质量相比去年更高了，写了包括<a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">《Objective-C对象模型及应用》</a>和<a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/">《谈Objective-C Block的实现》</a>这类比较深入的文章。</p></li>
<li><p><a href="http://www.infoq.com/cn/">InfoQ网站</a> 。今年一共完成了7篇发表在<a href="http://www.infoq.com/cn/">InfoQ</a> 上的<a href="http://www.infoq.com/cn/author/%E5%94%90%E5%B7%A7">稿件</a> , 其中原创技术文章4篇，翻译技术新闻1篇，采访稿2篇。</p></li>
</ol>


<!-- more -->


<ol>
<li>我的微信公共帐号：iOSDevTips，从2013年2月21日起，我坚持在这个微博公共帐号中发表iOS开发相关的技巧和文章。有时候是发送自己的文章，但大多数时候，都是一些别处看到的不错的分享转发给大家。坚持到现在快一年了，该公共帐号积累了5600名粉丝。我个人通过该公众帐号推送了140条iOS开发相关的文章。如果你做iOS开发，欢迎扫描下面的二维码关注我的公共帐号。</li>
</ol>


<p><img src="http://blog.devtang.com/images/weixin-qr.jpg"></p>

<ol>
<li>我的微博<a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> ，基本保证了不谈别的，只谈iOS开发。粉丝虽然没怎么涨（现在4400多粉），但是现在我的微博常常可以转发上百。2013年发了996条微博，总共被转发10120次，平均每条微博被转10次。这让我有一种莫名的感觉：我这个算是大号么？</li>
</ol>


<p><img src="http://blog.devtang.com/images/2013-summary-weibo.jpg"></p>

<ol>
<li>技术分享会。主要做了3次：

<ul>
<li>5月25日，在CocoaChina举办的线下聚会，分享了<a href="http://www.cocoachina.com/gamedev/misc/2013/0527/6280.html">粉笔网的架构</a>。</li>
<li>11月23日，在<a href="http://club.alibabatech.org/salon_detail.htm?salonId=44">阿里技术沙龙</a> 分享了 《iOS程序的逆向与安全》，这里有 <a href="http://v.youku.com/v_show/id_XNjQyNTQ0NjIw.html">视频录像</a> 和 <a href="http://vdisk.weibo.com/s/duH0zpCAy2T-">PDF版讲稿</a>。</li>
<li>11月30日，在<a href="http://blog.segmentfault.com/sunny/1190000000348727">DIFF论坛</a>分享了《如何将微信公众账号运营到5000粉丝》。</li>
</ul>
</li>
</ol>


<p>我主要的收获包括：</p>

<ol>
<li><p>认识了大量的iOS开发同行，从他们身上我学到了很多知识。我再也没有刚刚创业时一个人做iOS开发的孤独感了。遇到问题时，除了google和stackoverflow外，实在不行也可以找小伙伴们求助。</p></li>
<li><p>因为向InfoQ投稿的原因，我有幸成为了InfoQ的兼职编辑，也认识了包括池建强、张龙等喜欢写作的大牛，交际圈子一下子扩大了不少。InfoQ时不时组织的编辑聚会也让我获得了一个了解大家不同声音和意见的渠道。对于一些行业信息，这种聚会中的小道消息总是比官方新闻要真实和靠谱得多。</p></li>
<li><p>InfoQ为编辑和讲师专门做了一次演讲培训，让我关注到自己从未注意到的领域，也珍惜起每次演讲的机会，努力提高自己的演讲技能。</p></li>
<li><p>因为写博客的关系，今年还持续收到来自出版社的约稿邀请，其实我一直想写一本iOS进阶开发方面的书，也一直在通过博客积累书稿的素材，所以最终水到渠成。我选择了和电子工业出版社签约。出版社的张老师<a href="http://weibo.com/208686914?topnav=1&amp;wvr=5&amp;topsug=1">永恒的侠少</a> 也特别的开明，使我几乎没有写稿的压力，能够平衡好工作和写作的时间。希望在2014年，这本书能够和读者见面。</p></li>
<li><p>影响力变大了。以前我发一条微博，没有人转，现在随便就超过10次转发。有了影响力之后，大家有什么iOS开发的消息都会主动@我来求转发，使得我可以获得第一手的iOS开发相关的推荐。另外，当我说错什么话或者犯傻的时候，马上就有人来纠正我，使得我能够很快进步。</p></li>
</ol>


<h2>创业</h2>

<h3>创业流水帐</h3>

<p><img src="http://blog.devtang.com/images/2013-summary-fenbi-close.jpg"></p>

<p>2013年我们改变了方向，慢慢关停了粉笔网，然后专注地做猿题库相关的开发和运营。作为一个创业者，我一开始就有创业不顺利的预期，所以这次调整还是挺能接受的。不但能接受，我还非常佩服CEO李勇的果断，我们在粉笔网上几乎没有耗费什么过多的精力，就全力投到新项目猿题库上面了。</p>

<p>因为猿题库这个方向被证明还可行，所以2013是忙碌的一年，找到目标之后就是赶紧开发，我们在2013年春节上线了猿题库行测后，又花2个月上线了猿题库司考，之后花1个半月上线了通用课程平台。通用课程在7月1日上线，我们通过通用课程平台发布了猿题库考研政治、证券从业、初级会计、法律顾问、一级建造师5门课程。</p>

<p><img src="http://blog.devtang.com/images/ape-arch-1.jpg"></p>

<p>之后我们又花了1个月完成了猿题库iPad版的开发。我们选择了将App做成Universal的形式来发布，使其能同时支持iPhone和iPad。</p>

<p>9月份我们发布了猿题库高考，之后我们将之前单独定制的猿题库行测和猿题库司考客户端融入到通用课程的项目中，使我们最终只用维护一套代码。</p>

<p>再之后，我们进入了功能改进阶段。其中比较大的事情包括增加夜间模式，字体调节，搜索功能，离线下载，数据缓存逻辑。</p>

<p>我们还将之前花大力气做的扫描答题卡功能去掉了，因为我们认为用户如果有精力在纸上填涂答题卡的话，还不如直接在手机上录入答案更为方便一些。虽然我之前在这个功能上耗费了大量精力，但我还是挺支持这个决定的。</p>

<p>最后，我们在年底前顺利拿到了<a href="http://tech.sina.com.cn/i/2013-09-10/09528724637.shtml">B轮融资</a>。</p>

<h3>工作效率与身体</h3>

<p>我感觉通过番茄工作法和<a href="https://www.rescuetime.com/">Rescue Time软件</a>等软件，我已经将个人效率提高到极致了。我常常可以保持在电脑前面连续coding几个小时不分神，有些时候眼睛都发酸了，才想起要休息。另外，由于长期运动较少，我的肩膀问题比较多，动起来都会响。所以我不打算再提高效率了，再提高的话可能也不能提多少效率，而且会伤害身体。</p>

<p>我们团队也尽量保证晚上不加班的文化，所以身体还算吃得消，就是锻炼太少了。圣诞节的时候朋友回国，帮我带了一个Fitbit Force，希望通过它提醒我每天坚持运动。</p>

<p><img src="http://blog.devtang.com/images/2013-summary-fitbit-force.jpg"></p>

<h3>个人能力的提高</h3>

<p>随着自己在iOS开发上的积累，在开发上的提高越来越慢，大部分的开发工作对我来说都不太有挑战了。而开发任务排得相当满，几乎没有留给我充电和学习的时间。我还是一个喜欢让自己一直处在学习状态的人，所以基本上就只有利用晚上和周末的时候来学习和积累了。</p>

<p>写作和分享是一个很好的激励方式，促进我通过发表文章的方式完成新知识的学习。不过这其实挺不能长久的，我还是希望是在工作中学习和进步，因为每天分配给工作的时间是最多的，业余时间毕竟相对较少。</p>

<p>我想对于创业的各种苦来说，这算是一个吧。对于这种苦，最好的解决方法就是努力让公司做大做强，只有公司做大了，你才有机会招更多人，同时做更多更有技术含量的事情。</p>

<h3>拆分scrum团队</h3>

<p>随着团队人数的扩张，我们尝试了一次全体参加的计划会议，结果发现效率很低，于是我们将原来的srcum团队拆分成了2个团队，一个客户端团队，一个服务器端团队。团队拆分保证了每个团队都在10人以内的规模，沟通和讨论的效率都高了很多。强烈建议有同样困扰的朋友们尝试一下拆分团队，确实能使得会议更加高效。</p>

<h3>优化发布速度</h3>

<p>我们从产品进入优化迭代期开始，尝试进行每周发布一个Beta版本的发布。Beta版本通过我们的论坛发布，越狱的iPhone用户以及Android用户可以通过论坛下载到最新的Beta版本。每完成4个Beta版，我们会将功能提交到AppStore审核。</p>

<p>每周一个Beta版本发布有利于保证质量，因为相比以前一个月一个版本的提测速度，测试可以尽早介入到新功能的测试中，有助于提早发现和修复bug。</p>

<p>但是每周一个Beta版本其实是压缩了开发时间，因为需要留时间给测试同事测试以及修复bug，以及最终要和服务器端配合上线。每周真正的开发时间通常只有3天半。</p>

<p>大部分时候，我们都会由于时间紧迫造成提测时间较晚，最终又造成修复bug时间不够，于是每周都会有一两天工作到很晚，上线Beta版那天，常常会到晚上10点以后，把实在没精力修复的Bug Later掉，才能完成上线。这样的状态非常伤身体，这段时间也是我比较难受的时期。</p>

<p>每周一个Beta版还有一个问题是无法保证那种大功能的开发，例如我们做离线下载功能，3天半根本无法完成，于是只能将这个功能在两周后的Beta版中提交。这又会涉及多分支的开发和管理，分支间来回切换，又会降低一些开发效率。</p>

<p>整体来说，每周一个Beta版的发布有利于保证产品质量，但是会造成整体的开发进度稍慢于每2周或每月一个版本的发布。如果又要保证开发进度一样，每周的Beta版发布将带来更多的加班工作。</p>

<h3>控制自己的情绪，找准自己的定位</h3>

<p>我有一段时间过于有责任感了，感觉什么事情都应该关心，特别是项目进度。那段时间，我长期处于无法保证按时上线的焦虑状态，并且对产品和美术的调整异常敏感，因为他们的一句话，就表示我又要加班了。</p>

<p>我花了很长时间去转变自己对于项目按时上线的态度，现在，我更加关注自己做为开发者的身份，而不再过多考虑项目在进度上的问题。</p>

<p>当我发现我不再关注进度时，我的开发效率反而提高了，因为心情不再过多地受到进度或需求调整地影响了。这件事情也让我想清楚了要找到自己的位置，不应该为自己不能负责的事情而焦虑。专注于自己能改变和努力的地方，其它事情就应该相信对应的负责人，让他们来操心。</p>

<p>创业对于人心智的磨练还是挺大的，我相信我以后会更加容易控制自己的情绪和行为。</p>

<h2>其它</h2>

<h3>读书</h3>

<p>今年读的主要是iOS方面的书籍，包括如下这些，其中重点推荐<a href="http://as.wiley.com/WileyCDA/WileyTitle/productCd-1118818342.html">《iOS 7 Programming Pushing the Limits》</a></p>

<ul>
<li><a href="http://as.wiley.com/WileyCDA/WileyTitle/productCd-1118818342.html">《iOS 7 Programming Pushing the Limits》</a></li>
<li>《OpenCV 2 Computer Vision Application Programming Cookbook》</li>
<li>《Cocoa设计模式》</li>
<li><a href="http://item.jd.com/11315341.html">《黑客攻防技术宝典·iOS实战篇》</a></li>
<li><a href="http://item.jd.com/11329636.html">《Web之困：现代Web应用安全指南》</a></li>
<li><a href="http://item.jd.com/11258970.html">《Objective-C高级编程：iOS与OS X多线程和内存管理》</a></li>
<li><a href="http://book.douban.com/subject/10555435/">《七周七语言》</a></li>
<li>《不抱怨的世界》</li>
</ul>


<h3>感谢</h3>

<p>2013年有很多贵人帮助，自己才能快速成长，在此感谢2013年陪我一起走过的家人和朋友，和我一起努力的公司同事。</p>

<p>特别要感谢的是：体贴的老婆和岳母大人，宽容细致的老大郭常圳，iOS开发群里的小伙伴（特别是<a href="http://lextang.com/">Lexrus</a>)，InfoQ的老大Kevin和编辑杨Sai、水哥，MacTalk作者<a href="http://weibo.com/idreamland?topnav=1&amp;wvr=5&amp;topsug=1">@池建强</a>，小道消息作者<a href="http://weibo.com/fenng?topnav=1&amp;wvr=5&amp;topsug=1">@Fenng</a>，<a href="http://weibo.com/208686914?topnav=1&amp;wvr=5&amp;topsug=1">@永恒的侠少</a>，<a href="http://weibo.com/jiajungao?topnav=1&amp;wvr=5&amp;topsug=1">@gaosboy</a>，<a href="http://weibo.com/neat9?topnav=1&amp;wvr=5&amp;topsug=1">@neat爷</a>，张兰。谢谢你们～</p>

<h3>个人Milestone</h3>

<ul>
<li>开始写iOS开发的书</li>
<li>创业得到了<a href="http://tech.sina.com.cn/i/2013-09-10/09528724637.shtml">B轮融资</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写面向互联网公司的求职简历]]></title>
    <link href="http://blog.devtang.com/blog/2013/12/22/how-to-write-resume-for-it-company/"/>
    <updated>2013-12-22T20:04:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/12/22/how-to-write-resume-for-it-company</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/resume-title.jpg"></p>

<h2>前言</h2>

<p>我在IT公司工作了六年，有着三年面试官的经历。在面试中，我发现很多人都不能写好一份求职简历，所以今天不谈iOS开发，谈谈如何写一份针对互联网公司的求职简历。</p>

<p>我主要想分享的内容包括：</p>

<ul>
<li>简历的页数不要超过两页（最好一页）

<ul>
<li>删掉不必要的信息</li>
<li>如果你实在太牛逼，最多写2页</li>
</ul>
</li>
<li>重要的信息写在最前面

<ul>
<li>你的联系方式</li>
<li>你最重要的工作经历</li>
</ul>
</li>
<li>不要简单罗列工作经历

<ul>
<li>列出你的工作中有价值的细节（有哪些技术上的困难等）</li>
</ul>
</li>
<li>不要写任何虚假或夸大的信息

<ul>
<li>类似精通java，精通C/C++等</li>
</ul>
</li>
<li>不要附加任何可能带来负面印象的信息

<ul>
<li>不要加照片</li>
<li>不要写政治面貌</li>
<li>不要写奇怪的爱好（打游戏，喝酒，抽烟）</li>
<li>不要写参加过某某培训公司的iOS培训</li>
<li>尽量用专业邮箱</li>
<li>用PDF格式</li>
</ul>
</li>
</ul>


<!-- more -->


<h2>简历不要超过两页（最好一页）</h2>

<p>互联网公司和传统企业有着很大的区别，通常情况下，创新和效率是互联网公司比较追求的公司文化，所以体现在简历上，就是超过一页的简历通常会被认为不够专业。</p>

<p>更麻烦的是，多数这种简历很可能在HR手中就被过滤掉了，因为HR每天会收到大量的简历，一般情况下每份简历在手中的停留时间也就10秒钟左右。而超过一页的简历会需要更多的时间去寻找简历中的有价值部分，对于HR来说，她更倾向于认为这种人通常是不靠谱的，因为写个简历都不懂行规，为什么还要给他面试机会呢?</p>

<p>那么我们应该如何精简简历呢? 简单说来就是一个字：删！</p>

<p>删掉不必要的自我介绍信息，很多求职者会将自己在学校所学的课程罗列上去，例如：C语言，数据结构，数学分析。。。好家伙，一写就是几十门，还放在简历的最上面，就怕面试官看不见。对于这类信息，一个字：删！面试官不Care你上了哪些课程，而且在全中国，大家上的课程也都大同小异，所以没必要写出来。</p>

<p>删除不必要的工作或实习、实践经历。如果你找一份程序员的工作，那么你参加了奥运会的志愿者活动，并且拿到了奖励或者你参加学校的辩论队，获得了最佳辩手这些经历通常是不相关的。诸如此类的还有你帮导师代课，讲了和工作不相关的某某专业课，或者你在学生会工作等等。删除不相关的工作、实习或实践内容可以保证你的简历干净。当然，如果你实在没得可写，比如你是应届生，一点实习经历都没有，那可以适当写一两条，保证你能写够一页的简历，但是那两条也要注意是强调你的团队合作能力或者执行力之类的技能，因为这些才是面试官感兴趣的。</p>

<p>删除不必要的证书：最多写个4、6级的证书，什么教师资格证，中高级程序员证，还有国内的各种什么认证，都是没有人Care的。</p>

<p>删除不必要的细节，作为iOS开发的面试官，很多求职者在介绍自己的iOS项目经历的时候，介绍了这个工程用的工作环境是Mac OS，使用的机器是Mac Mini，编译器是XCode4.x，能够运行在iOS4.3以上环境，还有一些人，把这个项目用到的开源库都写上啦，什么ASI, AFNetworking, Cocoapods啥的。这些其实都不是重点，请删掉。后面我会讲，你应该如何介绍你的iOS项目经历。</p>

<p>自我评价，这个部分是应届生最喜欢写的，各种有没有的优点都写上，例如：</p>

<blockquote><p>性格开朗、稳重、有活力，待人热情、真诚；工作认真负责，积极主动，能吃苦耐劳，用于承受压力，勇于创新；有很强的组织能力和团队协作精神，具有较强的适应能力；纪律性强，工作积极配合；意志坚强，具有较强的无私奉献精神。对待工作认真负责，善于沟通、协调有较强的组织能力与团队精神；活泼开朗、乐观上进、有爱心并善于施教并行；上进心强、勤于学习能不断提高自身的能力与综合素质。</p></blockquote>


<p>这些内容在面试的时候不太好考查，都可以删掉。通常如果有HR面的话，HR自然会考查一些你的沟通，抗压，性格等软实力。</p>

<p>我相信，不管你是刚毕业的学生，还是工作十年的老手，你都可以把你的简历精简到一页A4纸上。</p>

<h2>重要的信息写在最前面</h2>

<p>将你觉得最吸引人的地方写在最前面。如果你有牛逼公司的实习，那就把实习经历写在最前面，如果你在一个牛逼的实验室里面做科研，就把研究成果和论文写出来，如果你有获得过比较牛逼的比赛名次（例如google code, ACM比赛之类），写上绝对吸引眼球。</p>

<p>所以，每个人的简历的介绍顺序应该都是不一样的，不要在网上下载一个模板，然后就一项一项地填：教育经历，实习经历，得奖经历，个人爱好，这样的简历毫无吸引力，也无法突出你的特点。</p>

<p>除了你的个人特点是重要信息外，你的手机号，邮箱，毕业院校，专业以及毕业时间这些也都是非常重要的，一定要写在简历最上面。</p>

<h2>不要简单地罗列工作经历</h2>

<p>不要简单地说你开发了某某iOS客户端。这样简单的罗列你的作品集并不能让面试官很好地了解你的能力，当然，真正在面试时面试官可能会仔细询问，但是一份好的简历，应该省去一些面试官额外询问你的工作细节的时间。</p>

<p>具体的做法是：详细的描述你对于某某iOS客户端的贡献。主要包括：你参与了多少比例功能的开发? 你解决了哪些开发中的有挑战的问题? 你是不是技术负责人?</p>

<p>而且，通过你反思这些贡献，你也可以达到自我审视，如果你发现这个项目你根本什么有价值的贡献都没做，就打了打酱油，那你最好不要写在简历上，否则当面试官在面试时问起时，你会很难回答，最终让他发现你的这个项目经历根本一文不值时，肯定会给一个负面的印象。</p>

<h2>不要写任何虚假或夸大的信息</h2>

<p>刚刚毕业的学生都喜欢写精通Java，精通C/C++，其实代码可能写了不到1万行，我觉得你要精通某个语言，至少得写50万行这个语言的代码才行，而且要对语言的各种内部机制和原理有了解。那些宣称精通Java的同学，连Java如何做内存回收，如何做范型支持，如何做自动boxing和unboxing的都不知道，真不知道为什么要写精通2字。</p>

<p>任何夸大或虚假的信息，在面试时被发现，会造成极差的面试印象，所以你如果对某个知识一知半解，要么就写“使用过”某某，要么就干脆不写。如果你简历实在太单薄，没办法写上了一些自己打酱油的项目，被问起来怎么办? 请看看下面的故事：</p>

<p>我面试过一个同学，他的面试时非常诚实，问他一些简历上的东西，他如果不会，就会老实说，这个我只是使用了一下，确实不清楚细节。对于一些没有技术含量的项目，他也会老实说，这个项目他做的工作比较少，主要是别人在做。最后他还会补充说，“我自认为自己数据结构和算法还不错，要不你问我这方面的知识吧。”</p>

<p>这倒是一个不错的办法，对于一个没有项目经验，但是聪明并且数据结构和算法基础知识扎实的应届生，其实我们是非常愿意培养的。很多人以为公司面试是看经验，希望招进来就能干活，其实不是的，至少我们现在以及我以前在网易招人，面试的是对方的潜力，没有项目经验根本关系不大。</p>

<p>总之，不要写任何虚假或夸大的信息，即使你最终骗得过面试官，进了某公司，如果能力不够，在最初的试用期内，也很可能因为能力不足而被开掉。</p>

<h2>不要附加任何可能带来负面印象的信息</h2>

<p>任何与招聘工作无关的东西，尽量不要提。有些信息提了可能有加分，也可能有减分，取决于具体的面试官。而有些信息大部分情况下都是减分的，我罗列一下我认为是减分的信息。</p>

<ol>
<li><p>不要在简历中附加个人照片。个人长相属于与工作能力不相关的信息，也许你觉得你长得很帅，那你怎么知道你的样子不和面试官的情敌长得一样? 也许你长得很漂亮，那么你怎么知道HR是否被你长得一样的小三把男朋友抢了? 我说得有点极端，那人们对于长相的评价标准确实千差万别，萝卜青菜各有所爱，加上可能有一些潜在的极端情况，所以没必要附加这部分信息。这属于加了可能有加分，也可能有减分的情况。</p></li>
<li><p>不要写你的政治面貌。你以为现在互联网公司还看重你是否是D员吗? 就算看重，你怎么知道他们认为这是加分还是减分? 我知道有一家公司，只要是D员的都直接拒掉。所以，除非你是面试的国企，在互联网公司，这一条最好不要写，写了有可能是平分，也有可能是减分，加分的可能性极小。</p></li>
<li><p>不要写各种奇怪的爱好。喜欢打Dota，喝酒，这类可能带来负面印象的爱好最好不要写。的确有些公司会有这种一起联机玩游戏或者喝酒的文化，不过除非你明确清楚对于目标公司，写上会是加分项，否则还是不写为妙。（顺便说一句，据我了解，阿里的朋友特别喜欢喝酒，面试阿里写上这个可能是加分的，但如果你要是遇到阿里里面正好不喝酒的Team或面试官，不要怪我。）</p></li>
<li><p>不要使用word格式的简历，使用PDF的格式。我在招iOS程序员时，好多人的简历都是Word格式的，mac下的office那么难用，公司好多人机器上都没有mac office。我真怀疑这些人真是的想投简历么? PDF格式的简历通常能展现出简历的专业性。</p></li>
<li><p>不要使用QQ号开头的QQ邮箱，例如 12345@qq.com ，邮箱的事情我之前简单说过，有些人很在乎这个，有些人觉得无所谓，我个人对用数字开头的QQ邮箱的求职者不会有加分，但是对使用gmail邮箱的求职者有加分。因为这涉及到个人的工作效率，使用gmail的人通常会使用邮件组，过滤器，IMAP协议，标签，这些都有助于提高工作效率。如果你非要使用QQ邮箱，也应该申请一个有意义的邮箱名，例如 tangqiao@qq.com 。相关的讨论可以参见知乎上的讨论：<a href="http://www.zhihu.com/question/21649995/answer/18879801">《用人单位拒绝聘用使用 QQ 邮箱发应聘邮件的求职者，这一行为是否合理？》</a></p></li>
<li><p>不要写参加过某某培训公司的iOS培训，特别是那种一、两个月的速成培训。这对于我和身边很多面试官来说，绝对是负分。面试当中，经验是一个考查点，但是学习能力比经验重要多了，如果你是参加培训学习的iOS开发，很可能说明你没有自学能力。这一点似乎很多人都没有搞清楚，大家可以看看 <a href="http://weibo.com/jeffz">@老赵</a> 在他的个人博客上发表的 <a href="http://blog.zhaojie.me/2010/04/why-i-say-no-to-aptech.html">《为什么我要反对北大青鸟》</a>。 我在2年前也写过一篇博客<a href="http://blog.devtang.com/blog/2012/01/20/we-must-self-learning/">《我们必须自学》</a>，详细解释了我的看法。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode Debugger中的Icon符号的意义]]></title>
    <link href="http://blog.devtang.com/blog/2013/12/22/the-secret-of-xcode-debugger-icon/"/>
    <updated>2013-12-22T19:23:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/12/22/the-secret-of-xcode-debugger-icon</id>
    <content type="html"><![CDATA[<p>你注意到了吗？在Xcode中，当你点击查看调用栈的时候，调用栈的每个方法前面都有一个Icon，而且还有好几种不同的样子，如下图所示，你知道它们代表什么意思吗？</p>

<p><img src="http://blog.devtang.com/images/debugger-icon.png"></p>

<!-- more -->


<p>其实它们代表的意义如下：</p>

<ul>
<li>Person icon is User</li>
<li>Mug icon is AppKit (or UIKit)</li>
<li>Briefcase icon is Frameworks</li>
<li>Gear icon is System</li>
<li>Morse code icon is Foundation</li>
<li>Spider web looking icon is Web</li>
</ul>


<p>另外，Debuger中的图标（如下图所示）也是有意义：</p>

<p><img src="http://blog.devtang.com/images/debugger-icon2.jpg"></p>

<p>具体意义如下：</p>

<ul>
<li>L = Local variable</li>
<li>A = Argument</li>
<li>S = Static variable</li>
<li>V = global Variable</li>
<li>R = register</li>
<li>i = Instance variable</li>
<li>E = Expression</li>
</ul>


<p>或许你觉得以上内容没什么实用价值，那再分享一个实用的。</p>

<p>在XCode5中，点击一个小眼睛图标，就直接预览UIImage的内容，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/debugger-preview-image.png"></p>

<p>这个有用吧，祝大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发工具-网络封包分析工具Charles]]></title>
    <link href="http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/"/>
    <updated>2013-12-11T14:03:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/charles-logo.png"></p>

<h2>简介</h2>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<p><a href="http://www.charlesproxy.com/">Charles</a>是在Mac下常用的截取网络封包的工具，在做iOS开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Charles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<p>Charles是收费软件，可以免费试用30天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过30分钟，并且启动时将会有10秒种的延时。</p>

<p>因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为Charles强制关闭而遇到影响。</p>

<p>Charles主要的功能包括：</p>

<ol>
<li>支持SSL代理。可以截取分析<a href="http://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A5%97%E6%8E%A5%E5%B1%82">SSL</a>的请求。</li>
<li>支持流量控制。可以模拟慢速网络以及等待时间（latency）较长的请求。</li>
<li>支持AJAX调试。可以自动将json或xml数据格式化，方便查看。</li>
<li>支持AMF调试。可以将Flash Remoting 或 Flex Remoting信息格式化，方便查看。</li>
<li>支持重发网络请求，方便后端调试。</li>
<li>支持修改网络请求参数。</li>
<li>支持网络请求的截获并动态修改。</li>
<li>检查HTML，CSS和RSS内容是否符合<a href="http://validator.w3.org/">W3C标准</a>。</li>
</ol>


<!-- more -->


<h2>安装Charles</h2>

<p>去Charles的官方网站（<a href="http://www.charlesproxy.com">http://www.charlesproxy.com</a>）下载最新版的Charles安装包，是一个dmg后缀的文件。打开后将Charles拖到Application目录 下即完成安装。</p>

<h2>安装SSL证书</h2>

<p>如果你需要截取分析SSL协议相关的内容。那么需要安装Charles的CA证书。具体步骤如下：</p>

<ol>
<li>去 <a href="http://www.charlesproxy.com/ssl.zip">http://www.charlesproxy.com/ssl.zip</a> 下载CA证书文件。</li>
<li>解压该zip文件后，双击其中的.crt文件，这时候在弹出的菜单中选择“总是信任”，如下所示：<img src="http://blog.devtang.com/images/charles-ca-1.png"></li>
<li>从钥匙串访问中即可看到添加成功的证书。如下所示：
<img src="http://blog.devtang.com/images/charles-ca-2.png"></li>
</ol>


<h2>将Charles设置成系统代理</h2>

<p>之前提到，Charles是通过将自己设置成代理服务器来完成封包截取的，所以使用Charles的第一步是将其设置成系统的代理服务器。</p>

<p>启动Charles后，第一次Charles会请求你给它设置系统代理的权限。你可以输入登录密码授予Charles该权限。你也可以忽略该请求，然后在需要将Charles设置成系统代理时，选择菜单中的 &#8220;Proxy&#8221; -> &#8220;Mac OS X Proxy&#8221;来将Charles设置成系统代理。如下所示：</p>

<p><img src="http://blog.devtang.com/images/charles-set-system-proxy.png"></p>

<p>之后，你就可以看到源源不断的网络请求出现在Charles的界面中。</p>

<h2>Charles主界面介绍</h2>

<p><img src="http://blog.devtang.com/images/charles-home.jpg"></p>

<p>Charles主要提供2种查看封包的视图，分别名为“Structure”和&#8221;Sequence&#8221;。</p>

<ol>
<li>Structure视图将网络请求按访问的域名分类。</li>
<li>Sequence视图将网络请求按访问的时间排序。</li>
</ol>


<p>大家可以根据具体的需要在这两种视图之前来回切换。</p>

<p>对于某一个具体的网络请求，你可以查看其详细的请求内容和响应内容。如果响应内容是JSON格式的，那么Charles可以自动帮你将JSON内容格式化，方便你查看。</p>

<h2>过滤网络请求</h2>

<p>通常情况下，我们需要对网络请求进行过滤，只监控向指定目录服务器上发送的请求。对于这种需求，我们有2种办法。</p>

<ol>
<li><p>在主界面的中部的Filter栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：http://yuantiku.com，那么只需要在Filter栏中填入yuantiku即可。</p></li>
<li><p>在Charles的菜单栏选择&#8221;Proxy&#8221;->&#8221;Recording Settings&#8221;，然后选择Include栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。如下图所示：</p></li>
</ol>


<p><img src="http://blog.devtang.com/images/charles-filter-setting.jpg"></p>

<p>通常情况下，我们使用方法1做一些临时性的封包过滤，使用方法2做一些经常性的封包过滤。</p>

<h2>截取iPhone上的网络封包</h2>

<p>Charles通常用来截取本地上的网络封包，但是当我们需要时，我们也可以用来截取其它设备上的网络请求。下面我就以iPhone为例，讲解如何进行相应操作。</p>

<h4>Charles上的设置</h4>

<p>要截取iPhone上的网络请求，我们首先需要将Charles的代理功能打开。在Charles的菜单栏上选择“Proxy”->&#8221;Proxy Settings&#8221;，填入代理端口8888，并且勾上&#8221;Enable transparent HTTP proxying&#8221; 就完成了在Charles上的设置。如下图所示:</p>

<p><img src="http://blog.devtang.com/images/charles-proxy-setting.jpg"></p>

<h4>iPhone上的设置</h4>

<p>首先我们需要获取Charles运行所在电脑的IP地址，打开Terminal，输入<code>ifconfig en0</code>, 即可获得该电脑的IP，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-ifconfig.jpg"></p>

<p>在iPhone的 “设置”->“无线局域网“中，可以看到当前连接的wifi名，通过点击右边的详情键，可以看到当前连接上的wifi的详细信息，包括IP地址，子网掩码等信息。在其最底部有“HTTP代理”一项，我们将其切换成手动，然后填上Charles运行所在的电脑的IP，以及端口号8888，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-iphone-setting.jpg"></p>

<p>设置好之后，我们打开iPhone上的任意需要网络通讯的程序，就可以看到Charles弹出iPhone请求连接的确认菜单（如下图所示），点击“Allow”即可完成设置。</p>

<p><img src="http://blog.devtang.com/images/charles-proxy-confirm.jpg"></p>

<h2>截取SSL信息</h2>

<p>Charles默认并不截取SSL的信息，如果你想对截取某个网站上的所有SSL网络请求，可以在该请求上右击，选择SSL proxy，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-ssl-add-host.jpg"></p>

<p>这样，对于该Host的所有SSL请求可以被截取到了。</p>

<h2>模拟慢速网络</h2>

<p>在做iPhone开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles对此需求提供了很好的支持。</p>

<p>在Charles的菜单上，选择&#8221;Proxy&#8221;->&#8221;Throttle Setting&#8221;项，在之后弹出的对话框中，我们可以勾选上“Enable Throttling”，并且可以设置Throttle Preset的类型。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-throttle-setting.jpg"></p>

<p>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的&#8221;Only for selected hosts&#8221;项，然后在对话框的下半部分设置中增加指定的hosts项即可。</p>

<h2>修改网络请求内容</h2>

<p>有些时候为了调试服务器的接口，我们需要反复尝试不同参数的网络请求。Charles可以方便地提供网络请求的修改和重发功能。只需要在以往的网络请求上点击右键，选择“Edit”，即可创建一个可编辑的网络请求。如下所示：</p>

<p><img src="http://blog.devtang.com/images/charles-edit.jpg"></p>

<p>我们可以修改该请求的任何信息，包括url地址，端口，参数等，之后点击“Execute”即可发送该修改后的网络请求（如下图所示）。Charles支持我们多次修改和发送该请求，这对于我们和服务器端调试接口非常方便。</p>

<p><img src="http://blog.devtang.com/images/charles-execute-request.jpg"></p>

<h2>总结</h2>

<p>通过Charles软件，我们可以很方便地在日常开发中，截取和调试网络请求内容，分析封包协议以及模拟慢速网络。用好Charles可以极大的方便我们对于带有网络请求的App的开发和调试。</p>

<p>参考链接：</p>

<ol>
<li><a href="http://www.charlesproxy.com/overview/about-charles/">Charles主要的功能列表</a></li>
<li><a href="http://www.charlesproxy.com/">Charles官网</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Flurry来统计和分析用户行为]]></title>
    <link href="http://blog.devtang.com/blog/2013/11/14/use-flurry-to-analyse-data/"/>
    <updated>2013-11-14T13:51:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/11/14/use-flurry-to-analyse-data</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p><img src="http://blog.devtang.com/images/flurry-logo.png"></p>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/use-flurry-to-statistics-and-analysis-user-behavior">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<p><a href="http://www.flurry.com/">Flurry</a>是一家专门为移动应用提供数据统计和分析的公司。他们的数据统计分析SDK支持的平台包括iPhone, iPad, Android, Windows Phone, Java ME和BlackBerry。使用Flurry服务的公司包括eBay、Yahoo、Hulu和Skype等超过11万家公司，涉及的应用超过36万个。</p>

<p>利用Flurry提供的分析平台，我们可以很容易地自动统计出应用的使用情况，例如：</p>

<ol>
<li>每天（每周或每月）登录用户数，应用使用次数</li>
<li>每天（每周或每月）新用户数，活跃用户数</li>
<li>用户的所在地、年龄、性别的分布情况</li>
</ol>


<p>Flurry也可以自动统计出移动设备的分类情况，例如：</p>

<ol>
<li>使用3G，Wifi的会话比例</li>
<li>使用iOS系统各版本(例如iOS6.0, iOS7.0等)的比例</li>
<li>使用iOS各种设备（例如iPhone4, iPhone5等)的比例</li>
</ol>


<p>除了上面介绍的自动统计项目，Flurry SDK也提供了统计用的相关API，便于我们针对自己产品的特点，做针对性的统计。例如统计应用中某个按钮的按下次数，或者网络请求的平均响应时间等。</p>

<!-- more -->


<h2>Flurry的基本使用</h2>

<h3>注册和下载对应SDK</h3>

<p>使用Flurry前，需要先到官方网站<a href="http://www.flurry.com/">http://www.flurry.com/</a>注册账号。然后登录到Flurry后台，依次选择 <code>"Applications" -&gt; “Add a New Application"</code> ，增加一个需要统计分析的应用。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/flurry-create-app-1.png"></p>

<p>然后，在接下来的界面之后根据你的应用类型，选择iPhone或iPad应用。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/flurry-create-app-2.png"></p>

<p>接着，填入应用的名字和分类（名字仅用作在Flurry后台和自己的其它应用区分，不需要和应用的真实名字相同），之后点击&#8221;Create App&#8221;，如下所示：</p>

<p><img src="http://blog.devtang.com/images/flurry-create-app-3.png"></p>

<p>到此，我们就成功在后台创建了一个新的应用统计和分析项目。点击下图中的&#8221;Download&#8221;，可以下载需要集成在应用中的SDK。而下图中的提示2中的Key：<code>X28BBKTNZ9H3VYTBDBG3</code>则是我们在集成时用于标识自己应用的ID。</p>

<p><img src="http://blog.devtang.com/images/flurry-create-app-4.png"></p>

<h3>集成SDK</h3>

<p>我们将下载后的SDK解压，可以看到文件列表如下。列表中对我们最重要的文件是Flurry目录下的<code>flurry.h</code>文件和<code>libFlurry_4.3.0.a</code>文件。这2个文件需要复制到Xcode的工程中去。</p>

<p>而<code>ProjectApiKey.txt</code>文件中记录了我们之前创建的应用ID，在在代码中调用SDK初使化时需要使用。</p>

<p><img src="http://blog.devtang.com/images/flurry-sdk-files.png"></p>

<p>接着我们打开Xcode工程，将之前下载解压的Flurry目录拖动添加到工程中，同时在工程的.pch文件中加上 <code>#import "Flurry.h"</code>，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/flurry-setup-in-xcode.png"></p>

<p>接着我们在<code>Link Binary With Libraries</code>中加入如下2个依赖的framework:</p>

<ul>
<li>Security.framework</li>
<li>SystemConfiguration.framework。</li>
</ul>


<p><img src="http://blog.devtang.com/images/flurry-link-library.png"></p>

<p>接着我们打开 <code>AppDelegate.m</code>，在<code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>方法中，加入代码<code>[Flurry startSession:@"X28BBKTNZ9H3VYTBDBG3"];</code>，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/flurry-set-api-key.png"></p>

<p>这样，就完成了Flurry最简单的集成。通过以上短短几步，Flurry就可以帮我们完成应用的基本使用数据的统计和分析。</p>

<h3>自定义统计项</h3>

<p>Flurry提供了<code>logEvent</code>函数，用于实现自定义的统计项。默认情况下，该函数接受一个参数，用于表示当前统计项的名字。</p>

<p>例如我们的界面中有2个按钮，我们想统计它们各自被用户的点击次数，则可以如下代码实现。在该代码中，我们定义了2个自定义的统计项，名字分别为<code>First Button Pressed</code>和<code>Second Button Pressed</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">firstButtonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="s">@&quot;First Button Pressed&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">secondButtonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="s">@&quot;Second Button Pressed&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>logEvent</code>函数也支持添加各种参数，用于做更加精细的统计，例如，我们想在统计用户在同一个页面，点击时不同按钮的次数分布，看哪些按钮更加常用，则统计代码可以如下实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">firstButtonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="s">@&quot;Button Pressed&quot;</span>
</span><span class='line'>      <span class="nl">withParameters:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;target&quot;</span><span class="o">:</span> <span class="s">@&quot;first&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">secondButtonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="s">@&quot;Button Pressed&quot;</span>
</span><span class='line'>      <span class="nl">withParameters:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;target&quot;</span><span class="o">:</span> <span class="s">@&quot;second&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>logEvent</code>函数也支持统计时间，常常用来统计某个复杂的网络操作的耗时或者用户对于某些界面的响应时间。例如，我们想统计用户停留在某个提示界面的时间，则可以用如下代码完成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">//</span>
</span><span class='line'><span class="cp">//  FirstViewController.m</span>
</span><span class='line'><span class="cp">//  FlurryUsageSample</span>
</span><span class='line'><span class="cp">//</span>
</span><span class='line'><span class="cp">//  Created by TangQiao on 13-10-25.</span>
</span><span class='line'><span class="cp">//  Copyright (c) 2013年 TangQiao. All rights reserved.</span>
</span><span class='line'><span class="cp">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;FirstViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define FLURRY_EVENT_KEY @&quot;First View Controller&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">FirstViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">viewWillAppear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 开始统计时间</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Flurry</span> <span class="nl">logEvent:</span><span class="n">FLURRY_EVENT_KEY</span> <span class="nl">timed:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">viewWillDisappear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 结束统计时间</span>
</span><span class='line'>    <span class="p">[</span><span class="n">Flurry</span> <span class="nl">endTimedEvent:</span><span class="n">FLURRY_EVENT_KEY</span> <span class="nl">withParameters:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>查看统计结果</h3>

<p>完成上面的自定义统计的代码后，待应用发布后，我们就可以从后台的<code>Events</code>栏中看到相应的统计结果了。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/flurry-view-events.png"></p>

<h3>统计Crashlog</h3>

<p>Flurry从4.2.3开始，支持应用的Crashlog统计。只需要在<code>AppDelegate.m</code>文件中，在调用<code>startSession</code>方法之前，调用<code>setCrashReportingEnabled:YES</code>即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">setCrashReportingEnabled:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">Flurry</span> <span class="nl">startSession:</span><span class="s">@&quot;YOUR_API_KEY&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这里注意，<font color='red'>一定要在startSession之前调用setCrashReportingEnabled，否则将无法记录Crashlog信息！切记！！</font></p>

<p>之后你就可以从后台管理界面的<code>Errors</code>项中，获得应用的Crashlog信息。</p>

<h2>和其它统计分析平台的对比</h2>

<p>和著名的统计工具<a href="http://www.google.com/analytics/">Google Analytics</a>相比，Flurry的优点是：</p>

<ol>
<li>Flurry专门针对移动端做了许多优化，例如统计流量就小很多。</li>
<li>Flurry没有被墙的问题。</li>
</ol>


<p>Flurry缺点是:</p>

<ol>
<li>Google Analytics的统计功能相对更强大一些。</li>
<li>Google Analytics可以和网页版的统计数据做整合。</li>
</ol>


<p>和国内的分析平台<a href="http://www.umeng.com/">友盟</a>相比，Flurry的优点是：</p>

<ol>
<li>使用Flurry的应用相对更多。根据Flurry和友盟的官方数据，有超过36万应用使用Flurry<sup><a href="http://www.flurry.com/big-data.html">1</a> </sup>，有超过18万应用使用友盟<sup><a href="http://www.umeng.com/analytics">2</a></sup>。</li>
<li>Flurry是国外的公司，保持独立和专注，数据安全性更高；友盟现在已经<a href="http://tech.163.com/13/0426/16/8TDB6H1N00094MOK.html">被阿里收购</a>，当用户的应用涉及领域和阿里有类似或重合的时候，那么该统计数据有潜在的安全性问题。</li>
</ol>


<p>Flurry的缺点是：</p>

<ol>
<li>友盟因为是中国公司，所以对国内开发者非常友善，相关的文档或界面都是中文的。而Flurry并不提供中文的后台管理界面或相关文档。</li>
<li>Flurry的服务器在国外，在响应速度上应该相对比友盟慢一些。但在测试中，Flurry服务器都保证了500ms左右的响应时间，还是比较好的。</li>
</ol>


<h2>总结</h2>

<p>本文介绍了Flurry的基本功能以及如何做自定义的统计，最后与业界其它同类工具做了对比。我也将相关示例代码整理到github上，地址是：<a href="https://github.com/tangqiaoboy/FlurryUsageSample">https://github.com/tangqiaoboy/FlurryUsageSample</a>，愿本文能帮助你更加方便地做应用的统计和分析工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[猿题库iOS客户端的技术细节（三）：基于CoreText的排版引擎]]></title>
    <link href="http://blog.devtang.com/blog/2013/10/21/the-tech-detail-of-ape-client-3/"/>
    <updated>2013-10-21T16:15:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/10/21/the-tech-detail-of-ape-client-3</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本人今年主要在负责猿题库iOS客户端的开发，本文旨在通过分享猿题库iOS客户端开发过程中的技术细节，达到总结和交流的目的。</p>

<p>这是本技术分享系列文章的第三篇。本文涉及的技术细节是：基于CoreText的排版引擎。</p>

<!-- more -->


<h2>CoreText概述</h2>

<p>因为猿题库的做题和解析界面需要复杂的排版，所以我们基于CoreText实现了自己的富文本排版引擎。我们的排版引擎对公式、图片和链接有着良好支持，并且支持各种字体效果混排。对于内容中的图片，支持点击查看大图功能，对于内容中的链接，支持点击操作。</p>

<p>下图是我们应用的一个截图，可以看到公式，图片与文字混排良好。</p>

<p><img src="http://blog.devtang.com/images/ape-coretext-1.png"></p>

<p>对于富文本排版，除了可以用CoreText实现外，还可以用UIWebView实现。我以前写过一篇介绍如何用UIWebView进行复杂内容显示和交互的文章<a href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/">《关于UIWebView和PhoneGap的总结》</a>，里面介绍了使用UIWebView如何处理参数传递，同步与异步等问题，感兴趣的同学也可以翻看。</p>

<p>基于CoreText来实现和基于UIWebView来实现相比，前者有以下好处：</p>

<ol>
<li>CoreText占用的内存更少，UIWebView占用的内存更多。</li>
<li>CoreText在渲染界面前就可以精确地获得显示内容的高度（只要有了CTFrame即可），而UIWebView只有渲染出内容后，才能获得内容的高度（而且还需要用javascript代码来获取）</li>
<li>CoreText的CTFrame可以在后台线程渲染，UIWebView的内容只能在主线程（UI线程）渲染。</li>
<li>基于CoreText可以做更好的原生交互效果，交互效果可以更细腻。而UIWebView的交互效果都是用javascript来实现的，在交互效果上会有一些卡顿存在。例如，在UIWebView下，一个简单的按钮按下效果，都无法做到原生按钮的即时和细腻的按下效果。</li>
</ol>


<p>当然基于CoreText的方案也有一些劣势：</p>

<ol>
<li>CoreText渲染出来的内容不能像UIWebView那样方便地支持内容的复制。</li>
<li>基于CoreText来排版，需要自己处理图片排版相关的逻辑，也需要自己处理链接点击操作的支持。</li>
</ol>


<p>我们最初的猿题库行测第一版采用了基于UIWebView来实现，但是做出来发现一些小的交互细节无法做到精致。所以后来的第二版我们就全部转成用CoreText实现，虽然实现成本上增加了不少，但是应用的交互效果好多了。</p>

<p>使用CoreText也为我们后来的iPad版提供了技术积累，因为iPad版的页面排版更加复杂，用UIWebView是完全无法完成相应的交互和排版需求的。</p>

<p>关于如何基于CoreText来做一个排版引擎，我主要参考的是这篇教程：<a href="http://www.raywenderlich.com/4147/core-text-tutorial-for-ios-making-a-magazine-app">《Core Text Tutorial for iOS: Making a Magazine App》</a> 以及<a href="https://github.com/jverkoey/nimbus">Nimbus</a> 中的<a href="https://github.com/jverkoey/nimbus/blob/master/src/attributedlabel/src/NIAttributedLabel.m">NIAttributeLabel.m</a> 的实现，在这里我就不重复教程中的内容了，我主要讲一些实现细节。</p>

<h2>实现细节</h2>

<h3>服务端接口</h3>

<p>我们在后台实现了一个基于<a href="http://baike.baidu.com/view/168792.htm">UBB</a> 的富文本编译器。使用UBB的原因是：</p>

<ol>
<li>UBB相对于HTML来说，虽然功能较简单，但是能完全满足我们对于富文本排版的需求。</li>
<li>做一个UBB的语法解析器比较简单，便于我们将UBB渲染到各个平台上。</li>
</ol>


<p>为了简化iOS端的实现，我们将UBB的语法解析在服务器端完成。服务器端提供了接口，可以直接获得将UBB解析成类似HTML的<a href="http://baike.baidu.com/subview/14806/8904138.htm?fromId=14806&amp;from=rdtself">文件对象模型(DOM)</a> 的树型数据结构。有了这个树型数据结构，iOS端渲染就简单多了，无非就是递归遍历树型节点，将相关的内容转换成 NSAttributeString即可，之后将NSAttrubiteString转成CoreText的CTFrame即可用于界面的绘制。</p>

<h3>支持图文混排</h3>

<p>支持图文混排在教程：<a href="http://www.raywenderlich.com/4147/core-text-tutorial-for-ios-making-a-magazine-app">《Core Text Tutorial for iOS: Making a Magazine App》</a> 中有介绍，我们在解析DOM树遇到图片节点时，则将该内容转成一个空格，随后设置该空格在绘制时，需要我们自己指定宽高相关信息，而宽高信息在图片节点中都有提供。这样，CoreText引擎在绘制时，就会把相关的图片位置留空，之后我们将图片异步下来下来后，使用CoreGraph相关的API将图片再画在界面上，就实现了图文混排功能。</p>

<p>下面的相关的示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* Callbacks */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">deallocCallback</span><span class="p">(</span> <span class="kt">void</span><span class="o">*</span> <span class="n">ref</span> <span class="p">){</span>
</span><span class='line'>    <span class="p">[(</span><span class="kt">id</span><span class="p">)</span><span class="n">ref</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="n">CGFloat</span> <span class="n">ascentCallback</span><span class="p">(</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ref</span> <span class="p">){</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">height</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)[(</span><span class="n">NSDictionary</span><span class="o">*</span><span class="p">)</span><span class="n">ref</span> <span class="nl">objectForKey:</span><span class="s">@&quot;height&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">[</span><span class="n">FrameParserConfig</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">baselineFromMid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="n">CGFloat</span> <span class="n">descentCallback</span><span class="p">(</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ref</span> <span class="p">){</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">height</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)[(</span><span class="n">NSDictionary</span><span class="o">*</span><span class="p">)</span><span class="n">ref</span> <span class="nl">objectForKey:</span><span class="s">@&quot;height&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">[</span><span class="n">FrameParserConfig</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">baselineFromMid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">static</span> <span class="n">CGFloat</span> <span class="n">widthCallback</span><span class="p">(</span> <span class="kt">void</span><span class="o">*</span> <span class="n">ref</span> <span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)[(</span><span class="n">NSDictionary</span><span class="o">*</span><span class="p">)</span><span class="n">ref</span> <span class="nl">objectForKey:</span><span class="s">@&quot;width&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">appendDelegateData:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">delegateData</span> <span class="nl">ToString:</span><span class="p">(</span><span class="n">NSMutableAttributedString</span><span class="o">*</span><span class="p">)</span><span class="n">contentString</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//render empty space for drawing the image in the text //1</span>
</span><span class='line'>    <span class="n">CTRunDelegateCallbacks</span> <span class="n">callbacks</span><span class="p">;</span>
</span><span class='line'>    <span class="n">callbacks</span><span class="p">.</span><span class="n">version</span> <span class="o">=</span> <span class="n">kCTRunDelegateCurrentVersion</span><span class="p">;</span>
</span><span class='line'>    <span class="n">callbacks</span><span class="p">.</span><span class="n">getAscent</span> <span class="o">=</span> <span class="n">ascentCallback</span><span class="p">;</span>
</span><span class='line'>    <span class="n">callbacks</span><span class="p">.</span><span class="n">getDescent</span> <span class="o">=</span> <span class="n">descentCallback</span><span class="p">;</span>
</span><span class='line'>    <span class="n">callbacks</span><span class="p">.</span><span class="n">getWidth</span> <span class="o">=</span> <span class="n">widthCallback</span><span class="p">;</span>
</span><span class='line'>    <span class="n">callbacks</span><span class="p">.</span><span class="n">dealloc</span> <span class="o">=</span> <span class="n">deallocCallback</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CTRunDelegateRef</span> <span class="n">delegate</span> <span class="o">=</span> <span class="n">CTRunDelegateCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">callbacks</span><span class="p">,</span> <span class="n">delegateData</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">delegateData</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Character to use as recommended by kCTRunDelegateAttributeName documentation.</span>
</span><span class='line'>    <span class="c1">// use &quot; &quot; will lead to wrong width in CTFramesetterSuggestFrameSizeWithConstraints</span>
</span><span class='line'>    <span class="n">unichar</span> <span class="n">objectReplacementChar</span> <span class="o">=</span> <span class="mh">0xFFFC</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span> <span class="n">objectReplacementString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithCharacters:</span><span class="o">&amp;</span><span class="n">objectReplacementChar</span> <span class="nl">length:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">getAttributesWithStyleArray:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//try to apply linespacing attributes to this placeholder</span>
</span><span class='line'>    <span class="n">NSMutableAttributedString</span> <span class="o">*</span> <span class="n">space</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="n">objectReplacementString</span> <span class="nl">attributes:</span><span class="n">attributes</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CFAttributedStringSetAttribute</span><span class="p">((</span><span class="n">CFMutableAttributedStringRef</span><span class="p">)</span><span class="n">space</span><span class="p">,</span> <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">kCTRunDelegateAttributeName</span><span class="p">,</span> <span class="n">delegate</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">delegate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="n">contentString</span> <span class="nl">appendAttributedString:</span><span class="n">space</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">space</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里需要注意的是，用来代替图片的占位符使用空格会带来排版上的异常，具体原因未知，我们猜测是CoreText的bug，参考<a href="https://github.com/jverkoey/nimbus">Nimbus</a> 的实现后，我们使用 <code>0xFFFC</code>作为占位符，就没有遇到问题了。</p>

<h3>支持链接</h3>

<p>支持链接点击的主要实现的方式是：</p>

<ol>
<li>在解析DOM树的时候，记录下链接串在整个富文本中的位置信息（包括offset和length)。</li>
<li>在CoreText渲染到的view上，监听用户操作事件，使用 <code>CTLineGetStringIndexForPosition</code>函数来获得用户点击的位置对应 <code>NSAttributedString</code> 字符串上的位置信息（index)
3.判断第2步得到的index是否在第一步记录的各个链接的区间范围内，如果在范围内，则表示用户点击了某一个链接。</li>
</ol>


<p>这段逻辑的关键代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// test touch point is on link or not</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">LinkData</span> <span class="o">*</span><span class="p">)</span><span class="nf">touchLinkInView:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span> <span class="nf">atPoint:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="nv">point</span> <span class="nf">data:</span><span class="p">(</span><span class="n">CTTableViewCellData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CTFrameRef</span> <span class="n">textFrame</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">ctFrame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CFArrayRef</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">CTFrameGetLines</span><span class="p">(</span><span class="n">textFrame</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">lines</span><span class="p">)</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CFIndex</span> <span class="n">count</span> <span class="o">=</span> <span class="n">CFArrayGetCount</span><span class="p">(</span><span class="n">lines</span><span class="p">);</span>
</span><span class='line'>    <span class="n">LinkData</span> <span class="o">*</span><span class="n">foundLink</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">origins</span><span class="p">[</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CTFrameGetLineOrigins</span><span class="p">(</span><span class="n">textFrame</span><span class="p">,</span> <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">origins</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// CoreText context coordinates are the opposite to UIKit so we flip the bounds</span>
</span><span class='line'>    <span class="n">CGAffineTransform</span> <span class="n">transform</span> <span class="o">=</span>  <span class="n">CGAffineTransformScale</span><span class="p">(</span><span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">),</span> <span class="mf">1.f</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.f</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">linePoint</span> <span class="o">=</span> <span class="n">origins</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CTLineRef</span> <span class="n">line</span> <span class="o">=</span> <span class="n">CFArrayGetValueAtIndex</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">flippedRect</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">getLineBounds:</span><span class="n">line</span> <span class="nl">point:</span><span class="n">linePoint</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectApplyAffineTransform</span><span class="p">(</span><span class="n">flippedRect</span><span class="p">,</span> <span class="n">transform</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">CGRectContainsPoint</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="n">point</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CGPoint</span> <span class="n">relativePoint</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">point</span><span class="p">.</span><span class="n">x</span><span class="o">-</span><span class="n">CGRectGetMinX</span><span class="p">(</span><span class="n">rect</span><span class="p">),</span>
</span><span class='line'>                                                <span class="n">point</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">CGRectGetMinY</span><span class="p">(</span><span class="n">rect</span><span class="p">));</span>
</span><span class='line'>            <span class="n">CFIndex</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">CTLineGetStringIndexForPosition</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">relativePoint</span><span class="p">);</span>
</span><span class='line'>            <span class="n">foundLink</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">linkAtIndex:</span><span class="n">idx</span> <span class="nl">linkArray:</span><span class="n">data</span><span class="p">.</span><span class="n">linkArray</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">foundLink</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>基于CoreText的内容省略</h3>

<p>我们在使用CoreText时，还遇到一个具体排版上的问题。正常情况下，在生成CTFrame之后，只需要调用：<code>CTFrameDraw(self.data.ctFrame, context);</code>即可完成界面的绘制。但是产品提出了一个需求，对于某些界面，当显示不下的时候，需要将多余内容用<code>...</code>来表示。这让我们的绘制逻辑需要特别处理，以下是具体的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="n">NSString</span><span class="o">*</span> <span class="k">const</span> <span class="n">kEllipsesCharacter</span> <span class="o">=</span> <span class="s">@&quot;\u2026&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">CGPathRef</span> <span class="n">path</span> <span class="o">=</span> <span class="n">CTFrameGetPath</span><span class="p">(</span><span class="n">_data</span><span class="p">.</span><span class="n">ctFrame</span><span class="p">);</span>
</span><span class='line'><span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGPathGetBoundingBox</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="n">CFArrayRef</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">CTFrameGetLines</span><span class="p">(</span><span class="n">_data</span><span class="p">.</span><span class="n">ctFrame</span><span class="p">);</span>
</span><span class='line'><span class="n">CFIndex</span> <span class="n">lineCount</span> <span class="o">=</span> <span class="n">CFArrayGetCount</span><span class="p">(</span><span class="n">lines</span><span class="p">);</span>
</span><span class='line'><span class="n">NSInteger</span> <span class="n">numberOfLines</span> <span class="o">=</span> <span class="n">MIN</span><span class="p">(</span><span class="n">_numberOfLines</span><span class="p">,</span> <span class="n">lineCount</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGPoint</span> <span class="n">lineOrigins</span><span class="p">[</span><span class="n">numberOfLines</span><span class="p">];</span>
</span><span class='line'><span class="n">CTFrameGetLineOrigins</span><span class="p">(</span><span class="n">_data</span><span class="p">.</span><span class="n">ctFrame</span><span class="p">,</span> <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">numberOfLines</span><span class="p">),</span> <span class="n">lineOrigins</span><span class="p">);</span>
</span><span class='line'><span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">attributedString</span> <span class="o">=</span> <span class="n">_data</span><span class="p">.</span><span class="n">attributedString</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">CFIndex</span> <span class="n">lineIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">lineIndex</span> <span class="o">&lt;</span> <span class="n">numberOfLines</span><span class="p">;</span> <span class="n">lineIndex</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">lineOrigin</span> <span class="o">=</span> <span class="n">lineOrigins</span><span class="p">[</span><span class="n">lineIndex</span><span class="p">];</span>
</span><span class='line'>    <span class="n">lineOrigin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span>  <span class="n">self</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="p">(</span><span class="n">lineOrigin</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextSetTextPosition</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">lineOrigin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">lineOrigin</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CTLineRef</span> <span class="n">line</span> <span class="o">=</span> <span class="n">CFArrayGetValueAtIndex</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">lineIndex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">shouldDrawLine</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">lineIndex</span> <span class="o">==</span> <span class="n">numberOfLines</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CFRange</span> <span class="n">lastLineRange</span> <span class="o">=</span> <span class="n">CTLineGetStringRange</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">lastLineRange</span><span class="p">.</span><span class="n">location</span> <span class="o">+</span> <span class="n">lastLineRange</span><span class="p">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">CFIndex</span><span class="p">)</span><span class="n">attributedString</span><span class="p">.</span><span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CTLineTruncationType</span> <span class="n">truncationType</span> <span class="o">=</span> <span class="n">kCTLineTruncationEnd</span><span class="p">;</span>
</span><span class='line'>            <span class="n">NSUInteger</span> <span class="n">truncationAttributePosition</span> <span class="o">=</span> <span class="n">lastLineRange</span><span class="p">.</span><span class="n">location</span> <span class="o">+</span> <span class="n">lastLineRange</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">tokenAttributes</span> <span class="o">=</span> <span class="p">[</span><span class="n">attributedString</span> <span class="nl">attributesAtIndex:</span><span class="n">truncationAttributePosition</span>
</span><span class='line'>                                                                 <span class="nl">effectiveRange:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSAttributedString</span> <span class="o">*</span><span class="n">tokenString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="n">kEllipsesCharacter</span>
</span><span class='line'>                                                                              <span class="nl">attributes:</span><span class="n">tokenAttributes</span><span class="p">];</span>
</span><span class='line'>            <span class="n">CTLineRef</span> <span class="n">truncationToken</span> <span class="o">=</span> <span class="n">CTLineCreateWithAttributedString</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFAttributedStringRef</span><span class="p">)</span><span class="n">tokenString</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">truncationString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">attributedString</span> <span class="nl">attributedSubstringFromRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">lastLineRange</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">lastLineRange</span><span class="p">.</span><span class="n">length</span><span class="p">)]</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">lastLineRange</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// Remove any whitespace at the end of the line.</span>
</span><span class='line'>                <span class="n">unichar</span> <span class="n">lastCharacter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">truncationString</span> <span class="n">string</span><span class="p">]</span> <span class="nl">characterAtIndex:</span><span class="n">lastLineRange</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">([[</span><span class="n">NSCharacterSet</span> <span class="n">whitespaceAndNewlineCharacterSet</span><span class="p">]</span> <span class="nl">characterIsMember:</span><span class="n">lastCharacter</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">truncationString</span> <span class="nl">deleteCharactersInRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">lastLineRange</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="p">[</span><span class="n">truncationString</span> <span class="nl">appendAttributedString:</span><span class="n">tokenString</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">CTLineRef</span> <span class="n">truncationLine</span> <span class="o">=</span> <span class="n">CTLineCreateWithAttributedString</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFAttributedStringRef</span><span class="p">)</span><span class="n">truncationString</span><span class="p">);</span>
</span><span class='line'>            <span class="n">CTLineRef</span> <span class="n">truncatedLine</span> <span class="o">=</span> <span class="n">CTLineCreateTruncatedLine</span><span class="p">(</span><span class="n">truncationLine</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">truncationType</span><span class="p">,</span> <span class="n">truncationToken</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">truncatedLine</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// If the line is not as wide as the truncationToken, truncatedLine is NULL</span>
</span><span class='line'>                <span class="n">truncatedLine</span> <span class="o">=</span> <span class="n">CFRetain</span><span class="p">(</span><span class="n">truncationToken</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">CFRelease</span><span class="p">(</span><span class="n">truncationLine</span><span class="p">);</span>
</span><span class='line'>            <span class="n">CFRelease</span><span class="p">(</span><span class="n">truncationToken</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">CTLineDraw</span><span class="p">(</span><span class="n">truncatedLine</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>            <span class="n">CFRelease</span><span class="p">(</span><span class="n">truncatedLine</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">shouldDrawLine</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">shouldDrawLine</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CTLineDraw</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>后记</h2>

<p>以上源码很多都参考了<a href="https://github.com/jverkoey/nimbus">Nimbus</a>的实现，在此再一次表达一下对开源社区的感谢。</p>

<p>在大约2年前，CoreText还是一个新玩意。那时候微博的界面都还是用控件组合得到的。慢慢的，大家都开始接受CoreText，很多应用都广泛地将CoreText应用于自己的界面中，做出来了更加复杂的排版、交互效果。在iOS7之后，苹果推出了更加易于使用的TextKit，使得富文本排版更加容易，相信以后的iOS应用界面会更加美观，交互更加绚丽。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[猿题库iOS客户端的技术细节（二）：答题卡扫描算法]]></title>
    <link href="http://blog.devtang.com/blog/2013/10/19/the-tech-detail-of-ape-client-2/"/>
    <updated>2013-10-19T11:10:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/10/19/the-tech-detail-of-ape-client-2</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本人今年主要在负责猿题库iOS客户端的开发，本文旨在通过分享猿题库iOS客户端开发过程中的技术细节，达到总结和交流的目的。</p>

<p>这是本技术分享系列文章的第二篇。本文涉及的技术细节是：答题卡扫描算法。</p>

<!-- more -->


<h3>问题描述</h3>

<p>我们在调研用户需求的时候，发现有些用户很喜欢我们的猿题库产品，因为我们会根据用户对当前课程的知识点掌握情况，智能地给他出题。但是部分用户还是习惯在纸上做题，所以我们提供了试卷打印功能。</p>

<p>但是，用户如果在纸上答题，无法方便地将答案上传到我们的服务器上。如果我们没有了用户做题数据，就无法根据他的成绩，做针对性的推荐和分析。所以，我们想到一种办法：<strong>用户像传统考试那样，将答题结果填涂在答题卡上，然后我们提供一种用手机摄像头采集填涂结果的答题卡扫描算法，方便用户上传答题数据。</strong></p>

<p><img src="http://blog.devtang.com/images/ape-card-1.jpg"></p>

<p>上图是一个我们试验用的答题卡，通过手机摄像头获取，从中可以看到，该答题卡有以下问题：</p>

<ol>
<li>由于手机摄像头无法完全正对答题卡，拍照角度有偏曲，答题卡在拍照后并不是完全的矩形。</li>
<li>用户填涂区域可能并不饱满和完整。</li>
<li>答题纸边缘可能有用户的草稿或其它干扰识别的信息。</li>
</ol>


<h3>技术解决方案</h3>

<p>我们尝试了多种识别方案，最终采用的方案如下：</p>

<ol>
<li>图象预处理，压缩图像大小，转彩色图像为灰度图像</li>
<li>识别答题卡区域</li>
<li>图象纠偏</li>
<li>答案区域识别</li>
</ol>


<p>该方案及相关算法细节我们还在申请专利，由于专利还在申请过程中，所以我们这次仅展示上述主要步骤的示例图片。等专利完全申请结束后，我会在此将算法细节公开。</p>

<p>上述主要步骤的示例图如下：</p>

<h4>原始图</h4>

<p><img src="http://blog.devtang.com/images/ape-card-1.jpg"></p>

<h4>识别答题卡区域</h4>

<p><img src="http://blog.devtang.com/images/ape-card-2.jpg"></p>

<h4>图象纠偏</h4>

<p><img src="http://blog.devtang.com/images/ape-card-3.jpg"></p>

<h4>答案区域识别</h4>

<p>答案已标注在图片每个题号的右边位置：</p>

<p><img src="http://blog.devtang.com/images/ape-card-4.jpg"></p>

<h3>算法质量</h3>

<h4>算法正确率和召回率</h4>

<p>我们用收集来的1000套样本数据对算法进行评测，最终结果是：扫描题目准确率达到99.67%，召回率达到99.14%。主要识别失败的样本是：页面严重扭曲弯折的答题卡。我们也在一直改进算法，希望能够给用户提供更加精准的扫描结果。</p>

<h4>算法执行时间</h4>

<p>我们觉得让用户直接对着答题卡用拍摄的方式动态识别，比先拍一张照片再识别的方式更加方便。所以我们对答题卡识别算法的执行时间进行了一系列优化，最终保证每次识别时间小于0.1秒，这样的识别时间非常快，基本上用户把手机摄像头对准答题卡，扫描结果就出来了。</p>

<h2>算法的调试和移植</h2>

<p>由于我们整个技术团队都使用Mac电脑进行开发，所以我们对于算法的调试都是在Mac平台上完成的，我使用了开源的图象处理库OpenCV，在搭建OpenCV环境时遇到一些问题，最终完成环境搭建后，我将相关的经验总结在博文<a href="http://blog.devtang.com/blog/2012/10/27/use-opencv-in-ios/">《在MacOS和iOS系统中使用OpenCV》</a>中。</p>

<p>由于算法需要同时应用在iOS和Android平台，所以我主要用C++语言实现算法。Xcode可以很好地支持Objective-C语言和C++语言混编，只需要将相关的源文件扩展名从.m改为.mm即可。而Android平台所采用的Java语言，也支持通过<a href="http://en.wikipedia.org/wiki/Java_Native_Interface">JNI</a>的方式来调用C++的代码。这样就可以方便地将识别算法移植到手机中了。</p>

<h2>总结</h2>

<p>本文介绍了猿题库iOS客户端采用的答题卡扫描算法的大致步骤，以及算法的质量和移植方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[猿题库iOS客户端的技术细节（一）：使用多target来构建大量相似App]]></title>
    <link href="http://blog.devtang.com/blog/2013/10/17/the-tech-detail-of-ape-client-1/"/>
    <updated>2013-10-17T00:43:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/10/17/the-tech-detail-of-ape-client-1</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本人今年主要在负责猿题库iOS客户端的开发，本文旨在通过分享猿题库iOS客户端开发过程中的技术细节，达到总结和交流的目的。</p>

<p>这是本技术分享系列文章的第一篇。本文涉及的技术细节是：采用多Target编译方案来实现多个相似App的开发，以保证我们能够快速地推出多个相似课程的客户端。</p>

<!-- more -->


<h3>问题描述</h3>

<p>今年春节后，我们对外发布了应用<a href="http://yuantiku.com/m?courseSet=xingce">“猿题库-公务员考试行测”</a>，接着我们就开始一个个发布猿题库系列课程应用。到现在半年多过去了，我们一共对外发布了8款应用（如下图所示）。</p>

<p><img src="http://blog.devtang.com/images/ape-arch-1.jpg"></p>

<p>这些课程，随了<a href="http://yuantiku.com/m?courseSet=shenlun">&#8220;猿题库-公务员考试申论&#8221;</a>和其它课程不一样之外，另外7个课程都有着相似，但是又不完全相同的功能和界面。</p>

<p>这些应用的相同点包括：</p>

<ol>
<li>基本相同的注册和登录以及首页逻辑和界面（只是背景图片不一样而已）。</li>
<li>相同的做题逻辑和界面。</li>
<li>基本相同的答题报告显示界面。</li>
<li>基本相同的能力评估报告界面。</li>
</ol>


<p>不同点主要包括：</p>

<ol>
<li>应用图标，启动画面，应用启动后的首页都不一样。</li>
<li>有些课程（例如公务员考试和高考）是有目标考试的概念，不同的目标考试大纲是不一样的。拿高考来举例，北京的高考和上海的高考，就有着完全不一样的考试大纲。高考的文科和理科，又有着完全不同的考试科目。</li>
<li>有些课程会有一些自定义的界面，例如高考的应用可以设置昵称，有些课程的真题练习中是有推荐真题模块的，而有些课程又没有。</li>
<li>有些课程有扫描答题卡功能，有些课程有考前冲刺功能，有些课程有大题专项查看功能，而有些课程又没有上述功能。另外还有一些微小细节，但是解决方法和类似，所以就不一一展开说明。</li>
</ol>


<h3>技术解决方案</h3>

<p>我们的技术解决方案主要说来分4步：</p>

<ol>
<li>通过抽取子项目，构建可复用的大模块。</li>
<li>通过多Target编译的方式，不同课程的在编译时，采用不同的资源文件和源文件。</li>
<li>在第2步的基础上，在项目中创建配置用的Config类，然后在不同Target各自的配置文件中设置不同的Config值。实现课程的差异化界面。</li>
<li>从不同的xib中加载界面。</li>
</ol>


<h4>抽取子项目</h4>

<p>我们首先做的是抽取子项目，从<a href="http://yuantiku.com/m?courseSet=sikao">“猿题库司法考试客户端&#8221;</a>开始，我们将可以重用的模块一一抽取出来，以git submodule的形式组织到项目中。这个抽取过程在开发完猿题库司法考试客户端之后，基本成型了。我们抽取的submodule主要分为4部分：</p>

<ol>
<li>UI Common，涉及可复用的登录界面，注册界面，付费界面，NPS界面，意见反馈界面，关于界面，扫描答题卡界面。另外，我们将一些可复用的UI风格控件也抽取成了相应的静态工厂方法，用于生成统一风格的按钮、背景以及状态栏等。</li>
<li>Core Common，涉及可复用的底层模块。包括网络请求模块，自己封装的Core Text渲染引擎，缓存模块，一些静态util方法等。</li>
<li>Lib Common，所有第三方的开源库依赖，有部分代码根据我们的需求做了修改和定制。</li>
<li>Scan Common, 答题卡扫描识别算法模块，实现核心的扫描算法。</li>
</ol>


<p>以上只是粗粒度划分，这些模块化的子项目可能在以后被重用，例如Core Common完全就可以复用在任何其它项目中。</p>

<h4>构造多个编译Target</h4>

<p>抽取完子项目以后，我们采用多target的方式，将不同课程中的同名资源文件打包进各自的Target中，最后所有课程在一个工程项目中，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/ape-targets.jpg"></p>

<p>先简单介绍一下Xcode中target的概念，苹果在文档中写道：</p>

<blockquote><p>Targets that define the products to build. A target organizes the files and instructions needed to build a product into a sequence of build actions that can be taken.”</p></blockquote>


<p>在Xcode的一个项目中，可以允许建立多个编译的target，每个target代表着最终编译出来的一个App文件，在每个target中，可以添加不同的编译源文件和资源文件。最终，通过我们在不同target之间，修改其 <code>Copy Bundle Resources</code> 和 <code>Compile Sources</code> 配置，使课程之间的差异性得到实现。我们具体的配置方案如下：</p>

<ol>
<li><p>我们的每个课程的资源文件都具有相同的文件名，例如首页背景都叫 HomeBackgroundBg.png ，由于每个课程背景不一样，所以我们在工程中，每一个课程target下，通过修改<code>Copy Bundle Resources</code>，使其都配置有不同的（但是同名） HomeBackgroundBg.png 。这样的好处是，在代码逻辑层面，我们可以完全不用处理课程间资源文件的差异性问题。资源文件的差异性都是通过配置文件来保证的。</p></li>
<li><p>对于文案一类的差别，我们通过修改<code>Compile Sources</code>，使不同的课程有着不同的文案定义文件。通过这样，我们使不同课程有了不同的文案。另外包括后台网络接口的差异性问题，统计项的差异性问题，也都是这样处理的。</p></li>
</ol>


<h4>Config类</h4>

<p>最后，我们使用Config类来完成交互和页面UI组件差异性问题。拿能力评估报告页面来说，不同的课程的页面都有一些差异。我们在公共层的代码中将这些逻辑全部实现，具体的UI在呈现时，通过读取相关的Config类来决定具体如何展示。这样，我们只需要在第2步提供的各个课程的差异性源文件中，完成Config类的配置即可。</p>

<h4>从不同的xib中加载界面</h4>

<p>有些时候，我们仅仅需要的是UI界面排列方式不一样，其它交互逻辑完全一样。对于这种需求，我们尝试同一个view对应有多个xib，然后通过上一步的Config类的信息，来加载不同的xib界面。这样所有的差异性都在不同的xib中解决了，对controller层可以完全透明。</p>

<p>下图是我们报告页面的xib界面，分为：高考课程、有目标考试的课程、没有目标考试的课程三种。由于这3个界面的后台逻辑和交互逻辑都一样，我们通过3个xib来实现它们之间差异性的部分。</p>

<p><img src="http://blog.devtang.com/images/ape-xibs.jpg"></p>

<p>以下是view加载对应的xib的代码逻辑：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">IPadAbilityReportHeaderView</span> <span class="o">*</span><span class="p">)</span><span class="nf">loadFromNib:</span><span class="p">(</span><span class="n">IPadAbilityReportHeaderViewType</span><span class="p">)</span><span class="nv">type</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">nibFileName</span><span class="p">;</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">IPadAbilityReportHeaderViewTypeWithQuiz:</span>
</span><span class='line'>            <span class="n">nibFileName</span> <span class="o">=</span> <span class="s">@&quot;IPadAbilityReportHeaderViewWithQuiz&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">IPadAbilityReportHeaderViewTypeWithoutQuiz:</span>
</span><span class='line'>            <span class="n">nibFileName</span> <span class="o">=</span> <span class="s">@&quot;IPadAbilityReportHeaderViewWithoutQuiz&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">IPadAbilityReportHeaderViewTypeGaokao:</span>
</span><span class='line'>            <span class="n">nibFileName</span> <span class="o">=</span> <span class="s">@&quot;IPadAbilityReportHeaderViewInGaokao&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">nibArray</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">loadNibNamed:</span><span class="n">nibFileName</span> <span class="nl">owner:</span><span class="nb">nil</span> <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">nibArray</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">nibArray</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>通过多target编译方案，我们可以很方便的实现多个相似App的开发，以保证我们能够快速地推出多个相似课程的客户端。同时，由于在一个工程中，我们也可以方便地测试新的代码逻辑在各个课程下是否正常。</p>

<p>该方案可以用来解决“维护大量逻辑相似但是又有细微不同的应用”的需求，希望本文能给业界同行一些帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C对象模型及应用]]></title>
    <link href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/"/>
    <updated>2013-10-15T20:31:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/10/15/objective-c-object-model</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>原创文章，转载请注明出自<a href="http://blog.devtang.com">唐巧的技术博客</a>。</p>

<p>本文主要介绍Objective-C对象模型的实现细节，以及Objective-C语言对象模型中对<code>isa swizzling</code>和<code>method swizzling</code>的支持。希望本文能加深你对Objective-C对象的理解。</p>

<h2>ISA指针</h2>

<p>Objective-C是一门面向对象的编程语言。每一个对象都是一个类的实例。在Objective-C语言的内部，每一个对象都有一个名为isa的指针，指向该对象的类。每一个类描述了一系列它的实例的特点，包括成员变量的列表，成员函数的列表等。每一个对象都可以接受消息，而对象能够接收的消息列表是保存在它所对应的类中。</p>

<p>在XCode中按<code>Shift + Command + O</code>, 然后输入NSObject.h和objc.h，可以打开NSObject的定义头文件，通过头文件我们可以看到，NSObject就是一个包含isa指针的结构体，如下图所示：</p>

<!-- more -->


<p><img src="http://blog.devtang.com/images/class-nsobject-isa.jpg">
<img src="http://blog.devtang.com/images/class-objc-object-isa.jpg"></p>

<p>按照面向对象语言的设计原则，所有事物都应该是对象（严格来说Objective-C并没有完全做到这一点，因为它有象int, double这样的简单变量类型）。在Objective-C语言中，每一个类实际上也是一个对象。每一个类也有一个名为isa的指针。每一个类也可以接受消息，例如<code>[NSObject alloc]</code>，就是向NSObject这个类发送名为<code>alloc</code>消息。</p>

<p>在XCode中按<code>Shift + Command + O</code>, 然后输入runtime.h，可以打开Class的定义头文件，通过头文件我们可以看到，Class也是一个包含isa指针的结构体，如下图所示。（图中除了isa外还有其它成员变量，但那是为了兼容非2.0版的Objective-C的遗留逻辑，大家可以忽略它。）</p>

<p><img src="http://blog.devtang.com/images/class-objc-class-isa.jpg"></p>

<p>因为类也是一个对象，那它也必须是另一个类的实列，这个类就是元类(<code>metaclass</code>)。元类保存了类方法的列表。当一个类方法被调用时，元类会首先查找它本身是否有该类方法的实现，如果没有，则该元类会向它的父类查找该方法，直到一直找到继承链的头。</p>

<p>元类(<code>metaclass</code>)也是一个对象，那么元类的isa指针又指向哪里呢？为了设计上的完整，所有的元类的isa指针都会指向一个根元类(root <code>metaclass</code>)。根元类(root metaclass)本身的isa指针指向自己，这样就行成了一个闭环。上面提到，一个对象能够接收的消息列表是保存在它所对应的类中的。在实际编程中，我们几乎不会遇到向元类发消息的情况，那它的isa指针在实际上很少用到。不过这么设计保证了面向对象的干净，即所有事物都是对象，都有isa指针。</p>

<p>我们再来看看继承关系，由于类方法的定义是保存在元类(<code>metaclass</code>)中，而方法调用的规则是，如果该类没有一个方法的实现，则向它的父类继续查找。所以，为了保证父类的类方法可以在子类中可以被调用，所以子类的元类会继承父类的元类，换而言之，类对象和元类对象有着同样的继承关系。</p>

<p>我很想把关系说清楚一些，但是这块儿确实有点绕，下面这张图或许能够让大家对isa和继承的关系清楚一些（该图片来自<a href="http://www.sealiesoftware.com/blog/class%20diagram.pdf">这里</a>）</p>

<p><img src="http://blog.devtang.com/images/class-diagram.jpg"></p>

<p>该图中，最让人困惑的莫过于Root Class了。在实现中，Root Class是指NSObject，我们可以从图中看出：</p>

<ol>
<li>NSObject类包括它的对象实例方法。</li>
<li>NSObject的元类包括它的类方法，例如alloc方法。</li>
<li>NSObject的元类继承自NSObject类。</li>
<li>一个NSObject的类中的方法同时也会被NSObject的子类在查找方法时找到。</li>
</ol>


<h2>类的成员变量</h2>

<p>如果把类的实例看成一个C语言的结构体（struct），上面说的isa指针就是这个结构体的第一个成员变量，而类的其它成员变量依次排列在结构体中。排列顺序如下图所示（图片来自《iOS 6 Programming Pushing the Limits》）：</p>

<p><img src="http://blog.devtang.com/images/class-member.jpg"></p>

<p>为了验证该说法，我们在XCode中新建一个工程，在main.m中运行如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Father</span> : <span class="nc">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_father</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">Father</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">Child</span> <span class="o">:</span> <span class="n">Father</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">_child</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">Child</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Child</span> <span class="o">*</span> <span class="n">child</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Child</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>  <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们将断点下在 <code>@autoreleasepool</code> 处，然后在Console中输入<code>p *child</code>,则可以看到Xcode输出如下内容，这与我们上面的说法一致。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">p</span> <span class="o">*</span><span class="n">child</span>
</span><span class='line'><span class="p">(</span><span class="n">Child</span><span class="p">)</span> <span class="n">$0</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="n">Father</span><span class="p">)</span> <span class="n">Father</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="n">NSObject</span><span class="p">)</span> <span class="n">NSObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">(</span><span class="n">Class</span><span class="p">)</span> <span class="n">isa</span> <span class="o">=</span> <span class="n">Child</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">_father</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">_child</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>可变与不可变</h2>

<p>因为对象在内存中的排布可以看成一个结构体，该结构体的大小并不能动态变化。所以无法在运行时动态给对象增加成员变量。</p>

<p>相对的，对象的方法定义都保存在类的可变区域中。Objective-C 2.0并未在头文件中将实现暴露出来，但在Objective-C 1.0中，我们可以看到方法的定义列表是一个名为 <code>methodLists</code>的指针的指针（如下图所示）。通过修改该指针指向的指针的值，就可以实现动态地为某一个类增加成员方法。这也是<code>Category</code>实现的原理。同时也说明了为什么<code>Category</code>只可为对象增加成员方法，却不能增加成员变量。</p>

<p><img src="http://blog.devtang.com/images/class-objc-class-isa.jpg"></p>

<p>需要特别说明一下，通过<code>objc_setAssociatedObject</code> 和 <code>objc_getAssociatedObject</code>方法可以变相地给对象增加成员变量，但由于实现机制不一样，所以并不是真正改变了对象的内存结构。</p>

<p>除了对象的方法可以动态修改，因为isa本身也只是一个指针，所以我们也可以在运行时动态地修改isa指针的值，达到替换对象整个行为的目的。不过该应用场景较少。</p>

<h2>系统相关API及应用</h2>

<h3>isa swizzling的应用</h3>

<p>系统提供的KVO的实现，就利用了动态地修改isa指针的值的技术。在<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/KeyValueObserving/Articles/KVOImplementation.html">苹果的文档</a>中可以看到如下描述：</p>

<blockquote><p>Key-Value Observing Implementation Details</p><p>Automatic key-value observing is implemented using a technique called isa-swizzling.</p><p>The isa pointer, as the name suggests, points to the object&#8217;s class which maintains a dispatch table. This dispatch table essentially contains pointers to the methods the class implements, among other data.</p><p>When an observer is registered for an attribute of an object the isa pointer of the observed object is modified, pointing to an intermediate class rather than at the true class. As a result the value of the isa pointer does not necessarily reflect the actual class of the instance.</p><p>You should never rely on the isa pointer to determine class membership. Instead, you should use the class method to determine the class of an object instance.</p></blockquote>


<p><del>类似的，使用isa swizzling的技术的还有系统提供的Key-Value Coding（KVC）。</del> (谢谢大家指出错误，KVC并没有使用到isa swizzling)</p>

<h3>Method Swizzling API说明</h3>

<p>Objective-C提供了以下API来动态替换类方法或实例方法的实现：</p>

<ul>
<li><code>class_replaceMethod</code> 替换类方法的定义</li>
<li><code>method_exchangeImplementations</code> 交换2个方法的实现</li>
<li><code>method_setImplementation</code> 设置1个方法的实现</li>
</ul>


<p>这3个方法有一些细微的差别，给大家介绍如下：</p>

<ul>
<li><code>class_replaceMethod</code>在苹果的文档（如下图所示）中能看到，它有两种不同的行为。当类中没有想替换的原方法时，该方法会调用<code>class_addMethod</code>来为该类增加一个新方法，也因为如此，<code>class_replaceMethod</code>在调用时需要传入<code>types</code>参数，而<code>method_exchangeImplementations</code>和<code>method_setImplementation</code>却不需要。</li>
</ul>


<p><img src="http://blog.devtang.com/images/class-replace-method.jpg"></p>

<ul>
<li><code>method_exchangeImplementations</code> 的内部实现其实是调用了2次<code>method_setImplementation</code>方法，从苹果的文档中能清晰地了解到（如下图所示）</li>
</ul>


<p><img src="http://blog.devtang.com/images/class-method-exchange-imp.jpg"></p>

<p>从以上的区别我们可以总结出这3个API的使用场景:</p>

<ul>
<li><code>class_replaceMethod</code>, 当需要替换的方法可能有不存在的情况时，可以考虑使用该方法。</li>
<li><code>method_exchangeImplementations</code>，当需要交换2个方法的实现时使用。</li>
<li><code>method_setImplementation</code> 最简单的用法，当仅仅需要为一个方法设置其实现方式时使用。</li>
</ul>


<h3>使用示例</h3>

<p>我们在开发<a href="http://yuantiku.com">猿题库</a>客户端的笔记功能时，需要使用系统的<code>UIImagePickerController</code>。但是，我们发现，在iOS6.0.2系统下，系统提供的<code>UIImagePickerController</code>在iPad横屏下有转屏的Bug，造成其方向错误。具体的Bug详情可以见<a href="http://stackoverflow.com/questions/12522491/crash-on-presenting-uiimagepickercontroller-under-ios-6-0">这里</a>。</p>

<p>为了修复该Bug，我们需要替换<code>UIImagePickerController</code>的如下2个方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们先实现了一个名为<code>ImagePickerReplaceMethodsHolder</code>的类，用于定义替换后的方法和实现。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// ImagePickerReplaceMethodsHolder.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ImagePickerReplaceMethodsHolder</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ImagePickerReplaceMethodsHolder.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ImagePickerReplaceMethodsHolder</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotate</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">preferredInterfaceOrientationForPresentation</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIInterfaceOrientationPortrait</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，我们在调用处，判断当前的iOS版本，对于[iOS6.0, iOS6.1)之间的版本，我们将<code>UIImagePickerController</code>的有问题的方法替换。具体代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</span>
</span><span class='line'><span class="cp">#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">hackForImagePicker</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">hackForImagePicker</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// fix bug of image picker under iOS 6.0</span>
</span><span class='line'>    <span class="c1">// http://stackoverflow.com/questions/12522491/crash-on-presenting-uiimagepickercontroller-under-ios-6-0</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO</span><span class="p">(</span><span class="s">@&quot;6.0&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="n">SYSTEM_VERSION_LESS_THAN</span><span class="p">(</span><span class="s">@&quot;6.1&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">oldMethod1</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">UIImagePickerController</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">shouldAutorotate</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">newMethod1</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">ImagePickerReplaceMethodsHolder</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">shouldAutorotate</span><span class="p">));</span>
</span><span class='line'>        <span class="n">method_setImplementation</span><span class="p">(</span><span class="n">oldMethod1</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">newMethod1</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Method</span> <span class="n">oldMethod2</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">UIImagePickerController</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">preferredInterfaceOrientationForPresentation</span><span class="p">));</span>
</span><span class='line'>        <span class="n">Method</span> <span class="n">newMethod2</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">([</span><span class="n">ImagePickerReplaceMethodsHolder</span> <span class="n">class</span><span class="p">],</span> <span class="k">@selector</span><span class="p">(</span><span class="n">preferredInterfaceOrientationForPresentation</span><span class="p">));</span>
</span><span class='line'>        <span class="n">method_setImplementation</span><span class="p">(</span><span class="n">oldMethod2</span><span class="p">,</span> <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">newMethod2</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过如上代码，我们就针对iOS特定版本的有问题的系统库函数打了Patch，使问题得到解决。</p>

<h3>开源界的使用</h3>

<p>有少量不明真相的同学以为苹果在审核时会拒绝App使用以上API，这其实是对苹果的误解。使用如上API是安全的。另外，开源界也对以上方法都适当的使用。例如：</p>

<ul>
<li>著名的网络库<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>。AFNetworking网络库(v1.x版本)使用了class_replaceMethod方法（AFHTTPRequestOperation.m文件第105行）</li>
<li><a href="https://github.com/jverkoey/nimbus">Nimbus</a>。Nimbus是著名的工具类库，它在其core模块中提供了<code>NIRuntimeClassModifications.h</code>文件，用于提供上述API的封装。</li>
<li>国内的大众点评iOS客户端。该客户端使用了他们自己开发的基于Wax修改而来的<a href="https://github.com/mmin18/WaxPatch">WaxPatch</a>，WaxPatch可以实现通过服务器更新来动态修改客户端的逻辑。而WaxPatch主要是修改了wax中的wax_instance.m文件，在其中加入了class_replaceMethod来替换原始实现，从而实现修改客户端的原有行为。</li>
</ul>


<h2>总结</h2>

<p>通过本文，我们了解到了Objective-C语言的对象模型，以及Objective-C语言对象模型中对<code>isa swizzling</code>和<code>method swizzling</code>的支持。本文也通过具体的实例代码和开源项目，让我们对该对象模型提供的动态性有了更加深刻的认识。</p>

<h2>后记</h2>

<p>文章发表后，一些同行指出在ARM64的CPU下，isa的内部结构有变化。这点我是知道的，不过希望以后再撰文讨论。感兴趣的同学可以查看苹果今年WWDC2013的视频：《Session 404 Advanced in Objective-C》。</p>

<h3>参考链接</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html</a></li>
<li><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html">http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html</a></li>
<li><a href="http://www.devalot.com/articles/2011/11/objc-object-model.html">http://www.devalot.com/articles/2011/11/objc-object-model.html</a></li>
<li><a href="http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html">http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html</a></li>
<li><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html">http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html</a></li>
<li><a href="http://wwwmain.gnustep.org/resources/downloads.php">gunstep的实现源码</a></li>
<li><a href="http://algorithm.com.au/downloads/talks/objective-c-internals/objective-c-internals.pdf">http://algorithm.com.au/downloads/talks/objective-c-internals/objective-c-internals.pdf</a></li>
<li><a href="http://opensource.apple.com/source/objc4/objc4-532/runtime/">http://opensource.apple.com/source/objc4/objc4-532/runtime/</a></li>
<li><a href="https://github.com/AFNetworking/AFNetworking">https://github.com/AFNetworking/AFNetworking</a></li>
<li><a href="https://github.com/jverkoey/nimbus">https://github.com/jverkoey/nimbus</a></li>
<li><a href="https://github.com/mmin18/WaxPatch">https://github.com/mmin18/WaxPatch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[动态下载苹果提供的多种中文字体]]></title>
    <link href="http://blog.devtang.com/blog/2013/08/11/ios-asian-font-download-introduction/"/>
    <updated>2013-08-11T16:00:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/08/11/ios-asian-font-download-introduction</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/wawati-sample.jpg"></p>

<h2>引言</h2>

<p>在今年WWDC的内容公开之前，大家都以为iOS系统里面只有一种中文字体。为了达到更好的字体效果，有些应用在自己的应用资源包中加入了字体文件。但自己打包字体文件比较麻烦，原因在于：</p>

<p>1、字体文件通常比较大，10M - 20M是一个常见的字体库的大小。大部分的非游戏的app体积都集中在10M以内，因为字体文件的加入而造成应用体积翻倍让人感觉有些不值。如果只是很少量的按钮字体需要设置，可以用一些工具把使用到的汉字字体编码从字体库中抽取出来，以节省体积。但如果是一些变化的内容需要自定义的字体，那就只有打包整个字体库了。</p>

<p>2、中文的字体通常都是有版权的。在应用中加入特殊中文字体还需要处理相应的版权问题。对于一些小公司或个人开发者来说，这是一笔不小的开销。</p>

<p>以上两点造成App Store里面使用特殊中文字库的iOS应用较少。现在通常只有阅读类的应用才会使用特殊中文字库。</p>

<p>但其实从iOS6开始，苹果就支持动态下载中文字体到系统中。只是苹果一直没有公开相应的API。最终，相应的API在今年的WWDC大会上公开，接下来就让我们来一起了解这个功能。</p>

<!-- more -->


<h2>功能介绍</h2>

<p>使用动态下载中文字体的API可以动态地向iOS系统中添加字体文件，这些字体文件都是下载到系统的目录中（目录是<code>/private/var/mobile/Library/Assets/com_apple_MobileAsset_Font/</code>），所以并不会造成应用体积的增加。并且，由于字体文件是iOS系统提供的，也免去了字体使用版权的问题。虽然第一次下载相关的中文字体需要一些网络开销和下载时间，但是这些字体文件下载后可以在所有应用间共享，所以可以遇见到，随着该API使用的普及，大部分应用都不需要提示用户下载字体，因为很可能这些字体在之前就被其它应用下载下来了。</p>

<h2>字体列表</h2>

<p>在<a href="http://support.apple.com/kb/HT5484?viewlocale=zh_CN">这个链接</a>中，苹果列出了提供动态下载和使用中文字体文件列表。不过，由于下载的时候需要使用的名字是PostScript名称，所以如果你真正要动态下载相应的字体的话，还需要使用Mac内自带的应用“字体册“来获得相应字体的PostScript名称。如下显示了从”字体册“中获取《兰亭黑-简 特黑》字体的PostScript名称的截图：</p>

<p><img src="http://blog.devtang.com/images/font-postscript-name.jpg"></p>

<h2>API介绍</h2>

<p>苹果提供的动态下载代码的<a href="http://developer.apple.com/library/ios/#samplecode/DownloadFont/Listings/DownloadFont_ViewController_m.html">Demo工程</a> 链接在这里。将此Demo工程下载下来，即可学习相应API的使用。下面我对该工程中相应API做简单的介绍。</p>

<p>假如我们现在要下载娃娃体字体，它的PostScript名称为<code>DFWaWaSC-W5</code>。具体的步骤如下：</p>

<p>1、我们先判断该字体是否已经被下载下来了，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isFontDownloaded:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">fontName</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIFont</span><span class="o">*</span> <span class="n">aFont</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="n">fontName</span> <span class="nl">size:</span><span class="mf">12.0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aFont</span> <span class="o">&amp;&amp;</span> <span class="p">([</span><span class="n">aFont</span><span class="p">.</span><span class="n">fontName</span> <span class="nl">compare:</span><span class="n">fontName</span><span class="p">]</span> <span class="o">==</span> <span class="n">NSOrderedSame</span>
</span><span class='line'>               <span class="o">||</span> <span class="p">[</span><span class="n">aFont</span><span class="p">.</span><span class="n">familyName</span> <span class="nl">compare:</span><span class="n">fontName</span><span class="p">]</span> <span class="o">==</span> <span class="n">NSOrderedSame</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、如果该字体下载过了，则可以直接使用。否则我们需要先准备下载字体API需要的一些参数，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 用字体的PostScript名字创建一个Dictionary</span>
</span><span class='line'><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">attrs</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="n">fontName</span><span class="p">,</span> <span class="n">kCTFontNameAttribute</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 创建一个字体描述对象CTFontDescriptorRef</span>
</span><span class='line'><span class="n">CTFontDescriptorRef</span> <span class="n">desc</span> <span class="o">=</span> <span class="n">CTFontDescriptorCreateWithAttributes</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)</span><span class="n">attrs</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 将字体描述对象放到一个NSMutableArray中</span>
</span><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">descs</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="nl">arrayWithCapacity:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">descs</span> <span class="nl">addObject:</span><span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">desc</span><span class="p">];</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">desc</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、准备好上面的<code>descs</code>变量后，则可以进行字体的下载了，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="kt">BOOL</span> <span class="n">errorDuringDownload</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">CTFontDescriptorMatchFontDescriptorsWithProgressHandler</span><span class="p">(</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFArrayRef</span><span class="p">)</span><span class="n">descs</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>  <span class="o">^</span><span class="p">(</span><span class="n">CTFontDescriptorMatchingState</span> <span class="n">state</span><span class="p">,</span> <span class="n">CFDictionaryRef</span> <span class="n">progressParameter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">progressValue</span> <span class="o">=</span> <span class="p">[[(</span><span class="n">__bridge</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">progressParameter</span> <span class="nl">objectForKey:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTFontDescriptorMatchingPercentage</span><span class="p">]</span> <span class="n">doubleValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDidBegin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;字体已经匹配&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDidFinish</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">errorDuringDownload</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;字体%@ 下载完成&quot;</span><span class="p">,</span> <span class="n">fontName</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingWillBeginDownloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;字体开始下载&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDidFinishDownloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;字体下载完成&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 可以在这里修改UI控件的字体</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDownloading</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;下载进度 %.0f%% &quot;</span><span class="p">,</span> <span class="n">progressValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">kCTFontDescriptorMatchingDidFailWithError</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[(</span><span class="n">__bridge</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">progressParameter</span> <span class="nl">objectForKey:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">kCTFontDescriptorMatchingError</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_errorMessage</span> <span class="o">=</span> <span class="p">[</span><span class="n">error</span> <span class="n">description</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_errorMessage</span> <span class="o">=</span> <span class="s">@&quot;ERROR MESSAGE IS NOT AVAILABLE!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// 设置标志</span>
</span><span class='line'>        <span class="n">errorDuringDownload</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;下载错误: %@&quot;</span><span class="p">,</span> <span class="n">_errorMessage</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常需要在下载完字体后开始使用字体，一般是将相应代码放到 kCTFontDescriptorMatchingDidFinish 那个条件中做，可以象苹果官网的示例代码上那样，用GCD来改UI的逻辑，也可以发Notification来通知相应的Controller。</p>

<p>以下是通过以上示例代码下载下来的娃娃体字体截图：</p>

<p><img src="http://blog.devtang.com/images/wawati-sample.jpg"></p>

<h2>iOS版本限制</h2>

<p>以上代码只能运行在iOS6以上的系统，但当前还有不少用户是iOS5的系统。不过，随着苹果在WWDC2013中推出iOS7的beta版，很多人都期待着使用iOS7。从历史数据上看，苹果iOS新版本推出后，通常3个月内就可以达到50%以上的使用比例。所以，可以遇见到在今年年底，iOS5的用户将所剩无几。如果我们打算在年底只支持iOS6以上的系统，那么就可以通过上面介绍的方法使用大量中文字体来美化你的应用。</p>

<p>愿新的API能让大家的应用更加美观，have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈Objective-C block的实现]]></title>
    <link href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/"/>
    <updated>2013-07-28T10:42:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p><a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">这里</a>有关于block的5道测试题，建议你阅读本文之前先做一下测试。</p>

<p>先介绍一下什么是闭包。在wikipedia上，<a href="http://en.wikipedia.org/wiki/Closure_(computer_science">闭包的定义</a>)是:</p>

<blockquote><p>In programming languages, a closure is a function or reference to a function together with a referencing environment—a table storing a reference to each of the non-local variables (also called free variables or upvalues) of that function.</p></blockquote>


<p>翻译过来，闭包是一个函数（或指向函数的指针），再加上该函数执行的外部的上下文变量（有时候也称作自由变量）。</p>

<p>block实际上就是Objective-C语言对于闭包的实现。
block配合上dispatch_queue，可以方便地实现简单的多线程编程和异步编程，关于这个，我之前写过一篇文章介绍：<a href="http://blog.devtang.com/blog/2012/02/22/use-gcd/">《使用GCD》</a>。</p>

<p>本文主要介绍Objective-C语言的block在编译器中的实现方式。主要包括：</p>

<ol>
<li>block的内部实现数据结构介绍</li>
<li>block的三种类型及其相关的内存管理方式</li>
<li>block如何通过capture变量来达到访问函数外的变量</li>
</ol>


<!-- more -->


<h2>实现方式</h2>

<h3>数据结构定义</h3>

<p>block的数据结构定义如下（图片来自<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">这里</a>)：</p>

<p><img src="http://blog.devtang.com/images/block-struct.jpg"></p>

<p>对应的结构体定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">Block_descriptor</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">copy</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Block_layout</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">invoke</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_descriptor</span> <span class="o">*</span><span class="n">descriptor</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* Imported variables. */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过该图，我们可以知道，一个block实例实际上由6部分构成：</p>

<ol>
<li>isa指针，所有对象都有该指针，用于实现对象相关的功能。</li>
<li>flags，用于按bit位表示一些block的附加信息，本文后面介绍block copy的实现代码可以看到对该变量的使用。</li>
<li>reserved，保留变量。</li>
<li>invoke，函数指针，指向具体的block实现的函数调用地址。</li>
<li>descriptor， 表示该block的附加描述信息，主要是size大小，以及copy和dispose函数的指针。</li>
<li>variables，capture过来的变量，block能够访问它外部的局部变量，就是因为将这些变量（或变量的地址）复制到了结构体中。</li>
</ol>


<p>该数据结构和后面的clang分析出来的结构实际是一样的，不过仅是结构体的嵌套方式不一样。但这一点我一开始没有想明白，所以也给大家解释一下，如下2个结构体SampleA和SampleB在内存上是完全一样的，原因是结构体本身并不带有任何额外的附加信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">SampleA</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SampleB</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Part1</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Part2</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Objective-C语言中，一共有3种类型的block：</p>

<ol>
<li>_NSConcreteGlobalBlock 全局的静态block，不会访问任何外部变量。</li>
<li>_NSConcreteStackBlock  保存在栈中的block，当函数返回时会被销毁。</li>
<li>_NSConcreteMallocBlock 保存在堆中的block，当引用计数为0时会被销毁。</li>
</ol>


<p>我们在下面会分别来查看它们各自的实现方式上的差别。</p>

<h3>研究工具：clang</h3>

<p>为了研究编译器是如何实现block的，我们需要使用clang。clang提供一个命令，可以将Objetive-C的源码改写成c语言的，借此可以研究block具体的源码实现方式。该命令是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">clang</span> <span class="o">-</span><span class="n">rewrite</span><span class="o">-</span><span class="n">objc</span> <span class="n">block</span><span class="p">.</span><span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSConcreteGlobalBlock 类型的block的实现</h3>

<p>我们先新建一个名为block1.c的源文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">^</span><span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="p">}</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在命令行中输入<code>clang -rewrite-objc block1.c</code>即可在目录中看到clang输出了一个名为block1.cpp的文件。该文件就是block在c语言实现，我将block1.cpp中一些无关的代码去掉，将关键代码引用如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">__block_impl</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">Reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">FuncPtr</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">)</span> <span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们就具体看一下是如何实现的。__main_block_impl_0就是该block的实现，从中我们可以看出：</p>

<ol>
<li>一个block实际是一个对象，它主要由一个 isa 和 一个 impl 和 一个descriptor组成。</li>
<li><del>在本例中，isa指向 _NSConcreteGlobalBlock， 主要是为了实现对象的所有特性，在此我们就不展开讨论了。</del></li>
<li>由于clang改写的具体实现方式和LLVM不太一样，并且这里没有开启ARC。所以这里我们看到isa指向的还是<code>_NSConcreteStackBlock</code>。但在LLVM的实现中，开启ARC时，block应该是_NSConcreteGlobalBlock类型，具体可以看<a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">《objective-c-blocks-quiz》</a>第二题的解释。</li>
<li>impl是实际的函数指针，本例中，它指向__main_block_func_0。这里的impl相当于之前提到的invoke变量，只是clang编译器对变量的命名不一样而已。</li>
<li>descriptor是用于描述当前这个block的附加信息的，包括结构体的大小，需要capture和dispose的变量列表等。结构体大小需要保存是因为，每个block因为会capture一些变量，这些变量会加到__main_block_impl_0这个结构体中，使其体积变大。在该例子中我们还看不到相关capture的代码，后面将会看到。</li>
</ol>


<h3>NSConcreteStackBlock 类型的block的实现</h3>

<p>我们另外新建一个名为block2.c的文件，输入以下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block2</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">block2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用之前提到的clang工具，转换后的关键代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">a</span><span class="p">(</span><span class="n">_a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// bound by copy</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">block2</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">))((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block2</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FuncPtr</span><span class="p">)((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在本例中，我们可以看到：</p>

<ol>
<li>本例中，isa指向_NSConcreteStackBlock，说明这是一个分配在栈上的实例。</li>
<li><strong>main_block_impl_0 中增加了一个变量a，在block中引用的变量a实际是在申明block时，被复制到</strong>main_block_impl_0结构体中的那个变量a。因为这样，我们就能理解，在block内部修改变量a的内容，不会影响外部的实际变量a。</li>
<li><strong>main_block_impl_0 中由于增加了一个变量a，所以结构体的大小变大了，该结构体大小被写在了</strong>main_block_desc_0中。</li>
</ol>


<p>我们修改上面的源码，在变量前面增加__block关键字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__block</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="mi">1023</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">block1</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成的关键代码如下，可以看到，差异相当大：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">__Block_byref_i_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span><span class="n">__isa</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">__forwarding</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">__flags</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">__size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__block_impl</span> <span class="n">impl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">__main_block_desc_0</span><span class="o">*</span> <span class="n">Desc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">i</span><span class="p">;</span> <span class="c1">// by ref</span>
</span><span class='line'>    <span class="n">__main_block_impl_0</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="o">*</span><span class="n">desc</span><span class="p">,</span> <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">_i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">i</span><span class="p">(</span><span class="n">_i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">isa</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_NSConcreteStackBlock</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">Flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">impl</span><span class="p">.</span><span class="n">FuncPtr</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Desc</span> <span class="o">=</span> <span class="n">desc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_func_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span> <span class="o">*</span><span class="n">__cself</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="n">i</span> <span class="o">=</span> <span class="n">__cself</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">;</span> <span class="c1">// bound by ref</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">(</span><span class="n">i</span><span class="o">-&gt;</span><span class="n">__forwarding</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1023</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_copy_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_assign</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dst</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">__main_block_dispose_0</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span><span class="n">_Block_object_dispose</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">i</span><span class="p">,</span> <span class="mi">8</span><span class="cm">/*BLOCK_FIELD_IS_BYREF*/</span><span class="p">);}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">__main_block_desc_0</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">reserved</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">Block_size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">copy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">dispose</span><span class="p">)(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">__main_block_desc_0_DATA</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">__main_block_impl_0</span><span class="p">),</span> <span class="n">__main_block_copy_0</span><span class="p">,</span> <span class="n">__main_block_dispose_0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__attribute__</span><span class="p">((</span><span class="n">__blocks__</span><span class="p">(</span><span class="n">byref</span><span class="p">)))</span> <span class="n">__Block_byref_i_0</span> <span class="n">i</span> <span class="o">=</span> <span class="p">{(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">,(</span><span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">__Block_byref_i_0</span><span class="p">),</span> <span class="mi">1024</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span><span class="o">&amp;</span><span class="n">__main_block_impl_0</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">__main_block_func_0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__main_block_desc_0_DATA</span><span class="p">,</span> <span class="p">(</span><span class="n">__Block_byref_i_0</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="mi">570425344</span><span class="p">);</span>
</span><span class='line'>    <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">))((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block1</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">FuncPtr</span><span class="p">)((</span><span class="n">__block_impl</span> <span class="o">*</span><span class="p">)</span><span class="n">block1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从代码中我们可以看到：</p>

<ol>
<li>源码中增加一个名为__Block_byref_i_0 的结构体，用来保存我们要capture并且修改的变量i。</li>
<li><strong>main_block_impl_0 中引用的是</strong>Block_byref_i_0的结构体指针，这样就可以达到修改外部变量的作用。</li>
<li>__Block_byref_i_0结构体中带有isa，说明它也是一个对象。</li>
<li>我们需要负责<strong>Block_byref_i_0结构体相关的内存管理，所以</strong>main_block_desc_0中增加了copy和dispose函数指针，对于在调用前后修改相应变量的引用计数。</li>
</ol>


<h2>NSConcreteMallocBlock 类型的block的实现</h2>

<p>NSConcreteMallocBlock类型的block通常不会在源码中直接出现，因为默认它是当一个block被copy的时候，才会将这个block复制到堆中。以下是一个block被copy时的示例代码(来自<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">这里</a>)，可以看到，在第8步，目标的block类型被修改为_NSConcreteMallocBlock。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">_Block_copy_internal</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">bool</span> <span class="n">wantsOne</span> <span class="o">=</span> <span class="p">(</span><span class="n">WANTS_ONE</span> <span class="o">&amp;</span> <span class="n">flags</span><span class="p">)</span> <span class="o">==</span> <span class="n">WANTS_ONE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">arg</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">aBlock</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_NEEDS_FREE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// latches on high</span>
</span><span class='line'>        <span class="n">latching_incr_int</span><span class="p">(</span><span class="o">&amp;</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 4</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_IS_GLOBAL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">aBlock</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 5</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">Block_layout</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 6</span>
</span><span class='line'>    <span class="n">memmove</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">,</span> <span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span> <span class="c1">// bitcopy first</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 7</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">);</span>    <span class="c1">// XXX not needed</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">|=</span> <span class="n">BLOCK_NEEDS_FREE</span> <span class="o">|</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 8</span>
</span><span class='line'>    <span class="n">result</span><span class="o">-&gt;</span><span class="n">isa</span> <span class="o">=</span> <span class="n">_NSConcreteMallocBlock</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 9</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_HAS_COPY_DISPOSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="o">*</span><span class="n">aBlock</span><span class="o">-&gt;</span><span class="n">descriptor</span><span class="o">-&gt;</span><span class="n">copy</span><span class="p">)(</span><span class="n">result</span><span class="p">,</span> <span class="n">aBlock</span><span class="p">);</span> <span class="c1">// do fixup</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>变量的复制</h3>

<p>对于block外的变量引用，block默认是将其复制到其数据结构中来实现访问的，如下图所示（图片来自<a href="http://rypress.com/tutorials/objective-c/blocks.html">这里</a>）：</p>

<p><img src="http://blog.devtang.com/images/block-capture-1.jpg"></p>

<p>对于用__block修饰的外部变量引用，block是复制其引用地址来实现访问的，如下图所示（图片来自<a href="http://rypress.com/tutorials/objective-c/blocks.html">这里</a>）：</p>

<p><img src="http://blog.devtang.com/images/block-capture-2.jpg"></p>

<h3>LLVM源码</h3>

<p>在LLVM开源的关于<a href="https://llvm.org/svn/llvm-project/compiler-rt/trunk/BlocksRuntime/Block_private.h">block的实现源码</a>，其内容也和我们用clang改写得到的内容相似，印证了我们对于block内部数据结构的推测。</p>

<h3>ARC对block类型的影响</h3>

<p>在ARC开启的情况下，将只会有 NSConcreteGlobalBlock和 NSConcreteMallocBlock类型的block。</p>

<p>原本的NSConcreteStackBlock的block会被NSConcreteMallocBlock类型的block替代。证明方式是以下代码在XCode中，会输出 <code>&lt;__NSMallocBlock__: 0x100109960&gt;</code>。在苹果的<a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">官方文档</a>中也提到，当把栈中的block返回时，不需要调用copy方法了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block1</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="n">block1</span><span class="p">();</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">block1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我个人认为这么做的原因是，由于ARC已经能很好地处理对象的生命周期的管理，这样所有对象都放到堆上管理，对于编译器实现来说，会比较方便。</p>

<h3>参考链接</h3>

<p>希望本文能加深你对于block的理解。我在学习中，查阅了以下文章，一并分享给大家。祝大家玩得开心～</p>

<ul>
<li><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/">A look inside blocks: Episode 1</a></li>
<li><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/">A look inside blocks: Episode 2</a></li>
<li><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">A look inside blocks: Episode 3</a></li>
<li><a href="http://www.cnblogs.com/biosli/archive/2013/05/29/iOS_Objective-C_Block.html">对Objective-C中Block的追探</a></li>
<li><a href="https://llvm.org/svn/llvm-project/compiler-rt/trunk/BlocksRuntime/Block_private.h">LLVM中block实现源码</a></li>
<li><a href="http://blog.parse.com/2013/02/05/objective-c-blocks-quiz/">objective-c-blocks-quiz</a></li>
<li><a href="http://rypress.com/tutorials/objective-c/blocks.html">Blocks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Crashlytics来保存应用崩溃信息]]></title>
    <link href="http://blog.devtang.com/blog/2013/07/24/use-crashlytics/"/>
    <updated>2013-07-24T20:56:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/07/24/use-crashlytics</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/crashlytics-logo.jpg"></p>

<p>本文首发于InfoQ，版权归InfoQ所有，转载请保留<a href="http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools">原文链接</a>。</p>

<h2>简介</h2>

<p><a href="http://try.crashlytics.com/">Crashlytic</a> 成立于2011年，是专门为移动应用开者发提供的保存和分析应用崩溃信息的工具。Crashlytics的使用者包括：支付工具Paypal, 点评应用Yelp, 照片分享应用Path, 团购应用GroupOn等移动应用。</p>

<p>2013年1月，Crashlytics<a href="http://www.crashlytics.com/blog/crashlytics-is-joining-forces-with-twitter/">被Twitter收购</a>，成为又一个成功的创业产品。被收购之后，由于没有了创业公司的不稳定因素，我们更有理由使用它来分析应用崩溃信息。</p>

<!-- more -->


<p>使用Crashlytics的好处有：</p>

<p>1、Crashlytics不会漏掉任何应用崩溃信息。拿我的应用举例来说，在iTunes Connect的后台查看不到任何崩溃信息。但是用户确实会通过微博或者客服电话反馈应用崩溃的情况。而这些在Crashlytics中都可以统计到。如下截图分别显示了我的某应用在苹果iTunes Connect后台和Crashlytics中的差别：</p>

<p><img src="http://blog.devtang.com/images/crashlytics-vs-itunes-1.jpg">
<img src="http://blog.devtang.com/images/crashlytics-vs-itunes-2.jpg"></p>

<p>2、Crashlytics可以象Bug管理工具那样，管理这些崩溃日志。例如：Crashlytics会根据每种类型的Crash的出现频率以及影响的用户量来自动设置优先级。对于每种类型的Crash，Crashlytics除了会像一般的工具提供Call Stack外，还会显示更多相关的有助于诊断的信息例如设备是否越狱，当时的内存量，当时的iOS版本等。对于修复掉的Crash日志，可以在Crashlytics的后台将其关掉。下图所示的是一个我的早期应用的崩溃记录，在我修复后，我将其更新为已修复状态。</p>

<p><img src="http://blog.devtang.com/images/crashlytics-close-issue.jpg"></p>

<p>3、Crashlytics可以每天和每周将崩溃信息汇总发到你的邮箱，所有信息一目了然。</p>

<p>下面我就给大家介绍如何使用Crashlytics。</p>

<h2>使用介绍</h2>

<h3>申请帐号</h3>

<p>Crashlytics的服务是免费提供的，但是并不能直接注册使用，需要先申请，打开<a href="http://try.crashlytics.com/">Crashlytic的官网</a> ，输入自己的邮箱申请使用。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/crashlytics-1.jpg"></p>

<p>提交完邮箱之后，你的申请会放在Crashlytics的申请队列中，网页跳转到如下界面。在这个界面的右侧，你可以提供更多有效信息来让Crashlytics优先处理你的申请，建议大家都填上更多自己的信息。</p>

<p><img src="http://blog.devtang.com/images/crashlytics-2.jpg"></p>

<p>如果顺利，通常1-2天左右，你就会收到Crashlytics发来的申请通过邮件，如下图所示，通过邮件链接跳转到注册界面，填写密码即可完成注册。</p>

<p><img src="http://blog.devtang.com/images/crashlytics-3.jpg"></p>

<h3>设置工程</h3>

<p>在使用Crashlytics前需要对原有的XCode工程进行配置，在这一点上，Crashlytics做得比其它任何我见过的SDK提供商都体贴。因为Crashlytics专门做了一个Mac端的App来帮助你进行配置，所以，在配置前你先需要去<a href="https://www.crashlytics.com/downloads/xcode">这里</a>下载该应用。</p>

<p>应用下载后，运行该应用并登录帐号。然后选择应用中的&#8221;New App&#8221;按钮，然后选择自己要增加Crashlytics的工程，然后Crashlytics的应用会提示你为工程增加一个Run Script，如果你不知道如何添加，这里有一个<a href="http://www.runscriptbuildphase.com/?utm_source=desktopapp&amp;utm_medium=setup&amp;utm_campaign=mac">帮助的文档</a>。添加好之后的工程截图如下所示</p>

<p><img src="http://blog.devtang.com/images/crashlytics-4.jpg"></p>

<p>接着，Crashlytics的本地应用会提示你将Crashlytics相关的framework拖到工程中。如下所示：</p>

<p><img src="http://blog.devtang.com/images/crashlytics-5.jpg"></p>

<p>按照提示做完之后，就到了最后一步了，在<code>AppDelegate</code>的<code>didFinishLaunchingWithOptions</code>方法中加入如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Crashlytics/Crashlytics.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
</span><span class='line'>    <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">[</span><span class="n">Crashlytics</span> <span class="nl">startWithAPIKey:</span><span class="s">@&quot;your identify code&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后，运行一下程序，Crashlytics就会检测到你设置成功。如果你感兴趣，可以自己手工触发一个崩溃记录，看Crashlytics能否帮你收集到。使用如下代码即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">Crashlytics</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">crash</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你想测试一个Exception导致的崩溃，可以使用如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">NSObject</span> <span class="n">doesNotRecognizeSelector</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">arrayWithOnlyTwoElements</span> <span class="nl">objectAtIndex:</span><span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>应用对外发布后，就可以在Crashlytics后台查看和修改相关的记录。另外，Crashlytics还支持将数据导入到其它项目管理工具（例如Redmine或Jira）如下所示，配置都非常简单。</p>

<p><img src="http://blog.devtang.com/images/crashlytics-6.jpg"></p>

<h2>实现原理和使用体会</h2>

<h3>实现原理</h3>

<p>在原理上，Crashlytics的通过以下2步完成崩溃日志的上传和分析：</p>

<ol>
<li>提供应用SDK，你需要在应用启动时调用其SDK来设置你的应用。SDK会集成到你的应用中，完成Crash信息的收集和上传。</li>
<li>修改工程的编译配置，加入一段代码，在你每次工程编译完成后，上传该工程对应的dSYM文件。研究过手工分析Crash日志的同学应该知道，只有通过该文件，才能将Crash日志还原成可读的Call Stack信息。</li>
</ol>


<h3>使用体会</h3>

<p>为了更加方便开发者设置相应的工程，Crashlytics提供了mac端的应用程序，帮助你检测相关工程是否正确设置并且提供相应的帮助信息。后来我还发现，该程序还会自动帮你升级Crashlytics的SDK文件。虽然这一点很体贴，但是我个人觉得还是不太友好。因为毕竟修改SDK会影响应用编译后的内部逻辑，在没有任何通知的情况下升级，我都无法确定Crashlytics有没有干坏事。不过国外的服务，特别是象Twitter这种相对较大知名度公司提供的服务要有节操得多，所以在这一点上我还是比较放心的。</p>

<p>使用Crashlytics可以让你摆脱管理应用崩溃记录的烦恼。并且帮助你找出应用的一些重大隐藏性Bug。例如我之前写的一个应用就过一个缓存过期的问题，只有当缓存过期时才会触发这个Bug，这样的问题在测试人员那边很难触发，因为他们不可能了解你的应用内部实现细节。通过Crashlytics，使我清楚了解到应用Crash的数量和位置，结合自己的开发经验，就很容易找到问题所在了。</p>

<p>值得一提的是，Crashlytics本身的<a href="http://support.crashlytics.com/knowledgebase/topics/14721-crashlytics-sdk-for-ios">官方文档</a>也非常健全，如果你在使用中遇到任何问题，也可以上去查看详细的文档。</p>

<p>愿Crashlytics能让大家的应用都更加健壮～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分析支付宝客户端的插件机制]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism/"/>
    <updated>2013-06-23T12:39:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/alipay-plugin-1.jpg"></p>

<h2>前言</h2>

<p>因为开了iOSDevTips的微信公共账号，老收到各种iOS开发的问题，前两天收到一个问题的内容是：</p>

<pre><code>请问像支付宝钱包那样可以在应用里安装自己的应用，是已经在应用里写了逻辑，还是可以向应用里发送代码?
</code></pre>

<p>我觉得这个问题挺有意思的，估计大家都感兴趣，所以今天就抽空研究了一下，将支付宝客户端的插件机制具体实现方式介绍给大家。</p>

<p>先介绍一下该插件机制，如上图所示，支付宝客户端在安装后，对于像“彩票”、“爱心捐赠”这类功能，需要再点击安装一次，然后才可以使用。有些时候该插件功能进行了升级，需要点击升级才可以继续使用。插件的方式有利于软件动态增加新的功能或升级功能，而不用再一次向AppStore提交审核。另外，由于用户不需要的插件可以不用安装，也缩小了应用本身的体积大小，节省了下载流量。</p>

<!-- more -->


<h2>分析过程</h2>

<h3>截取网络请求</h3>

<p>分析第一步，截取网络请求。截取网络请求可以查看当用户点击“彩票”进行安装的时候，客户端到底做了什么事情。使用Charles的代理设置功能，启动一个http代理，然后在iPhone上设置连接此代理，则可以看到，当点击“彩票”插件时，客户端下载了一个名为 10000011.amr的文件。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-2.jpg"></p>

<h3>下载插件文件</h3>

<p>尝试用wget将文件下载下来，发现其没有验证cookie，下载成功，命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://download.alipay.com/mobilecsprod/alipay.mobile/20130601021432806/xlarge/10000011.amr
</span></code></pre></td></tr></table></div></figure>


<p>amr本意表示是一个音频文件，明显不对，尝试将其后缀名改成zip，成功将其解压。用itools连接上支付宝的客户端，同样能看到客户端将其下载后，也是解压到document目录下的。解压后的内容与应用内新增加的内容一致，如图所示：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-3.jpg"></p>

<h3>分析文件内容</h3>

<p>大概浏览了一下解压后的文件，主要包括html、css和js文件。可见支付宝的插件机器是通过UIWebView来展示内容的方式来实现的，那为什么要先下载安装这些内容而不通过UIWebView实时下载html呢？这主要应该是为了节省相应的流量。我看了一下，10000011.amr文件整个有将近1M大小，如果不通过插件机制预先下载，则只能依赖系统对于UIWebView的缓存来节省流量，这相对来说没有前者靠谱。</p>

<p>另外，使用基于UIWebView的方式来展示插件，也有利于代码的复用。因为这些逻辑都是用js来写的，可以同样应用于Android平台，在Config.js文件中，明显可以看到对于各类平台的判断逻辑。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-4.jpg"></p>

<p>另外，/www/demo/index-alipay-native.html 文件即该插件的首页，用浏览器打开就可以看到和手机端一样的内容。如下载图所示（左半边是手机上的应用截图，右半边是浏览器打开该html文件的截图）：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-5.jpg"></p>

<h3>插件的网络通讯</h3>

<p>接下来感兴趣的是该插件是如何完成和支付宝后台的网络通讯的。可以想到有两种可能的方式：</p>

<ol>
<li>直接和支付宝后台通讯</li>
<li>和Native端通讯，然后Native端和服务器通讯。</li>
</ol>


<p>要验证这个需要读该插件的js源代码，整个js源码逻辑还是比较干净的，主要用了玉伯写的<a href="http://seajs.org/docs/">seajs</a>做模块化加载，<a href="http://backbonejs.org/">backbone.js</a>是一个前端的MVC框架，<a href="http://zeptojs.com/">zepto.js</a>是一个更适合于移动端使用的&#8221;JQuery&#8221;。</p>

<p>大概扫了一下，感觉更可能是用的方法一：直接和支付宝后台通讯, 因为Config.js中都明确将网络通讯的地址写下来了。另一个证据是，利用下面的脚本扫描整个js源码，只能在backbone中搜到对于iframe的使用。而在iOS开发中，如果js端和native端要通讯，是需要用到iframe的，详细原理可以参见我的另一篇文章<a href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/">《关于UIWebView和PhoneGap的总结》</a>。不过我不能完全确认，因为我还没有找到相应控制页面切换和跳转的js代码，如果你找到了，麻烦告诉我。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -type f -name <span class="s2">&quot;*.js&quot;</span> | xargs grep <span class="s2">&quot;iframe&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>交易的安全</h3>

<p>用Charles可以截取到，当有网络交易时，应用会另外启动一个https的安全链接，完成整个交易过程的加密。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/alipay-plugin-6.jpg"></p>

<h2>总结</h2>

<p>支付宝的插件机制整体上就是通过html和javascript方式实现的，主要的好处是：</p>

<ol>
<li>跨平台(可以同时用在iOS和Android客户端）</li>
<li>省流量（不需要的插件不用下载，插件本地缓存长期存在不会过期，自己管理插件更新逻辑）</li>
<li>更新方便（不用每次提交AppStore审核）</li>
</ol>


<p>坏处如果非要说有的话，就是用javascript写iOS界面，无法提供非常炫的UI交互以及利用到iOS的所有平台特性。不过象支付宝这种工具类应用，也不需要很复杂的UI交互效果。</p>

<p>另外教大家一个小技巧，如果你不确定某个页面是不是UIWebView做的，直接在那个页面长按，如果弹出&#8221;拷贝，定义，学习&#8221;这种菜单，那就是确定无疑是UIWebView的界面了。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/ios-menu-2.jpg"></p>

<h2>相关工具</h2>

<p>欢迎关注我的技术微博 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 和微信公共账号 <a href="http://chuansong.me/account/iosDevTips">iOSDevTips</a> ，每天收获一些关于iOS开发的学习资料和技巧心得。</p>

<p>我在研究时使用了<a href="http://www.charlesproxy.com/">Charles</a>来截获支付宝客户端的网络请求，用<a href="http://itools.hk/">iTools</a>来查看支付宝客户端的本地内容。如果你想自行验证本文内容，请先下载上述工具。在此就不额外介绍它们的使用了。</p>

<h2>后记（2013-7-7）</h2>

<ol>
<li><p>在完成上文后，Allen在他的博客上先后分享了两篇更深入分析的文章<a href="http://imallen.com/blog/2013/06/26/inside-alipay-plugin.html">《浅析支付宝钱包插件》</a> 和 <a href="http://imallen.com/blog/2013/07/06/about-alipay-plugin-and-phonegap.html">《再谈支付宝钱包插件和说好的 Demo》</a>。 这两篇文章都比本文深入得多，值得大家阅读。</p></li>
<li><p>写完上文，居然收到了来自支付宝卫朴（花名）的工作邀请。不过我现在创业正在努力当中，所以我拒绝了邀请。看来这也是一种找工作的办法啊，比投简历管用，呵呵。</p></li>
<li><p>从一些朋友那儿了解到，支付宝因为本文而会在以后的版本中加强安全性，至少不会像现在这样，所有逻辑都在写在javascript中，并且还带有注释，这也是我希望看到的结果。愿支付宝越做越好。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在创业一周年]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note/"/>
    <updated>2013-06-17T20:56:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/startup-anniversary.jpg"></p>

<h2>前言</h2>

<p>大约在去年这个时候，我离开网易有道，开始了自己的创业不归路。一年过去了，总是在忙碌，在最忙的时候，我连博客都没有时间更新了。但是这一年的经历对我的成长重大，还是挺值得写下来的，在此将我的故事分享给那些一同走在创业路上的朋友。</p>

<!-- more -->


<h2>当初的选择</h2>

<p>这次的创业其实并不算是真正意义上的创业，因为我并不是创业合伙人，也没有股权，对于公司的发展，我更多是执行者，很少有参与讨论的机会。但与此同时，我的薪水并没有大幅度减少，期权所画出的大饼也确实有些吸引力，另外，我可以独立负责iOS开发，对我来说是一个不小的挑战，作为一个早期加入的核心员工，我可以享受到公司成长带来的好处，也可以和公司一起成长，承担更多责任，学习和体会创业的过程。</p>

<p>所以，如果我这次创业失败，对我的影响相当小，我不用担心交不起房租，更不用担心找不到工作。不管创业成功与否，我都将收获在iOS开发领域快速的成长，也可以感受和学习创业公司的工作方式。现在一年过去了，创业发展顺利，我还可以进一步感受和思考公司规模扩大所带来的各种问题，以及一起参与解决这些问题。</p>

<p>某种程度上说，这符合我对于第一次创业的期望方式：有挑战，有收获，风险小，潜在收益也不错。因为我工作才3年，在各方面还很嫩，选择加入一个创业团队比直接自己当创业合伙人要安全得多。</p>

<h2>技术成长</h2>

<p>由于我不是合伙人，所以我可以继续专注于iOS开发，不用管市场，运营以及产品的事情。以前在前公司，我只是负责某iOS产品的UI部分，我甚至都没有机会了解将App发布到AppStore的过程。在这次创业中，整个iOS端的开发都是由我一人负责，我学习和接触了很多以前没有机会了解的东西。</p>

<p>在项目开发中学习是最好的学习方式，这次创业我也不止做了一个App，每做一个App，我就会尝试一些新的技术方案和挑战。</p>

<ul>
<li>在做粉笔网客户端时，我尝试了完全使用ARC，也尝试用UIWebView写了很多javascript。</li>
<li>在做猿题库行测时，我尝试了使用AVFoundation来自定义扫描界面，尝试用<a href="http://blog.devtang.com/blog/2012/10/27/use-opencv-in-ios/">OpenCV</a>来实现答题卡识别算法，尝试用CoreText做部分界面的渲染。</li>
<li>在做猿题库申论时，我尝试用<a href="http://blog.devtang.com/blog/2012/12/15/do-not-use-storyboard/">Storyboard</a>和<a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">cocoapod</a>来做包管理。</li>
<li>在做猿题库司法考试时，考虑到团队可能扩大，我尝试用全手写界面的方式来开发。并且用<a href="http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/">Git Submodule</a>来管理猿题库公用模块。</li>
<li>在即将上线的猿题库新课程中，我尝试了结合多target编译和Submodule来管理多个猿题库之间的差别，力求将新课程的开发成本减少到只需一些配置文件即可。</li>
</ul>


<p>如果不是因为创业，我可能都无法决定使用这些技术方案，更别说负责整个iOS端了。</p>

<h2>眼界变宽</h2>

<p>以前在网易，公司里有很多做iOS开发的同事，偶尔有一些技术交流，现在创业只有我一个人做iOS开发，我最担心的是我自己由于交流太少而眼界变窄。于是我想只有通过网络和同行进行更多的交流了。于是我就建了一个QQ群，然后把以前的同事都拉到群里面，但是大家还是交流还是比较少，我想了想，主要是因为这些同事都不太喜欢交流和分享，强行把他们拉到QQ群里面，并不能促使他们交流，于是我就开始在网上寻找一些喜欢交流的同行，邀请他们加到群里面一起聊技术。这样慢慢地，群里面就有自发的讨论出现了。</p>

<p>有一段时间，我发现讨论的内容还挺有价值的，于是就觉得QQ群不能将讨论内容沉淀下来太可惜了，当时正好微信公共账号比较火，我就想试试把有价值的内容通过微信公共账号发出去。刚开始很难，原因一方面是整理信息的成本很高，写成微信很花时间。另一方面，我也没有那么多时间来写微信。不过我坚持了一段时间后，渐渐发现有一些牛人会被吸引到我们的QQ群里面，这样就行成了一个良性循环。QQ群不断有牛人加入贡献高质量的讨论，讨论内容通过微信发出去后，又吸引更多牛人要求加入。由于申请加入的人太多，我提高了申请加群的要求，因为群里人数一旦过多，就会影响平时的工作了。所以现在QQ群的人数基本稳定了。群里面的人员组成主要分以下几类：</p>

<ol>
<li>比较大的IT公司的iOS开发者，包括腾讯、百度、新浪、搜狐、网易、阿里、人人等</li>
<li>比较小的IT公司的iOS开发者，包括豆瓣、美团、知乎、拓词、花瓣、Clover、流利说等</li>
<li>自由职业者或自己在创业中的iOS开发者</li>
<li>海外的iOS开发者</li>
</ol>


<p>如果说有什么特点，就是他们都是喜欢分享的人，大部分人都维护着自己的原创博客，这保证了群里面讨论内容的活跃。同时他们都还很忙，这保证了群里面不会很水，有问题讨论问题，没问题的时候就很安静。这是我非常喜欢的。因为这样的讨论组一方面保证了讨论的即时性，另一方面又不至于太吵而干扰平时的工作。</p>

<p>如果不是因为创业，我可能也不会被迫组建并维护这么一个高质量的QQ群，进而也不会有这么好的交流圈子了。</p>

<p>我的微信公众账号是iOSDevTips, 现在关注人数有3000人。6月6日，微信公共账号同时得到了<a href="http://hutu.me/">@Fenng</a>和<a href="http://macshuo.com/">@池建强</a>在各自的微信公共账号上的<a href="http://macshuo.com/?p=529">推荐</a>，关注人数也暴涨。很高兴自己最终坚持下来了。如果你是iOS开发者，欢迎关注我的微信公共账号，只发干货。用微信扫描下面的二维码即可关注：</p>

<p><img src="http://blog.devtang.com/images/weixin-qr.jpg"></p>

<h2>工作上的反思和改进</h2>

<p>虽然我在创业中专注于iOS开发，但是我还是会参与一些产品讨论，也会负责面试招人，也会反思现有工作方式的各种问题。这种反思的过程持续地在每一天进行。这种反思和改进包括如下几个方面。</p>

<h3>执行力变强</h3>

<p>似乎什么事情都可以归结到对资源和时间的合理分配和控制。对于创业公司来说，对于产品开发进度的控制是尤其重要的，我们很高兴地看到，我们的创业团队在过去的一年，不但保证了所有开发项目不延期，并且还保证了很快的开发进度。在过去一年，我们花4个月完成了粉笔网的开发，3个月完成了猿题库行测的开发，2个月完成了猿题库司法考试的开发，7天完成了猿题库申论的开发，这些项目的开发进度和我们之前计划的完全一样，没有任何延期。在软件开发领域，项目延期对于很多公司来说从来都是常态，我们通过团队的努力以及一些合理的进度管理方法来让按期交付变成了常态。</p>

<p>首先说说团队的努力，团队的努力主要在于团队每个人都努力工作，提高效率。就我个人来说，我会更加关注自己每天花在写代码上面的时间和沟通的时间，以及工作间隙刷微博的时间。我有些时候状态好，可以一连写好几个小时代码，有些时候状态不好，写一会儿代码就会分神干别的，这个时候我会把所有干扰工作的QQ,邮箱都关掉，然后戴上耳机，给自己设置一个45分钟的番茄钟（不知道这个是什么的，可以搜一下番茄工作法），然后每个番茄钟到了再休息一下，一般连续做过3个番茄钟之后，精力就又容易集中了，之后就不用设置番茄钟又可以连续写上好几个小时。当然，适当活动也是必要的，我有时候会注意每一个小时动一下，公司里面也有哑铃可以举几个。另外，我还安装了<a href="https://www.rescuetime.com/">rescue time软件</a> ，可以方便自己回顾每天的工作效率变化情况。</p>

<p>然后说说我们的进度管理方法，我们使用scrum来进行进度管理，但是根据我们创业团队的情况，我们做了不少改变，我们对于scrum的主要改变是：</p>

<ol>
<li>scrum中每个sprint的周期变为1周。下面会展开阐述理由。</li>
<li>scrum会议中的回顾会议和计划会议一起开。主要是为了减少会议的次数。</li>
</ol>


<p>1周的sprint相比传统的2周或4周sprint最大的优点是，可以对进度有较强的控制，因为迭代周期减小为一周，所以可以更早地发现开发中可以出现的问题，进而进行微调。微调的粒度变小，就保证了整体进度的可控。我们对开发进度的微调包括：</p>

<ol>
<li>通过每周的sprint，尽早发现开发进度上的风险，合理加班或者减少部分需求开发。</li>
<li>通过每周的sprint，尽早地将产品功能的改变融入到新的sprint中，使得产品能够尽快应对来自市场需求或产品需求的变化。</li>
</ol>


<p>1周的sprint也有一定的缺点，首先是它的时间非常紧，除去开回顾会议和计划会议的时间，通常只剩下4天半。4天半时间通常会排满开发进度，常常会造成留给测试同事的时间比较少。对于要上线的sprint，sprint结束日那天的上线工作也会占据不少时间，因为上线通常会涉及很多系统运维相关的操作。另一个缺点是，它无法安排一些长期并且重要的事情，例如技术分享和讨论，新技术调研等。</p>

<p>但整体说来，对于创业公司来说，活下去才是最重要的，1周的sprint可以带来产品按时交付的巨大优势。所以我们直到现在还是坚持1周的sprint。或许以后公司大了，时间不是最最紧迫的资源时，我们可能会考虑2周的sprint。</p>

<h3>对scrum有了更深认识</h3>

<p>scrum很容易被误解，也容易被错误地实践。</p>

<p>对于高压型的Leader, scrum很容易成为他压榨程序员的工具，因为程序员通常在估计工作量时很乐观，但是执行时就会出现各种问题，scrum将任务拆分到每天做什么的时候，很容易造成程序员为了完成当天的工作而加班。如果管理者在回顾会议不能很好的处理这个问题，程序员就会认为这是一种管理者控制进度的工具，然后在以后的计划会议中故意将时间估长。</p>

<p>对于温和的Leader, scrum中的sprint很可能成为一句空话，每个sprint都会出现完不成的情况，每次当然都会有合理的理由：例如功能开发量估计不足，需求没有讨论清楚，遇到的技术难点等等。当大家对于sprint的按时完成没有压力的时候，scrum本身就成了一个可有可无的东西了。</p>

<p>执行了一年多scrum，我感觉scrum最核心的思想就是强调团队的自我反思和进步，而这一点要求scrum团队成员有较强的能力和素质。所以很多公司没有把scrum执行好，就是简单地执行了scrum中的各种流程和方法，而忽视了其中最重要的基础：团队成员的能力。如果团队成员本身能力不行，也不能为整个团队着想，为公司着想，搞scrum就是一句空话。只有大家真正相互欣赏，相互理解和配合，团队的作用才能发挥起来。我们通过一年多对scrum的实践和改进，最终形成了我们自己的团队工作方式和团队文化，这一点是非常棒的。</p>

<p>如果不是因为创业，我可能至今还以为scrum只是管理者为了压榨程序员的劳动力而建立的工具，也无法体会到scrum的好处。</p>

<h3>更注意沟通效率</h3>

<p>上面也说过，时间是创业公司最大的敌人。而对于我来说，除了写代码的时间外，最大的时间开销就是沟通了。我们想了很多办法来提高沟通的效率。比如重要的信息，我们都会记录在wiki上，比如每次scrum的回顾会议的总结，我们就会放到wiki上，服务器端的接口信息，我们也会整理到wiki上。wiki对于新来的同事特别有用，因为他可以通过wiki了解到整个团队工作的历史，进而方便他熟悉和融入团队。对于一些相互依赖的接口信息，放到wiki上也省去了我们为了弄清楚接口而打断别人的工作，提高了大家的工作效率。</p>

<p>为了提高沟通效率，我们也把所有能省去的会议都省去了，我们没有产品评审会议，没有美术评审会议，我们也不会评审测试用例，以上这些会议，如果我们觉得有必要进行沟通的，就私下沟通，一切从简。</p>

<p>我们尽量减少打断别人工作的行为，如果我觉得有一件事情需要让所有人知道，我就会发一封邮件出来，如果该事情值得记录下来，我可能会同时把内容整理到wiki上。如果我在开发上的一些任务依赖后台相应的功能，我就会给相关人员报一个Bug，让他抽时间处理这个Bug即可。小的产品文案的改动也是以报Bug的形式来沟通。如果有些事情急需要让大家知道，比如服务器正在重启，测试和开发暂时不可连接服务器，我们就会在QQ群里面说一声。只有当我的工作被严重block的时候，例如需要服务器同事的确认才能进一步开发，例如需要产品的确认才能进一步开发的时候，我才会去打断别人的工作当面询问。尽量保证别人的工作可以不被打断，其实也是提高了大家工作的效率。</p>

<p>回想起以前在大公司，所有的沟通大多是在QQ一类的聊天工具中完成，打字交流，效率极低。开组会的时候，很多人无所事事，玩手机开小差，效率低下。创业让我感受到了效率至上的工作态度，让自己每天的工作高效是非常快乐的事情。由于我们不鼓励加班，所以我们自然也享受到了高效工作的回报：自己有更多时间做自己的事情。我每天都比同屋的另一个在美团工作的朋友下班早，晚上下班回到家，有时候我会看看书，有时候看看电影，有时候也会研究一些新的技术，创业的生活不再变得苦逼了。</p>

<p>如果不是因为创业，我根本无法体会到创业带来的高效地工作环境，每天自己的时间都在做具体的事情上，而不是大量的沟通上。</p>

<h2>总结</h2>

<p>如果不是因为创业，我无法在iOS开发上负责更多事情并且快速成长，无法扩大眼界认识很多iOS同行并和他们组建高质量讨论圈子，无法成功地连续一年执行scrum并且保证所有项目不延期，也无法享受高效工作不加班的生活。有这么多收获，创业本身能不能成功反倒不是最重要的事情了，每天能够开心，认真，充实地工作本身就是一种享受。</p>

<p>身边有不少朋友都在创业，有失败的，也有发展顺利的，和他们聊天常常会谈到，创业是一条不归路，因为创业的过程就象是打开了潘多拉的盒子，你见识到了外面世界的精彩，就再也不能忍受在大公司的平庸生活了。愿所有在创业路上奔跑的人们，找到属于自己的精彩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发工具篇-AppStore统计工具]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/16/ios-dev-tool-app-store-tool/"/>
    <updated>2013-06-16T12:26:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/16/ios-dev-tool-app-store-tool</id>
    <content type="html"><![CDATA[<p>本文首发于InfoQ，本文版权归InfoQ所有，转载请保留<a href="http://www.infoq.com/cn/articles/appstore-statistical-tool">原文链接</a>。</p>

<h2>前言</h2>

<p>随着iOS开发的流行，针对iOS开发涉及的方方面面，早有一些公司提供了专门的解决方案或工具。这些解决方案或工具包括：用户行为统计工具（友盟，Flurry，Google Analytics等),  App Store销售分析工具（例如App annie)， App crash收集工具（例如Crashlytics)，App测试发布工具（Test Flight）, App Push服务等。</p>

<p>这些解决方案或工具节省了iOS开发者大量的开发时间，但是由于相关介绍文章的缺乏，许多开发者都在重复着自己一次又一次重新造轮子。所以我希望，将我自己使用和调研的相关的第三方服务使用经验，整理成一系列文章，以便广大开发者能够省去大量的重复性工作。</p>

<p>今天介绍AppStore统计工具：App Annie和苹果的命令行统计工具。</p>

<!-- more -->


<h2>App Annie介绍</h2>

<p><img src="http://blog.devtang.com/images/app-annie-homepage.jpg"></p>

<p>苹果官方的iTunes Connect提供的销售数据统计功能比较弱，例如只能保存最近30天的详细销售数据，界面丑陋，
无法查看App的排名历史变化情况等。</p>

<p><a href="http://www.appannie.com/">AppAnnie</a>是一个专门为开发者提供的，针对AppStore相关数据的统计分析工具。
该工具可以统计App在AppStore的下载量，排名变化，销售收入情况以及用户评价等信息。</p>

<h3>原理</h3>

<p>AppAnnie实现的原理是：通过你配置的管理账号，向itunes connect请求获得你的App的相关数据，包括每日下载量，用户的评分数据，以及销售数据。</p>

<h3>注册Sales类型的账号</h3>

<p>使用AppAnnie，首先需要在苹果官方的itunes connect中配置一个Sales类型的账号。
因为默认的开发者账号是Admin级的权限，该权限是非常高的，可以修改App的价格或者直接下架商品。
如果将这个账号直接配置在AppAnnie中，虽然不影响其获得相关数据，但是有一定的账号安全风险。</p>

<p>配置该账号的详细步骤如下：</p>

<p>1、登录itunes connect，选择Manager Users</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-1.jpg"></p>

<p>2、选择iTunes Connect User</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-2.jpg"></p>

<p>3、点击Add new User</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-3.jpg"></p>

<p>4、填写新用户的相关信息</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-4.jpg"></p>

<p>5、勾选用户类型为Sales</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-5.jpg"></p>

<p>6、选择Notifications为All Notifications。点击图中所指的位置即可全选。</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-6.jpg"></p>

<p>7、之后，邮箱中会收到iTunes Connect发来的激活邮件。
点击邮件中的激活链接，即可进入到账号注册界面，之后注册账号即可激活。如果该邮箱已经注册过Apple Id，则会进入到登录界面，登录后即可激活。</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-add-user-7.jpg"></p>

<h2>注册 App Annie账号及配置</h2>

<p>打开App Annie的官方网站:<a href="http://www.appannie.com/">http://www.appannie.com/</a>，
注册步骤和一般网站的步骤一样，我就不介绍了，注册完成之后的配置步骤如下：</p>

<p>1、在设置页面中增加iTunes Connect账号</p>

<p><img src="http://blog.devtang.com/images/app-annie-1.jpg"></p>

<p>2、填写你的之前在iTunes Connect中增加的Sales类型的账号及密码</p>

<p><img src="http://blog.devtang.com/images/app-annie-2.jpg"></p>

<p>3、在User Setting中勾选上接收每日Report</p>

<p><img src="http://blog.devtang.com/images/app-annie-3.jpg"></p>

<p>4、这样，每天就可以收到AppAnnie发来的相关统计邮件了。如下是一封粉笔网的销售报告邮件截图：</p>

<p><img src="http://blog.devtang.com/images/app-annie-4.jpg"></p>

<h2>官方的命令行工具</h2>

<p>如果你觉得将自己的销售数据交给第三方统计服务商，有一些不太安全。可以考虑使用苹果官方提供的Autoingestion.class工具来获得每天的销售数据，然后存到本地的数据库中。</p>

<p>该工具的下载地址是<a href="http://www.apple.com/itunesnews/docs/Autoingestion.class.zip">这里</a>，
苹果对于该用户的帮助文档在<a href="http://www.apple.com/itunesnews/docs/AppStoreReportingInstructions.pdf">这里</a>。</p>

<p>下面介绍一下这个工具的使用，将Autoingestion.class下载下来后，切换到class文件所在目录，执行如下命令，即可获得对应的统计数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java Autoingestion &lt;帐号名&gt; &lt;密码&gt; &lt;vendorId&gt; &lt;报告类型&gt; &lt;时间类型&gt; &lt;报告子类型&gt; &lt;时间&gt;</span></code></pre></td></tr></table></div></figure>


<p>其中vendor Id在iTunes Connect的如下图所示位置获得，是一个数字8开头的序列。</p>

<p><img src="http://blog.devtang.com/images/itunes-connect-vendor-id.jpg"></p>

<p>&lt;报告类型>可选的值是：Sales 或 Newsstand</p>

<p>&lt;时间类型>可选的值是：Daily, Weekly, Monthly 或 Yearly</p>

<p>&lt;报告子类型>可选的值是：Summary, Detailed 或 Opt-In</p>

<p>&lt;时间>以如下的格式给出：YYYYMMDD</p>

<p>以下是一个示例，它将获得2013年5月8日的日销售摘要数据。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java Autoingestion username@fenbi.com password 85587619 Sales Daily Summary 20130508</span></code></pre></td></tr></table></div></figure>


<p>我试用了一下该工具，觉得还是太糙了一些，仅仅能够将销售数据备份下来，如果要做AppAnnie那样的统计报表，还需要写不少代码。而且，该工具并不象App Annie那样，还提供应用在App Store的排名变化情况。虽然可以自己再做抓取，但也是需要工作量的。</p>

<h2>其它类似App Annie的服务</h2>

<p>类似App Annie这样的服务还有：<a href="http://appfigures.com">AppFigures</a>。我试用过之后，发现它不如App Annie功能强大。不过作为一个替代方案，也一并介绍给大家。</p>

<p>在Github上也有一些开源的<a href="https://github.com/alexvollmer/itunes-connect">统计工具</a>，感兴趣的朋友也可以尝试一下。这些工具基本上也就是对苹果的命令行工具的增强，例如增加了将数据导入到数据库中等功能。</p>

<h2>功能对比</h2>

<p>App Annie和苹果本身提供的命令行工具虽然都能统计App Store的数据，但是二者功能相差悬殊。苹果的命令行工具仅仅能提供销售数据的按日、周、月、年等方式的统计和备份。而App Annie除了以更加良好的界面和交互提供这些功能外，还能跟踪App的排名变化，以及App在苹果的各种榜单中所处位置的情况。</p>

<p>建议大家都可以尝试使用App Annie或AppFigures这类统计工具，帮助你方便地查看App的销售和排名情况。</p>
]]></content>
  </entry>
  
</feed>
