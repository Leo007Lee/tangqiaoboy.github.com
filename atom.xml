<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-04-25T20:47:12+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第9期]]></title>
    <link href="http://blog.devtang.com/blog/2014/04/25/ios-weekly-9/"/>
    <updated>2014-04-25T20:44:56+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/04/25/ios-weekly-9</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/04/ios-mobile-developmeng-weekly">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：专门针对越狱iOS设备的盗号木马出现，iOS7下载自定义的字体功能不可用，Toll-Free Bridging等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://blog.devtang.com/blog/2014/04/19/ios-jailbreak-trojan/">专门针对越狱iOS设备的盗号木马出现</a>：国外的iOS开发者 <a href="https://twitter.com/iOn1c">@iOn1c</a> 发现一个来自中国的开发者&#8221;WANG XIN&#8221;签名的iOS平台的木马插件，该插件是一个名为Unflod.dylib动态链接库，可以将越狱机器上的AppleID用户名和密码盗取，并且发送到指定服务器上。<a href="http://pastebin.com/raw.php?i=QxVRd2ha">这里</a>有该恶意插件的反汇编代码。笔者作为一个资深iOS开发者，建议一般普通用户，如果是为了用盗版软件就别越狱了，各种国内的越狱渠道都非常不安全的。如果是开发者们为了研究安全而越狱的，最好也只是在专门研究用的iTouch上使用，以避免可能的安全风险。</p></li>
<li><p><a href="http://weibo.com/1676354212/AFt7N5pl8">iOS7下载自定义的字体功能不可用</a>：墨客的作者<a href="http://weibo.com/1676354212/AFt7N5pl8">@an00na</a>发现iOS提供的下载自定义的字体功能有bug，完全不能使用。相关的Bug说明在<a href="http://openradar.appspot.com/radar?id=5881896777023488">这里</a>。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://gracelancy.com/blog/2014/04/21/toll-free-bridging/">《Toll-Free Bridging》</a>：作者<a href="http://weibo.com/lancy1014/">@晨钰Lancy</a>在文章中介绍Toll-Free Bridging的实现原理，以及在ARC下Toll-Free Bridging的使用场景和注意事项。</p></li>
<li><p><a href="https://app.yinxiang.com/shard/s16/sh/15d40ea3-7273-4701-a816-dea7edfb2140/b41319e65ca4d91d2553f2bab25b8959">《iOS7.0到iOS7.1 UI修复》</a>：作者<a href="http://weibo.com/2271223902/B0960vL7J?ref=atme">@白仔_wyk</a>介绍了iOS7.0下原本正常的界面在iOS7.1显示错误的问题，并且介绍了修复方法。</p></li>
<li><p><a href="https://www.youtube.com/watch?v=OiY1cheLpmI">《Full Length Event &ndash; Building Paper》</a>：Facebook官方分享了介绍Paper的技术细节的视频（视频来自YouTube，需要翻墙才能观看）。视频中介绍Facebook自已实现的动画框架POP，以及如何做设计，测试，代码审核等各方面的信息。</p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-21-write-a-simple-nodejs-mongodb-web-service-for-an-ios-app.md">《为一个 iOS 应用编写一个简单的 Node.js/MongoDB Web 服务》</a>：作者<a href="http://weibo.com/nixzhu">@nixzhu</a>翻译了一个来自<a href="http://www.raywenderlich.com/61078/write-simple-node-jsmongodb-web-service-ios-app">RW</a>的教程，介绍了如何为一个 iOS 应用编写一个简单的 Node.js/MongoDB Web 服务。在本教程中，你将学会如何搭建了一个 Node.js 环境，驱动 Express；在此平台之上，你将构建一个通过 REST API 来提供一个 MongoDB 数据库的服务器。对于iOS端，你将构建一个很酷的叫做“有趣的地方”的应用，标记有趣的位置，让其它用户能够找出他们附近有趣的地方。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/zi-ti-jia-zai-san-chong-fang-shi">《字体加载三种方式》</a>：作者介绍了三种加载字体的方式：静态加载、动态加载、动态下载苹果提供的多种字体。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/mxcl/PromiseKit">PromiseKit</a>：异步模式在iOS编程中非常常见。针对异步编程，业界提出了Promise的抽象（又称作Deferred模式）。通过这些一些库，开发人员能够在实际编程中使用Promise模式，每个Promise都拥有一个叫做then的唯一接口，当Promise失败或成功时，它就会进行回调。它代表了一种可能会长时间运行而且不一定必须完成的操作结果。这种模式不会阻塞和等待长时间的操作完成，而是返回一个代表了承诺的（promised）结果的对象。PromiseKit是Promise模式的iOS实现。</p></li>
<li><p><a href="https://github.com/intentkit/IntentKit">IntentKit</a>：IntentKit是一个方便你处理第三方的URL Scheme的工具。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-04-25T20:44:56+08:00" pubdate data-updated="true">Apr 25<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[专门针对越狱iOS设备的盗号木马出现]]></title>
    <link href="http://blog.devtang.com/blog/2014/04/19/ios-jailbreak-trojan/"/>
    <updated>2014-04-19T00:27:38+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/04/19/ios-jailbreak-trojan</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/jailbreak-warning.jpg"></p>

<h3>关于木马</h3>

<p>今天，国外的iOS开发者 <a href="https://twitter.com/iOn1c">@iOn1c</a> 发现一个来自中国的开发者&#8221;WANG XIN&#8221;签名的iOS平台的木马插件，该插件是一个名为<code>Unflod.dylib</code>动态链接库，可以将越狱机器上的Apple ID用户名和密码盗取，并且发送到指定服务器上。<a href="http://pastebin.com/raw.php?i=QxVRd2ha">这里</a>有该恶意插件的反汇编代码。<a href="https://www.sektioneins.de/en/blog/14-04-18-iOS-malware-campaign-unflod-baby-panda.html">这里</a>有关于该木马插件的详细分析。</p>

<h3>检测与原理</h3>

<p>检查你的设备是否有该木马的方法：用<code>iFile</code>查看<code>/Library/MobileSubstrate/DynamicLibraries/Unflod.dylib</code> 文件是否存在，如果存在，请立即删除并且重新启动设备。</p>

<p>国外的越狱开发者也分析了一下该插件的工作原理，它通过监听所有的SSL协议，来截取用户的帐号和密码。所以理论上，该技术方案其实不光可以监听Apple ID帐号，还可以用来监听支付宝、微信等应用的帐号和密码。</p>

<h3>感想</h3>

<p>自从2010年7月26日，美国版权局修改《千禧年数字版权法》中的豁免条款，认可了iOS越狱的合法性以后，国外越狱社区就一直在为了自由地使用iPhone设备努力。国外的Cydia商店不但提供了大量优秀的免费软件，也提供了付费的越狱软件的下载。越狱在国外，是与盗版严格划清界限的，大多数的越狱开发者，也都是为了更好的使用iPhone而开发相关软件。</p>

<p>但是在国内，大部分的越狱用户的目的还是停留在使用盗版软件上，这也反映出国人的版权意识薄弱以及法律对于知识产权保护的不力。相关的盗版软件渠道，不但能够堂堂正正的宣传<a href="http://weibo.com/2786069543/yxpdRrpGB?mod=weibotime">“海量正版软件游戏，全部免费安装”</a>，而且有些公司还能被大公司以<a href="http://tech.sina.com.cn/i/baidubuy91/">上亿美金收购</a>。只能说国内的环境实在是太奇葩。</p>

<p>以下是某助手的广告截图，你相信全部苹果游戏应用，本身就是免费的么？</p>

<p><img src="http://blog.devtang.com/images/kuaiyong.jpg"></p>

<p>这次由中国开发者&#8221;WANG XIN&#8221;签名的这个木马插件，实在是让中国人自“太极”事件之后再次蒙羞。简单来说，就是坏了规矩。以后来自中国越狱开发者开发的正常越狱软件，将会受到更多潜在的“歧视”和“关照”。而国外的开发者看中国市场，会更加坚定地认为这是一个盗版横行的市场，从而想办法特别“关照”中国用户或者直接像很多国外的游戏厂商那样，直接忽视中国市场。</p>

<h3>建议</h3>

<p>最后回说安全这件事，笔者作为一个资深iOS开发者，建议一般普通用户，如果是为了用盗版软件就别越狱了，各种国内的越狱渠道都非常不安全的。</p>

<p>如果是开发者们为了研究安全而越狱的，最好也只是在专门研究用的iTouch上使用，以避免可能的安全风险。</p>

<p>虽然感觉那一天还比较遥远，但真心希望有一天，国内对于版权的保护能够开展起来，这对于整个中国互联网产业的发展，将会是一个极大的促进。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-04-19T00:27:38+08:00" pubdate data-updated="true">Apr 19<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第8期]]></title>
    <link href="http://blog.devtang.com/blog/2014/04/18/ios-weekly-8/"/>
    <updated>2014-04-18T21:58:29+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/04/18/ios-weekly-8</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/04/etag-improve-ios-url-function">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：SDWebImage缓存图片的机制、使用Etag增强iOS的URL缓存功能、从Facebook看移动开发的发展、FuzzyAutocomplete插件等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://www.overcode.hk/?p=449">《SDWebImage缓存图片的机制》</a>：文章详细介绍了SDWebImage对于图片的缓存逻辑的实现细节。</p></li>
<li><p><a href="http://shiningio.com/2014/04/12/ios-url-cache-with-etags/">《使用Etag增强iOS的URL缓存功能》</a>：iOS下对于缓存的支持有很多，比如Core Data，它可以很方便的建模和操作本地SQLite数据库， NSUserDefaults则可以用来缓存一些用户配置等等。本篇主要谈谈使用Etag标签来解决iOS下的URL缓存问题。服务端使用的是Tornado，原生支持Etag，而且默认处于开启状态，因此在应用层面基本不需要额外的代码处理。客户端使用NSURLCache配合AFNetworking进行网络请求。</p></li>
<li><p><a href="http://www.cnblogs.com/biosli/p/NSObject_inherit.html">《初始化阶段 —— load 和 initialize》</a>：文章介绍了load函数和initialize函数各自的加载顺序。最后文章总结出：将针对于类修改放在intialize中，将针对Category的修改放在load中。假如是修改系统的类，一般会通过添加Category来添加功能，如果修改initialize会导致原生的intialize不会执行，所以放在load中会比较妥当。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/04/13/objc_dig_interface/">《ObjC @interface的设计哲学与设计技巧》</a>：学习Objective-C语言时，尤其是先学过其他编程语言再来看Objective-C时，总会对Objective-C的类声明的关键字interface感到有点奇怪，在其它面向对象的语言中通常由class关键字来表示，而interface在Java中表示的却大约相当于Objective-C的protocol，这个关键字的区别究竟代表了Objective-C语言的设计者怎样的思想呢，在Objective-C类设计中需要注意哪些问题呢？作者在文章中对这个问题进行一些思考和探究。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2014/04/16/mobile-development-view-from-facebook/">《从Facebook看移动开发的发展》</a>：作者从Facebook的故事切入，分享了未来移动开发快速发展中，给设计师和程序员带来的挑战。</p></li>
<li><p><a href="http://imtx.me/archives/1888.html">《CoreData Object 变成 Fault 的另一种方式》</a>：CoreData是一个架构庞大、学习曲线比较陡峭的 iOS 组件，每次遇到问题都会对其有新的认识。文章分享了关于错误认知 Object（NSManagedObject）与 Context（NSManagedContext）的引用关系而导致的 Fault 问题。</p></li>
<li><p><a href="http://maoa.cn/?post=414">《关于 Mac 右键菜单》</a>：Mac OS X Lion 的 Launch Service 用于关联应用程序和文件并维护最近打开的项目列表。在文件关联和右键菜单方面，每当系统安装一个新的应用程序，都会调用 Launch Service 的 API 注册关联的文件类型。文章详细介绍了这其中的过程。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://fnd.io">fnd.io</a>: fnd.io 是一个App Store的网页版，搜索速度非常快，可以用来代替itunes进行应用的检索。</p></li>
<li><p><a href="https://www.shortcutfoo.com/">Shortcut Foo</a>：Shortcut Foo是一个训练你记忆快捷键的网站，除了包括iOS的第三方IDE AppCode的内容外，还包括vim，emacs, git等内容。</p></li>
<li><p><a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">FuzzyAutocomplete</a>：FuzzyAutocomplete是一个Xcode自动补全插件，刚刚更新到了2.0版本。它可以让你不需要再遵循从头匹配的原则来补全代码，而是随便输入你记得的关键字来进行匹配，整个插件的响应速度也非常快。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/granoff/Lockbox">Lockbox</a>: Lockbox是一个帮助你方便地将数据保存到keychain中的开源工具类。</p></li>
<li><p><a href="https://github.com/nolimits4web/framework7/">Framework7</a>： Framework7 是一个功能齐全的 HTML 框架，用来构建 iOS7 应用程序。Framework7 允许你使用Javascript代码来实现应用的列表，侧边栏，弹出框等控件。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-04-18T21:58:29+08:00" pubdate data-updated="true">Apr 18<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Facebook看移动开发的发展]]></title>
    <link href="http://blog.devtang.com/blog/2014/04/16/mobile-development-view-from-facebook/"/>
    <updated>2014-04-16T20:37:59+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/04/16/mobile-development-view-from-facebook</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/facebook-logo.jpg"></p>

<h2>从Facebook谈起</h2>

<p>Facebook最近绝对是互联网界的新闻明星。它首先是进行了大手笔的收购：2014年2月，Facebook 以 160 亿美元现金加股票，以及30 亿美元受限制股票福利的方式<a href="http://tech.ifeng.com/internet/special/fb-whatsapp/content-1/detail_2014_02/21/34032969_0.shtml">收购移动 IM 应用 WhatsApp</a>，总收购成本 190 亿美元。然后是继续发布了新产品：2014年2月，Facebook发布了一个新的移动端新闻阅读应用<a href="https://www.facebook.com/paper">Paper</a>。最后，Facebook最近还将自己使用的大量工具开源，包括开源了Paper的加载效果<a href="https://github.com/facebook/Shimmer">Shimmer</a>，LLDB的增强工具<a href="https://github.com/facebook/chisel">chisel</a>，以及Key-Value Observing工具<a href="https://github.com/facebook/KVOController">KVOController</a>，如果说这些开源工具让程序员如获至宝的话，那么Facebook将Paper的交互设计工具<a href="http://facebook.github.io/origami/">Origami</a>免费开放，则是对广大设计师的福音，极大地方便了移动交互设计工作的开展。</p>

<p>2014年对于Facebook来说也是一个值得纪念的日子。因为从2004年2月4日Facebook产品上线到现在，Facebook刚刚走过10个年头。10年前，Facebook的创始人扎克伯格才19岁，是哈佛大学的一名学生。转眼间10年后，Facebook已经成长为全球最大的社交网络，月活跃用户达到12亿，市值约1200亿美元。</p>

<p>业界内大多讨论的话题都围绕在Facebook收购WhatsApp这件事情上，而作为一个移动开发者，我更加看重Facebook 发布Paper这件事情。因为Paper并不是一个简单的应用，它有着非常优秀的交互效果，并且在产品设计和技术上都使用了许多前沿的技术，那就让我们看看，Paper的开发到底有何不同之处？</p>

<h2>交互设计</h2>

<p>我们首先从产品设计上看Paper的不同之处。Paper虽然只是一个新闻客户端，但从大家对Paper的评价上，我们发现优秀的交互再一次成为大家关注的焦点。回想那些成功的应用，大多都有着令人心动的交互效果，例如：Tweetie的下拉刷新，现在基本上成为iPhone上内容刷新的标准。Path跳出来的红心让人心动，很多朋友甚至会没事点那个红心，欣赏那流畅的按钮散开效果。还有Mailbox，用流畅的手势操作，将邮件管理与任务管理完美结合起来。</p>

<p>国外成功的优秀应用也在影响着国内。交互设计不同于平面设计，不能简单地用Photoshop展现，而交互设计对于移动应用的成功又异常关键，所以需要花费不少时间来设计，因此产品经理很难兼顾地做交互设计。所以，在国内的一线互联网公司里，交互设计师这个职位慢慢成了移动应用的标配。但是在大部分的非一线互联网公司里面，移动开发的设计仍然停留在由产品经理简单潦草的完成阶段。所以，Facebook这次Paper的成功发布，再一次给移动开发的从业者指出了交互设计的重要性。</p>

<p>回顾中国互联网产业的发展我们可以发现，产品经理（Product Manager）这个职位也是最近五、六年才成为互联网公司的标配的，想必在不远的将来，除着交互设计越来越重要，移动交互设计师也会成为每一个互联网公司重要的必备职位。</p>

<p>另一方面，由于工具的欠缺，大量的交互设计师的工作效率非常低下，他们为了做出一个新颖的效果常常需要花费大量精力。这次Facebook免费开放出基于苹果Quartz Composer的增强工具集<a href="http://facebook.github.io/origami/">Origami</a>，使得交互设计工作得到更好的辅助。而且在Facebook的带动下，<a href="http://qcdesigners.com/index.php/forums/topic/100/it-s-finally-here-j-qc-1-0-a-u/">jQC 1.0</a>也出现了。jQC是一个与Facebook之前开源的Origami兼容的工具，提供了15个新的Patch来提高Quartz Composer的功能。</p>

<p>不过另一方面，该工具仍然需要设计师具备一定的基础编码能力，所以对于广大设计师来说，交互设计工具Origami对设计师带来的既是机会，同时也是挑战。</p>

<h2>移动开发技术</h2>

<p>随着iOS依赖管理工具Cocoapods和大量第三方开源库成熟起来，业界积累了大量的优秀开源项目。这次Facebook开发Paper使用了<a href="http://blog.rpplusplus.me/blog/2014/02/11/facebook-paper-used-3rd/">将近100个第三方开源库</a>，极大地减化了自己的应用开发任务。相信随着移动开发的发展，移动开发的生态圈会越来越成熟，基础的开源组件也将将越来越丰富，广大开发者都将从中受益。</p>

<p>另一方面，Facebook的工程师在<a href="http://www.quora.com/What-exactly-did-Jason-Prado-mean-when-he-said-Xcode-cannot-handle-our-scale/answer/Scott-Goodson-1">Quora上反馈</a>说Paper在Xcode下打开需要40多秒钟，编译一次需要30分钟。这反映出大量的开源库的使用也给iOS集成编译环境Xcode提出了新的挑战，相信苹果会花大力气解决Xcode的性能问题。</p>

<h2>总结</h2>

<p>Facebook发布的Paper让我看到了移动开发领域的快速发展，大量新的工具和开源技术给了设计师和程序员机会和挑战，相信在移动互联网快速发展的浪潮中，会涌现出越来越多优秀的移动应用。谁会是未来移动互联网的霸主？让我们拭目以待。</p>

<h2>版权说明</h2>

<p>本文已发表在《程序员》杂志2014年4月刊上，链接为：<a href="http://www.csdn.net/article/2014-04-16/2819341">http://www.csdn.net/article/2014-04-16/2819341</a></p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-04-16T20:37:59+08:00" pubdate data-updated="true">Apr 16<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac重装记录]]></title>
    <link href="http://blog.devtang.com/blog/2014/04/12/install-mavericks-note/"/>
    <updated>2014-04-12T17:00:20+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/04/12/install-mavericks-note</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>上次将我的<a href="http://blog.devtang.com/blog/2014/01/26/add-ssd-to-old-imac/">iMac硬盘换成SSD</a>后，我是通过迁移助理将我的Mac Book Air的环境同步过去的，不知道为什么，半个月前出现了重启后电脑一直处于加转中的状态。尝试过了网上提供的以下方法都没有效果：</p>

<ol>
<li>启动时按住Shift键进入安全模式（没能进入）</li>
<li>同时按下 Command、Option、P 与 R 键不放（成功执行，但还是无法进入系统）</li>
<li>按住 Command 键及 S 键，进入单用户模式（成功进入，但是把“/资源库/StartupItems”与“/系统/资源库/StartupItems”都清除，以及清除了<code>com.apple.loginwindow.plist</code> 和<code>com.apple.windowserver.plist</code>后，但还是无法通过正常启动进入系统）</li>
<li>在单用户模式中修复磁盘，没有发现磁盘问题</li>
</ol>


<p>于是我做了一次覆盖安装，之后可以使用了，但昨天电脑又无法进入系统了。于是我打算格盘后做一次完全的重装，在此记录下自己的重装过程。</p>

<h2>备份数据</h2>

<p>由于我能够通过启动时按Command 键及 S 键，进入单用户模式，所以我首先把自己未提交的工程代码通过U盘备份出来了，具体步骤如下：</p>

<ol>
<li>按住 Command 键及 S 键不放，以“单一使用者模式”开机。</li>
<li>加载磁盘：<code>mount -uw /</code></li>
<li>新建一个U盘的加载目的文件夹： <code>mkdir /usb</code></li>
<li>插入U盘，然后用如下命令加载U盘 <code>mount_msdos /dev/disk1s1 /usb</code> （如果你的U盘不是msdos格式，可以尝试在输入mount_后，按两次tab查看可用的其它格式）</li>
<li>备份资料：<code>cp -r  ~/work/iphone /usb</code></li>
<li>弹出U盘：<code>umount /dev/disk1s1</code></li>
<li>将U盘资料放到别的电脑上，然后准备用来下一步制作安装盘</li>
</ol>


<h2>制作安装盘</h2>

<p> 苹果的操作系统其实可以直接通过网络恢复，考虑到恢复时间实在太长，所以最好制作成安装盘，这样安装起来非常快。</p>

<ol>
<li>准备好一个8G以上的空白U盘，准备好另外一台Mac电脑用来制作安装盘。</li>
<li>新的操作系统<code>Mavericks.app</code>可以在AppStore上直接下载。在另一台电脑上把文件下载好，下载后文件<code>Mavericks.app</code>应该在你的<code>/Applications</code>目录下。</li>
<li>插入U盘，执行：<code>sudo /Applications/Install\ OS\ X\ Mavericks.app/Contents/Resources/createinstallmedia --volume /Volumes/Untitled --applicationpath /Applications/Install\ OS\ X\ Mavericks.app --nointeraction</code></li>
<li>以上命令会将U盘先格式化，然后制作成安装盘，整个过程大概需要40分钟左右。</li>
</ol>


<h2>安装系统</h2>

<ol>
<li>插入上一步制作好的U盘</li>
<li>启动时按住 option 键，然后选择通过U盘启动，之后先进入磁盘工具里面把硬盘格式化了（你也可以选择不格式化，这样就是覆盖安装）</li>
<li>安装系统。整个安装过程大概要30分钟的样子。</li>
</ol>


<h2>安装软件</h2>

<p> 安装好系统后，首先进入AppStore升级系统，把需要的更新补丁都装了。然后通过AppStore的”Purchases”页面，重新安装以前购买过的应用，我主要装的是 qq、evernote、Alfred、MplayerX、Xcode、Dash、Keynote、有道词典。另外通过网页另外下载了QQ的五笔输入法。</p>

<p>接下来的基本上是命令行的安装，Mac下管理命令行工具首先得装homebrew了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby -e <span class="err">&quot;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install<span class="k">)</span>”
</span></code></pre></td></tr></table></div></figure>


<p>安装完之后执行一下<code>brew doctor</code>进行一下自检，看有没有什么异常。没问题就开始安装axel, imagemagick, autojump等命令行工具：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install wget
</span><span class='line'>brew install axel
</span><span class='line'>brew install imagemagick
</span><span class='line'>brew install autojump
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>有些程序(例如老版本的ruby需要使用gcc来编译)，通过以下命令安装老版的gcc：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew tap homebrew/dupes
</span><span class='line'>brew install apple-gcc42
</span></code></pre></td></tr></table></div></figure>


<h2>使用brew cask来安装应用</h2>

<p>之前专门<a href="http://blog.devtang.com/blog/2014/02/26/the-introduction-of-homebrew-and-brewcask/">写文章介绍</a>过<code>brew cask</code>, 这次打算试试常用软件都用它来装，首先安装brew cask:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew tap phinze/cask
</span><span class='line'>brew install brew-cask
</span></code></pre></td></tr></table></div></figure>


<p>然后设置alfred，把 <code>/opt/homebrew-cask</code>增加到 alfred 的search目录中，然后就可以用alfred来启动安装后的应用了。</p>

<p>接下来用brew cask安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew cask install iterm2
</span><span class='line'>brew cask install dropbox
</span><span class='line'>brew cask install google-chrome
</span><span class='line'>brew cask install sublime-text
</span><span class='line'>brew cask install mou
</span><span class='line'>brew cask install xtrafinder
</span><span class='line'>brew cask install charles
</span><span class='line'>brew cask install reveal
</span><span class='line'>brew cask install xscope
</span><span class='line'>brew cask install sparrow
</span></code></pre></td></tr></table></div></figure>


<h2>使用zsh</h2>

<p>然后是使用zsh，下载安装ohmyzsh:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L http://install.ohmyz.sh | sh
</span></code></pre></td></tr></table></div></figure>


<p>安装完成之后，<code>vim ~/.zshrc</code> ，除了git插件外，另外增加 osx 和 autojump 插件。然后把以下这行注释启用：<code>export LANG=en_US.UTF-8</code> ，否则命令行中的中文可能会乱码。</p>

<h2>同步数据</h2>

<p>挂上VPN之后，打开chrome，然后同步自己的所有信息，chrome的同步挺赞的，包括书签，插件，浏览历史记录以及保存的密码都同步过来了。</p>

<p>打开evernote和dropbox，同步数据。由于我的个人文档都存在它们里面，所以同步过来还是挺方便的。</p>

<p>打开QQ，将漫游的聊天记录同步过来。打开dash，恢复购买，然后把snippet从dropbox同步过来。</p>

<p>将自己的ssh key从原来的机器上复制过来。</p>

<h2>设置Ruby</h2>

<p>由于我的博客使用Octopress搭建，所以需要安装Ruby：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew update
</span><span class='line'>brew install rbenv
</span><span class='line'>brew install ruby-build
</span><span class='line'>
</span><span class='line'>rbenv install 1.9.3-p0
</span><span class='line'>rbenv <span class="nb">local </span>1.9.3-p0
</span><span class='line'>rbenv rehash
</span><span class='line'>
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<h2>结束语</h2>

<p>一切完成之后，我写下了本文，希望能帮助大家快速地重装系统。简单来说：</p>

<ol>
<li>通过evernote、dropbox和chrome将个人数据保存在云端后，重装后能快速恢复环境。</li>
<li>通过homebrew和基于homebrew的brew cask，可以方便地帮助你快速安装不在AppStore上销售的软件。</li>
</ol>


<p>其实正常情况下，Mac使用迁移助理或Time Machine恢复非常方便，如果不是万不得已，大家也不用像我这样重装系统。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-04-12T17:00:20+08:00" pubdate data-updated="true">Apr 12<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/mac/'>mac</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第7期]]></title>
    <link href="http://blog.devtang.com/blog/2014/04/10/ios-weekly-7/"/>
    <updated>2014-04-10T23:34:02+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/04/10/ios-weekly-7</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/04/apple-wwdc2014-ticket">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果WWDC2014门票开卖，
ARC下dealloc过程，修改OSX和iOS程序内容的内存修改器等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://nb.zol.com.cn/445/4451916.html">苹果WWDC2014门票开卖，开发者需通过抽签的方式申请购买</a>：2014年苹果开发者大会（WWDC）将于6月2日至6日在旧金山Moscone West中心举行。而本次WWDC大会的门票将于旧金山当地时间4月7日上午十点开始发售，开发者需通过抽签的方式申请购买，下午五点到八点公布获得门票的名单。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://realmacsoftware.com/blog/dynamic-linking">《Dynamic Linking》</a>：文章详细解释了动态链接库在iOS程序中的加载过程，作者在也尝试自己实现了一个动态链接库并且在iOS程序中成功加载，不过文章最后指出，在AppStore上架的的应用，如果要加载动态链接库，该链接库需要得到苹果的签名才能加载成功，虽然这在技术上是可行的，但苹果现阶段的审核要求是不接受这种应用的。作者也将相关代码开源在 <a href="https://github.com/ddeville/Dynamic-iOS">Dynamic-iOS</a> 项目中。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/ios-7-jiao-hu-shi-guo-du">《iOS 7 交互式过渡》</a>：iOS 7 新加入了自定义 View Controller 之间的过渡效果的方法。本文介绍了如何利用相关的API实现自定义的过滤效果。文章的内容主要包括：实现自定义过渡、使用自定义过渡、让过渡变得可以交互。文中例子的工程文件也已上传至<a href="https://github.com/PeteC/InteractiveViewControllerTransitions">GitHub</a>。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/04/02/objc_dig_arc_dealloc/">《ARC下dealloc过程及.cxx_destruct的探究》</a>：在MRC时代，我们经常在<code>dealloc</code>方法将内部其他对象释放掉，申请的非Objc对象的内存当然也需要一并处理掉，最后调用super，继续将父类对象做析构。而在ARC时代，大部分的代码都不再需要了。这些相应的代码是如何由编译器完成的？带着这样的疑问，作者研究了LLVM的具体实现细节。</p></li>
<li><p><a href="https://github.com/jspahrsummers/enemy-of-the-state/blob/master/Enemy%20of%20the%20State.pdf">《Enemy of the State》</a>：作者分享了程序架构中存在状态的坏处以及避免状态的一些方法：优先使用不可变对象、使用ReactiveCocoa框架、使用Model-View-ViewModel框架。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://chen.do/blog/2013/09/30/selectively-ignoring-objective-c-exceptions-in-xcode/">在Xcode调试时忽略部分异常</a>：作者提供了一些llvm增强脚本，用于方便地在调试时忽略掉部分异常。增强脚本的代码也开源在<a href="https://gist.github.com/chendo/6759305/raw/ignore_specified_objc_exceptions.py">这里</a>。</p></li>
<li><p><a href="https://github.com/naotaka/ClipMenu">ClipMenu</a>：开源的Mac OS剪贴板管理工具。</p></li>
<li><p><a href="https://github.com/kolinkrewinkel/Polychromatic">Polychromatic</a>：一个只高亮属性和变量的Xcode插件。</p></li>
<li><p><a href="https://github.com/shjborage/Reveal-Plugin-for-XCode">Reveal-Plugin-for-XCode</a>：作者写了一个Reveal插件，可以使工程不作任何修改的情况下使用Reveal，该插件已在Alcatraz上架。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/iosre/HippocampHairSalon">HippocampHairSalon</a>：一个可以用于修改OSX和iOS程序内容的内存修改器。内存修改器最早出现在游戏中，可以修改游戏中人物的生命值等参数。其作者也在<a href="http://iosre.com/forum.php?mod=viewthread&amp;tid=105&amp;page=1&amp;extra=#pid521">这里</a>介绍了其制作的详细原理。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-04-10T23:34:02+08:00" pubdate data-updated="true">Apr 10<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第6期]]></title>
    <link href="http://blog.devtang.com/blog/2014/04/03/ios-weekly-6/"/>
    <updated>2014-04-03T21:37:15+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/04/03/ios-weekly-6</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/04/apple-change-account-price">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果修改了中国区开发者帐号的付费价格、苹果调整了5个地区的AppStore应用价格以避免利用汇率的套利、iPhone版Office应用免费等。</p>

<h2>新闻</h2>

<ol>
<li><p>苹果在最近修改了中国区的开发者帐号（Developer Program）的付费方式，开始支持人民币支付并取消了美元支付。不过相对于以前99$每年的注册费用，现在需要使用688人民币。按现在的市场价汇率计算，相比以前，开发者需要多支付将近70元费用。</p></li>
<li><p><a href="http://iosdevelopertips.com/app-store/microsoft-office-mobile-iphone-now-free.html">iPhone版Office免费</a>：微软将自己旗下的iPhone版Office的价格修改为免费，下载地址是<a href="https://itunes.apple.com/cn/app/microsoft-office-mobile/id541164041?mt=8">这里</a>。</p></li>
<li><p>苹果于4月1日给开发者发邮件称：将会调整包括南非在内的5个地区的AppStore应用价格。在这之前，由于南非的货币持续贬值，一些投机分子，利用苹果商店在汇率上的漏洞，借助苹果商店汇率和实际汇率的差价来倒卖商品。<a href="http://daily.zhihu.com/story/3350426">《利用苹果商店规则漏洞的灰色地下产业链》</a>揭露了该行为。</p></li>
<li><p><a href="https://github.com/showcases/projects-that-power-github-for-mac">《Projects that power GitHub for Mac》</a>：GitHub在其官方网站上分享了在开发Mac版GitHub客户端时使用的第三方库，共30个。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://www.objc.io/issue-11/">《面向iOS开发者的Android教程》</a>：著名的iOS原创教程网站objc.io最近推出了一期介绍Android的教程。由于作者都是具有iOS开发经验的，所以教程内容特别适合于已经有iOS开发经验的读者。文章许多知识的讲解也会拿iOS开发中已有的概念来做对比，加深读者理解。</p></li>
<li><p><a href="http://billwang1990.github.io/blog/2014/03/26/nsassert-vc-nscassert/">《小心NSAssert》</a>：作者分享了在block中使用<code>NSAssert</code>时需要小心循环引用的问题。</p></li>
<li><p><a href="http://blog.xcodev.com/archives/issus-2014-4-2/">《最近开发中遇到的问题汇总》</a>：文章依次介绍了最近开发中遇到的问题，包括：《UIButton在Disabled状态下标题混乱的问题》、《含软连字符的字符串计算显示长度的问题》和《UINavigationBar左右两边按钮可同时点击的问题》。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/03/22/corebluetooth/">《Core Bluetooth Concept》</a>：作者介绍了在iOS设备中使用<code>CoreBluetooth</code>API来实现基于蓝牙4.0通讯相关的基础知识和示例工程。</p></li>
<li><p><a href="http://billwang1990.github.io/blog/2014/03/31/nshashtable-and-nsmaptable/">《NSHashTable &amp; NSMapTable》</a>：作者简单介绍了一下iOS开发中相对于<code>NSDictionary</code>和<code>NSSet</code>来说，不常被人使用的<code>NSHashTable</code>和<code>NSMapTable</code>的相关知识。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://github.com/Galeas/CocoaPodUI">CocoaPodUI</a>：<code>CocoaPodUI</code>是一个Xcode中的GUI插件，为iOS工程第三方依赖管理工具<code>CocoaPods</code>提供UI管理界面。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://gist.github.com/raven/8553761">Breakpoints_v2.xcbkptlist</a>：作者介绍了如何不修改工程设置和源码，将reveal集成到调试环境中的办法。<a href="http://revealapp.com/">reveal</a>是一个动态调试和修改界面的工具。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-04-03T21:37:15+08:00" pubdate data-updated="true">Apr 3<span>rd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第5期]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/28/ios-weekly-5/"/>
    <updated>2014-03-28T23:52:29+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/28/ios-weekly-5</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/03/reduce-ios-size">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期移动开发周报带来如下内容：减小iOS应用程序的大小，Quartz Composer的增强工具Origami的教程以及jQC工具等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="https://deals.iphoneincanada.ca/sales/the-mac-freebie-bundle-3-0">《The Mac Freebie Bundle 3.0》</a>：该网站提供了7个原本收费的Mac App的免费购买。笔者试用了一下其中的X-Mirage，它可以把iPhone投到Mac上，并提供录象功能，适合将演示导出成视频。另外那个页面有Bug，在购买时信用卡信息不用填写，留空就可以直接购买成功。</p></li>
<li><p><a href="http://www.macstories.net/news/apple-testing-related-search-suggestions-on-the-app-store/">《App Store 将增加匹配相关搜索关键字的新功能》</a>：新增加的功能有助于提高相关关键词的点击量。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://nonomori.farbox.com/post/injection-plugin-for-xcode">《injection plugin for xcode》</a>：Injection Plugin For Xcode 是 Xcode 上的一个插件。利用它可以修改应用代码，实时在模拟器或实机上看到效果而不需要重启应用。作者介绍了该插件的详细使用方式。</p></li>
<li><p><a href="http://www.pasanpremaratne.com/2014/03/15/UI-Prototyping-with-Quartz-Composer-and-Origami/">《UI Prototyping with Quartz Composer and Origami》</a>：由于工具的欠缺，大量的交互设计师的工作效率非常低下，他们为了做出一个新颖的效果常常需要花费大量精力。这次Facebook免费开放出基于苹果Quartz Composer的增强工具集Origami，使得交互设计工作得到更好的辅助。不过另一方面，该工具仍然需要设计师具备一定的逻辑思维能力，所以对于广大设计师来说，交互设计工具Origami对设计师带来的既是机会，同时也是挑战。本教程介绍了如何使用Quartz Composer 和 Origami来做交互设计。</p></li>
<li><p>写给 iOS 开发者的系列教程：从有iOS开发背景的人的角度，学习其它语言：
<a href="http://stuartkhall.com/posts/android-development-tips-for-ios-devs">Android篇</a>，<a href="http://t.cn/8sbXyOH">C++ 篇1</a>和<a href="http://t.cn/8sbXLyg">C++ 篇2</a>，<a href="http://t.cn/8FpEP4x">Go 篇</a>。</p></li>
<li><p><a href="http://beyondvincent.com/blog/2014/03/26/cookbook-moving-table-view-cells-with-a-long-press-gesture/">《利用长按手势移动 Table View Cells》</a>：本教程中介绍了如何通过长按手势来移动 table view中的cell，这种操作方式就像苹果自家的天气 App 一样。</p></li>
<li><p><a href="http://beyondvincent.com/blog/2014/03/24/reducing-the-size-of-my-app/">《减小iOS应用程序的大小》</a>：本文收集了一些减小程序安装包大小的相关技巧(当第一次下载和安装程序时)。如果是针对升级程序的话，可以看这篇文章: <a href="https://developer.apple.com/library/ios/qa/qa1779/">《减小iOS应用程序升级时所需下载的大小》</a>，这与第一次安装使用的工作原理有所不同。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2014/03/21/weak_object_lifecycle_and_tagged_pointer/">《NSNumber对象缓存以及Tagged Pointer》</a>：本文讨论了<code>NSNumber</code>对象的缓存以及苹果在64位系统引入的<code>Tagged Pointer</code>对象。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="http://qcdesigners.com/index.php/forums/topic/100/it-s-finally-here-j-qc-1-0-a-u/">jQC 1.0</a>：jQC是一个与Facebook之前开源的Origami兼容的工具，提供了15个新的Patch来提高Quartz Composer的功能。Quartz Composer是苹果提供的一个交互设计工具。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/gbammc/WechatPayDemo">WechatPayDemo</a>: WechatPayDemo是一个非官方的微信支付Demo，基于微信SDK1.4.1构建。由于微信官方并没有提供支付功能的iOS Demo，加上官方的文档错误，使得本文作者花了较大精力调试。他希望开源这个工程来帮助其他iOS开发者少有一些弯路。</p></li>
<li><p><a href="http://trawor.farbox.com/post/vz">微转iOS客户端和服务端</a>：微转是一个基于微博的数码设备平台，客户端和后台全部基于AVOSCloud服务实现。作者将其iOS客户端和服务端代码全部开源。</p></li>
<li><p><a href="https://github.com/facebook/Tweaks">Tweaks</a>：Tweaks让开发者可以方便地对特定事物进行标记——比如动画效果的时间，或者是按钮的颜色，或者是图片的透明度——并在使用设备实际运行应用时让开发者方便地进行实时调整。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-03-28T23:52:29+08:00" pubdate data-updated="true">Mar 28<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSNumber对象缓存以及Tagged Pointer]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/21/weak_object_lifecycle_and_tagged_pointer/"/>
    <updated>2014-03-21T21:09:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/21/weak_object_lifecycle_and_tagged_pointer</id>
    <content type="html"><![CDATA[<p>这是一次和 <a href="http://onevcat.com/">@onevcat</a> 的技术讨论总结。技术点比较散，但是还都比较有意思。涉及的技术细节包括：</p>

<ol>
<li>系统对象的缓存</li>
<li><code>Tagged Pointer</code>对象</li>
</ol>


<h2>autorelase对象</h2>

<p>按照苹果的编程约定，由非<code>alloc</code>,<code>copy</code>返回的对象都是<code>autorelease</code>的，所以对于以下代码，虽然变量<code>number</code>是<code>__weak</code>的，但是由于<code>[NSNumber numberWithInt:100]</code>返回的对象是<code>autorelase</code>的，所以仍然能通过NSLog打印出来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">number</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;number = %@&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>从汇编代码中看，以上代码在创建<code>number</code>变量时，是通过<code>objc_loadWeak</code>方法进行的。而根据 <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-loadweak">Clang的官方文档</a>，<code>objc_loadWeak</code>方法会<code>retain</code>并<code>autorelease</code>这个对象。所以给一个weak对象赋值，它并不会马上释放，而是会放到<code>autorelease pool</code>中，与<code>autorelease pool</code>一起释放。</p>

<p>如下是<code>objc_loadWeak</code>的代码示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="nf">objc_loadWeak</span><span class="p">(</span><span class="kt">id</span> <span class="o">*</span><span class="n">object</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">objc_autorelease</span><span class="p">(</span><span class="n">objc_loadWeakRetained</span><span class="p">(</span><span class="n">object</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了验证这个回答，我们又做了一个有趣的例子来验证，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">number</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;number = %@&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面这个例子中，果然如我们所料，<code>number</code>在通过NSLog查看值时，变成了nil。</p>

<h3>讨论二：关于NSNumber对象的缓存</h3>

<p>我们在做以上实验时，发现一个有趣的现象，如果你把100变成了10，则<code>number</code>变成在NSLog时，就能够输出值来，不再是nil了。如下是测试代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">number</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">number</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;number = %@&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过 onevcat 的实验，从-1 ～ 12都是可以输出的，而其它值却会变成nil。于是我们猜测是系统对这些常见值的对象做了缓存，于是我们写了如下代码来验证。</p>

<p>结果果然是这样，多次创建值为10的<code>NSNumber</code>对象，其地址都是<font color=red>一样的</font>。而多次创建值为100的<code>NSNumber</code>对象，每次创建获得的对象地址都是<font color=red>不一样的</font>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">number</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">another</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%p %p&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">another</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">number</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="n">another</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%p %p&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">another</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>讨论三：64位系统与Tagged Pointer对象</h3>

<p>讨论本来已经结束了，结果我在写这篇博客的时候，手贱又测试了一下，发现在64位的模拟器下，无论创建多少次，也无论int的值是多少，所有相同int值的<code>NSNumber</code>对象地址都是一样的！</p>

<p>疑惑了几分钟，我突然想起WWDC中介绍的64位系统引放的<code>Tagged Pointer</code>，恍然大悟。</p>

<p>在WWDC2013的《Session 404 Advanced in Objective-C》视频中，苹果介绍了<code>Tagged Pointer</code>。<code>Tagged Pointer</code>的存在主要是为了节省内存。我们知道，对象的指针大小一般是与机器字长有关，在32位系统中，一个指针的大小是32位（4字节），而在64位系统中，一个指针的大小将是64位（8字节）。</p>

<p>在64位系统中，如果我们真正使用一个指针来存储<code>NSNumber</code>实例，那么我们首先需要一个8字节的指针，另外需要一块内存存储<code>NSNumber</code>实例，这通常又是8字节。这样的内存开销是比较大的。苹果对于<code>NSNumber</code>和<code>NSDate</code>对象，改成了用<code>Tagged Pointer</code>来存储，简单来说，<code>Tagged Pointer</code>是一个假的指针，它的值不再是另一个地址，而就是对应变量的值。</p>

<p><code>Tagged Pointer</code>主要有以下3个特点：</p>

<ol>
<li><code>Tagged Pointer</code>专门用来存储小的对象，例如<code>NSNumber</code>和<code>NSDate</code></li>
<li><code>Tagged Pointer</code>指针的值不再是地址了，而是真正的值。所以，实际上它不再是一个对象了，它只是一个披着对象皮的普通变量而已！所以，它的内存并不存储在堆中，也不需要malloc和free。</li>
<li>在内存读取上有着3倍的效率（以前是寻址->发消息->获取值，现在直接获取值），创建时比以前快106倍。</li>
</ol>


<p> 相关英文文档截图如下：</p>

<p> <img src="http://blog.devtang.com/images/tagged_pointer_1.jpg"></p>

<p>但<code>Tagged Pointer</code>的引入也带来了问题，即<code>Tagged Pointer</code>因为并不是真正的对象，而是一个伪对象，所以你如果完全把它当成对象来使，可能会让它露马脚。比如我在<a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">《Objective-C对象模型及应用》</a>一文中就写道，所有对象都有 <code>isa</code> 指针，而<code>Tagged Pointer</code>其实是没有的，因为它不是真正的对象。</p>

<p>因为不是真正的对象，所以如果你直接访问<code>Tagged Pointer</code>的<code>isa</code>成员的话，在编译时将会有如下警告：</p>

<p> <img src="http://blog.devtang.com/images/tagged_pointer_2.jpg"></p>

<p>对于上面的写法，应该换成相应的方法调用，如 <code>isKindOfClass</code> 和 <code>object_getClass</code>，如下图所示：</p>

<p> <img src="http://blog.devtang.com/images/tagged_pointer_3.jpg"></p>

<p>至此，所有疑问都已经解决，开心～</p>

<p>另外这儿有一篇介绍<code>Tagged Pointer</code>的文章：<a href="http://blog.xcodev.com/archives/tagged-pointer-and-64-bit/">《64位与Tagged Pointer》</a>，一并推荐给大家。</p>

<h2>One More Thing</h2>

<p>如果知道提问的艺术，iOS开发已经入门至少半年了，会用google、stackoverflow和github解决基本问题，但是遇到一些更复杂的问题时没有地方找人讨论，那么欢迎你申请加入我创建的slack群组。本次讨论也是由slack群组里的@caoping同学的提问引起的。</p>

<p><a href="http://iosdev.slack.com">iOS开发的slack群组</a>经过2个月试运营，现在已经聚集了300个有经验的iOS开发者，现在开始接受申请加入，申请地址是（需翻墙）： <a href="https://docs.google.com/forms/d/1eWH_jjDIIV5kpSV0BUPBAIboHEj0ZrgBrZHWsdJqkDU/viewform">https://docs.google.com/forms/d/1eWH_jjDIIV5kpSV0BUPBAIboHEj0ZrgBrZHWsdJqkDU/viewform</a> 。如果你不会翻墙，不会用google和stackoverflow以及github，那么我劝你还是别加入了。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-03-21T21:09:00+08:00" pubdate data-updated="true">Mar 21<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第4期]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/21/ios-weekly-4/"/>
    <updated>2014-03-21T20:23:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/21/ios-weekly-4</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/03/lldb-debug-command">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>本周iOS移动开发周报，带来一系列iOS开发教程以及2个开源项目。这期中的2个开源项目都比较值得关注，一个是VVebo写的GIF解决方案，另一个是用OC实现的QQ自动回复机器人。后者的作者是图书<a href="http://item.jd.com/11389860.html">《iOS应用逆向工程》</a>的作者，这本书也是一本不错的安全方面的入门图书，一并推荐给大家。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://wufawei.com/2014/03/symbolicating-ios-crash-logs/">《分析iOS Crash文件：符号化iOS Crash文件的3种方法》</a>：文章介绍了拿到用户的<code>.crash</code>文件之后，如何符合化（Symbolicating）crash文件的3种方法。它们分别是：使用Xcode、使用命令行工具symbolicatecrash，以及使用命令行工具atos。这些方法可以帮助开发者尽快找到应用crash的原因。</p></li>
<li><p><a href="http://objcio.com/blog/2014/03/10/custom-controls/">《自定义控件》</a>：本文翻译自objc.io的《Custom Controls》，讨论了一些自定义视图和控件的诀窍和技巧。文章先对UIKit已经提供的控件做了一个概览，介绍一些渲染技巧，随后深入到视图和它们的所有者之间的通信策略，并简略探讨了辅助功能、本地化和测试。</p></li>
<li><p><a href="http://nshipster.cn/dictionary-services/">《关于字典的介绍》</a>：文章介绍了OS X和iOS里面系统提供的字典服务以及调用方法。其中OS X中介绍的是使用私有API的方法，而iOS中介绍的是使用公开的<code>UIReferenceLibraryViewController</code>的方法。</p></li>
<li><p><a href="http://stuartkhall.com/posts/android-development-tips-for-ios-devs">《Android Development Tips For iOS Devs》</a>：写给iOS开发者看的Android开发技巧，适合有iOS开发背景的朋友学习Android开发。</p></li>
<li><p><a href="http://iosinit.com/?p=1022">《iOS 7之UICollectionView与UIKit Dynamics》</a>：<code>UIKit Dynamics</code> 是 iOS 7 中基于物理动画引擎的一个新功能–它被特别设计使其能很好地与 <code>CollectionView</code> 配合工作。本文介绍了如何将这两个特性结合在一起。文章翻译自objc.io第5期。</p></li>
<li><p><a href="http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan/">《LLDB调试命令初探》</a>：LLDB是LLVM下的调试器，Xcode从4.0开始编译器开始改用LLVM，相应的调试器也从gdb改为LLDB。而从 Xcode5.0开始所有工程也被自动设置为使用LLDB。本文从初学者的角度讲解了在日常的开发中如何使用LLDB以及LLDB常用的命令。</p></li>
<li><p><a href="http://beyondvincent.com/blog/2014/03/19/18-tips-for-working-effectively-with-interface-builder/">《提高Interface Builder高效工作的8个技巧》</a>：文章介绍了Xcode的界面编辑器Interface Builder的8个使用技巧，可以提高工作效率。</p></li>
<li><p><a href="http://imtx.me/archives/1885.html">《自由地控制 Xcode Open Quickly 打开方式》</a>：文章介绍了Xcode Open Quickly使用的一则技巧，可以方便地控制打开方式。</p></li>
<li><p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/21469769">《static和被裁的符号表》</a>：作者念茜这次从安全防御角度出发，讲解利用static关键字裁掉函数符号，以便不让攻击者理清自己程序的敏感业务逻辑，提高应用的逆向门槛。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p>微博客户端 <a href="http://weibo.com/appsupport">VVebo</a> 的作者开源了他自己为VVebo写的GIF解决方案 <a href="https://github.com/johnil/VVeboImageView">VVeboImageView</a>， 占用内存很小。</p></li>
<li><p><a href="https://github.com/iosre/Skua">《iOS客户端自动回复机器人源码》</a>：作者实现了一个QQ的自动回复机器人。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-03-21T20:23:00+08:00" pubdate data-updated="true">Mar 21<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第3期]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/14/ios-weekly-3/"/>
    <updated>2014-03-14T15:10:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/14/ios-weekly-3</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/03/apple-ios71-xcode51">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本周移动开发周报带来如下内容：苹果发布iOS7.1相关内容，ReactiveCocoa和Origami相关的教程，一些来自于Facebook的开源项目。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/it/apple/2014-03-11/01399228853.shtml">《苹果发布iOS 7.1更新》</a>：苹果在3月11日正式发布了iOS 7.1更新，支持连接车载系统CarPlay。iOS 7.1 对用户界面进一步做了改进，同时改进了Touch ID指纹识别的能力，并针对iPhone 4做了优化。也此同时，苹果也同步放出了支持iOS 7.1的集成编译环境Xcode 5.1正式版，开发者可以从<a href="http://developer.apple.com/">苹果开发者中心</a>下载新版本的Xcode。</p></li>
<li><p><a href="http://www.polarb.com/publishers/results/poll_sets/2042">《iOS 7.1 vs iOS 7》</a>：文章对比了iOS 7.1相对于iOS 7所做的细节上的调整，这些调整结果也支持用户打分。从打分结果上看，大部分的调整得到了用户的肯定。</p></li>
<li><p><a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">《3月的TIOBE编程语言排行榜》</a>：三月的TIOBE编程语言排行榜，Objective-C和C++继续拉开差距，稳坐第三的位置。而在半年前，二者还是几乎一样的Rating值，可见移动开发在继续升温。</p></li>
<li><p>升级到Xcode 5.1和iOS 7遇到的各种开发问题及解决办法汇总：</p>

<ul>
<li><a href="http://weibo.com/2157980617/AAwK4kpE8?mod=weibotime">《iOS 企业证书部署无效的问题》</a></li>
<li><a href="http://weibo.com/1658814735/AAvyB25js">《clipsToBounds 属性默认值变了》</a></li>
<li><a href="http://weibo.com/2157980617/AAv3IwVrH?mod=weibotime">《第三方库不支持64位造成编译错误》</a></li>
</ul>
</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://www.raywenderlich.com/62699/reactivecocoa-tutorial-pt1">《ReactiveCocoa Tutorial – The Definitive Introduction》</a>: RayWenderlich网站放出了从零开始学ReactiveCocoa系列教程第一课。讲得很基本很实用，适合想学ReactiveCocoa的同学作为入门教材。</p></li>
<li><p><a href="http://imkevin.me/post/78301132929/nginx-spdy-ios">《让 Nginx SPDY 和 iOS 交朋友》</a>：<a href="http://zh.wikipedia.org/wiki/SPDY">SPDY</a>是Google开发的基于传输控制协议（TCP）的应用层协议，目前已经被用于Google Chrome浏览器中来访问Google的SSL加密服务。SPDY协议类似于HTTP，但旨在缩短网页的加载时间和提高安全性。SPDY协议通过压缩、多路复用和优先级来缩短加载时间。作者在文章中分享了如何在iOS应用中使用SPDY协议的经验。</p></li>
<li><p><a href="http://blog.xcodev.com/archives/access-iphone-simcard-contacts-via-baseband/">《利用iPhone基带读写SIM卡联系人》</a> 和 <a href="http://blog.xcodev.com/archives/send-sms-via-iphone-baseband/">《利用iPhone基带发送短信息》</a>：文章简要介绍了一下SIM卡的一些常识，AT指令中中文字符的相关处理，以及如何读写SIM卡中的联系人数据，最终实现了利用iPhone基带发送短信息的功能。不过由于苹果沙盒(sandbox)的限制，该相关知识只能在越狱手机上应用。</p></li>
<li><p><a href="http://vimeo.com/88468610">《The 4 Minute Guide to Quartz Composer
》</a>和<a href="http://vimeo.com/85578380">《Prototyping with Facebook Origami》</a>：两篇介绍Facebook免费提供的基于Quartz Composer的交互设计工具Origami的视频教程（需要翻墙）。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li>手工写<code>.gitignore</code>文件常常费时费力还容易出错，<a href="http://www.gitignore.io/">http://www.gitignore.io/</a> 是一个<code>.gitignore</code>的生成网站，iOS工程的<code>.gitignore</code>生成地址是这个： <a href="http://www.gitignore.io/api/xcode,objective-c">http://www.gitignore.io/api/xcode,objective-c</a></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/facebook/Shimmer">Shimmer</a>: Facebook 开源了他旗下应用 Paper 的加载效果，它使用了WWDC 2009中介绍的<code>-[CALayer mask]</code>的技术方案。</p></li>
<li><p><a href="https://github.com/facebook/chisel">chisel</a>：Facebook开源了LLDB的增强工具chisel，其中的许多命令对于调试界面非常有帮助。</p></li>
<li><p><a href="https://github.com/facebook/KVOController">KVOController</a>: Facebook开源了Key-Value Observing工具KVOController。KVO是一个在iOS应用程序开发中，用于模块间通讯的技术技术，常常用于保证界面对于模型数据变化的实时响应。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-03-14T15:10:00+08:00" pubdate data-updated="true">Mar 14<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第2期]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/07/ios-weekly-2/"/>
    <updated>2014-03-07T21:44:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/07/ios-weekly-2</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/03/apple-store-gray-chain">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://daily.zhihu.com/story/3350426">《利用苹果商店规则漏洞的灰色地下产业链》</a>：作者在文章中介绍了一些投机分子，利用苹果商店在汇率上的漏洞，借助汇率和实际汇率的差价来倒卖商品。据文中介绍，一款不错的手游产品，每月的账面销售额为700万元，但可能真正到账的只有550万元，其余的150万元中约有50万元的黑卡耗损，而剩余的100万则被这些汇率倒卖者攫取。</p></li>
<li><p><a href="http://www.guomii.com/posts/37790">《Apple即将推出CarPlay功能》</a>：Apple宣布几大顶级汽车制造商即将推出CarPlay。据苹果介绍，CarPlay是一种更智能、更安全且更有意思的在车中使用iPhone的方式。</p></li>
<li><p><a href="http://djt.qq.com/mobile/article/1073">《2013移动行业分析》</a> 腾讯移动分析发布了2013年移动行业数据分析报告，报告介绍了iOS的用户比例和版本分布。根据文中的统计，国内移动终端iOS市场份额为24.7%。另外不同于国外的情况是，国内iOS5的用户比例仍然高达12%。</p></li>
<li><p><a href="http://images.apple.com/iphone/business/docs/iOS_Security_Feb14.pdf">《iOS Security》</a>：苹果发布官方的安全方面的文档，介绍了iOS系统从硬件，文件系统到网络等各方面的安全细节。</p></li>
<li><p><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html">《WhatsApp 架构设计》</a>: 作者在文章中分享了最近被Facebook收购的WhatsApp的架构，包括它使用到的前后端技术框架以及硬件，文章中也分享了一些提高服务器并发连接数和可扩展性的经验。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.csdn.net/wzzvictory/article/details/20067595">《CocoaPods详解之&mdash;&mdash;制作篇》</a>：作者详细介绍了CocoaPods依赖库的创建过程，这对于开源项目作者来说很有帮助。</p></li>
<li><p><a href="http://blog.jobbole.com/61101/">《通过实现一个TableView来理解iOS UI编程》</a>：作者通过实现一遍TableView来理解UIKit的一些技术细节，包括几何布局框架、UI的层次架构、子类化UIScrollView、Cell的重用、响应和处理事件和可扩展性等技术细节。</p></li>
<li><p><a href="http://www.yidianzixun.com/article/news_eaf23f7ff41d4862ecbf0d10441cf5f5?s=1">《iOS 开发者应该知道的 ARM 结构》</a>：到目前为止，所有的 iOS 设备都使用 ARM 结构处理器。作者在文章中介绍了ARM处理器的各种特点，包括条件执行、Thumb 指令集、内存对齐和除法等技术细节。</p></li>
<li><p><a href="http://segmentfault.com/a/1190000000390012">《iOS 开发：绘制像素到屏幕》</a>：像素是如何绘制到屏幕上面的？把数据输出到屏幕的方法有很多，通过调用很多不同的framework和不同的函数。作者在文章中介绍了这个过程背后的东西，这能够帮助大家在遇到性能问题时调试解决问题。</p></li>
<li><p><a href="http://iosinit.com/?p=854">《玩转字符串》</a> 和 <a href="http://iosinit.com/?p=880">《字符串渲染》</a>: 作者翻译了objc.io第九期关于字符串的系列文章。《玩转字符串》中介绍了字符串的比较、搜索、排序以及格式化等功能。《字符串渲染》中介绍了字符串在UILabel、UITextField以及Core Text中的渲染细节。</p></li>
<li><p><a href="http://iosdevelopertips.com/general/object-encoding-and-decoding-with-nssecurecoding.html">《Object Encoding and Decoding with NSSecureCoding Protocol》</a>：作者在文章中介绍了如何使用NSSecureCoding来序列化和反序列化对象。文章最后，作者提供了一个名为<a href="https://github.com/nicklockwood/AutoCoding">AutoCoding</a>的开源项目来帮助大家实现相关的功能。</p></li>
<li><p><a href="https://developer.apple.com/design/">《苹果最新的设计指南》</a>: 苹果发布了其最新的设计指南，试图帮助开发者更好地学习iOS7风格的应用和游戏设计。新版指南提供了大量的视频和文档，内容涵盖应用和游戏开发的各个方面。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://koofrank.com/blog/2014/02/28/my-first-article/">《四个iOS开发的小工具》</a>：作者在文章中介绍了4个有助于iOS开发的小工具。不过笔者并不同意文章后半部分的关于Blocks内联的内容。</p></li>
<li><p>著名的Xcode插件：<a href="https://github.com/supermarin/Alcatraz">Alcatraz</a> 完成了对Xcode 5的适配，大家可以用它方便地管理XCode的相关第三方插件。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p>QFish分享了一个小项目：<a href="https://github.com/qfish/xproj">xproj</a>，可以帮iOS开发者批量地为工程文件添加编译参数 <code>-fno-objc-arc</code> 或 <code>-fobjc-arc</code>。</p></li>
<li><p><a href="https://github.com/GeekZooStudio/ECMobile_iOS">ECMobile 3.0.0</a>发布，完全基于 BeeFramework 0.5.0 开发，它可以作为使用BeeFramework的参考项目。</p></li>
<li><p><a href="http://weibo.com/ranwj">移动开发小冉</a>写了一个类似虾米音乐的iOS App首页左右滑动效果的示例程序，代码质量很高，项目地址在<a href="https://github.com/nonstriater/NTSlidingViewController">这里</a>。</p></li>
<li><p><a href="https://github.com/5sw/SWParallaxScrollView">SWParallaxScrollView</a>：SWParallaxScrollView是一个具有多个层次的可滑动视图，可以实现不同层之间不同的滑动速度。该技术常常用来做应用初次启动时的介绍。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-03-07T21:44:00+08:00" pubdate data-updated="true">Mar 7<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Alcatraz来管理Xcode插件]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/"/>
    <updated>2014-03-05T22:36:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/Alcatraz-logo.jpg"></p>

<h2>简介</h2>

<p>Alcatraz是一个帮你管理Xcode插件、模版以及颜色配置的工具。它可以直接集成到Xcode的图形界面中，让你感觉就像在使用Xcode自带的功能一样。</p>

<h2>安装和删除</h2>

<p>使用如下的命令行来安装Alcatraz：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p ~/Library/Application<span class="se">\ </span>Support/Developer/Shared/Xcode/Plug-ins;
</span><span class='line'>curl -L http://git.io/lOQWeA | tar xvz -C ~/Library/Application<span class="se">\ </span>Support/Developer/Shared/Xcode/Plug-ins
</span></code></pre></td></tr></table></div></figure>


<p>如果你不想使用Alcatraz了，可以使用如下命令来删除：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm -rf ~/Library/Application<span class="se">\ </span>Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin
</span><span class='line'>rm -rf ~/Library/Application<span class="se">\ </span>Support/Alcatraz
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>使用</h2>

<p>安装成功后重启Xcode，就可以在Xcode的顶部菜单中找到Alcatraz，如下所示：</p>

<p><img src="http://alcatraz.io/images/menu@2x.png" alt="" /></p>

<p>点击“Package Manager”，即可启动插件列表页面，如下所示：</p>

<p><img src="http://alcatraz.io/images/screenshot@2x.png" alt="" /></p>

<p>之后你可以在右上角搜索插件，对于想安装的插件，点击其左边的图标，即可下载安装，如下所示，我正在安装<code>KImageNamed</code>插件：</p>

<p><img src="http://blog.devtang.com/images/alcatraz-install.jpg"></p>

<p>安装完成后，再次点击插件左边的图标，可以将该插件删除。</p>

<h2>插件路径</h2>

<p>Xcode所有的插件都安装在目录<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code>下，你也可以手工切换到这个目录来删除插件。</p>

<h2>关于Xcode的插件机制</h2>

<p>Alcatraz当前只支持OSX 10.9 and Xcode 5。不要抱怨了，这其实主要是因为苹果并没有开放插件机制，每次升级Alcatraz都都要重新适配。如果你看Alcatraz的Commit Log，你就会发现，Alcatraz花了几个月时间，才适配到Xcode 5，这对于插件开发者来说，是比较难受的。</p>

<p>所以作为一款开源并且免费的插件，只支持最新版的Xcode可以让开源作者节省大量精力。我也希望苹果能早日开放Xcode的插件机制标准，方便广大的插件开发者构建强大的第三方增强工具。</p>

<h2>推荐的插件</h2>

<p>我个人比较喜欢XCode的vim插件XVim，微博里大家推荐过的还有KImageNamed插件，Alcatraz里面应该好用的插件很多，我还没有时间试用。</p>

<p>这儿有一些朋友整理的插件列表：<a href="http://www.cocoachina.com/applenews/devnews/2013/0918/7022.html">《那些不能错过的Xcode插件》</a></p>

<p>如要你发现好用的插件，欢迎在留言处回复告诉我，我可以推荐给大家。谢谢～</p>

<h2>插件开发</h2>

<p>如果你觉得自己很牛逼，想尝试开发插件，这儿有一些教程：</p>

<ul>
<li><a href="http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/">《Xcode5 Plugins 开发简介》</a></li>
<li><a href="http://onevcat.com/2013/02/xcode-plugin/">《Xcode 4 插件制作入门》</a></li>
<li><a href="http://joeyio.com/ios/2013/07/25/write_xcode4_plugin_of_your_own/">《写个自己的Xcode4插件》</a></li>
</ul>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-03-05T22:36:00+08:00" pubdate data-updated="true">Mar 5<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第1期]]></title>
    <link href="http://blog.devtang.com/blog/2014/02/27/ios-weekly-1/"/>
    <updated>2014-02-27T17:23:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/02/27/ios-weekly-1</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/02/apple-ssl-bug">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-02-22/08379183001.shtml">《苹果收购iOS测试平台TestFlight的开发商》</a>，苹果公司确认收购知名iOS测试平台TestFlight的开发商Burstly。与此同时，TestFlight表示将停止提供Android平台产品，不再面向新用户销售Android版测试软件开发包(SDK)，而当前用户仍可以继续使用。</p></li>
<li><p><a href="http://coolshell.cn/articles/11112.html">《由苹果的低级Bug想到的》</a>: 2月22日苹果修复了SSL连接验证的一个bug，该bug会引起中间人攻击。文章作者详细分析了Bug产生的潜在原因和一些思考，包括代码风格、测试、以及goto语句的使用。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/02/11/baidu-interview/">《百度面试》</a>：作者在文章中分享了百度移动云可穿戴部门iOS开发职位的面试经历，其中多个技术问题值得大家深入学习。</p></li>
<li><p><a href="http://blog.rpplusplus.me/blog/2014/02/11/facebook-paper-used-3rd/">《Facebook Paper使用的第三方库》</a>：作者在文章中分享了facebook paper使用的第三方库。该列表中的第三方库对广大iOS开发者来说，具有很好的参考意义。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.xcodev.com/archives/iphone-baseband-intro/">《初识iPhone基带通讯》</a>：基带（Baseband）是手机的通讯模块，它负责移动网络的调制与解调工作，它与手机核心通讯功能息息相关。作者在文章中介绍了，如何在越狱的iPhone中，用基带进行通讯。</p></li>
<li><p><a href="http://sjpsega.com/blog/2014/02/11/yi--ios-7-best-practices-part-1/">《[译]iOS7最佳实践：一个天气App案例(一)》</a>和<a href="http://sjpsega.com/blog/2014/02/15/yi--ios-7-best-practices-part-2/">《[译]iOS7最佳实践：一个天气App案例(二)》</a>：在这篇来自raywenderlich的教程中，作者详细介绍了如何使用依赖管理工具Cocoapods、纯代码布局、响应式编程框架ReactiveCocoa以及OpenWeatherMap完成一个天气应用，具有很高的学习价值。</p></li>
<li><p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/19642621">《基于脚本实现动态库注入》</a>：作者分享了她在越狱手机上，基于脚本向某个应用动态注入动态库的想法和实践。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/">《Xcode5 Plugins 开发简介》</a>：作者在文章中介绍了如何给Xcode5开发插件。最后作为示例，开发了一个简单的插件，记录Xcode开发中Building的时间。</p></li>
<li><p><a href="http://onevcat.com/2014/02/ios-test-with-kiwi/">《TDD的iOS开发初步以及Kiwi使用入门》</a>：测试驱动开发(Test Driven Development，简称为TDD)是保证代码质量的一种程序开发方法。作者介绍了在iOS开发中使用TDD及Kiwi的方法。</p></li>
<li><p><a href="http://iosinit.com/?p=787">《objc.io系列文章中文翻译汇总》</a>：objc.io是国外的一个iOS教程网站，它每一期的教程会有一个主题，在这个主题下会有6篇左右的文章（有时由浅入深，有时侧重点不同），实属iOS学习中的精品资源。因此，每一期objc.io文章出来的时候，都会有一些热心的读者将文章翻译成中文。作者将网上的翻译汇总在文章中，方便大家阅读。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://itunes.apple.com/cn/app/crash-manager/id806327079?mt=8">Crash Manager</a>：Crash Manager是Crashlytics的非官方iPhone客户端，而且在AppStore上免费。InfoQ也曾撰文介绍过Crashlytics的使用：<a href="http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools">《统计Crash的工具Crashlytics》</a>。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/DyCI/dyci-main">DyCI</a> ：DyCI是一个动态注入工具，用于向iOS应用中注入代码而不用重新启动应用。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-02-27T17:23:00+08:00" pubdate data-updated="true">Feb 27<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用brew cask来安装Mac应用]]></title>
    <link href="http://blog.devtang.com/blog/2014/02/26/the-introduction-of-homebrew-and-brewcask/"/>
    <updated>2014-02-26T21:38:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/02/26/the-introduction-of-homebrew-and-brewcask</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p><a href="https://github.com/phinze/homebrew-cask"><code>brew cask</code></a>是一个用命令行管理Mac下应用的工具，它是基于<a href="http://brew.sh/"><code>homebrew</code></a>的一个增强工具。</p>

<p><code>homebrew</code>可以管理Mac下的命令行工具，例如<code>imagemagick</code>, <code>nodejs</code>，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install imagemagick
</span><span class='line'>brew install node
</span></code></pre></td></tr></table></div></figure>


<p>而使用上<code>brew cask</code>之后，你还可以用它来管理Mac下的Gui程序，例如<code>qq</code>, <code>chrome</code>, <code>evernote</code>等，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew cask install qq
</span><span class='line'>brew cask install google-chrome
</span><span class='line'>brew cask install evernote
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>安装</h2>

<h3>安装homebrew</h3>

<p>用以下一行命令即可安装homebrew</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<p>之后执行 <code>brew doctor</code> 命令可以看看<code>homebrew</code>的环境是否正常。通常第一次安装完brew之后，还需要安装苹果的<code>Command Line Tools</code>。</p>

<h3>安装cask</h3>

<p>用如下命令来安装cask:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap phinze/cask
</span><span class='line'>brew install brew-cask</span></code></pre></td></tr></table></div></figure>


<h2>LaunchRocket</h2>

<p>另外再附带推荐一个工具。</p>

<p><a href="https://github.com/jimbojsb/launchrocket">LaunchRocket</a>是一个管理brew安装的service的工具，安装之后可以看所有的service的运行状态，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/LaunchRocketUI.png"></p>

<p>安装<code>LaunchRocket</code>就要用到我刚刚提的<code>brew cask</code>，用如下命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap jimbojsb/launchrocket
</span><span class='line'>brew cask install launchrocket</span></code></pre></td></tr></table></div></figure>


<p>之后LauchRocket设置页面找到（如下图所示），它的启动项同时也保存在<code>/opt/homebrew-cask/Caskroom/launchrocket</code>目录中。</p>

<p><img src="http://blog.devtang.com/images/launchRocket.jpg"></p>

<p>启动LauchRocket有点麻烦，需要切换设置页面去手工启动。我自己想到一个办法，方法是把 <code>/opt/homebrew-cask</code>增加到 alfred 的search目录中，然后就可以用alfred来启动了，如下所示：</p>

<ol>
<li>设置alfred</li>
</ol>


<p><img src="http://blog.devtang.com/images/launch-cask-1.jpg"></p>

<ol>
<li>用alfred启动LauchRocket</li>
</ol>


<p><img src="http://blog.devtang.com/images/launch-cask-2.jpg"></p>

<p>大家玩得开心～</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-02-26T21:38:00+08:00" pubdate data-updated="true">Feb 26<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/mac/'>mac</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa - iOS开发的新框架]]></title>
    <link href="http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction/"/>
    <updated>2014-02-11T18:47:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction</id>
    <content type="html"><![CDATA[<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/reactivecocoa-ios-new-develop-framework">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h2>什么是ReactiveCocoa</h2>

<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>（其简称为RAC）是由<a href="https://github.com/blog/1107-reactivecocoa-for-a-better-world">Github</a> 开源的一个应用于iOS和OS X开发的新框架。RAC具有函数式编程和响应式编程的特性。它主要吸取了.Net的 <a href="http://msdn.microsoft.com/en-us/data/gg577609">Reactive Extensions</a>的设计和实现。</p>

<h2>ReactiveCocoa试图解决什么问题</h2>

<p>经过一段时间的研究，我认为ReactiveCocoa试图解决以下3个问题：</p>

<ol>
<li>传统iOS开发过程中，状态以及状态之间依赖过多的问题</li>
<li>传统MVC架构的问题：Controller比较复杂，可测试性差</li>
<li>提供统一的消息传递机制</li>
</ol>


<!-- more -->


<h3>传统iOS开发过程中，状态以及状态之间依赖过多的问题</h3>

<p>我们在开发iOS应用时，一个界面元素的状态很可能受多个其它界面元素或后台状态的影响。</p>

<p>例如，在用户帐户的登录界面，通常会有2个输入框（分别输入帐号和密码）和一个登录按钮。如果我们要加入一个限制条件：当用户输入完帐号和密码，并且登录的网络请求还未发出时，确定按钮才可以点击。通常情况下，我们需要监听这两个输入框的状态变化以及登录的网络请求状态，然后修改另一个控件的<code>enabled</code>状态。</p>

<p>传统的写法如下（该示例代码修改自<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa官网</a> ） ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ObservationContext</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ObservationContext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">LoginManager</span><span class="p">.</span><span class="n">sharedManager</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>                                 <span class="nl">forKeyPath:</span><span class="s">@&quot;loggingIn&quot;</span>
</span><span class='line'>                                    <span class="nl">options:</span><span class="n">NSKeyValueObservingOptionInitial</span>
</span><span class='line'>                                    <span class="nl">context:</span><span class="o">&amp;</span><span class="n">ObservationContext</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">usernameTextField</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">updateLogInButton</span><span class="p">)</span>
</span><span class='line'>                     <span class="nl">forControlEvents:</span><span class="n">UIControlEventEditingChanged</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">passwordTextField</span> <span class="nl">addTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">updateLogInButton</span><span class="p">)</span>
</span><span class='line'>                     <span class="nl">forControlEvents:</span><span class="n">UIControlEventEditingChanged</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateLogInButton</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">textFieldsNonEmpty</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">usernameTextField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">passwordTextField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">readyToLogIn</span> <span class="o">=</span> <span class="o">!</span><span class="n">LoginManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">.</span><span class="n">isLoggingIn</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">loggedIn</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">logInButton</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">textFieldsNonEmpty</span> <span class="o">&amp;&amp;</span> <span class="n">readyToLogIn</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span> <span class="nf">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
</span><span class='line'>                        <span class="nf">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span> <span class="nf">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">context</span> <span class="o">==</span> <span class="n">ObservationContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">updateLogInButton</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">super</span> <span class="nl">observeValueForKeyPath:</span><span class="n">keyPath</span> <span class="nl">ofObject:</span><span class="n">object</span>
</span><span class='line'>                               <span class="nl">change:</span><span class="n">change</span> <span class="nl">context:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>RAC通过引入信号（Signal）的概念，来代替传统iOS开发中对于控件状态变化检查的代理（delegate）模式或target-action模式。因为RAC的信号是可以组合（combine）的，所以可以轻松地构造出另一个新的信号出来，然后将按钮的<code>enabled</code>状态与新的信号绑定。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">RAC</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">logInButton</span><span class="p">,</span> <span class="n">enabled</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span><span class="n">RACSignal</span>
</span><span class='line'>    <span class="nl">combineLatest:</span><span class="err">@</span><span class="p">[</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">usernameTextField</span><span class="p">.</span><span class="n">rac_textSignal</span><span class="p">,</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">passwordTextField</span><span class="p">.</span><span class="n">rac_textSignal</span><span class="p">,</span>
</span><span class='line'>        <span class="n">RACObserve</span><span class="p">(</span><span class="n">LoginManager</span><span class="p">.</span><span class="n">sharedManager</span><span class="p">,</span> <span class="n">loggingIn</span><span class="p">),</span>
</span><span class='line'>        <span class="n">RACObserve</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">loggedIn</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span> <span class="nl">reduce:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">username</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">,</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">loggingIn</span><span class="p">,</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">loggedIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="err">@</span><span class="p">(</span><span class="n">username</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">password</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">loggingIn</span><span class="p">.</span><span class="n">boolValue</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">loggedIn</span><span class="p">.</span><span class="n">boolValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，在引入RAC之后，以前散落在<code>action-target</code>或KVO的回调函数中的判断逻辑被统一到了一起，从而使得登录按钮的<code>enabled</code>状态被更加清晰地表达了出来。</p>

<p>除了组合（combine）之外，RAC的信号还支持链式（chaining）和过滤（filter)，以方便将信号进行进一步处理。</p>

<h3>试图解决MVC框架的问题</h3>

<p>对于传统的<a href="http://zh.wikipedia.org/zh-cn/MVC">Model-View-Controller</a>的框架，Controller很容易变得比较庞大和复杂。由于Controller承担了Model和View之间的桥梁作用，所以Controller常常与对应的View和Model的耦合度非常高，这同时也造成对其做单元测试非常不容易，对iOS工程的单元测试大多都只在一些工具类或与界面无关的逻辑类中进行。</p>

<p>RAC的信号机制很容易将某一个Model变量的变化与界面关联，所以非常容易应用<a href="http://en.wikipedia.org/wiki/Model_View_ViewModel">Model-View-ViewModel</a> 框架。通过引入ViewModel层，然后用RAC将ViewModel与View关联，View层的变化可以直接响应ViewModel层的变化，这使得Controller变得更加简单，由于View不再与Model绑定，也增加了View的可重用性。</p>

<p>因为引入了ViewModel层，所以单元测试可以在ViewModel层进行，iOS工程的可测试性也大大增强了。InfoQ也曾撰文介绍过MVVM：<a href="http://www.infoq.com/cn/articles/mvvm-revelation/">《MVVM启示录》</a> 。</p>

<h3>统一消息传递机制</h3>

<p>iOS开发中有着各种消息传递机制，包括KVO、Notification、delegation、block以及target-action方式。各种消息传递机制使得开发者在做具体选择时感到困惑，例如在objc.io上就有<a href="http://www.objc.io/issue-7/communication-patterns.html">专门撰文</a>（<a href="http://beyondvincent.com/blog/2013/12/14/124-communication-patterns/">破船的翻译</a> ），介绍各种消息传递机制之间的差异性。</p>

<p>RAC将传统的UI控件事件进行了封装，使得以上各种消息传递机制都可以用RAC来完成。示例代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// KVO</span>
</span><span class='line'><span class="p">[</span><span class="n">RACObserve</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">username</span><span class="p">)</span> <span class="nl">subscribeNext:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;成员变量 username 被修改成了：%@&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// target-action</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">button</span><span class="p">.</span><span class="n">rac_command</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RACCommand</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSignalBlock:</span><span class="o">^</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;按钮被点击&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="n">empty</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notification</span>
</span><span class='line'><span class="p">[[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">rac_addObserverForName:</span><span class="n">UIKeyboardDidChangeFrameNotification</span>
</span><span class='line'>                    <span class="nl">object:</span><span class="nb">nil</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">subscribeNext:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;键盘Frame改变&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Delegate</span>
</span><span class='line'><span class="p">[[</span><span class="n">self</span> <span class="nl">rac_signalForSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">viewWillAppear:</span><span class="p">)]</span> <span class="nl">subscribeNext:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">debugLog</span><span class="p">(</span><span class="s">@&quot;viewWillAppear方法被调用 %@&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>RAC的<code>RACSignal</code> 类也提供了<code>createSignal</code>方法来让用户创建自定义的信号，如下代码创建了一个下载指定网站内容的信号。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">urlResults</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">RACSignal</span> <span class="nl">createSignal:</span><span class="o">^</span><span class="n">RACDisposable</span> <span class="o">*</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">RACSubscriber</span><span class="o">&gt;</span> <span class="n">subscriber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithContentsOfURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://www.devtang.com&quot;</span><span class="p">]</span>
</span><span class='line'>                                                    <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span>
</span><span class='line'>                                                       <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;download&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendError:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="nl">sendNext:</span><span class="n">result</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subscriber</span> <span class="n">sendCompleted</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">RACDisposable</span> <span class="nl">disposableWithBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;clean up&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>如何使用ReactiveCocoa</h2>

<p>ReactiveCocoa可以在iOS和OS X的应用开发中使用，对于iOS开发者，可以将<a href="https://github.com/ReactiveCocoa/ReactiveCocoa.git">RAC源码</a>下载编译后，使用编译好的<code>libReactiveCocoa-iOS.a</code>文件。</p>

<p>开发者也可以用<a href="http://cocoapods.org/">CocoaPods</a>来设置目标工程对ReactiveCocoa的依赖，只需要编辑Podfile文件，增加如下内容即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">ReactiveCocoa</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ReactiveCocoa的特点</h2>

<p>RAC在应用中大量使用了block，由于Objective-C语言的内存管理是基于<a href="http://zh.wikipedia.org/zh-cn/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0">引用计数</a> 的，为了避免循环引用问题，在block中如果要引用self，需要使用<code>@weakify(self)</code>和<code>@strongify(self)</code>来避免强引用。另外，在使用时应该注意block的嵌套层数，不恰当的滥用多层嵌套block可能给程序的可维护性带来灾难。</p>

<p>RAC的编程方式和传统的MVC方式差异巨大，所以需要较长的学习时间。并且，业界内对于RAC并没有广泛应用，这造成可供参考的项目和教程比较欠缺。
另外，RAC项目本身也还在快速演进当中，1.x版本和2.x版本API改动了许多，3.0版本也正在快速开发中，对它的使用也需要考虑后期的升级维护问题。</p>

<p>作为一个iOS开发领域的新开源框架，ReactiveCocoa带来了函数式编程和响应式编程的思想，值得大家关注并且学习。</p>

<h2>一些学习资源</h2>

<h3>博客&amp;教程</h3>

<ul>
<li><a href="http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/">http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/</a></li>
<li><a href="http://blog.bignerdranch.com/4549-data-driven-ios-development-reactivecocoa/">http://blog.bignerdranch.com/4549-data-driven-ios-development-reactivecocoa/</a></li>
<li><a href="http://en.wikipedia.org/wiki/Functional_reactive_programming">http://en.wikipedia.org/wiki/Functional_reactive_programming</a></li>
<li><a href="http://www.teehanlax.com/blog/reactivecocoa/">http://www.teehanlax.com/blog/reactivecocoa/</a></li>
<li><a href="http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/">http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/</a></li>
<li><a href="http://nshipster.com/reactivecocoa/">http://nshipster.com/reactivecocoa/</a></li>
<li><a href="http://cocoasamurai.blogspot.com/2013/03/basic-mvvm-with-reactivecocoa.html">http://cocoasamurai.blogspot.com/2013/03/basic-mvvm-with-reactivecocoa.html</a></li>
<li><a href="http://iiiyu.com/2013/09/11/learning-ios-notes-twenty-eight/">http://iiiyu.com/2013/09/11/learning-ios-notes-twenty-eight/</a></li>
<li><a href="https://speakerdeck.com/andrewsardone/reactivecocoa-at-mobidevday-2013">https://speakerdeck.com/andrewsardone/reactivecocoa-at-mobidevday-2013</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/hh848246.aspx">http://msdn.microsoft.com/en-us/library/hh848246.aspx</a></li>
<li><a href="http://www.itiger.me/?p=38">http://www.itiger.me/?p=38</a></li>
<li><a href="http://blog.leezhong.com/ios/2013/12/27/reactivecocoa-2.html">http://blog.leezhong.com/ios/2013/12/27/reactivecocoa-2.html</a></li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md">https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md</a></li>
<li><a href="http://www.haskell.org/haskellwiki/Functional_Reactive_Programming">http://www.haskell.org/haskellwiki/Functional_Reactive_Programming</a></li>
<li><a href="http://blog.zhaojie.me/2009/09/functional-reactive-programming-for-csharp.html">http://blog.zhaojie.me/2009/09/functional-reactive-programming-for-csharp.html</a></li>
</ul>


<h3>代码</h3>

<ul>
<li><a href="https://github.com/Machx/MVVM-IOS-Example">https://github.com/Machx/MVVM-IOS-Example</a></li>
<li><a href="https://github.com/ReactiveCocoa/RACiOSDemo">https://github.com/ReactiveCocoa/RACiOSDemo</a></li>
</ul>


<h3>书籍</h3>

<ul>
<li><a href="https://leanpub.com/iosfrp">https://leanpub.com/iosfrp</a></li>
</ul>


<h3>视频</h3>

<ul>
<li><a href="http://vimeo.com/65637501">http://vimeo.com/65637501</a></li>
</ul>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-02-11T18:47:00+08:00" pubdate data-updated="true">Feb 11<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己动手给iMac换SSD]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/26/add-ssd-to-old-imac/"/>
    <updated>2014-01-26T22:06:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/26/add-ssd-to-old-imac</id>
    <content type="html"><![CDATA[<p>公司的iMac是2011年款的，经过2年的使用，现在已经变得比较慢了，用<code>htop</code>看了一下，其实cpu占用率一直不高，主要是磁盘IO比较慢，所以考虑自己动手给iMac换一个SSD。在此将整个过程分享给大家。</p>

<!-- more -->


<p>如果你需要备份系统，可以拿一个移动硬盘，使用<code>Time Machine</code>功能将需要的内容备份到移动硬盘上。</p>

<p>另外你还需要准备一些工具，我是借同事的<a href="http://www.amazon.cn/%E5%8F%B0%E6%B9%BE%E8%80%81A-38%E5%90%881%E6%89%8B%E6%9C%BA%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%BB%B4%E4%BF%AE%E7%B2%BE%E5%AF%86%E8%9E%BA%E4%B8%9D%E5%88%80%E5%A5%97%E8%A3%85-%E8%8B%B9%E6%9E%9C%E6%8B%86%E6%9C%BA%E5%B7%A5%E5%85%B7%E7%BB%84%E5%90%88-LA613138/dp/B00E7ICEXM/ref=sr_1_2?ie=UTF8&amp;qid=1390717853&amp;sr=8-2&amp;keywords=%E8%80%81A">老A苹果拆机工具组合</a>，这个工具箱可以拆苹果的各种设备，上次还用它拆了一次iPhone4s。</p>

<h2>硬件更换步骤</h2>

<p>换SSD的步骤主要参考自：<a href="http://www.ifixit.com/Guide/iMac+Intel+21.5-Inch+EMC+2428+Hard+Drive+Replacement/5954">ifixit上的教程</a>。感兴趣的朋友可以一试。其实步骤相当简单，简单说一下：</p>

<ol>
<li>把iMac平放，用吸盘吸开屏幕盖。</li>
<li>取下屏幕左右各4个螺丝，然后轻轻抬起屏幕（注意不要抬太高，因为后面连着线）。</li>
<li>把屏幕与主版连接的4根线拆下来，之后将屏幕移除。</li>
<li>取下硬盘上的2个螺丝，然后将硬盘的数据线和电源线拔掉，将硬盘轻轻取出来。</li>
<li>将SSD接上数据线和电源线。</li>
<li>做步骤3的逆向过程，把屏幕接上4根线，然后将屏幕左右各4个螺丝拧上。</li>
<li>盖上屏幕盖，这个磁力很强，要小心手不要被夹住。</li>
</ol>


<p>换好之后，接通电源听到正常的启动声音的话，就表示硬件自检没问题了。</p>

<h2>安装操作系统</h2>

<p>SSD上没有带Mac系统，所以要先把系统装上去。将苹果最新的系统刻录在U盘或SD卡上，然后接到iMac上。启动时按住<code>Option</code>键，等一段时间，就可以选择启动磁盘，我们选择从U盘启动。</p>

<p>U盘启动之后，先进入<code>Disk Utility</code>，将刚刚装上的SSD分区格式化成<code>Mac OS扩展（日志式）</code>。然后返回，选择安装Mac操作系统。</p>

<p>这个比较坑的一点是系统显示的<code>估计安装时间</code>只有大约15分钟，但是进行到最后1分钟时，却大概要再等15分钟才能结束，这个时候不要太心急。安装完成之后会进入第一次重启，然后再次显示正在安装，这个时候大概又需要等20分钟，不过不用任何操作，只用看着就行了。20分钟后会第二次重启，重启之后就进入到欢迎界面了。</p>

<p>进入欢迎界面后，先简单设置一下进入系统，安装2个小软件：</p>

<ol>
<li><a href="http://exirion.net/ssdfanctrl/">SSD fan control</a></li>
<li><a href="http://www.groths.org/software/trimenabler/">Trim Enabler</a></li>
</ol>


<p>这主要是因为iMac的温度感应模块在原有的硬盘上，换下来之后，风扇就会狂转，只能用第三方软件来控制其转速。另一个工具是朋友推荐我安装的，没有仔细研究用处。</p>

<h2>迁移数据</h2>

<p>之后，你可以用<code>Time machine</code>或<code>迁移助理</code>，将这台电脑的数据从备份中恢复。我是使用的<code>迁移助理</code>，将我另一台Macbook Air的系统恢复过去的。</p>

<h2>其它</h2>

<ol>
<li>我换的是21.5寸的iMac，如果是27寸的iMac，因为内部空间足够，所以可以尝试将SSD和原有的硬盘都保留，这样就可以自己组<code>fusion drive</code>。不过更换方式就要相对麻烦一些，感觉兴趣的可以自己在ifixit上找相关的教程。</li>
<li>显示屏上的连接线都很脆弱，更换的时候要小心，我在尝试能否象27寸iMac一样同时将原有硬盘和SSD保留的时候，就不小心压坏了显示屏上的连接线的一根针角。于是花了80块钱在<a href="http://item.taobao.com/item.htm?id=20038464332">淘宝</a>上重新买了一根线才安好。所以大家一定别着急，换的时候小心一些。附一张损坏的连接线照片。</li>
</ol>


<p><img src="http://blog.devtang.com/images/imac-broken-cable.jpg"></p>

<p>总之，自动动手换SSD不是那么复杂，胆大心细一些就可以轻松搞定。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-01-26T22:06:00+08:00" pubdate data-updated="true">Jan 26<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/fun/'>fun</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非换行空格在CoreText排版上的问题]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/23/the-issue-of-non-breaking-space-in-coretext/"/>
    <updated>2014-01-23T17:36:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/23/the-issue-of-non-breaking-space-in-coretext</id>
    <content type="html"><![CDATA[<p>分享一个在使用Core Text时遇到的问题。</p>

<h2>问题描述</h2>

<p>我们的猿题库界面因为有图片、公式需要混排，所以用的是Core Text实现的排版。</p>

<p>在使用中，发现一些英文题目的换行方式不对，
我们设置的是按单词换行，但是总是有些题目的换行并不是按单词的，造成显示上比较错乱，如下图所示。图中unchangeable, study, falls 三个单词都被生生截断了，造成阅读上的不适。</p>

<!-- more -->


<p><img src="http://blog.devtang.com/images/non-breaking-space-1.png"></p>

<h2>解决方案</h2>

<p>经过我们的分析，我们最终发现这是由于题目内容中有<a href="http://en.wikipedia.org/wiki/Non-breaking_space">非换行空格</a>（<code>non-breaking-space</code>）造成的。根据<a href="(http://en.wikipedia.org/wiki/Non-breaking_space">wikipedia</a>)上的介绍，该字符的ASCII码为160，主要做用如下：</p>

<blockquote><p>Text-processing software typically assumes that an automatic line break may be inserted anywhere a space character occurs; a non-breaking space prevents this from happening (provided the software recognizes the character). For example, if the text &ldquo;100 km&rdquo; will not quite fit at the end of a line, the software may insert a line break between &ldquo;100&rdquo; and &ldquo;km&rdquo;. To avoid this undesirable behaviour, the editor may choose to use a non-breaking space between &ldquo;100&rdquo; and &ldquo;km&rdquo;. This guarantees that the text &ldquo;100 km&rdquo; will not be broken: if it does not fit at the end of a line it is moved in its entirety to the next line.</p></blockquote>

<p>于是我们大概知道整个原因了：编辑在后台录入题目时，是在网页做的富文本编辑器里面，里面的空格输入的是 <code>&amp;nbsp;</code>，然后这个空格转存到数据库中会转成 非换行空格（<code>non-breaking-space</code>），也就是ASCII为160的空格。最后传到iPhone这边，用Core Text排版时，Core Text认为遇到这个空白符不应该换行，于是就一直不换行，直到显示不了了才强制换行，就造成了单词被截断。</p>

<p>解决办法是在客户端上用以下代码将这种空格替换成普通的空格，普通的空格ASCII码为32。（附：<a href="http://www.weste.net/tools/ASCII.asp">ASCII码表</a>）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 因为显示效果原因，从直观上看不出2个空格在编码上的差异，不过代码复制到Xcode中能看出来。</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">content</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="p">[</span><span class="n">content</span> <span class="nl">stringByReplacingOccurrencesOfString:</span><span class="s">@&quot; &quot;</span> <span class="nl">withString:</span><span class="s">@&quot; &quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终改好的效果如下所示：</p>

<p><img src="http://blog.devtang.com/images/non-breaking-space-2.png"></p>

<h2>其它</h2>

<p>感谢 <a href="http://weibo.com/onevcat">@onevcat</a> 提供信息，让我找到问题的根源。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-01-23T17:36:00+08:00" pubdate data-updated="true">Jan 23<span>rd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[作为码农，我们为什么要写作]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/08/why-we-need-write/"/>
    <updated>2014-01-08T21:51:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/08/why-we-need-write</id>
    <content type="html"><![CDATA[<p>在程序员这个行业，坚持做技术写作的人一直比较少。我和身边的朋友沟通后，发现他们除了借口没有时间外，大多没有意识到写作带来的收益。在他们看来，将自己学到的知识简单记录下来就足够自己需要的时候回顾了。而技术写作通常需要花更多时间，因为需要将技术的细节以及来龙去脉讲清楚。</p>

<p>不得不承认，这的确是一个事实，通常情况下，把一个知识讲清楚比理解它更难。那我们为什么要花时间写作呢？我想写作至少有以下好处。</p>

<!-- more -->


<h2>提高自己对知识的掌握层次</h2>

<p>美国教育心理学家<a href="http://zh.wikipedia.org/wiki/%E6%9C%AC%E5%82%91%E6%98%8E%C2%B7%E5%B8%83%E9%AD%AF%E5%A7%86">Bloom</a>将知识认知分为了两个维度，其中认知历程维度又分为6个层次，分别为：记忆、理解、应用、分析、评鉴、创造。如下图所示，层次越高，表示对知识的掌握程度越深。</p>

<p><img src="http://blog.devtang.com/images/why-write-1.png"></p>

<p>对于写作者来说，在写作过程中，因为需要对知识进行精确地表述，常常要对知识的细节再次的探索。在这个过程中，写作者可能会发现自己的观点不清晰的地方，通过二次学习，使自己的理解更加完善。写作者也可能会发现自己观点中的错误，从而改正自己的曲解。在经历过这段过程后，通常对于自己所写的知识的掌握程度，都上升了一个层次。</p>

<p>我自己的每次技术写作都经历了这样的提高过程。所以，我更多时候是把写作当成学习的一种方式。这种学习方式比普通的学习方式更加深入，效果更好。当然，花费的时间也更多。</p>

<h2>提高表达和沟通的能力</h2>

<p>作为一个程序员，日常的工作大部分时间都是面对电脑。许多人周末也喜欢当一个技术宅，待在家里上网、看电影或者玩游戏来消遣。长时间的面对机器，使得我们的语言表达能力极度衰退。而写作是一个很好的机会，让我们练习自己的表达能力。</p>

<p>长时间写作之后，你会更加注意平时沟通的语言。你的用词更加精准，表达更加生动。在表达能力提高的同时，你的沟通效率也得到提高。</p>

<h2>接受读者的沟通和反馈</h2>

<p>当你的文章通过博客或者InfoQ网站发表出来后，你就会接着获得写作的第三个好处：来自读者的沟通和反馈。一篇好的文章通常会吸引一些读者回复，通过和读者的交流，你可以收获以下好处：</p>

<ol>
<li><p>错误内容反馈：尽管文章在写作时经历过二次学习，但是人难免会犯错。写作将你的思想完全暴露出来，有水平的读者可以指出你文章中的错误，从而使你对知识的理解更加准确。我的很多博客文章都有一些细微错误，通过读者的找反馈，我很快就将错误内容改正过来了，自己的水平也得到了提高。</p></li>
<li><p>认识朋友：一个乐于分享的人总会比沉默寡言的人更招人喜欢。所以通过写作，你可以结交很多和你一样，乐于分享的朋友。</p></li>
<li><p>了解更多相关信息：一些读者会回复说：&#8221;某某框架也用了这个技术方案&#8221;，或者是：&#8221;你的这个实现方案没有另一个某某开源方案好&#8221;。这些信息，作为你当前文章知识点的补充，使你能够了解更多相关的资料，再一次完善自己所学的知识。</p></li>
</ol>


<h2>影响力</h2>

<p>当你持续的写作，坚持一年以上，你就会慢慢收获影响力。这个时候，你也会收到技术大会的分享邀请，出版社的约稿邀请，著名互联网公司的工作邀请，甚至是创业项目的合伙人邀请。你相比那些不分享的人，获得了更多的机会。当然你的技术观点也会被更多人接受，你也会收获到传递知识的乐趣。</p>

<h1>结束语</h1>

<p>在写作过程中，你将收获<code>提高自己对知识的掌握层次</code>和<code>提高表达和沟通的能力</code>的好处。</p>

<p>在写作结束后，你将收获<code>错误内容反馈</code>、<code>认识朋友</code>和<code>了解更多相关信息</code>的好处。</p>

<p>在坚持写作一段时间，你将收获<code>影响力</code>和<code>传递知识的乐趣</code>。</p>

<p>另外，<a href="http://book.douban.com/subject/6709809/">《暗时间》</a>的作者刘未鹏在<a href="http://blog.csdn.net/pongba/article/details/3896311">他的文章</a>，也总结了很多写作的好处，大家也可以看看。</p>

<p>看了写作的这么多好处，你是否心动？那赶快创建一个博客，开始你的技术写作之旅吧！</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-01-08T21:51:00+08:00" pubdate data-updated="true">Jan 8<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/01/2013-summary/"/>
    <updated>2014-01-01T19:04:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/01/2013-summary</id>
    <content type="html"><![CDATA[<p>2013这一年值得总结的有两方面的事情：一是技术分享和收获，二是创业感悟。</p>

<h2>技术分享</h2>

<p>我这一年在技术分享上投入了更多的时间，也得到了非常大的收获。</p>

<p>我主要的技术分享渠道包括：</p>

<ol>
<li><p>个人博客。今年一共完成了24篇原创博客。相比于去年的36篇，少了很多。主要是因为很多精力分散到微信公共帐号上去了。不过今年文章的质量相比去年更高了，写了包括<a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">《Objective-C对象模型及应用》</a>和<a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/">《谈Objective-C Block的实现》</a>这类比较深入的文章。</p></li>
<li><p><a href="http://www.infoq.com/cn/">InfoQ网站</a> 。今年一共完成了7篇发表在<a href="http://www.infoq.com/cn/">InfoQ</a> 上的<a href="http://www.infoq.com/cn/author/%E5%94%90%E5%B7%A7">稿件</a> , 其中原创技术文章4篇，翻译技术新闻1篇，采访稿2篇。</p></li>
</ol>


<!-- more -->


<ol>
<li>我的微信公共帐号：iOSDevTips，从2013年2月21日起，我坚持在这个微博公共帐号中发表iOS开发相关的技巧和文章。有时候是发送自己的文章，但大多数时候，都是一些别处看到的不错的分享转发给大家。坚持到现在快一年了，该公共帐号积累了5600名粉丝。我个人通过该公众帐号推送了140条iOS开发相关的文章。如果你做iOS开发，欢迎扫描下面的二维码关注我的公共帐号。</li>
</ol>


<p><img src="http://blog.devtang.com/images/weixin-qr.jpg"></p>

<ol>
<li>我的微博<a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> ，基本保证了不谈别的，只谈iOS开发。粉丝虽然没怎么涨（现在4400多粉），但是现在我的微博常常可以转发上百。2013年发了996条微博，总共被转发10120次，平均每条微博被转10次。这让我有一种莫名的感觉：我这个算是大号么？</li>
</ol>


<p><img src="http://blog.devtang.com/images/2013-summary-weibo.jpg"></p>

<ol>
<li>技术分享会。主要做了3次：

<ul>
<li>5月25日，在CocoaChina举办的线下聚会，分享了<a href="http://www.cocoachina.com/gamedev/misc/2013/0527/6280.html">粉笔网的架构</a>。</li>
<li>11月23日，在<a href="http://club.alibabatech.org/salon_detail.htm?salonId=44">阿里技术沙龙</a> 分享了 《iOS程序的逆向与安全》，这里有 <a href="http://v.youku.com/v_show/id_XNjQyNTQ0NjIw.html">视频录像</a> 和 <a href="http://vdisk.weibo.com/s/duH0zpCAy2T-">PDF版讲稿</a>。</li>
<li>11月30日，在<a href="http://blog.segmentfault.com/sunny/1190000000348727">DIFF论坛</a>分享了《如何将微信公众账号运营到5000粉丝》。</li>
</ul>
</li>
</ol>


<p>我主要的收获包括：</p>

<ol>
<li><p>认识了大量的iOS开发同行，从他们身上我学到了很多知识。我再也没有刚刚创业时一个人做iOS开发的孤独感了。遇到问题时，除了google和stackoverflow外，实在不行也可以找小伙伴们求助。</p></li>
<li><p>因为向InfoQ投稿的原因，我有幸成为了InfoQ的兼职编辑，也认识了包括池建强、张龙等喜欢写作的大牛，交际圈子一下子扩大了不少。InfoQ时不时组织的编辑聚会也让我获得了一个了解大家不同声音和意见的渠道。对于一些行业信息，这种聚会中的小道消息总是比官方新闻要真实和靠谱得多。</p></li>
<li><p>InfoQ为编辑和讲师专门做了一次演讲培训，让我关注到自己从未注意到的领域，也珍惜起每次演讲的机会，努力提高自己的演讲技能。</p></li>
<li><p>因为写博客的关系，今年还持续收到来自出版社的约稿邀请，其实我一直想写一本iOS进阶开发方面的书，也一直在通过博客积累书稿的素材，所以最终水到渠成。我选择了和电子工业出版社签约。出版社的张老师<a href="http://weibo.com/208686914?topnav=1&amp;wvr=5&amp;topsug=1">永恒的侠少</a> 也特别的开明，使我几乎没有写稿的压力，能够平衡好工作和写作的时间。希望在2014年，这本书能够和读者见面。</p></li>
<li><p>影响力变大了。以前我发一条微博，没有人转，现在随便就超过10次转发。有了影响力之后，大家有什么iOS开发的消息都会主动@我来求转发，使得我可以获得第一手的iOS开发相关的推荐。另外，当我说错什么话或者犯傻的时候，马上就有人来纠正我，使得我能够很快进步。</p></li>
</ol>


<h2>创业</h2>

<h3>创业流水帐</h3>

<p><img src="http://blog.devtang.com/images/2013-summary-fenbi-close.jpg"></p>

<p>2013年我们改变了方向，慢慢关停了粉笔网，然后专注地做猿题库相关的开发和运营。作为一个创业者，我一开始就有创业不顺利的预期，所以这次调整还是挺能接受的。不但能接受，我还非常佩服CEO李勇的果断，我们在粉笔网上几乎没有耗费什么过多的精力，就全力投到新项目猿题库上面了。</p>

<p>因为猿题库这个方向被证明还可行，所以2013是忙碌的一年，找到目标之后就是赶紧开发，我们在2013年春节上线了猿题库行测后，又花2个月上线了猿题库司考，之后花1个半月上线了通用课程平台。通用课程在7月1日上线，我们通过通用课程平台发布了猿题库考研政治、证券从业、初级会计、法律顾问、一级建造师5门课程。</p>

<p><img src="http://blog.devtang.com/images/ape-arch-1.jpg"></p>

<p>之后我们又花了1个月完成了猿题库iPad版的开发。我们选择了将App做成Universal的形式来发布，使其能同时支持iPhone和iPad。</p>

<p>9月份我们发布了猿题库高考，之后我们将之前单独定制的猿题库行测和猿题库司考客户端融入到通用课程的项目中，使我们最终只用维护一套代码。</p>

<p>再之后，我们进入了功能改进阶段。其中比较大的事情包括增加夜间模式，字体调节，搜索功能，离线下载，数据缓存逻辑。</p>

<p>我们还将之前花大力气做的扫描答题卡功能去掉了，因为我们认为用户如果有精力在纸上填涂答题卡的话，还不如直接在手机上录入答案更为方便一些。虽然我之前在这个功能上耗费了大量精力，但我还是挺支持这个决定的。</p>

<p>最后，我们在年底前顺利拿到了<a href="http://tech.sina.com.cn/i/2013-09-10/09528724637.shtml">B轮融资</a>。</p>

<h3>工作效率与身体</h3>

<p>我感觉通过番茄工作法和<a href="https://www.rescuetime.com/">Rescue Time软件</a>等软件，我已经将个人效率提高到极致了。我常常可以保持在电脑前面连续coding几个小时不分神，有些时候眼睛都发酸了，才想起要休息。另外，由于长期运动较少，我的肩膀问题比较多，动起来都会响。所以我不打算再提高效率了，再提高的话可能也不能提多少效率，而且会伤害身体。</p>

<p>我们团队也尽量保证晚上不加班的文化，所以身体还算吃得消，就是锻炼太少了。圣诞节的时候朋友回国，帮我带了一个Fitbit Force，希望通过它提醒我每天坚持运动。</p>

<p><img src="http://blog.devtang.com/images/2013-summary-fitbit-force.jpg"></p>

<h3>个人能力的提高</h3>

<p>随着自己在iOS开发上的积累，在开发上的提高越来越慢，大部分的开发工作对我来说都不太有挑战了。而开发任务排得相当满，几乎没有留给我充电和学习的时间。我还是一个喜欢让自己一直处在学习状态的人，所以基本上就只有利用晚上和周末的时候来学习和积累了。</p>

<p>写作和分享是一个很好的激励方式，促进我通过发表文章的方式完成新知识的学习。不过这其实挺不能长久的，我还是希望是在工作中学习和进步，因为每天分配给工作的时间是最多的，业余时间毕竟相对较少。</p>

<p>我想对于创业的各种苦来说，这算是一个吧。对于这种苦，最好的解决方法就是努力让公司做大做强，只有公司做大了，你才有机会招更多人，同时做更多更有技术含量的事情。</p>

<h3>拆分scrum团队</h3>

<p>随着团队人数的扩张，我们尝试了一次全体参加的计划会议，结果发现效率很低，于是我们将原来的srcum团队拆分成了2个团队，一个客户端团队，一个服务器端团队。团队拆分保证了每个团队都在10人以内的规模，沟通和讨论的效率都高了很多。强烈建议有同样困扰的朋友们尝试一下拆分团队，确实能使得会议更加高效。</p>

<h3>优化发布速度</h3>

<p>我们从产品进入优化迭代期开始，尝试进行每周发布一个Beta版本的发布。Beta版本通过我们的论坛发布，越狱的iPhone用户以及Android用户可以通过论坛下载到最新的Beta版本。每完成4个Beta版，我们会将功能提交到AppStore审核。</p>

<p>每周一个Beta版本发布有利于保证质量，因为相比以前一个月一个版本的提测速度，测试可以尽早介入到新功能的测试中，有助于提早发现和修复bug。</p>

<p>但是每周一个Beta版本其实是压缩了开发时间，因为需要留时间给测试同事测试以及修复bug，以及最终要和服务器端配合上线。每周真正的开发时间通常只有3天半。</p>

<p>大部分时候，我们都会由于时间紧迫造成提测时间较晚，最终又造成修复bug时间不够，于是每周都会有一两天工作到很晚，上线Beta版那天，常常会到晚上10点以后，把实在没精力修复的Bug Later掉，才能完成上线。这样的状态非常伤身体，这段时间也是我比较难受的时期。</p>

<p>每周一个Beta版还有一个问题是无法保证那种大功能的开发，例如我们做离线下载功能，3天半根本无法完成，于是只能将这个功能在两周后的Beta版中提交。这又会涉及多分支的开发和管理，分支间来回切换，又会降低一些开发效率。</p>

<p>整体来说，每周一个Beta版的发布有利于保证产品质量，但是会造成整体的开发进度稍慢于每2周或每月一个版本的发布。如果又要保证开发进度一样，每周的Beta版发布将带来更多的加班工作。</p>

<h3>控制自己的情绪，找准自己的定位</h3>

<p>我有一段时间过于有责任感了，感觉什么事情都应该关心，特别是项目进度。那段时间，我长期处于无法保证按时上线的焦虑状态，并且对产品和美术的调整异常敏感，因为他们的一句话，就表示我又要加班了。</p>

<p>我花了很长时间去转变自己对于项目按时上线的态度，现在，我更加关注自己做为开发者的身份，而不再过多考虑项目在进度上的问题。</p>

<p>当我发现我不再关注进度时，我的开发效率反而提高了，因为心情不再过多地受到进度或需求调整地影响了。这件事情也让我想清楚了要找到自己的位置，不应该为自己不能负责的事情而焦虑。专注于自己能改变和努力的地方，其它事情就应该相信对应的负责人，让他们来操心。</p>

<p>创业对于人心智的磨练还是挺大的，我相信我以后会更加容易控制自己的情绪和行为。</p>

<h2>其它</h2>

<h3>读书</h3>

<p>今年读的主要是iOS方面的书籍，包括如下这些，其中重点推荐<a href="http://as.wiley.com/WileyCDA/WileyTitle/productCd-1118818342.html">《iOS 7 Programming Pushing the Limits》</a></p>

<ul>
<li><a href="http://as.wiley.com/WileyCDA/WileyTitle/productCd-1118818342.html">《iOS 7 Programming Pushing the Limits》</a></li>
<li>《OpenCV 2 Computer Vision Application Programming Cookbook》</li>
<li>《Cocoa设计模式》</li>
<li><a href="http://item.jd.com/11315341.html">《黑客攻防技术宝典·iOS实战篇》</a></li>
<li><a href="http://item.jd.com/11329636.html">《Web之困：现代Web应用安全指南》</a></li>
<li><a href="http://item.jd.com/11258970.html">《Objective-C高级编程：iOS与OS X多线程和内存管理》</a></li>
<li><a href="http://book.douban.com/subject/10555435/">《七周七语言》</a></li>
<li>《不抱怨的世界》</li>
</ul>


<h3>感谢</h3>

<p>2013年有很多贵人帮助，自己才能快速成长，在此感谢2013年陪我一起走过的家人和朋友，和我一起努力的公司同事。</p>

<p>特别要感谢的是：体贴的老婆和岳母大人，宽容细致的老大郭常圳，iOS开发群里的小伙伴（特别是<a href="http://lextang.com/">Lexrus</a>)，InfoQ的老大Kevin和编辑杨Sai、水哥，MacTalk作者<a href="http://weibo.com/idreamland?topnav=1&amp;wvr=5&amp;topsug=1">@池建强</a>，小道消息作者<a href="http://weibo.com/fenng?topnav=1&amp;wvr=5&amp;topsug=1">@Fenng</a>，<a href="http://weibo.com/208686914?topnav=1&amp;wvr=5&amp;topsug=1">@永恒的侠少</a>，<a href="http://weibo.com/jiajungao?topnav=1&amp;wvr=5&amp;topsug=1">@gaosboy</a>，<a href="http://weibo.com/neat9?topnav=1&amp;wvr=5&amp;topsug=1">@neat爷</a>，张兰。谢谢你们～</p>

<h3>个人Milestone</h3>

<ul>
<li>开始写iOS开发的书</li>
<li>创业得到了<a href="http://tech.sina.com.cn/i/2013-09-10/09528724637.shtml">B轮融资</a></li>
</ul>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-01-01T19:04:00+08:00" pubdate data-updated="true">Jan 1<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
</feed>
