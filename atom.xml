<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2015-02-01T17:35:08+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈 React Native]]></title>
    <link href="http://blog.devtang.com/blog/2015/02/01/talk-about-react-native/"/>
    <updated>2015-02-01T16:27:43+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/02/01/talk-about-react-native</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/react-js.jpg"></p>

<h2>前言</h2>

<p>几天前，Facebook 在 React.js Conf 2015 大会上推出了 React Native（<a href="https://www.youtube.com/watch?v=7rDsRXj9-cU">视频链接</a>）。我发了一条微博(<a href="http://www.weibo.com/1708947107/C1WHHwqZv?from=page_1005051708947107_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1422782358309">地址</a>），结果引来了 100 多次转发。为什么 React Native 会引来如此多的关注呢？我在这里谈谈我对 React Native 的理解。</p>

<p>一个新框架的出现总是为了解决现有的一些问题，那么对于现在的移动开发者来说，到底有哪些问题 React Native 能涉及呢？</p>

<h3>人才稀缺的问题</h3>

<p>首先的问题是：移动开发人才的稀缺。看看那些培训班出来的人吧，经过 3 个月的培训就可以拿到 8K 甚至上万的工作。在北京稍微有点工作经验的 iOS 开发，就要求 2 万一个月的工资。这说明当前移动互联网和创业的火热，已经让业界没有足够的开发人才了，所以大家都用涨工资来抢人才。而由于跨平台的框架（例如 PhoneGap，RubyMotion）都还是不太靠谱，所以对于稍微大一些的公司，都会选择针对 iOS 和 Android 平台分别做不同的定制开发。而 JavaScript 显然是一个群众基础更广的语言，这将使得相关人才更容易获得，同时由于后面提到的代码复用问题得到解决，也能节省一部分开发人员。</p>

<h3>代码复用的问题</h3>

<p>React Native 虽然强调自己不是 “Write once, run anywhere&#8221; 的框架，但是它至少能像 Google 的 <a href="https://github.com/google/j2objc">j2objc</a> 那样，在 Model 层实现复用。那些底层的、与界面无关的逻辑，相信 React Native 也可以实现复用。这样，虽然 UI 层的工作还是需要做 iOS 和 Android 两个平台，但如果抽象得好，Logic 和 Model 层的复用不但可以让代码复用，更可能实现底层的逻辑的单元测试。这样移动端的代码质量将更加可靠。</p>

<p>其实 React Native 宣传的 &ldquo;Learning once, write anywhere&rdquo; 本身也是一种复用的思想。大家厌烦了各种各样的编程语言，如果有一种语言真的能够统一移动开发领域，对于所有人都是好事。</p>

<h3>UI 排版的问题</h3>

<p>我自己一直不喜欢苹果新推出的 AutoLayout 那套解决方案，其实 HTML 和 CSS 在界面布局和呈现上深耕多年，Android 也是借鉴的 HTML 的那套方案，苹果完全可以也走这套方案的。但是苹果选择发明了一个 Constraint 的东西来实现排版。在企业的开发中，其实大家很少使用 Xib 的，而手写 Constraint 其实是非常痛苦的。所以出现了 <a href="https://github.com/Masonry/Masonry">Masonry</a> 一类的开源框架来解决这类同行的痛苦。</p>

<p>我一直在寻找使用类似 HTML + CSS 的排版，但是使用原生控件渲染的框架。其实之前 <a href="https://github.com/gavinkwoe/BeeFramework">BeeFramework</a> 就做了这方面的事情。所以我还专门代表 InfoQ 对他进行过采访。BeeFramework 虽然开源多年，而且有 2000 多的 star 数，但是受限于它自身的影响力以及框架的复杂性，一直没有很大的成功。至少我不知道有什么大的公司采用。</p>

<p>这次 Facebook 的 React Native 做的事情相比 <a href="https://github.com/gavinkwoe/BeeFramework">BeeFramework</a> 更加激进。它不但采用了类似 HTML + CSS 的排版，还把语言也换成了 JavaScript，这下子改变可以称作巨大了。但是 Facebook 有它作为全球互联网企业的光环，相信会有不少开发者跟进采用 React Native。</p>

<p>不过也说回来，Facebook 开源的也不一定都好，比如 <a href="https://github.com/facebookarchive/three20">three20</a> 就被 Facebook 放弃了，但是不可否认 <a href="https://github.com/facebookarchive/three20">three20</a> 作为一个框架，在那个时期的特定价值。所以 React Native 即使没有成功，它也将人们关注的焦点放在了移动开发的效率上了。很可能会有越来越多相关的框架因此涌现出来。</p>

<h3>MVVM</h3>

<p>MVVM 在 Web 开发领域相当火热，而 iOS 领域的 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> 虽然很火，但是还是非常小众。纠其原因，一方面是 ReactiveCocoa 带来的编程习惯上的改变实在太大，ReactiveCocoa 和 MVVM 的学习成本还是很高。另一方面是 ReactiveCocoa 在代码可读性、可维护性和协作上不太友好。</p>

<p>而 Web 开发领域对 MVVM 编程模式的接受程度就大不相同了，在 Web 开发中有相当多的被广泛使用的 MVVM 的框架，例如 <a href="http://en.wikipedia.org/wiki/AngularJS">AngularJS</a>。相信 React Native 会推动 MVVM 应用在移动端的开发。</p>

<h3>动态更新</h3>

<p>终于说到最 &ldquo;鸡冻人心&rdquo; 的部分了。你受够了每次发新版本都要审核一个星期吗？苹果的审核团队在效率上的低下，使得我们这一群狠不得每天迭代更新一版的敏捷开发团队被迫每 2 周或 1 个月更新一次版本。很多团队上一个版本还没审核结束，下一个版本就做好了。</p>

<p>React Native 的语言是基于 JavaScript，这必然会使得代码可以从服务器端动态更新成为可能。到时候，每天更新不再是梦想。当然，代码的安全性将更一步受到挑战，如何有效保护核心代码的安全将是一个难题。</p>

<h2>总结</h2>

<p>不管怎么样，这确确实实是一个移动互联网的时代，我相信随着几年的发展，移动互联网的开发生态也会积累出越来越多宝贵的框架，以支撑出更加伟大的 App 出现。作为一个移动开发者，我很高兴能够成为这个时代的主角，用移动开发技术改变人们的生活。</p>

<p>愿大家珍惜这样的机会，玩得开心～</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-02-01T16:27:43+08:00" pubdate data-updated="true">Feb 1<span>st</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写iOS SDK注意事项]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/31/write-sdk-tips/"/>
    <updated>2015-01-31T21:44:33+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/31/write-sdk-tips</id>
    <content type="html"><![CDATA[<p>我发现即使是像腾讯、小米这样的大厂提供的 SDK 质量在规范上也有很多问题，而且包括我以及我身边的很多朋友都被恶心到了，所以我就把这些注意事项总结出来，希望大家不要犯同样的错误。</p>

<h3>注意事项一：所有类名都应该加前缀</h3>

<p>说明：没有前缀的类名有冲突的风险。</p>

<p>Bad Case：微信分享的 SDK，文件名：<code>WXApiObject.h</code>，代码如下，其中<code>BaseReq</code>类和<code>BaseResp</code>类都没有加前缀。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface BaseReq : NSObject
</span><span class='line'>
</span><span class='line'>/** 请求类型 */
</span><span class='line'>@property (nonatomic, assign) int type;
</span><span class='line'>/** 由用户微信号和 AppID 组成的唯一标识，发送请求时第三方程序必须填写，用于校验微信用户是否换号登录 */
</span><span class='line'>@property (nonatomic, retain) NSString* openID;
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#pragma mark - BaseResp
</span><span class='line'>/*! @brief 该类为微信终端 SDK 所有响应类的基类
</span><span class='line'> *
</span><span class='line'> */
</span><span class='line'>@interface BaseResp : NSObject
</span><span class='line'>/** 错误码 */
</span><span class='line'>@property (nonatomic, assign) int errCode;
</span><span class='line'>/** 错误提示字符串 */
</span><span class='line'>@property (nonatomic, retain) NSString *errStr;
</span><span class='line'>/** 响应类型 */
</span><span class='line'>@property (nonatomic, assign) int type;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<h3>注意事项二：所有 category 方法加前缀</h3>

<p>说明：category 方法如果不加前缀，有冲突的风险。</p>

<p>Bad Case：腾讯分享的 SDK，它为 NSArray 增加了一个 JSONArray 的 category，造成我们本身的同名 category 被覆盖。另外他们为 NSArray 增加的其它 category 和著名的 Cordova 开源库冲突，造成 Cordova 无法使用。</p>

<h3>注意事项三：不要将第三方库打包进 SDK</h3>

<p>说明：尽量不要将第三方库打包进 SDK，如果要打包，最好也要将该第三方库重命名，以避免冲突。</p>

<p>Bad Case：小米的推送 SDK，直接在 SDK 静态库里面编进去一个第三方依赖库，而且这个库还是 ASIHttpRequest。ASIHttp 当前已经处于无人维护状态，很多 Bug 都是大家自己在修复（例如网易就自己维护了一个 ASIHttpRequest 的分支）。在 SDK 中依赖这种库还是比较麻烦的。</p>

<h3>注意事项四：做基本的检查和测试</h3>

<p>说明：SDK 对外公布前应该进行基本的编译检查，不应该有编译器警告存在。</p>

<p>Bad Case：腾讯分享的 SDK。它的 <code>CGIParamsWrap.o</code> 和  <code>TencentOAuth.o</code> 文件里面的方法名冲突了，如下所示：</p>

<blockquote><p>ld: warning: instance method &lsquo;deleteAPIRequestBySeq:&rsquo; in category from /Users/tangqiao/work/iphone/solar-ios/lib_common/TencentOpenApi/TencentOpenAPI.framework/TencentOpenAPI(CGIParamsWrap.o) overrides method from class in /Users/tangqiao/work/iphone/solar-ios/lib_common/TencentOpenApi/TencentOpenAPI.framework/TencentOpenAPI(TencentOAuth.o)</p></blockquote>

<h3>注意事项五：文档完整并且正确</h3>

<p>说明：这就不用解释了吧？</p>

<p>Bad Case: 微信官方的微信支付的示例代码，里面有各种错误，代码都无法编译成功。如下所示的是其中一个错误：</p>

<p><img src="http://blog.devtang.com/images/weixin-pay-error.jpg"></p>

<p>于是还有人专门帮微信另外制作了一个非官方的说明文档，地址在这里：<a href="https://github.com/gbammc/WechatPayDemo">https://github.com/gbammc/WechatPayDemo</a></p>

<h3>注意事项六：支持最新的 CPU 版本</h3>

<p>说明：去年苹果的一次 Bug，造成上传应用必须支持 arm64 的 CPU 版本，结果众多应用因为依赖的 SDK 不支持 arm64 而无法更新。当然，这次 Bug 出来之后，各 SDK 厂商都紧急做了更新。但是我觉得这种事情如果要做得专业，就应该一开始就紧跟技术更新，及时更新，而不是被迫更新。</p>

<h2>总结</h2>

<p>以上 6 点是我认为写一个 SDK 的最最基本的要求，希望被点名批评的同学能尽快改正哟～</p>

<p>如果大家在使用其它 SDK 时也发现了类似的问题，欢迎在文章下面留言。希望通过这种方式给开发相关 SDK 的同学一些压力，让他们好好改一下。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-01-31T21:44:33+08:00" pubdate data-updated="true">Jan 31<span>st</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第37期]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/31/ios-weekly-37/"/>
    <updated>2015-01-31T09:34:58+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/31/ios-weekly-37</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，地址是<a href="http://www.infoq.com/cn/news/2015/01/ios-v-advanced-technology-road">这里</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>本期 iOS 移动开发周报带来如下内容：iOS大V的技术进阶之路、ARC 对 self 的内存管理、Method Swizzling 和 AOP 实践、使用 iMovie 和 Keynote 制作 App Preview等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.cocoachina.com/programmer/20150115/10930.html">《唐巧访谈： iOS大V的技术进阶之路》</a>：文章来自于 CocoaChina 的访谈，采访对象是唐巧，他的新书<a href="https://github.com/tangqiaoboy/iOS-Pro">《iOS开发进阶》</a>已经和大家见面.采访中唐巧表达了他对于技术学习、建设技术影响力等方面的经验和看法。</p></li>
<li><p><a href="http://wangling.me/2015/01/moke-2014.html#fn-1?utm_source=qdan.me#/">《Moke 2014 以及 1 元应用效应》</a>：Moke 作者分享了他的应用在 2014 年的销售额以及他对于 1 元应用的看法。</p></li>
<li><p><a href="http://www.cocoachina.com/programmer/20150121/10966.html">《王巍访谈：关于 Swift 学习和 AppleWatch 开发的一些建议》</a>：文章来自于 CocoaChina 的访谈，采访对象是王巍，微博 ID“onevcat”，圈儿内人称喵神，知名 iOS/Unity 开发者，现居日本，就职于 LINE。喵神是 <a href="http://objccn.io/">objc 中国</a>项目发起人，开源过广受开发者喜爱的 Xcode 插件 VVDocumenter，主创或参与开发《姬骑士和最后的百龙战争》、《英雄 Slash》、《冒险谜题王国》以及《小熊推金币》等多款游戏，个人应用代表有《番茄工作法》(Pomodoro Do) 和《云端记账》(Our Money)。</p></li>
<li><p><a href="http://iiiyu.com/2015/01/20/2014-oh-my-star-app-annual-summary/">《2014 年 Oh My Star 总结》</a>：Oh My Star 是一款由国人 <a href="http://weibo.com/n/Sumi-iYu">@Sumi-iYu</a> 开发的管理 Github 上 star 项目的工具。笔者使用过，对于 star 功能的重度用户来说，非常好用。本文分享了作者在开发该软件的过程以及收货。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.sunnyxx.com/2015/01/17/self-in-arc/">《ARC 对 self 的内存管理》</a>：文章从 YTKNetwork 的几行代码出发，讨论了 LLVM 编译器在传递 self 参数时，对 self 的引用计数的特殊处理。</p></li>
<li><p><a href="http://blog.nswebfrog.com/2015/01/08/autolayout-trick/">《AutoLayout 布局技巧－等宽子视图》</a>：所谓等宽子视图，也就是对一个有 n 个子视图的父视图来说，无论父视图的宽度怎么变化，所有子视图的宽度是相等的。文章介绍了这一类排版需求的 AutoLayout 布局技巧。</p></li>
<li><p><a href="http://tech.glowing.com/cn/objective-c-runtime/">《Objective-C Runtime》</a>：Objective-C 是一个动态语言，这意味着它不仅需要一个编译器，也需要一个运行时系统来动态得创建类和对象、进行消息传递和转发。理解 Objective-C 的 Runtime 机制可以帮我们更好的了解这个语言，适当的时候还能对语言进行扩展，从系统层面解决项目中的一些设计或技术问题。本文讲解了 Runtime 的核心 &ndash; 消息传递 （Messaging）。</p></li>
<li><p><a href="http://tech.glowing.com/cn/method-swizzling-aop/">《Method Swizzling 和 AOP 实践》</a>：利用 Objective-C 的 Runtime 特性，我们可以给语言做扩展，帮助解决项目开发中的一些设计和技术问题。这一篇，我们来探索一些利用 Objective-C Runtime 的黑色技巧。这些技巧中最具争议的或许就是 Method Swizzling 。文本介绍了利用 Method Swizzling，结合 AOP 来做一些打 Log 的工作。利用 objective-C Runtime 特性和 Aspect Oriented Programming ，我们可以把琐碎事务的逻辑从主逻辑中分离出来，作为单独的模块。它是对面向对象编程模式的一个补充。</p></li>
<li><p><a href="http://weibo.com/p/1001603800875490492754">《CocoaPods 最佳实践探讨》</a>：作者在文章中表达了对目前常见的 CocoaPods 使用方法的意见。希望大家根据自己的经验，一起讨论出一份真正的 “最佳实践”。</p></li>
<li><p><a href="http://www.jianshu.com/p/358106d653cf">《使用 iMovie 和 Keynote 制作 App Preview》</a>：App Preview 就是一段 15-30 秒的短视频，用来展示你的应用的特性、用户界面、交互方式等内容。在 App Store 你的应用的详细信息页面里，放在原来的截图之前。体验上会比截图更有冲击力，也能够表现更多的东西。茫茫的 App 海洋之中，如何脱颖而出，卖相至关重要。本文作者分享了他使用 iMovie 和 Keynote 制作 App Preview 的经验，并且提供了相关的效果视频和 Keynote 源文件。</p></li>
<li><p><a href="http://blog.callmewhy.com/2015/01/20/wtf-in-old-code/">《要你命三千：老代码中的那些坑》</a>: 最近在给以前的老项目维护，说起来工作很简单，一个字：改 Bug。这看起来平淡无常的工作，实际上凶险无比，藏坑无数。时至今日，感觉整个人都得到了升华。在睡觉前抽空写篇博客，和各位分享一下踩坑经历，一起品味其中的种种酸苦辣 (没甜)。</p></li>
<li><p><a href="http://natashatherobot.com/unit-testing-swift-dependency-injection/">《Unit Testing in Swift: Dependency Injection》</a>：文章介绍了在 Swift 实现的单元测试中实现依赖注入，不过实际写起来还是比较麻烦。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://ship.io">ship.io</a>：ship.io 是一个持续集成服务。现在所有套餐免费，支持 Xcode 6.1.1。</p></li>
<li><p><a href="https://crowdin.com/">Crowdin</a>: Crowdin 是一个多语言翻译服务。可以便于开发者将应用改成支持多语言。类似的服务还有：<a href="https://www.transifex.com/">Transifex</a>。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/dasdom/BreakOutToRefresh">BreakOutToRefresh</a>：BreakOutToRefresh 是一个有趣的项目，它利用 SpriteKit 在下拉刷新过程中做了一个打砖块游戏。</p></li>
<li><p><a href="https://github.com/Ramotion/animated-tab-bar">RAMAnimatedTabBarController</a>：RAMAnimatedTabBarController 是一个让 TabBar 上的元素能够显示动画效果的开源库。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-01-31T09:34:58+08:00" pubdate data-updated="true">Jan 31<span>st</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用蒲公英来做iOS测试应用的分发]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/22/pgy-usage-guide/"/>
    <updated>2015-01-22T19:16:06+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/22/pgy-usage-guide</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/pgy_0.jpg"></p>

<h2>前言</h2>

<p>我在 <a href="http://blog.devtang.com/blog/2012/02/16/apply-daily-build-in-ios-project/">《给 iOS 工程增加 Daily Build》</a> 一文中介绍过如何用命令行生成 IPA 文件以及通过 <code>itms-services</code> 协议 来让用户可以直接在网页上安装测试应用。但是这种方法虽然有效，但是还是比较麻烦，因为：</p>

<ol>
<li>开发者需要自己写相关的 Build 脚本。</li>
<li>开发者需要自己搭建好应用下载的服务器。</li>
<li>如果要做得更友好，开发者还需要部署 CDN 服务、增加扫描二维码下载等功能。</li>
</ol>


<p>所以本文给大家推荐一个叫 “<a href="http://www.pgyer.com/">蒲公英</a>” 的免费服务，帮助开发者能够方便地来做 iOS 应用的测试分发工作。蒲公英于 2014 年 7 月正式上线，我自己使用过一段时间，还是挺满意的。</p>

<p>下面我们就来看看，如何使用 “<a href="http://www.pgyer.com/">蒲公英</a>” 来进行测试版本应用的分发工作。</p>

<h2>生成 IPA 文件</h2>

<p>生成应用的 IPA 文件可以使用命令行 <code>xcodebuild exportArchive -exportFormat ipa</code>来完成，也可以使用 Xcode 提供的相应功能。相信大部分同学应该都用过，我就简单介绍一下。</p>

<p>首先将编译的目标机器设置成 “iOS Device&#8221;，然后点击”Product&#8221;&ndash;>&ldquo;Archive&#8221;，Archive 成功之后，就可以在 Xcode 的 Organizer 中看到相应的文件。</p>

<p>接下来点击 Organizer 中的 &ldquo;Export&rdquo; 按钮，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/export_ipa_1.jpg"></p>

<p>在接下来的弹出界面中选择 “Save for Ad Hoc Deployment&#8221;。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/export_ipa_2.jpg"></p>

<p>选择完成后点 Next，Xcode 会自动将测试设备的签名信息附加上，并将相应的 IPA 文件导出。</p>

<h2>上传到蒲公英</h2>

<p>如果是第一次使用蒲公英，我们需要访问 <a href="http://www.pgyer.com/user/register">蒲公英的网址</a> 进行注册。注册主要是为了保护测试应用的安全和设置相应的权限（例如设置下载密码）。</p>

<p>注册之后，点击<a href="http://www.pgyer.com/">蒲公英网站首页</a>的 &ldquo;发布应用&#8221;，然后选择之前生成的 IPA 文件即可完成上传 IPA 的过程。蒲公英对上传速度进行了很大程度的优化，上传应用速度非常快，下图是我测试上传猿题库的过程（上传 18M 的 IPA 文件大概花了半分钟时间，平均速度应该超过了 500K 每秒）：</p>

<p><img src="http://blog.devtang.com/images/pgy_1.jpg"></p>

<p>上传成功后，蒲公英会自动分析应用的 Bundle ID 信息，将其在 App Store 上的应用介绍和截图获取下来。然后你可以选择设置一个 “安装密码”，以避免一些越狱用户非法安装你的应用。对于小范围试用的应用，建议也不要将其发布到 &ldquo;应用广场&#8221;。如下所示：</p>

<p><img src="http://blog.devtang.com/images/pgy_2.jpg"></p>

<p>设置好所有需要的信息后，点击发布应用，蒲公英会生成一个应用分发的网页。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/pgy_3.jpg"></p>

<p>你可以把这个网页发给你的测试用户:</p>

<ul>
<li>如果用户在手机上打开这个页面，则可以直接点击 “安装按钮” 来一键下载和安装测试应用。</li>
<li>如果用户在电脑上打开这个应用，则可以用扫描二维码的方式来一键下载和安装测试应用。</li>
</ul>


<h2>一些小技巧</h2>

<ul>
<li>有企业证书的同学，如果将 IPA 在本地用企业证书签名，则可以把蒲公英当作一个企业应用发布渠道，省去部署分发服务器的烦恼，但最好设置安装密码，以免被苹果认为滥用企业证书。</li>
<li>嫌每次打开蒲公英的网页太麻烦？蒲公英提供了 <a href="http://www.pgyer.com/apps">Mac 客户端</a>，所有上传和设置操作都可以在客户端上直接进行。</li>
</ul>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-01-22T19:16:06+08:00" pubdate data-updated="true">Jan 22<span>nd</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第36期]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/18/ios-weekly-36/"/>
    <updated>2015-01-18T10:25:45+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/18/ios-weekly-36</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：中国超越美国成最大iPhone消费市场、一个iOS开发工程师的职业规划思考、Functional Swift Conference等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://money.163.com/15/0111/14/AFMEA0VN002526O3.html">《瑞士银行：中国超越美国成最大iPhone消费市场》</a>：瑞士银行统计报告显示，在过去一个季度，苹果向消费者出售了6930万支iPhone。其中，中国区的销量占到总销量的35%，超过美国区24%的占比。瑞士银行的分析师Steven Milunovich提到，“数据显示，iPhone在中国区的销量出现显著增长，在过去这个季度iPhone中国区的销量占到总销量的35%，而这一数 据在去年同期只是22%”。</p></li>
<li><p><a href="http://www.infoq.com/cn/articles/interpretation-of-2014-ios-part-embrace-change">《解读2014之iOS篇：拥抱变化》</a>：对于 iOS 技术领域，2014 年是变化巨大的一年。除了软硬件外，编程语言、中国区、开发社区在 2014 年也有着巨大变化，文章试着用几个关键词来勾勒出 iOS 技术领域在 2014 年所经历的变化。</p></li>
<li><p><a href="http://www.cocoachina.com/appstore/20150109/10887.html">《苹果调整多个国家App Store应用售价》</a>：苹果最近通过邮件告知开发者，即将调整加拿大、俄罗斯以及欧洲一些国家App Store中软件售价。</p></li>
<li><p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=684">《奔向三张，不破不立：一个iOS开发工程师的职业规划思考》</a>：本文作者是《iOS应用逆向工程：分析与实战》的作者。他从自己的经历为例，分享了他自己对于iOS开发工程师的职业规划思考。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://limboy.me/ios/2014/12/31/learning-ios.html">《自学 iOS 开发的一些经验》</a>：不知不觉作为 iOS 开发也有两年多的时间了，记得当初看到 OC 的语法时，愣是被吓了回去，隔了好久才重新耐下心去啃一啃。啃了一阵，觉得大概有了点概念，看到 Cocoa 那么多的 Class，又懵了，怎么才能调用系统的相机？怎么保存信息？怎么做一个像 Twitter 个人页那样的页面？总之就是不知道该从哪切入。现在回想起来，其实路一直都在，而且有很多条，当初如果有人能够指出一条还不错的道，或许就能走得不那么艰难。于是就有了这篇文章，希望对后人能有所帮助吧。</p></li>
<li><p><a href="http://imtx.me/archives/1916.html">《Swift 小技巧（一）：如何正确地定义一个类变量（和类常量）》</a>：Swift 语言对于无论是静态语言过来还是动态语言过来的开发者来说，都有点点不适应，很多问题的解决思路不能用已经习以为常的方法去做。比如一个很常用的：如何定义类变量（和类常量）？本文介绍了作者对此问题的思考。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://2014.funswiftconf.com/">Functional Swift Conference</a>：这是在美国布鲁克林举办的一个关于Swift函数式编程的会议视频。共有6位演讲者介绍了他们对于Swift函数式编程的感悟和心得。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://pan.baidu.com/s/1gd1noSr">Log Guru</a>：Log Guru是一个收集Log的小工具, 可以在 Mac 上查看 iOS 设备的实时系统日志. 现在可以直接高亮显示在 FIR.im 上安装 app 失败的原因。后续会增加各种进程过滤、高亮某进程、只看 Error level 等功能。与此类似的工具还有：<a href="http://lemonjar.com/iosconsole/">iOS Console</a>。</p></li>
<li><p><a href="http://swiftdoc.org/">SwiftDoc</a>：SwiftDoc是一个在线的Swift帮助文档。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/onevcat/VVBlurPresentation">VVBlurPresentation</a>：VVBlurPresentation是一个很简单易用的在原来view conntroller基础上做模糊，然后present新的view controller的小项目。作者是<a href="http://www.weibo.com/onevcat?from=feed&amp;loc=nickname">onevcat</a>。</p></li>
<li><p><a href="https://github.com/ipader/SwiftGuide/blob/master/Featured.md">《Swift开源项目精选》</a>：该作者将 2014 年 Swift 开源项目做了一个筛选和汇总。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-01-18T10:25:45+08:00" pubdate data-updated="true">Jan 18<span>th</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对《iOS开发进阶》一书的解释]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/18/explain-ios-pro-book/"/>
    <updated>2015-01-18T10:17:21+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/18/explain-ios-pro-book</id>
    <content type="html"><![CDATA[<p>《iOS开发进阶》虽然仅仅在<a href="http://product.china-pub.com/3770871">互动出版社</a>可以买到，还没有在京东和亚马逊上架，但是在 v2ex 上已经引起了一些讨论和误解，见 <a href="http://v2ex.com/t/161929?p=1">此贴</a>。所以我想在这里，对本书的内容和定位做一些解释。</p>

<h2>定位</h2>

<p>《iOS开发进阶》定位于帮助那些iOS开发刚刚入门的同行快速提高自己的水平，适用于至少有3个月以上iOS开发经验的读者。不适合没有任何iOS开发基础的读者阅读。对于iOS熟练开发者，本书也能补充其知识点的可能的盲区，使其相关知识体系更为完善。</p>

<p>我可能需要强调一下，对于iOS熟练开发者（工作时间大于1年），本书也<font color=blue>只能做到补充其可能的盲区的作用</font>。或者有一些比较牛的朋友，本书也可能<font color=red>补不了什么盲区</font>。</p>

<p>我自认为其中 “CoreText排版引擎章节”以及第三章的底层原理部分是适合这部分iOS熟练开发者的。但不排除很多熟练开发者对底层原理已经很了解了，同时对CoreText不感兴趣。</p>

<p>所以希望iOS熟练开发者能够在买书前翻阅一下<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>。</p>

<h2>内容</h2>

<p>本书中的所有内容都是我的原创，但是有部分在博客上公开过，我自己数了一下，一共有9个章节在我的博客上可以看到完整的内容，另外11个章节在我的博客上只能看到部分内容或完全看不到内容。但是很有可能，随着图书的慢慢发售，我将其它未公开的电子版内容放到网上。</p>

<p>经常看我的博客的朋友，可能会有些失望或者觉得不值。所以希望大家在买书前翻阅一下<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>，以避免买了后悔。</p>

<h2>书名</h2>

<p>有人抱怨说《iOS开发进阶》这个书名太过于有欺骗性，应该叫《iOS开发备忘录》。对此我不太认同，《iOS开发进阶》很好地排除了那些iOS初学者，从书名上他们就会放弃看本书，而如果叫《iOS开发备忘录》就不一定了。另外，任何一个读者都应该看过目录再买书的吧？我不认为本书的书名会有那么大的欺骗性。</p>

<h2>质量</h2>

<p>一些人批评本书的内容质量比国外的 objc.io 和 <a href="raywenderlich.com/">RW</a> 的书差多了。对此我想说，您批评得对，我还需要努力！但是这不代表本书就没有价值吧？例如CoreText章节，我现在在国内外的图书中，仍然没有看到有谁把这个从浅入深讲完整的呀。第一部分对工具的介绍虽然技术含量低，但也没有谁完整整理过。与其自叹和国外有差距，不如自己实际来努力一下，改善一下国内的知识分享环境，不是更好么？</p>

<h2>最后</h2>

<ul>
<li>我写本书不指望能挣多少钱，实际上它也不能给我带来多少收入。但我真心希望这本书能够帮助到大家。现在看来，本书最合适的读者仍然是刚刚入门3个月的开发者。</li>
<li>请所有购买此书的朋友购买前先看目录：<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>。一本书不可能适合所有水平的读者，请自己决定。</li>
</ul>


<p>愿大家玩得开心～</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-01-18T10:17:21+08:00" pubdate data-updated="true">Jan 18<span>th</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我是如何完成《iOS开发进阶》的编写的？]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/11/how-to-finish-ios-pro-book/"/>
    <updated>2015-01-11T20:01:11+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/11/how-to-finish-ios-pro-book</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p><a href="https://github.com/tangqiaoboy/iOS-Pro">《iOS 开发进阶》</a> 终于出版了，在架构师峰会的签售会上，首批 100 本图书在签售的两天很快就卖光了，前几天首先在<a href="http://product.china-pub.com/3770871">互动出版社</a>上架的首批图书也在一天内卖缺货了，能得到读者这么热烈地支持，我还是很惊喜。<a href="http://segmentfault.com/blog/devlevelup">技术人攻略</a> 的创始人张兰说：“你应该写一篇总结”。我自己也想好好的整理一下这个出版的过程，给大家分享一下此书的写作过程。</p>

<p><img src="http://blog.devtang.com/images/ios-pro-book-launch.jpg"></p>

<h2>选择出版社</h2>

<p>去年年底，电子工业出版社博文视点的张春雨老师在微博上私信我，问我愿不愿意写一本 iOS 方面的技术书籍。其实在这之前已经有将近 5 个出版社的老师联系过我，但是我都因为创业太忙没有答应。后来有一次差点答应过的一个出版社老师，但因为她坚持要我提供 Word 版本的书稿以及一些沟通上的问题，我最终在签合同前终止了合作。</p>

<p>张老师是足够开明大度的，在写作时间和内容上给了我足够的自由度，前期几乎没有干涉过文稿内容和写作进度（不过后来发现其实是他比较忙，没空管我）。后期也仅仅是对文章表达可能有歧义的地方提建议。这种散养式的风格非常适合我，因为我从来就是一个比较自律，以及喜欢按自己节奏做事的人。</p>

<h2>写作格式和工具</h2>

<p>我之前在某个出版社老师的要求下，曾经也尝试在 Mac 下用 Word 写作。但由于 Mac 下 Word 的糟糕体验以及对代码糟糕的排版支持，那完全就是一段不堪回首的痛苦过程。</p>

<p>而张春雨老师鼓励我用任何喜欢的工具写作，这一点是我同意合作的很大原因。我的博客都是用 markdown 语法来完成的，所以我一开始就打算用 markdown 来写作。</p>

<p>在软件上，我一开始选择 Mou 来写作，但是发现 Mou 对于篇幅超过 1 万字的文章，预览渲染会非常卡，CPU 长期达到 100% 占用。我的最新款 Macbook Air 的风扇呼呼狂响，让我不得不终止了 Mou 的进程。</p>

<p>之后有一段时间我就用 Evernote 或 Sublime text 来写作，它们麻烦之处就是 Evernote 写完之后还需要把图片转成 markdown 的链接。而
Sublime text 的问题就是无法方便地预览最后效果。</p>

<p>这一切的不便在我发现 <a href="https://www.gitbook.com/">gitbook</a> 后被改变。<a href="https://www.gitbook.com/">gitbook</a> 是一个专业的为 markdown 格式写作者提供的图书编写工具。它甚至集成了在线销售相关的功能。它也支持将书稿导出成 PDF、HTML 或 ePub 格式。</p>

<p>以下是 gitbook 的编辑界面（最左边是目录，中间是 markdown 源码，最右边是预览）：</p>

<p><img src="http://blog.devtang.com/images/gitbook-ui.jpg"></p>

<p>我用 <a href="https://www.gitbook.com/">gitbook</a> 完成了此书后半部分的编写。gitbook 有时候会出现两个中文字符在显示时重叠的问题，不过整体体验比 Mou 和 Evernote 要好多了。唯一的一次事故是 gitbook 对中文支持不太好，如果章节名不带因为的话，gitbook 会错误的地将章节覆盖到父级的图书目录，造成其他章节的内容被覆盖。我幸运的将书稿内容保存在了 Dropbox 目录下，所以恢复出来了。</p>

<h2>配图和示例代码</h2>

<p>对于写作中需要的示意图截图，简单的我就直接用 QQ 截图了，复杂的我使用的是 <a href="http://www.clarify-it.com/">Clarify</a>，它的标记功能比较丰富（不过中文支持比较差）。另外一些类图或架构图，我就直接使用 keynote 来做了。</p>

<p>考虑到技术书籍通常配图都比较少，所以我这次尝试，那时用比较多的配图来做辅助说明。另外我尽量把图书的涉及代码都放到网上，仅仅留一些关键的代码片段以节省篇幅。</p>

<h2>如何安排时间和控制进度</h2>

<p>由于有过写作的经验，所以我预先就估计好了这会是一个一年左右的工作。实际上它确实花了一年时间。</p>

<p>我希望把这个当做一个自己的 “创业项目” 来做，看自己能否执行好一个较长远的规划。我把图书编写拆分成每一个章节的写作工作，然后希望用 1~2 周完成一个章节。这样的好处是每周都可以看到明确的进展和产出。</p>

<p>我具体在做的时候是尝试用 Scrum 的方式来安排自己周末的时间。简单来说就是把书稿的内容进行拆分，然后对于细分到每一个章节的内容进行估分。接着我的每一个周末的目标就是把当周安排的章节写作完成。</p>

<p>当然，人都是需要休息的。所以周末两天我通常不会安排满。我会安排一整天用来写作，而另外一天做小量的修改和休息。如果有加班，就暂停写作。</p>

<p>虽然我没有跑过马拉松，但我感觉写作的体验和跑马拉松类似。前期的起跑和最后的冲刺都比较激动，但是中途长达一年的写作过程却是孤独，枯燥和寂寞的。这个时候，需要自己的坚持和自我鼓励。</p>

<h2>关于电子版</h2>

<p>该书我专门保留了电子版的版权，我本来希望把书放在多看上销售，主要是因为我个人就是多看的重度用户，而且我知道多看对电子书有加密保护。但是后来联系多看阅读时才发现他们已经不和个人作者合作了，他们建议我将版权授权给出版社。这让我感觉非常失望。多看阅读这种作法使得它无法颠覆传统出版社的渠道，另外如果竞争对手允许个人作者的话，多看阅读还可能失去不少优秀的图书的发行机会，进而影响它的电子书平台的地位。</p>

<p>在网上抱怨了此事以后，有一位朋友说可以协助我在豆瓣阅读发布此书。所以顺利的话，稍后会有豆瓣阅读的电子书版本销售。如果豆瓣阅读的出版进行得顺利，我也会将电子版发布在百度阅读、淘宝阅读等其它电子书平台上。</p>

<h2>关于作品收入</h2>

<p>技术书籍的写作通常都是不怎么挣钱的。那拿我的书来说，估计版税一共会有2万块钱。而写作此书大概花掉了我将近一年的周末时间。如果是要专门为了挣钱的话，可以有非常多其它的性价比更高的，更轻松的方式。</p>

<p>但是，如果可以重来，我还是会选择写这本书。传递知识的乐趣和成就感还是比挣钱更有意思一些。也希望有更多的一线开发者投入到写作分享的行列中。</p>

<h2>一些小结</h2>

<ul>
<li>推荐用 markdown 格式配合 <a href="https://www.gitbook.com/">gitbook</a> 写作。</li>
<li>推荐用 Scrum 的方式安排进度。</li>
<li>推荐用 <a href="http://www.clarify-it.com/">Clarify</a> 作配图标记。</li>
<li>书稿放在 <a href="https://www.dropbox.com/">Dropbox</a> 下自动同步会非常安全。当然，你需要学会科学上网。</li>
<li>如果想在 Mac 下写作，那还是找一个不需要 Word 方式审稿的出版社吧，与我合作的电子工业出版社就是这样。博文视点的张春雨老师和刘芸老师(微信号:ly15201392806)都非常不错。</li>
<li>从交稿到出版至少也有 1 个月时间，做好心理准备，前期不要宣传太猛，我这回从签售会到网上能够买到，将近过了一个月。我由于不懂事，签售时宣传得太狠，结果弄得跟饥饿营销似的。</li>
</ul>


<h2>写作者的未来</h2>

<p>未来互联网的发展会使得传播更加容易，所以我相信：好的内容会更容易获得读者，出版社和书商作为渠道的力量会越来越弱。到那个时候，或许写作真正的能成为很多人的职业，并给他们提供不菲的收入。</p>

<p>到那个时候，我希望我能够成为其中的一员，不但可以随意地选择工作时间和地点，还可以享受传递知识的乐趣和成就感，希望这一天能够早日到来。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-01-11T20:01:11+08:00" pubdate data-updated="true">Jan 11<span>th</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读2014之iOS篇：拥抱变化]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/07/ios-2014-summary/"/>
    <updated>2015-01-07T21:22:15+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/07/ios-2014-summary</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/interpretation-of-2014-ios-part-embrace-change">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h2>前言</h2>

<p>对于 iOS 技术领域，2014 年是变化巨大的一年。在硬件上，由于苹果发布了更大尺寸的 iPhone 6 和 iPhone 6 plus，使得 iOS 设备的屏幕适配工作也多了起来。这还不包括全新的 Apple Watch 带来的开发上的变化。在软件上，Swift 语言的推出惊呆了整个业界，从 Objective-C 切换成另一个全新语言的代价是巨大的，但我们也看到了它长远的好处以及苹果对此的决心。除了软硬件外，编程语言、中国区、开发社区在 2014 年也有着巨大变化，我们试着用几个关键词来勾勒出 iOS 技术领域在 2014 年所经历的变化。</p>

<h2>硬件</h2>

<p>苹果在 2014 年推出了 iPhone 6 和 iPhone 6 plus，iOS 设备也进入了大屏时代！虽然包括笔者在内的许多朋友都认为：“Plus 实在太大了”，但是从销售量看， iPhone 6 plus 在初期占据了 <a href="http://tech.163.com/14/1006/08/A7S1AHBN000915BE.html">6 成</a> 的销售量。我本人在实际使用 iPhone 6 plus 几周后，也很快适应了它的屏幕尺寸，现在反而不习惯使用了两年的 iPhone 4s 了。在开发上，iPhone 6 的推出使得 iOS 开发者也开始像 Android 开发者那样，为适配工作担忧。与 Android 开发者不同，iOS 开发在过去多年都是用 “绝对定位” 的方式来放置各种 UI 控件，使用 Autoresizing Mask 就可以轻松搞定 iPhone4 和 iPhone5 屏幕高度的差异问题。但现在不一样了，iOS 开发者需要学习使用 AutoLayout，通过各种 Constraint 来调整 UI 控件，但是很多界面是需要用代码来编写的，所以这方面的开发工作会比较辛苦，好在有 <a href="https://github.com/Masonry/Masonry">Masonry</a> 这一类的开源库来辅助我们做界面开发工作。</p>

<p>iPhone 6 plus 引入的特有的 3x 的图片问题使 UI 设计师的工作量也大大的增加了。另外，以前由于 Android 设备其实太过于分裂，无法对每种屏幕分辨率都做到精致地设计，所以设计师大多只是用 “凑合用” 的思想来实施 Android 应用的适配。这一点从 Android 大屏手机上的应用呈现就能看出来。而现在同样的方式不太可能被严格的苹果以及挑剔的 iPhone 用户所接受，设计师很可能需要为 iPhone 6 plus 做专门的大屏设计，才能获得用户的芳心。</p>

<p>Apple Watch 的推出让适配工作真正地进入了 Hard 模式。优秀的开发者需要在工程中做好代码地复用，才能让底层的逻辑能够同样运行在 Apple Watch 中。不过这方面的工作还只是猜想，我们得等到 Apple Watch 真正面世的时候，才能真正了解到相关的开发工作有多么不同。</p>

<h2>软件</h2>

<p>苹果在 2014 年的全球开发者大会（World Wide Developer Conference，简称 WWDC）上并没有发布任何新的硬件产品，但展示出其在软件上的各种功能改进和整合上的巨大努力。苹果推出了新的 OS X 10.10 操作系统 Yosemite，它吸收了从 iOS 7 开始的扁平化的设计风格，很多改进的细节都可以看到 iOS 系统对于 OS X 的影响。Yosemite 最吸引我的是 handoff 功能。handoff 功能将 Mac 电脑和 iPhone、iPad 的功能进行了深度整合，当你拥有这三个设备时，它们每一个都可以接打电话和收发短信，你在它们任何一个设备上编辑的文档，也可以实时同步到另一个设备上。handoff 并不是苹果的应用独有的功能，苹果将其相关的 API 都开放给了开发者，所以开发者也可以完全开发出支持 handoff 功能的应用。</p>

<p>相对于 Yosemite 带来的整合方面的改进，新版 iOS 8 的改进的重点则是开放。苹果开放了输入法接口，允许第三方提供输入法。苹果也开放了 Touch ID，允许第三方应用获得指纹信息。HomeKit 则为智能硬件开放了不少可以互操作的接口。另外，iOS 8 还新增了 4000 个新的 API，开放了大量底层 API 接口供应用调用。所以对于普通用户而言，iOS 8 新增的可见功能可能是有限的，但是其开放的大量 API 和新 SDK 释放出了巨大的想象空间，相信会产生更多有趣的应用。</p>

<p>对于一个硬件来说，相关的软件是非常重要的，但是苹果却将它的操作系统和 iWork 办公套件完全免费，这显示出苹果对于软件生态圈不同的理解。而微软至今最大的两大收入还是来自它的 Office 和 Windows 系列操作系统。在微软还在发愁他的新版 Wiindows 10 怎么卖出去时，苹果早已不玩这种 1.0 的商业模式游戏了。</p>

<h2>Swift</h2>

<p>苹果的 Objective-C 语言发明于与 C++ 同时期的上世纪 80 年代初，虽然苹果对其进行了很多次改进，但这终究像给应用打补丁一样，不是特别舒服。这次 Swift 的推出，苹果试图用全新的编程语言来提高 OS X 和 iOS 程序员的开发效率。单从语言特性上来看，Swift 吸收了众多现代编程语言的优秀特性，例如类型推断（Type inference）、范型（Generic）、闭包（Closure）、命名空间（namespace），元组（tuple）等，整体语法上也更加简洁。我们也了解到 Swift 是苹果从 4 年前就开始筹划中的事情，可见苹果在长远规划上对于 Swift 语言的重视，相信未来 Swift 会接替更多 Objective-C 原本的地位，所有 iOS 开发者都应该花时间学习这门全新的语言。</p>

<p>苹果这次推出 Swift 也吸引了大量的讨论，其中比较不正确的观点是认为 iOS 开发的门槛因此而降低了。从我和身边的同行对 Swift 的学习和讨论来看，Swift 并不是一门可以简单上手的语言。并且在未来一到两年内，iOS 开发必然会经历同时使用 Objective-C 和 Swift 的过渡阶段。对于 iOS 开发者，除了必须掌握以前的 Objective-C 语言的知识，还需要学习并不简单的 Swift，可见 iOS 开发的门槛不但没有降低，反而提高了不少。</p>

<h2>中国</h2>

<p>苹果是重视中国的，它在大中华区的销售贡献了约 15% 的全球营收。但是从某些方面看，苹果还是不够重视中国的。很多中国用户抱怨的问题，苹果都一直没有解决。我们来看看苹果对于中国区的用户和开发者，还有哪些需要改进的地方。</p>

<p>刚刚提到的 handoff 功能依赖于苹果的 iCloud，但是苹果的 iCloud 存取速度在中国却是非常糟糕的。笔者试图打开一个通过 iCloud 共享的约为 6M 的视频，但是等了 3 分钟才打开。与此同时，国内的各种网盘服务却能提供非常大的免费容量以及非常快的访问速度。</p>

<p>中国的垃圾短信和骚扰电话一直是非常严重的，而 iMessage 免费发送的特点给了垃圾短信发送提供了很好的平台。苹果到现在都没有推出相关的有效避免垃圾短信的办法，只提供了一个用于反馈垃圾短信的邮箱，整个反馈流程也非常繁琐，需要提供发送者邮件，内容，以及相关截图。笔者反馈了数 10 次之后，也没有得到过任何回应。对于骚扰电话，苹果只提供了事后将该电话号码加入黑名单的功能，这使得用户只能是接了骚扰电话后，才能做相应的手工处理。这些问题从技术上要解决没有任何难度，看看 Android 平台就可以看到这方面的问题被非常完美地解决了。但是苹果却不愿意做相关的努力，这只能说明它还不够重视中国用户。</p>

<p>苹果的 App Store 中国区也是比较混乱的，各种刷榜的应用充斥着排行榜的前几名。苹果在这方面应该是做了很多努力的，但是终究还是做得不够。从很多应用的评论中，我们都能看出刷榜的痕迹。由于这方面直接和收入相关，所以我相信苹果还是会尽力改进的。App Store 还有一个问题是支付不太方便，今年苹果和银联合作，不但推出 1 元的应用，而且允许用户使用银联卡来付费，极大地方便了用户购买应用。</p>

<h2>社区、会议和第三方服务</h2>

<p>国外的 iOS 开发社区今年依然发展红火，比较引人注目的是 <a href="http://www.objc.io/">objc.io</a> 。 objc.io 每一期的质量都非常高，所以由知名开发者王巍（onevcat）组织的翻译团队会将每一期文章都翻译成<a href="http://objccn.io/">中文</a>。国内的博客和社区发展相比国外还是比较慢，参与分享 iOS 技术的独立博客相比以往多了很多，但整体质量还有待提高。</p>

<p>移动开发也实实在在地成为了一个重要的技术领域，QCon 和 ArchSummit 每一届都会有专门的移动专题，可见这方面聚焦了开发者大量的关注。</p>

<p>2014 年国内外都涌现出了大量服务于移动开发者的第三方服务。这些第三方服务作为生态圈的一个重要组成部分，将会方便开发者聚焦核心功能，而不用担心基础设施的搭建。</p>

<h2>展望</h2>

<p>展望 2015 年，笔者认为：</p>

<ul>
<li>苹果的 iPhone 将会继续占据高端机市场，但千元左右的 Android 机将会占据其它所有的用户，最终 Android 的用户量将远远大于 iPhone 的用户量，但由于 iPhone 用户的优质属性（付费意愿高），所以各大应用将会在这两大平台都会投入足够的开发力量。如果有人能够比较好的解决代码在 iOS 和 Android 平台的复用性问题，将会很大程度上改变现在的开发模式。</li>
<li>Swift 语言将仍然处于发展阶段，Objective-C 依旧会是 iOS 程序开发的主要语言。更多的开发者将会使用混合开发的方式，同时使用 Objective-C 和 Swift 来开发应用。</li>
<li>国内 iOS 开发社区还会进一步发展，会出现更多的移动开发相关的开源基础设施或第三方服务。</li>
<li>苹果很可能会继续不那么重视中国区用户。iCloud 服务依然糟糕，iMessage 垃圾短信依然泛滥，由于害怕 “侵犯用户隐私 “，骚扰电话还是没有很好的解决办法。但苹果在大中华区的收入会继续增加。</li>
<li>由于 Objective-C 和 Swift 相比 Java 语言没有那么普及，Mac 电脑也没有 Windows 电脑普及，这造成 iOS 学习门槛较高。优秀的 iOS 开发者依然是稀缺资源，相比同等的 Android 开发者，iOS 开发者可以获得更多的收入。</li>
</ul>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-01-07T21:22:15+08:00" pubdate data-updated="true">Jan 7<span>th</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/01/2014-summary/"/>
    <updated>2015-01-01T21:03:18+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/01/2014-summary</id>
    <content type="html"><![CDATA[<p>2014年对于我来说是重要的一年，因为一方面我刚好年满30岁了，另一方面我的家庭生活和工作都经历了很大的变化。值得总结的包括：</p>

<ol>
<li>通过分享，进一步提高了自己的技术影响力</li>
<li>创业进一步取得成绩</li>
</ol>


<h2>技术分享</h2>

<p>2014年，我的技术分享包括：</p>

<ol>
<li>在自己的博客上发布了58篇技术文章。</li>
<li>在InfoQ网站发表了35期“iOS开发周报”。</li>
<li>在《程序员》杂志和CSDN网站上发表文章4篇，分别是《从Facebook看移动开发的发展》、《iOS应用安全开发概述》、《WWDC2014，苹果的“软件”发布会》、《那些好用的iOS开发工具》。</li>
<li>在InfoQ网站和《架构师》迷你书上发表文章4篇，分别是 《作为码农，我们为什么要写作》、《ReactiveCocoa &ndash; iOS开发的新框架》、《深入理解Tagged Pointer》、《专访《iOS测试指南》作者羋峮》。</li>
<li>受朋友邀请，在深圳微信、人人网和豆瓣做了三场技术分享，分享的主题都是：《深入Objective-C对象模型》。</li>
<li>11月2日在CSDN主办的MDCC移动开发者大会上做了一次分享，主题是：“猿题库的流量优化之路”。</li>
<li>12月20日在InfoQ主办的ArchSummit北京上做了一次分享，主题是：“猿题库客户端的技术细节”。</li>
<li>完成了图书<a href="https://github.com/tangqiaoboy/iOS-Pro">《iOS开发进阶》</a>的写作，100本签售版很快卖光，不过正式出版得到2015年1月中旬。</li>
<li>开源了两个猿题库客户端的iOS基础库：<a href="https://github.com/yuantiku/YTKKeyValueStore">YTKKeyValueStore</a> 和 <a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a>，分别得到了400多和700多的star。</li>
<li>微信公共帐号：iOSDevTips 发表了将近100篇推送，得到了10000多的粉丝。我的微博 <a href="http://www.weibo.com/tangqiaoboy">@唐巧_boy</a> 分享了上百条技术内容，得到了13000多的粉丝。</li>
</ol>


<p>年初的时候我还会怀疑自己的影响力，但现在已经习惯了成为iOS界的“大V”了。微博上分享技术类信息转发常常超过50次，也会常常被人@提醒来请教问题。</p>

<p>那我是如何树立起自己的技术影响力的呢？这其实主要是通过写博客的方式。我没有想到，从我2010年底开始学iOS开发，到现在短短4年时间，通过博客我能够获得这么大的影响力。现在我也看到越来越多的人加入到技术分享的行列中，用原创的技术博客给整个社区带来知识的分享，同时收获自己的成长和影响力。</p>

<h2>关于创业</h2>

<p>我们今年顺利拿到了<a href="http://tech.sina.com.cn/i/2014-07-22/11209510273.shtml">C轮1500万美元的融资</a>，估值达到1.25亿美元。我自己的创业感悟就是觉得决策团队非常牛逼，另外大家的执行力都非常强。我今年除了做日常的iOS开发外，还承担了一些别的事情，包括：</p>

<ul>
<li>指导了一位iOS开发零基础的实习生，现在他能够独立的进行开发，非常高兴看着他取得这么大的进步。</li>
<li>指导了一位实习生完成了Latex渲染引擎在移动端的移植（但其实主要是他的工作出色），这个工作使得我们的客户端在显示公式上和市面上所有同类应用相比具有决定性优势。</li>
<li>承担了校园招聘的组织工作，大家都被出面试题搞得焦头烂额的，不过最终我们还是搞定了，也收获了不少很有潜力的应届生。</li>
<li>开始负责小猿搜题这个项目，开始更多地思考产品方面的东西，更多的沟通工作，也开始为更多事情焦虑。</li>
</ul>


<p>负责小猿搜题项目对我是一个新的挑战，之前我作为一个iOS程序员，基本上都只需要专注于技术层面上的实现。而现在我不但需要参与产品的讨论，也需要做更多的组织沟通工作。我们团队仍然保持着强大的执行力，小猿搜题从7月底立项到9月底上线只经历了短短2个月时间。而我们的评测数据显示，我们在搜索质量上毫不逊于竞争对手。但我们需要改进的事情还有很多，希望小猿搜题的用户量和活跃度能够超过猿题库，成为又一个拥有海量初高中生用户的产品。</p>

<h2>读书</h2>

<p>今年为了更加深入的掌握Swift的函数式编程特性，学习了Scala语言以及coursea上的Funtional Programming相关的课程，不过仍然没有找到感觉。我感觉可能后面多写一些Swift程序才能有深入的理解。</p>

<p>今年也读了不少产品的书，包括《我的互联网方法论》、《思考的技术》、《失控》、《定位》等。</p>

<h2>个人Milestone</h2>

<ul>
<li>完成 《iOS开发进阶》的写作</li>
<li>创业完成C轮融资，开始负责小猿搜题项目</li>
<li>有了宝宝</li>
</ul>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2015-01-01T21:03:18+08:00" pubdate data-updated="true">Jan 1<span>st</span>, 2015</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第35期]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/31/ios-weekly-35/"/>
    <updated>2014-12-31T22:03:13+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/31/ios-weekly-35</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/12/developer-favorite-swift-skills">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：90后CEO的开源心得、iOS8 企业应用部署Bug、盘点开发者最喜爱的Swift技巧、iOS开发的一些奇巧淫技等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.cocoachina.com/programmer/20141224/10747.html">《90后CEO的开源心得：Github 2500 star是如何炼成的》</a>：如果你是一名 iOS 开发者同时还是 Github 的重度使用者，那么你多半见过这个项目：PNChart，一个提供带动画的图表控件。截止到目前为止，PNChart 在 Github上 的 star 数已经超过2500，是一个备受开发者喜爱的 iOS 第三方开源库。该开源库的作者周楷雯，在本文中分享了如何打造一个成功的iOS开源项目。</p></li>
<li><p><a href="http://www.36kr.com/p/218161.html">《苹果获反向AirPlay专利，在iPhone上同步播放Apple TV内容》</a>：苹果刚刚获得了美国专利与商标局授予的一项新专利，这项专利可以让内容在便携式设备上同步显示，即可以让 Apple TV 这样位置固定的设备上播放的内容，实时同步到 iPhone、iPad 等 iOS 设备上。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://thierry-xing.iteye.com/blog/2119241">《iOS8 企业应用部署Bug》</a>：使用iOS企业部署（In-House Distribution）方式进行应用升级时，在 iOS8 下无法成功，删除应用再重新安装也不行。如果你也遇到了这个问题，那么可以看看作者是如何解决的。需要说明的是，该Bug在 iOS 8.1.2 更新中得到了修复。</p></li>
<li><p><a href="http://www.csdn.net/article/2014-12-25/2823312-favorite-swift-tips-and-tricks">《盘点开发者最喜爱的Swift技巧》</a>：Swift 发布才半年左右，却已深得众多开发者的青睐，也有了许多学习资源、项目和开发工具。在本文中，来自objc.io、LinkedIn等各个公司的软件工程师及资深开发者总结了自己在接触 Swift 过程中最喜爱的贴士与技巧。</p></li>
<li><p><a href="http://www.jianshu.com/p/50b63a221f09">《iOS开发的一些奇巧淫技》</a>：作者分享了一些 iOS 开发中涉及的小技巧。</p></li>
<li><p><a href="http://blog.nswebfrog.com/2014/12/22/swift-script/#541841-tsina-1-77759-d0fc3b3b40d03e6b36d60be81253e42e">《Swift 脚本编写》</a>：作为苹果新一代的编程语言，Swift 不仅可以用来开发 iOS 应用，还可以用来编写脚本，来完成 OS X 下的一些自动化的工作。终于可以用我们熟悉的语言来写自动化脚本了，想想是不是就觉得心里有点小激动呢^_^。本文从一个Hello World脚本开始，介绍了如何用Swift完成脚本编写工作。</p></li>
<li><p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=645">《一步一步教你写classdump》</a>：最近刚读完《Mac OS X and iOS Internals》的前几章，也想练练手，写tweak，app也烦了，基于上述原因就试着写了这个demo。虽然这些功能都可以通过 otool 和 classdump 去实现，但也算是对 macho 文件格式的一种学习吧。</p></li>
<li><p><a href="https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques">《iOS-Core-Animation-Advanced-Techniques》</a>：一本不错的翻译图书，介绍了关于Core Animation的各方面的知识。</p></li>
<li><p><a href="https://github.com/ipader/SwiftGuide">《Swift语言指南》</a>：这份指南汇集了 Swift 语言主流学习资源，并以开发者的视角整理编排。</p></li>
<li><p><a href="http://imtx.me/archives/1917.html">《Swift 项目使用 CoreData 可能会碰到的 32 位系统问题》</a>：最近在项目中偶然发现了一个问题，那就是 Swift 的 CoreData 在 32 位系统下与 64 位系统下表现不一致的问题。简单的说：如果你的 CoreData 模型有一个声明为 Boolean 的 Attribute，并且在代码中使用 NSNumber 来包装（而不是Bool）的话，很可能会遇到这个问题。作者介绍了该问题的细节和解决办法。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/rsms/peertalk">peertalk</a>：peertalk 是一个支持 iOS 与 Mac 通过 USB 相互通讯的开源库。 Duet Display 基于此实现了将 Mac 界面呈现到 iOS 设备上。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-12-31T22:03:13+08:00" pubdate data-updated="true">Dec 31<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第34期]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/21/ios-weekly-34/"/>
    <updated>2014-12-21T19:56:06+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/21/ios-weekly-34</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/12/ios-code-android-app">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：浅谈 iOS 版本号、UIScrollView 实践经验、设计优雅的移动游戏、如何把iOS代码编译为Android应用等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://tech.sina.com.cn/mobile/n/n/2014-12-12/doc-iavxeafr6871711.shtml">《iPhone 6/6 Plus中国销量曝光：单月销量650万》</a>：据iSuppli Corp.中国研究总监王阳爆料，iPhone 6和iPhone 6 Plus在国内受欢迎的情况大大超过预期，苹果在中国的单月销量在11月超过了650万台，全年在中国的销量将超过4000万台。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://vombat.tumblr.com/post/60530544401/date-parsing-performance-on-ios-nsdateformatter">《 Date parsing performance on iOS》</a>：文章介绍了一个关于格式化时间的”黑科技“，作者使用 sqlite 替换 NSDateFormatter，提高了16倍的转换效率。</p></li>
<li><p><a href="http://club.fir.im/topic/548c09a1f6de25850440afd7">《浅谈 iOS 版本号》</a>：FIR.im 一直在尽量兼容不同使用习惯的版本号形式, 但是在使用中我们发现好多开发者对怎么更好的用版本号来标示应用很陌生。这是篇基础文章，简单介绍 iOS 的版本号。</p></li>
<li><p><a href="http://tech.glowing.com/cn/practice-in-uiscrollview/">《UIScrollView 实践经验》</a>：UIScrollView（包括它的子类 UITableView 和 UICollectionView）是 iOS 开发中最常用也是最有意思的 UI 组件，大部分 App 的核心界面都是基于三者之一或三者的组合实现。UIScrollView 是 UIKit 中为数不多能响应滑动手势的 view，相比自己用 UIPanGestureRecognizer 实现一些基于滑动手势的效果，用 UIScrollView 的优势在于 bounce 和 decelerate 等特性可以让 App 的用户体验与 iOS 系统的用户体验保持一致。本文通过一些实例讲解 UIScrollView 的特性和实际使用中的经验。</p></li>
<li><p><a href="http://objccn.io/issue-18-1/">《设计优雅的移动游戏》</a>：设计手机游戏是一个有趣的主意，理论上，做智能手机或者平板电脑游戏与其他平台游戏设计没有根本的不同。手机游戏在传统系统属性上与其他类型以及平台极其相似，无论你想创造一个开心农场，使命召唤还是国际象棋。但实践中，想要创建一个成功的手机游戏完全是另一回事。有很多其他的顾虑，从市场饱和及难以被发现，到玩法定型及设备的尺寸因素等。由于这些原因，作为一个设计师来说创造一个优秀的手机游戏就像在玩“困难模式”。文章介绍了手机游戏的两个特征：游戏时长和交互方法，另外介绍了几种适用于移动平台的系统设计方法。本文译者：<a href="http://diwu.me">@唯木念</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-2/">《Metal》</a>：Metal 是针对 iPhone 和 iPad 中 GPU 编程的高度优化的框架。其名字来源是因为 Metal 是 iOS 平台中最底层的图形框架 (意指 &ldquo;最接近硬件&rdquo;)。该框架被设计用来实现两个目标: 3D 图形渲染和并行计算。这两者有很多共同点。它们都在数量庞大的数据上并行运行特殊的代码，并可以在 GPU 上执行。本文介绍了 Metal 的好处以及使用基础。本文译者：migrant。</p></li>
<li><p><a href="http://objccn.io/issue-18-3/">《Scene Kit》</a>：在 WWDC 2012，Apple 向 OS X 开发者们介绍了 Scene Kit，这个 Cocoa 下的 3D 渲染框架。在第一版通用 3D 渲染器发布后，一年内又陆续增加了像 shader (着色器) 修改器、节点约束、骨骼动画等几个强大的特性 (随 Mavericks 发布)。今年，Scene Kit 变的更加强大，支持了粒子效果、物理引擎、脚本事件以及多通道分层渲染等多种技术，而且，对于很多人来说更关键的是，它终于可以在 iOS 中使用了。本文介绍了Scene Kit的概要知识，以及如何使用它来写游戏。本文译者：<a href="http://blog.sunnyxx.com">孙源</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-4/">《游戏中的多点互联》</a>：多点互联是苹果的一个传输无关的网络框架，提供网络的发现、创建和通信功能。MPC 的关键用途在于创建临时网络中的点对点连接，而不需要考虑天气、无线、蓝牙等各种因素，只需要有个人网络就行。一旦创建之后，各个节点可以安全地共享消息、数据和文件资源。大部分的游戏都更适合用 GameKit 开发，它有很多直接使用 MPC 实现的游戏相关的封装。不过作为 MPC 的进阶手册，本文主要涉及 MPC 的各种使用技巧。本文译者：<a href="http://blog.callmewhy.com">汪海洋</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-5/">《虚拟音域 &ndash; 声音设计的艺术》</a>：由于声音占据我们日常生活的很大部分，所以声音在游戏开发中也越来越重要。然而，要实现完全身临其境的虚拟现实，最大的挑战之一就是设计逼真的声音环境。如果你身处一个虚拟森林中，但却听不到树叶的沙沙声，也听不到昆虫的鸣叫声，你就不会感觉到真实。在某些方面，音效设计是吃力不讨好的活计。你什么都正确的话，没人会注意到这些，但是一旦你做错了什么，人们百分之百会注意到。这是一项痛苦，细节导向，但又几乎被忽略的工作。但是，当你捕捉到一种美妙的声音体验或真实的声音环境时，你会感觉到一种乐趣，这种乐趣很大程度上弥补了工作辛苦、收获甚少的不足。本文介绍了音效各方面的知识，包括：记录声音、麦克风、数码音频软件、拟音、音频滤波器、混合音效等知识。本文译者：<a href="http://blog.sina.com.cn/u/1867019351">树叶</a></p></li>
<li><p><a href="http://madebymany.com/blog/continuous-integration-for-ios-development">《Continuous Integration for iOS Development》</a>：文章介绍了如何基于Xcode的Bot做持续集成。</p></li>
<li><p><a href="http://nshipster.com/nsundomanager/">《NSUndo​Manager》</a>：本文介绍了 NSUndoManager 的使用。NSUndoManager 可以用来做一些撤销操作。</p></li>
<li><p><a href="http://www.jianshu.com/p/6313025349a9">《视频特效制作》</a>：文章介绍了一些视频特效制作方法，包括给视频添加边框、给视频添加水印、给视频添加动画、做出3D效果、视频推进效果等技术细节。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://boolan.com/lecture/1000001076#0-tsina-1-39436-397232819ff9a47a7b7e80a40613cfe1">《如何把iOS代码编译为Android应用》</a>：OurCoders.com站长 <a href="http://www.weibo.com/tinyfool?from=feed&amp;loc=nickname">@tinyfool</a>介绍了他们通过将Objective-C底层移植到Android平台，最终把iOS代码编译为Android应用的过程。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/mutualmobile/MMWormhole">MMWormhole</a>：MMWormhole 是一个方便开发者在 iOS 应用与 iOS extensions 之间交换数据的开源框架。</p></li>
<li><p><a href="https://github.com/rickytan/RTImageAssets">RTImageAssets</a>：RTImageAssets 是一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 <code>Ctrl+Shift+A</code> 即可自动生成两张低清的补全空位。当然，如果你对图片质量要求不高的话，你也可以从 @2x 的图生成 @3x 版本。</p></li>
<li><p><a href="https://github.com/poolqf/PQFCustomLoaders">PQFCustomLoaders</a>：PQFCustomLoaders 提供了高质量的、定制化的加载进度条。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-12-21T19:56:06+08:00" pubdate data-updated="true">Dec 21<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《iOS开发进阶》即将出版]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/07/about-ios-pro-book/"/>
    <updated>2014-12-07T19:05:52+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/07/about-ios-pro-book</id>
    <content type="html"><![CDATA[<p>关注我博客的人也许发现了，除了每周一期的InfoQ约稿的《iOS开发周报》，我已经很久没有写iOS方面的原创文章了。这主要的原因是：我把周末的时间都用来筹划一本iOS方面的书，这本书叫做《iOS开发进阶》。下面我就给大家介绍一下此书。</p>

<p><img src="https://raw.githubusercontent.com/tangqiaoboy/iOS-Pro/master/BookCover.jpg" alt="" /></p>

<h3>我的构思</h3>

<p>还记得几年前，我在学习iOS开发入门时，发现同行间的交流环境也比较差，自己提高的过程很慢。在出版物方面，我也一直苦于没有找到一本iOS开发进阶方面的图书。随着移动互联网的快速发展，移动开发的人才也慢慢增多，现在同行间的交流环境相比以前好了很多。但是在国内，仍然没有一本原创的iOS进阶方面的图书出现。因此，我萌生了写作的想法。</p>

<p>写作最开始首先是构思的过程，我回顾自己维护多年的iOS开发博客，从里面100多篇关于iOS开发的原创文章中，整理出来涉及iOS开发进阶提高的3个主要的方向：工具、实践、理论。</p>

<p>于是，我围绕着上述的三个方向，把以前的文章作为基础，再进一步完善相关内容，让各自零散的知识点能够衔接起来，成为一个完整的体系。整个写作的过程是痛并快乐着的，为了保证知识完整，最终书稿中有超过50%是新增加的内容。</p>

<p>从知识的难度上，工具、实践、理论这三大部分的难度逐步提高，以保证读者能慢慢适应。而三大部分内容其实各自独立，有经验的读者也可以按兴趣点或具体需求，跳跃性地阅读此书。</p>

<h3>定位</h3>

<p>《iOS开发进阶》定位于帮助那些iOS开发刚刚入门的同行快速提高自己的水平，适用于至少有3个月以上iOS开发经验的读者。不适合没有任何iOS开发基础的读者阅读。</p>

<p>对于iOS熟练开发者，此书也能补充其知识点的可能的盲区，使其相关知识体系更为完善。</p>

<h3>内容介绍</h3>

<p>《iOS开发进阶》分工具、实践、理论三大部分：</p>

<ul>
<li>第一部分介绍iOS开发的常用工具</li>
<li>第二部分介绍iOS开发中的一些常见的实践经验</li>
<li>第三部分介绍iOS开发中涉及的原理。</li>
</ul>


<p>如果把成为iOS开发高手比作武林小说中的高手修炼的话，工具、实践和理论的学习就分别对应兵器，招式和内功的修炼。此书希望通过这三方面的综合讲解，以全面提高开发者的技能水平。</p>

<p>好的工具可以使得开发效率成倍的增长。此书第一大部分介绍了iOS开发中的各种工具或服务，通过使用它们，可以极大地方便我们的日常开发和维护，提高开发效率。</p>

<p>一个入门之后的iOS开发者，需要的是更深入的实际开发经验的分享。此书第二部分选择了iOS开发几个常见的实际场景，进一步介绍各种iOS开发进阶的实战技巧。对于一些比较零散的知识技巧，作者也在实战小技巧集锦中进行了介绍。</p>

<p>如果把前两部分比作工具和招式的修炼的话，此书第三部分则是内功的修炼。在第三部分中，此书详细分析了iOS开发涉及的语言对象模型，从而能够帮助读者深入理解语言的各种特性和限制。</p>

<h3>出版时间</h3>

<p>《iOS开发进阶》计划在本月下旬出版，定价65元。但是你也知道，图书一般都是会打折出售的，我估计在京东上应该能够以8折左右的价格购买到它。</p>

<h3>一些评价</h3>

<p>我邀请了一些朋友审阅了《iOS开发进阶》初稿，他们的评价如下：</p>

<h4>OurCoders站长，资深iOS开发者 <a href="http://www.weibo.com/u/1400229064?topnav=1&amp;wvr=6&amp;topsug=1">tinyfool</a>:</h4>

<blockquote><p>2008年苹果发布第一代iOS SDK至今，已经有6个年头，整个移动开发的热潮也5、6年了，虽时有人说热潮将尽，但人才市场里iOS开发者仍旧非常短缺。特别短缺的是专业的优秀的iOS开发者，在各种工具无比先进的年代，一个优秀的开发者比十个一般的开发者都更有价值，也可以获得相应的回报。</p>

<p>我一直在说，每一个已经在行业里面的开发者，不应该满足于自己是一个可以干活的人，而应该有所追求，要变成行业的佼佼者，这不仅是因为我们都想有更高的收入，而且人本身就该有追求，特别是当你处在这个迅速变化，生机勃勃的行业中。</p>

<p>这本书的作者唐巧在我心中，本身就是我们这个行业中，非常优秀的开发者。但是更值得称赞的是，他提供了这么一本书，让我们也有机会变成更专业的，更优秀的开发者，善莫大焉。</p></blockquote>

<h4>objccn.io创始人、《Swifter》作者 王巍(<a href="http://www.weibo.com/u/2210132365?topnav=1&amp;wvr=6&amp;topsug=1">onevcat</a>)：</h4>

<blockquote><p>作为一本面向中高级 iOS 开发者的书籍，《iOS开发进阶》一书汇总了很多进阶级开发时所常用和必备的知识。阅读本书不但能帮你借助各类工具大幅提升开发效率，也能加深对 iOS 及 Objective-C 背后机制的理解。如果你想在 iOS 开发的道路上百尺竿头，更进一步的话，这本凝聚了作者多年开发实战经验的进阶级图书将是你不可错过的伙伴！</p></blockquote>

<h4>微信iOS客户端团队负责人 lylechen</h4>

<blockquote><p>唐巧是国内较早从事iOS开发的资深工程师，并在个人博客、InfoQ、公众号等持续更新技术文章，我们也曾邀请他给微信iOS团队分享相关经验。目前市面上缺乏书籍对Objective-C高级特性、Xcode插件等做全面剖析和整理，《iOS开发进阶》很好地填充了此处的空白，相信对广大iOS开发者会有很好的帮助。</p></blockquote>

<h4>网易新闻客户端技术负责人 王聪(<a href="http://www.weibo.com/u/1640364052?topnav=1&amp;wvr=6&amp;topsug=1">robaggio</a>)</h4>

<blockquote><p>本人有幸曾和作者共事，当时他还负责微博后台研发。4年后唐巧转为iOS开发，并成为国内资深专家，主持研发的App也深受市场好评，作者的工作经历本身就是一次完美的『iOS开发进阶』。如果你刚刚提交了第一款AppStore应用，那本书的第一部分定会让你惊叹原来有这么多高效的工具可以帮你；如果你已有一两年iOS开发经验，那你一定会对本书第二部分的各种实战技巧相见恨晚；本书最后部分的底层原理是你成为资深工程师的必备课程。推荐给所有想『进阶』自己的开发者！</p></blockquote>

<p>另外，<a href="http://book.douban.com/subject/25826578/">《MacTalk人生元编程》</a>的作者<a href="http://www.weibo.com/u/1406320502?topnav=1&amp;wvr=6&amp;topsug=1">池建强</a>为本书写了非常精彩的推荐序，光是序言的标题《人生如长跑，成长如进阶》就让我觉得既富有哲理，“进阶”二字又和书名相呼应。但我决定暂不把序言放到网上，给读者一些神秘感。</p>

<h3>一些感悟</h3>

<p>虽然已经有100多篇原创博文作为基础，但是整个写作过程我丝毫感受不到轻松。一方面是由于创业，自己的时间有限，写作断断续续。另一方面，由于自己在微博和微信上被不少同行关注，我自己也有很大的压力想把这本书写得尽量好一些。</p>

<p>最后我看着书稿，虽然觉得还可以写得更多一些，但是就像创业一样，任何事情都需要有一个阶段性成果。我相信当前的内容是足够“干货”的，我也能保证市面上没有第二本相似内容的图书，所以还是想尽快让读者看到这份作品。</p>

<p>希望本书能帮助大家进阶成为 iOS 大牛！</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-12-07T19:05:52+08:00" pubdate data-updated="true">Dec 7<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第33期]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/01/ios-weekly-33/"/>
    <updated>2014-12-01T21:31:30+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/01/ios-weekly-33</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/12/google-inbox-reuse-code">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Google Inbox 是如何跨平台重用代码的、iOS8.1.1系统被越狱、SizeClass 和AutoLayout教程等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/it/apple/2014-11-29/05179836762.shtml">《乔布斯去世后仍获141项专利》</a>：据《麻省理工技术评论》称，尽管苹果公司联合创始人史蒂夫·乔布斯过世已三年有余，但直到今天仍陆续有新的专利归于他名下。截至目前已被授予乔布斯的专利总数共有458项。</p></li>
<li><p><a href="http://tech.sina.com.cn/t/2014-11-27/doc-iavxeafr5326713.shtml">《iPhone 6在俄售价提高25%》</a>：近日16G版iPhone 6在俄罗斯官网上的售价提高了25%，从31990卢布提价至39990卢布(约5215元人民币)。此前，俄罗斯的iPhone 6售价是全欧洲最低，因此经常有特地去俄罗斯购买iPhone 6的游客。</p></li>
<li><p><a href="http://tech.sina.com.cn/t/2014-11-30/doc-icczmvun0757922.shtml">《iOS8.1.1系统被越狱》</a>：某团队正式对外发布了iOS 8.1.1完美越狱工具，支持 iOS 8.1.1 版本。</p></li>
<li><p><a href="http://coolshell.cn/articles/12136.html">《Google Inbox 是如何跨平台重用代码的？》</a>：开发一个移动应用在当下并不是一件容易的事情。如果想要获得最多的用户，你的应用通常需要覆盖 iOS, Android, 和 Web 三大平台。这就意味着同一个应用需要开发三个版本，使用 Objective-C 或者 Swift 开发 iOS 版本，使用 Java 开发 Android 版本，使用 JavaScript/CSS/HTML5 开发 Web 版本。工作量增大的同时也意味着有更多的 bug 需要修复。本文介绍了 Google 在发布 Google Inbox 时，使用 J2Objc 实现了70%的代码跨平台复用。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://limboy.me/ios/2014/11/28/facebook-app-headers.html">《读 Facebook App 头文件的一些收获》</a>：最近在看一些 App 架构相关的文章，也看了 Facebook 分享的两个不同时期的架构（2013 和 2014），于是就想一窥 Facebook App 的头文件，看看会不会有更多的收获，确实有，还不少。作者分享了从头文件中获取到的一些信息。</p></li>
<li><p><a href="http://www.jianshu.com/p/3d6b2341fd83">《SizeClass 和AutoLayout教程3》</a>：文章翻译自《iOS8 by tutorials》的第一章，以开发一个天气应用为例子，介绍了SizeClass 和AutoLayout相关知识。译者：@<a href="http://weibo.com/1438670852/profile?topnav=1&amp;wvr=6">叶孤城___</a>。</p></li>
<li><p><a href="http://www.jianshu.com/p/e72e957497b3">《SizeClasss和AutoLayout教程4》</a>：文章翻译自《iOS8 by tutorials》的第一章，介绍了如何在不同的 SizeClass 给同一个label设定不同的字体大小和样式。译者：@<a href="http://weibo.com/1438670852/profile?topnav=1&amp;wvr=6">叶孤城___</a>。</p></li>
<li><p><a href="http://www.jianshu.com/p/85148630ec9c">《如何做出炫酷的卡片动画1》</a>：作者介绍了有关卡片动画的研究和实现。</p></li>
<li><p><a href="http://chun.tips/blog/2014/11/19/zou-jin-watchkit-framework/">《走进 WatchKit Framework》</a>：作者整理了关于 WatchKit Framework API的知识点。</p></li>
<li><p><a href="http://chun.tips/blog/2014/11/28/core-data-ban-ben-qian-yi-jing-yan-zong-jie/">《Core Data 版本迁移经验总结》</a>：大家在学习和使用Core Data过程中，第一次进行版本迁移的经历一定是记忆犹新，至少我是这样的，XD。弄的不好，就会搞出一些由于迁移过程中数据模型出错导致的Crash。作者在本文中总结了一下Core Data版本迁移过程中的经验。</p></li>
<li><p><a href="http://www.raywenderlich.com/85080/beginning-alamofire-tutorial">《Beginning Alamofire Tutorial》</a>：Alamofire 是 AFNetworking 的作者 Mattt Thompson，用 Swift 实现的网络基础库。本文介绍了其基本的使用方法。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.imooc.com/view/242">《一起来做价值百万的Apple Watch App：分歧终端机》</a>：视频展示了如何使用WatchKit，如何通过MVC的绑定来处理用户事件，如何制作动画的功能。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/victorjiang/MobileDataSwitch">MobileDataSwitch</a>：MobileDataSwitch 使用 CoreTelephony 中的私有接口，切换移动网络开关。作者还添加了App Extensions支持，可以在下拉通知 Today 中增加快速设置开关。</p></li>
<li><p><a href="https://github.com/tapwork/HeapInspector-for-iOS">HeapInspector</a>：HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-12-01T21:31:30+08:00" pubdate data-updated="true">Dec 1<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第32期]]></title>
    <link href="http://blog.devtang.com/blog/2014/11/24/ios-weekly-32/"/>
    <updated>2014-11-24T21:42:41+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/11/24/ios-weekly-32</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/11/1yuan-apple-app-store-pricing">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：“1元”正式成苹果中国区应用商店新定价、Apple Watch人机界面指南、Apple WatchKit 初探等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/it/apple/2014-11-18/06419801088.shtml">《苹果公司发布iOS 8.1.1升级补丁》</a>：11月18日凌晨消息，苹果公司已对上个月针对iPhone、iPad和iPod Touch发布的iOS 8.1操作系统正式推出了iOS 8.1.1升级补丁。iOS 8.1.1将可改善基于iOS 8系统运行的、使用A5芯片的较老设备的表现，也就是指iPad 2和iPhone 4s。除了发布iOS 8.1.1以外，苹果公司还发布了OS X 10.10.1升级补丁以修复WiFi网络表现及其他问题。</p></li>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-11-21/16439814574.shtml">《“1元”正式成苹果中国区应用商店新定价》</a>：11月19日，苹果中国区App Store应用商店出现1元应用，当时曾有消息称这是短期促销行为，不过目前苹果公司已经正式宣布，人民币1元及3元将是中国区应用商店的新定价，作为一个永久价格选项。</p></li>
<li><p><a href="https://github.com/CocoaPods/CocoaPods/pull/2835">《CocoaPods将要支持Swift》</a>：从 CocoaPods 的一个pull request中，我们了解到著名的 iOS 依赖管理工具 CocoaPods 将要支持 Swift 语言。</p></li>
<li><p><a href="http://it.sohu.com/20141121/n406233892.shtml">《AppleWatch需求被低估 苹果股价创历史新高》</a>：11月21日，据外国媒体报道，在经过新一轮的多名华尔街分析师上调公司目标股价之后，再加上摩根士丹利认为一些投资者低估了苹果智能手表Apple Watch的市场需求预期，苹果周四股价呈现出上涨局面。苹果股价在当周曾达到历史新高的117.28美元。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://vdisk.weibo.com/s/yWUvUXSZiJFiv">《Apple Watch人机界面指南（中文版）》</a>：苹果于11月19号放出了Apple Watch的官方设计指南。这是由<a href="http://weibo.com/uiteam?from=feed&amp;loc=nickname">微博无线设计团队</a>翻译的中文版指南。</p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-11-20-build-custom-control-in-swift.md">《使用 Swift 构建自定义（且“可设计”的）控件》</a>：大约两年前，我写了一篇关于在 iOS 上构件自定义控件的教程。那篇教程获得了社区的高度赞赏，所以我决定将其用 Swift 更新并加入 Designable/Inspectable 属性以支持直接在 Interface Builder 里调整控件的外观。</p></li>
<li><p><a href="http://onevcat.com/2014/11/watch-kit/">《Apple WatchKit 初探》</a>： 11月19日，Apple 发布了第一版的 Watch Kit 的 API，对于开发者来说，这款新设备的一些更详细的信息也算是逐渐浮出水面。可以说第一版的 WatchKit 开放的功能总体还是令人满意的。Apple 在承诺逐渐开放的方向上继续前进。本文介绍了Watch app 架构和主要的类等相关知识。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/webkit-zhi-shu-ju-gong-xiang">《WatchKit 之 数据共享》</a>：本文介绍了如何使 Watch App 与 iOS App 之间进行数据共享。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/watchkit-zhi-dao-hang">《WatchKit 之 导航》</a>：在 Watch App 中，当涉及到多个界面跳转时，我们共有两种导航方式可使用：<code>Hierarchical</code> 与 <code>Page-based</code>。本文将对这两种导航方式以及 Modal 展现方式做简单的介绍。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://github.com/lucholaf/Auto-Importer-for-Xcode">Auto-Importer</a>：Auto-Importer是一个自动导入类对应的头文件的Xcode插件。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/Carthage/Carthage">Carthage</a>：Carthage是一个去中心化的依赖管理工具。</p></li>
<li><p><a href="https://github.com/coteditor/CotEditor">CotEditor</a>：CotEditor是一个OS X下的开源的纯文本编辑器。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-11-24T21:42:41+08:00" pubdate data-updated="true">Nov 24<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第31期]]></title>
    <link href="http://blog.devtang.com/blog/2014/11/19/ios-weekly-31/"/>
    <updated>2014-11-19T22:09:57+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/11/19/ios-weekly-31</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/11/objective-c-runtime">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：黑幕背后的__block修饰符、刨根问底Objective－C Runtime、Flashlight等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-11-14/21329792202.shtml">《三名iOS系统恶意程序制作者被抓获》</a>：11月14日据首都网警微博报道，北京市公安局将iOS系统恶意程序的三名制作者抓获，涉案网站被关停。11月初，有研究人员在iOS系统中发现了一个名为Wirelurker的漏洞，可以让iPhone在不越狱的情况下感染病毒，并且有可能已经影响了数十万用户。</p></li>
<li><p><a href="http://www.tuicool.com/articles/zIFbQ3r">《第三方SSD的电脑升级Yosemite需要关闭kext signing》</a>：苹果在本次升级里为 Yosemite 增加了一个新型的安全插件“kext signing”，存储在 NVRAM/PRAM 里，未经苹果认证的第三方 SSD 硬盘都将被这个插件过滤掉，所以会有用户在升级后开机遇到灰叉的情况，这时你可以使用最新版的Trim Enabler 3.3 ，升级前可提前关闭“kext signing”。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://chun.tips/blog/2014/11/13/hei-mu-bei-hou-de-blockxiu-shi-fu/">《黑幕背后的__block修饰符》</a>：文章通过使用 <code>clang -rewrite-objc</code> 命令，分析了 <code>__block</code> 修饰符是如何做到改变引用的变量的值。</p></li>
<li><p><a href="http://t.cn/R7meOzE">《刨根问底Objective－C Runtime（3）－ 消息 和 Category》</a>：文章通过一道习题，利用分析Objective-C实现源代码，讲解了Objective-C的消息和Category的实现原理。</p></li>
<li><p><a href="http://t.cn/R7melvT">《刨根问底Objective－C Runtime（4）－ 成员变量与属性》</a>：本篇笔记主要是讲述Objective－C Runtime的成员变量和属性。</p></li>
<li><p><a href="http://nshipster.cn/uialertcontroller/">《UIAlert​Controller》</a>：你知道 UIAlertView、UIActionSheet (以及它们各自的 delegate protocols) 在 iOS 8 中已经被废弃了吗？本文章的主题就是 UIAlertController，向大家展示如何替换旧的 alert，以及这些操作方法的高级扩展。</p></li>
<li><p><a href="http://nshipster.cn/swift-comparison-protocols/">《Swift Comparison Protocols》</a>：Objective-C 让我们对相等性和唯一性的本质慢慢有了带有哲学色彩的思考。为了解救那些不愿意向论文一样的哲理卑身屈膝的开发者，Swift 为此作出了很多改进。在 Swift 中，Equatable 是一个基本类型，由此也演变出了 Comparable 和 Hashable 两种类型。这三个一起组成了这门语言关于对象比较的核心元素。本文介绍了 Swift 中的比较功能。</p></li>
<li><p><a href="http://nshipster.cn/wkwebkit/">《WKWeb​View》</a>：WKWebView 是现代 WebKit API 在 iOS 8 和 OS X Yosemite 应用中的核心部分。它代替了 UIKit 中的 UIWebView 和 AppKit 中的 WebView，提供了统一的跨双平台 API。本文比较了 WKWebView 与 UIWebView 的功能。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/nate-parrott/Flashlight">Flashlight</a>：Flashlight 是为 Spotlight 写插件的非官方框架。</p></li>
<li><p><a href="https://github.com/allenhsu/FlashlightPlugins">FlashlightPlugins</a>：FlashlightPlugins 基于 Flashlight 的中文插件列表。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-11-19T22:09:57+08:00" pubdate data-updated="true">Nov 19<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第30期]]></title>
    <link href="http://blog.devtang.com/blog/2014/11/15/ios-weekly-30/"/>
    <updated>2014-11-15T08:38:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/11/15/ios-weekly-30</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/11/masonry-introduction-practise">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Masonry介绍与使用实践、Objective-C Runtime、iOS APP 架构漫谈、教你用KEYNOTE做出APP原型等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/">《Masonry介绍与使用实践(快速上手Autolayout)》</a>：iPhone6发布之后，我知道使用autolayout势在必行了，这时想起了以前在浏览Github看到过的一个第三方库Masonry。在花了几个小时的研究使用后，我就将autolayout掌握了(重点是我并没有学习任何的官方文档或者其他的关于autolayout的知识)，这就是我为什么要写下这篇文章来推荐它的原因。Masonry是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了并具有高可读性。</p></li>
<li><p><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">《Objective-C Runtime》</a>：因为OC是一门动态语言，所以它总是想办法把一些决定工作从编译连接推迟到运行时。也就是说只有编译器是不够的，还需要一个运行时系统 (runtime system) 来执行编译后的代码。这就是 Objective-C Runtime 系统存在的意义，它是整个OC运行框架的一块基石。本文详细整理了 Cocoa 的 Runtime 系统的知识，它使得 Objective-C 如虎添翼，具备了灵活的动态特性，使这门古老的语言焕发生机。主要内容包括：与Runtime交互、Runtime术语、消息机制、动态方法解析、消息转发、壮的实例变量(Non Fragile ivars)、Objective-C Associated Objects。</p></li>
<li><p><a href="http://t.cn/R7HYfhz">《刨根问底Objective－C Runtime（1）－ Self &amp; Super》</a>：本文通过分析clang重写的Objective-C源码，从而解释Objective-C中的self和super在编译器层面分别是如何处理的。</p></li>
<li><p><a href="http://t.cn/R7QUSUE">《刨根问底Objective－C Runtime（2）－ Object &amp; Class &amp; Meta Class》</a>：本文主要讲述objc runtime中关于Object &amp; Class &amp; Meta Class的细节。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/11/05/ios-architecture2/">《iOS APP 架构漫谈二》</a>：这篇文章简单介绍了一个在编程中非常重要的思想或工具——状态机（State machine）。对大多数计算机专业的家伙们来说，这应该是一门比较难学的课程，里面包含一大堆揪心的名字比如DFA，NFA，还有一大堆各种各样的数学符号,又是编译原理的基础。不过很遗憾，似乎在做完编译原理课程作业之后，很多人再也没有实现过或是用过状态机了。本文通过一个游戏demo来简单描述一下状态机在实践中的应用。</p></li>
<li><p><a href="http://iiiyu.com/2014/10/20/iCloud-and-iCloud-Drive/">《iCloud 和 iCloud Drive》</a>：最近发现很多人对 iCloud 和 iCloud Drive 有些误解，而且还没有看见中文里面有一个比较正确的说法，本文详细讲解了 iCloud Drive 相关的知识。</p></li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5MTg2NDA3MQ==&amp;mid=201175604&amp;idx=1&amp;sn=06882db86c9eacbc0cdca4df6dbdb67b#rd">《教你用KEYNOTE做出APP原型》</a>：WWDC 2014 Session Videos里有个视频Prototyping: Fake It Till You Make It ，在视频中，他们指导大家如何用Keynote做出逼真的交互原型。作者结合这个视频的截图，介绍了如何充分发挥Keynote的特点的做出逼真的交互原型。</p></li>
<li><p><a href="http://www.raywenderlich.com/82706/working-with-json-in-swift-tutorial">《Working with JSON in Swift Tutorial》</a>：文章介绍了在Swift中用原生方式处理JSON的不便之处，并详细介绍了开源库<code>SwiftyJSON</code>的使用。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/coolbeet/CBStoreHouseRefreshControl">CBStoreHouseRefreshControl</a>：一个效果很酷炫的下拉刷新控件。</p></li>
<li><p><a href="https://github.com/zhxnlai/ZLSwipeableView">ZLSwipeableView</a>：ZLSwipeableView是一个方便做出卡片效果的UI库，支持各种卡片的滑动效果。</p></li>
<li><p><a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a>：YTKNetwork 是基于 AFNetworking 封装的 iOS 网络库，提供了更高层次的网络访问抽象。相比 AFNetworking，YTKNetwork 提供了以下更高级的功能：按时间或版本号缓存网络请求内容、检查返回 JSON 内容的合法性、文件的断点续传、批量的网络请求发送、filter和插件机制等。</p></li>
<li><p><a href="https://github.com/iMartinKiss/Objective-Chain">Objective-Chain</a>：Objective-Chain是一个面向对象的响应式框架，作者表示该框架吸收了 ReactiveCocoa 的思想，并且想做得更面向对象一些。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-11-15T08:38:00+08:00" pubdate data-updated="true">Nov 15<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第29期]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/30/ios-weekly-29/"/>
    <updated>2014-10-30T21:34:29+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/30/ios-weekly-29</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/10/apple-ios-app-support-64">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果要求所有iOS新应用2015年2月起支持64位、怎样为iOS8应用制作预览视频、可视化开发 &ndash; IB的新时代等。</p>

<h2>新闻</h2>

<ol>
<li><a href="https://developer.apple.com/news/?id=10202014a">《苹果要求所有iOS新应用2015年2月起支持64位》</a>：苹果通过官方开发中心宣布，从2015年2月1日开始，所有上传至App Store官方商店的新iOS应用都必须支持64位。目前，支持64位的苹果设备包括iPhone 5S及以后的iPhone设备。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://beforweb.com/node/581">《终极指南 &ndash; 怎样为iOS8应用制作预览视频》</a>：说到App Store的改版，最值得设计师、开发者和市场人员关注的大概就是视频预览功能了。官方将其称为“应用预览(App Previews)”，如今已经正式出现在iOS8的App Store当中。自然，已经有一大波设计师和开发者为他们的产品制作了预览视频并通过iTunes Connect上传。坦率的说，如果你也有自己的产品，那么也该开始考虑做这件事了。本文介绍了为iOS8应用制作预览视频技巧和工具。</p></li>
<li><p><a href="http://onevcat.com/2014/10/ib-customize-view/">《WWDC 2014 Session笔记 &ndash; 可视化开发，IB 的新时代》</a>：文章介绍了 Xcode 6 中为 IB 锦上添花的一个特性，那就是实时地预览自定义 view，这个特性让 IB 开发的流程更加直观可视，也可以减少很多无聊的参数配置和 UI 设置的时间。</p></li>
<li><p><a href="http://www.cocoachina.com/swift/20141022/10008.html">《我在开发第一个Swift App过程中学到的四件事》</a>：本文作者Greg Heo，这是他为讲授iOS 8 App Extensions视频教程而实际使用Swift开发了一款App的经验，本是是他开发过程中的心得体验。</p></li>
<li><p><a href="http://imtx.me/archives/1913.html">《让你的 Mac App 支持 OS X Yosemite 的暗色菜单（Dark Menu）》</a>：文章介绍了如何让应用兼容 Yosemite 的暗色菜单。</p></li>
<li><p><a href="http://www.waerfa.com/sketch-skills-series-chapter-one">《玩转 Sketch 系列文章一：进入一个全新的时代》</a>：很多设计师都已经把主要的工作平台彻底迁移到了 Sketch。那么，是什么让他们放下了多年的 Photoshop，转身投入了 Sketch 的怀抱呢？理由很复杂，但用一句话表达：再也找不到比 Sketch 更顺手的设计软件了！对于那些还没有深入接触 Sketch 的同学，本文将是一个入门引导。虽然没有具体某一模块或功能的介绍，但文章从 Sketch 那上百种吸引人的特性中，选出几样与你分享，让你对它有一个大致的了解。</p></li>
<li><p><a href="http://www.raywenderlich.com/79764/custom-subscripting-swift-tutorial">《Custom Subscripting in Swift Tutorial》</a>：文章介绍了在Swift语言中使用自定义下标操作符。</p></li>
<li><p><a href="http://robbiepearce.com/devices">《Fully Scaleable Apple iOS Devices for Sketch》</a>：作者提供了用于设计的iOS设备Sketch资源。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/yuantiku/YTKKeyValueStore">YTKKeyValueStore</a>：YTKKeyValueStore是由笔者开源出来的一个基于sqlite的key-value存储工具。它被使用在了粉笔网、猿题库、小猿搜题三个客户端中后，我发现它不但完全能够满足大多数移动端开发的需求，而且非常适合移动端采用，所以开源出来。</p></li>
<li><p><a href="https://github.com/michaelarmstrong/SuperRecord">SuperRecord</a>：SuperRecord是一个方便在Swift语言中使用CoreData的库。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-30T21:34:29+08:00" pubdate data-updated="true">Oct 30<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第28期]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/22/ios-weekly-28/"/>
    <updated>2014-10-22T21:49:37+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/22/ios-weekly-28</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/10/apple-product-release-conference">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果召开新品发布会、收据验证、Facebook开源AsyncDisplayKit等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://money.163.com/14/1017/10/A8OJTF7700254TI5.html">《苹果召开新品发布会》</a>：北京时间10月17日凌晨1点，苹果在美国加州库比蒂诺总部Infinite Loop园区的Town Hall大会堂如期召开了主题为“久违了（It’s been way too long）”的新品发布会。这也是继苹果iPhone6、iPhone 6 Plus正式发布后，苹果在今年秋季举办的第二场大型发布会。在此次发布会上，苹果正式发布了iPad Air 2、iPad mini 3；视网膜屏iMac；新款Mac mini；以及iOS8.1和Yosemite系统。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.sunnyxx.com/2014/10/14/fp-essential/">《( ) &ndash;> ( )》</a>：<code>() -&gt; ()</code>不是什么表情符号，而是一种高度抽象的编程范式，它表示了一个函数式的编程思想，即值的变化过程。本文从swift语言入手分析，元组，函数，闭包等的设计对它进行解释，并阐释swift语言设计的大局观，最后分享一个Reactive Cocoa作者的Talk中的编程思想。</p></li>
<li><p><a href="http://objccn.io/issue-17-3/">《收据验证》</a>：收据 (Receipts) 是在 OS X 10.6.6 更新后，和 Mac App Store 一起出现的。 iOS 在内购的时候总是需要向服务器提供收据。验证收据的代码部分必须在安全方面高度敏感。如果被避开或者攻击，你就失去了核实用户权限的能力，并且无法验证用户是否购买。因此，让验证收据的代码能够承受黑客的攻击变得至关重要。本文讨论了如何安全地验证收据。</p></li>
<li><p><a href="http://robb.is/working-on/a-hamburger-button-transition/">《如何用Swift做一个不错的按钮变换动画》</a>：文章介绍了如何用Swift语言，采用<code>Core Graphics</code>来完成两个按钮之间的切换动画效果（效果图如下所示）。作者也将相关的代码开源在了<a href="https://github.com/robb/hamburger-button">这里</a>。</p></li>
</ol>


<p> <img src="http://robb.is/img/hamburger-button.gif" alt="" /></p>

<ol>
<li><p><a href="http://imtx.me/archives/1910.html">《适配 iOS 8 时遇到的问题两则：远程推送和 Unwind Segue》</a>：作者介绍了适配 iOS 8 时遇到的问题以及解决方案，值得大家参考。</p></li>
<li><p><a href="http://www.iwangke.me/2014/10/13/Why-Changba-iOS-choose-Mantle/">《为什么唱吧iOS 6.0选择了Mantle》</a>：唱吧6.0一个很重大的修改就是基于Mantle重建(新建)了Model层。文章分享了使用Mantle的决策及执行过程。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/facebook/AsyncDisplayKit">AsyncDisplayKit</a>：AsyncDisplayKit是facebook开源的一个框架，它能让复杂的用户交互效果流畅地显示，facebook使用它开发完成了paper。Facebook也在 <a href="https://code.facebook.com/posts/721586784561674/introducing-asyncdisplaykit-for-smooth-and-responsive-apps-on-ios/">这篇文章</a> 中，详细介绍了AsyncDisplayKit。</p></li>
<li><p><a href="https://github.com/krzysztofzablocki/KZBootstrap">KZBootstrap</a>：一个方便iOS工程初始化的项目，它包含一些推荐的工程设置和工具。</p></li>
<li><p><a href="https://github.com/chenqihui/NewsFourApp">NewsFourApp</a>：一个模仿网易4.0新UI框架的开源项目。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-22T21:49:37+08:00" pubdate data-updated="true">Oct 22<span>nd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第27期]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/12/ios-weekly-27/"/>
    <updated>2014-10-12T16:33:21+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/12/ios-weekly-27</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/10/ios6">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：国内iOS6比例已经低于5%，Apple 发布 Swift 语言和 Xcode 入门视频，Facebook&rsquo;s iOS Infrastructure等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://weibo.com/1708947107/BoBnZ1qy9?mod=weibotime#_rnd1412427404394">《国内iOS6比例已经低于5%》</a>：来自国内友盟的统计以及笔者开发的应用（猿题库）统计结果都显示，国内的iOS6用户比例已经低于5%。</p></li>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-09-27/10059651916.shtml">《苹果关闭iOS 7.1.2验证：iOS 8将无法降级》</a>：在发布iOS 8的两个更新之后，苹果停止了为iOS 7.1.2固件提供签名。这意味着，已经升级至新版iOS 8的用户将无法再降级回iOS 7.1.2。</p></li>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-10-04/08109666982.shtml">《新恶意软件iWorm已感染全球1.7万台Mac电脑》</a>：信息安全研究人员近期发现，全球超过1.7万台Mac电脑已经感染了一种名为“iWorm”的新的OS X恶意软件。这种恶意软件曾使用Reddit网站作为传播媒介，能窃取用户数据，触发多种系统操作，并执行Lua脚本。用户可以通过测试路径<code>/Library/Application Support/JavaW</code>是否存在，在判断是否中病毒。如果OS X找不到这一文件夹，那么Mac电脑就是安全的。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://swift-cheatsheet.co.uk/">《iOS8 Swift Cheat Sheet and Quick Reference Guide》</a>：这份速查表列出了Swift的常见的基本用法。</p></li>
<li><p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=422">《 获取当前安装的所有App》</a>：作者介绍了利用私有API在非越狱的iOS 7和8机器上，获取iOS中安装的所有App的办法。</p></li>
<li><p><a href="http://weibo.com/p/23041889d963070102v39b">《iOS8企业应用部署Bug》</a>：作者发现使用iOS企业部署（In-HouseDistribution）方式进行应用升级时，在iOS8下无法成功，删除应用再重新安装也不行。经过调研，作者发现这个是Apple的bug，并且提供了临时解决办法。</p></li>
<li><p><a href="https://designcode.io/learn">《The best resources for learning iOS design and Xcode》</a>：作者整理了一系列关于iOS 设计和 Xcode 方面的学习资源，并提供邮件订阅。</p></li>
<li><p><a href="http://www.iwangke.me/2014/10/06/how-to-implement-a-core-animation-based-60-fps-ktv-lyrics-view/">《基于Core Animation的KTV歌词视图的平滑实现》</a>：文章介绍了唱吧歌词视图的技术实现细节。</p></li>
<li><p><a href="https://medium.com/swift-programming/15-swift-ios-open-source-projects-you-cannot-ignore-6bd4ac37d7dd">《10 Swift IOS open-source projects you cannot ignore》</a>：文章介绍了10大不能错过的 Swift 开源项目。</p></li>
<li><p><a href="http://www.appdesignvault.com/ios-8-custom-keyboard-extension/#a_aid=mdev">《iOS 8 Custom Keyboard Tutorial: How to Create A Third-Party Keyboard Extension》</a>：文章介绍了如何在iOS8下自定义键盘。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><p><a href="http://www.guomii.com/posts/39029">《Apple 发布 Swift 语言和 Xcode 入门视频》</a>：Apple 在 Swift 官方博客上发布了一段6分钟多的视频，介绍如何从零开始使用 Xcode 套件开发 iOS 应用，非常值得想现在开始学 iOS 开发的朋友一看。</p></li>
<li><p><a href="https://www.youtube.com/watch?v=XhXC4SKOGfQ">《Facebook&rsquo;s iOS Infrastructure》</a>：Facebook在视频中分享了他们的iOS端架构。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/SwiftP2P/SwiftSSL">SwiftSSL</a>：SwiftSSL 是一个基于CommonCrypto的Swift语言的加密库。</p></li>
<li><p><a href="https://github.com/daltoniam/SwiftHTTP">SwiftHTTP</a>：用Swift语言实现的HTTP网络库。</p></li>
<li><p><a href="https://github.com/stephencelis/SQLite.swift">SQLite.swift</a>：SQLite.swift是一个将SQLite3封装成Swift语言的包装库。</p></li>
<li><p><a href="https://github.com/Brimizer/Slidden">Slidden</a>: Slidden是一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-12T16:33:21+08:00" pubdate data-updated="true">Oct 12<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开源一个Key-Value存储工具类]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/03/opensouce-a-key-value-storage-tool/"/>
    <updated>2014-10-03T22:06:18+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/03/opensouce-a-key-value-storage-tool</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>还记得大学刚学数据库那会儿，天真地以为世界上所有的存储都需要用数据库来做。后来毕业后，正值NOSQL流行，那时我在网易参与了网易微博的开发，我们当时使用了有道自己做的“BigTable”— OMAP来存储微博数据，那个时候才发现，其实Key-Value这种简单的存储也能搞定微博这类不太简单的存储逻辑。</p>

<p>相比MYSQL，当数据量上千万后，NOSQL的优势体现出来了：对于海量数据，NOSQL在存取速度上没有任何影响，另外，天生的多备份和分布式，也说数据安全和扩容变得异常容易。</p>

<h2>iOS端的尝试</h2>

<p>后来我从后台转做iOS端的开发，我就尝试了在iOS端直接使用Key-Value式的存储。经过在粉笔网、猿题库、小猿搜题三个客户端中的尝试后，我发现Key-Value式的存储不但完全能够满足大多数移动端开发的需求，而且非常适合移动端采用。主要原因是：移动端存储的数据量不会很大：</p>

<ul>
<li>如果是单机的应用（例如效率工具Clear），用户自己一个人创建的数据最多也就上万条。</li>
<li>如果是有服务端的应用（例如网易新闻，微博），那移动端通常不会保存全量的数据，每次会从服务器上获取数据，本地只是做一些内容的缓存而已，所以也不会有很大的数据量。</li>
</ul>


<p>如果数据量不大的话，那么在iOS端使用最简单直接的Key-Value存储就能带来开发上的效率优势。它能保证：</p>

<ol>
<li>Model层的代码编写简单，易于测试。</li>
<li>由于Value是JSON格式，所以在做Model字段更改时，易于扩展和兼容。</li>
</ol>


<h2>实现方案</h2>

<p>在存储引擎上，2年前我直接选择了Sqlite当做存储引擎，相当于每个数据库表只有Key，Value两个字段。后来，随着LevelDB的流行，业界也有一些应用采用了LevelDB来做iOS端的Key-Value存储引擎，例如开源的<a href="https://github.com/viewfinderco/viewfinder">ViewFinder</a>。</p>

<p>因为LevelDB本身并不是为移动端设计的，我担心它过于占用内存，我自己也没有看到业界有在移动端针对LevelDB做很详细的测试，连LevelDB的iOS端移植都不是官方做的。加上我自己写的基于Sqlite的Key-Value存储用着也没有什么问题，所以我也就一直没有更换成LevelDB。</p>

<h2>开源</h2>

<p>经过两年的使用和测试，我认为它非常好用，而且代码也非常简单，只有不到400行。所以现在开源分享给大家，这个项目叫<a href="https://github.com/yuantiku/YTKKeyValueStore">YTKKeyValueStore</a>，项目代码在<a href="https://github.com/yuantiku/YTKKeyValueStore">这里</a>。</p>

<p>以下是一个简单的使用示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>YTKKeyValueStore *store = [[YTKKeyValueStore alloc] initDBWithName:@"test.db"];
</span><span class='line'>NSString *tableName = @"user_table";
</span><span class='line'>[store createTableWithName:tableName];
</span><span class='line'>// 保存
</span><span class='line'>NSString *key = @"1";
</span><span class='line'>NSDictionary *user = @{@"id": @1, @"name": @"tangqiao", @"age": @30};
</span><span class='line'>[store putObject:user withId:key intoTable:tableName];
</span><span class='line'>// 查询
</span><span class='line'>NSDictionary *queryUser = [store getObjectById:key fromTable:tableName];
</span><span class='line'>NSLog(@"query data result: %@", queryUser);</span></code></pre></td></tr></table></div></figure>


<h2>集成说明</h2>

<p>使用本项目，你需要将开源代码中的<code>YTKKeyValueStore.h</code>和<code>YTKKeyValueStore.m</code>添加到你的工程中，并且在工程设置的<code>Link Binary With Libraries</code>中，增加<code>libsqlite3.dylib</code>，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/key-value-store-setup.jpg"></p>

<p>由于时间关系，当前还未提供Cocoapods方式集成。</p>

<h2>使用说明</h2>

<p>所有的接口都封装在<code>YTKKeyValueStore</code>类中。以下是一些常用方法说明。</p>

<h3>打开（或创建）数据库</h3>

<p>通过<code>initDBWithName</code>方法，即可在程序的<code>Document</code>目录打开指定的数据库文件。如果该文件不存在，则会创建一个新的数据库。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 打开名为test.db的数据库，如果该文件不存在，则创新一个新的。
</span><span class='line'>YTKKeyValueStore *store = [[YTKKeyValueStore alloc] initDBWithName:@"test.db"];</span></code></pre></td></tr></table></div></figure>


<h3>创建数据库表</h3>

<p>通过<code>createTableWithName</code>方法，我们可以在打开的数据库中创建表，如果表名已经存在，则会忽略该操作。如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>YTKKeyValueStore *store = [[YTKKeyValueStore alloc] initDBWithName:@"test.db"];
</span><span class='line'>NSString *tableName = @"user_table";
</span><span class='line'>// 创建名为user_table的表，如果已存在，则忽略该操作
</span><span class='line'>[store createTableWithName:tableName];</span></code></pre></td></tr></table></div></figure>


<h3>读写数据</h3>

<p><code>YTKKeyValueStore</code>类提供key-value的存储接口，存入的所有数据需要提供key以及其对应的value，读取的时候需要提供key来获得相应的value。</p>

<p><code>YTKKeyValueStore</code>类支持的value类型包括：NSString, NSNumber, NSDictionary和NSArray，为此提供了以下接口：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)putString:(NSString *)string withId:(NSString *)stringId intoTable:(NSString *)tableName;
</span><span class='line'>- (void)putNumber:(NSNumber *)number withId:(NSString *)numberId intoTable:(NSString *)tableName;
</span><span class='line'>- (void)putObject:(id)object withId:(NSString *)objectId intoTable:(NSString *)tableName;</span></code></pre></td></tr></table></div></figure>


<p>与此对应，有以下value为NSString, NSNumber, NSDictionary和NSArray的读取接口：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSString *)getStringById:(NSString *)stringId fromTable:(NSString *)tableName;
</span><span class='line'>- (NSNumber *)getNumberById:(NSString *)numberId fromTable:(NSString *)tableName;
</span><span class='line'>- (id)getObjectById:(NSString *)objectId fromTable:(NSString *)tableName;</span></code></pre></td></tr></table></div></figure>


<h3>删除数据接口</h3>

<p><code>YTKKeyValueStore</code>提供了以下接口用于删除数据。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 清除数据表中所有数据
</span><span class='line'>- (void)clearTable:(NSString *)tableName;
</span><span class='line'>
</span><span class='line'>// 删除指定key的数据
</span><span class='line'>- (void)deleteObjectById:(NSString *)objectId fromTable:(NSString *)tableName;
</span><span class='line'>
</span><span class='line'>// 批量删除一组key数组的数据
</span><span class='line'>- (void)deleteObjectsByIdArray:(NSArray *)objectIdArray fromTable:(NSString *)tableName;
</span><span class='line'>
</span><span class='line'>// 批量删除所有带指定前缀的数据
</span><span class='line'>- (void)deleteObjectsByIdPrefix:(NSString *)objectIdPrefix fromTable:(NSString *)tableName;</span></code></pre></td></tr></table></div></figure>


<h3>更多接口</h3>

<p><code>YTKKeyValueStore</code>还提供了以下接口来获取表示内部存储的key-value对象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 获得指定key的数据
</span><span class='line'>- (YTKKeyValueItem *)getYTKKeyValueItemById:(NSString *)objectId fromTable:(NSString *)tableName;
</span><span class='line'>// 获得所有数据
</span><span class='line'>- (NSArray *)getAllItemsFromTable:(NSString *)tableName;</span></code></pre></td></tr></table></div></figure>


<p>由于<code>YTKKeyValueItem</code>类带有<code>createdTime</code>字段，可以获得该条数据的插入（或更新）时间，以便上层做复杂的处理（例如用来做缓存过期逻辑）。</p>

<h2>其它</h2>

<p>两年前写过不少测试用例，后来给弄丢了，所以现在开项项目中还没有测试用例。由于时间关系，更详细的使用说明稍后会更新到项目中。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-03T22:06:18+08:00" pubdate data-updated="true">Oct 3<span>rd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
</feed>
