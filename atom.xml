<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-10-30T21:37:45+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第29期]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/30/ios-weekly-29/"/>
    <updated>2014-10-30T21:34:29+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/30/ios-weekly-29</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/10/apple-ios-app-support-64">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果要求所有iOS新应用2015年2月起支持64位、怎样为iOS8应用制作预览视频、可视化开发 &ndash; IB的新时代等。</p>

<h2>新闻</h2>

<ol>
<li><a href="https://developer.apple.com/news/?id=10202014a">《苹果要求所有iOS新应用2015年2月起支持64位》</a>：苹果通过官方开发中心宣布，从2015年2月1日开始，所有上传至App Store官方商店的新iOS应用都必须支持64位。目前，支持64位的苹果设备包括iPhone 5S及以后的iPhone设备。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://beforweb.com/node/581">《终极指南 &ndash; 怎样为iOS8应用制作预览视频》</a>：说到App Store的改版，最值得设计师、开发者和市场人员关注的大概就是视频预览功能了。官方将其称为“应用预览(App Previews)”，如今已经正式出现在iOS8的App Store当中。自然，已经有一大波设计师和开发者为他们的产品制作了预览视频并通过iTunes Connect上传。坦率的说，如果你也有自己的产品，那么也该开始考虑做这件事了。本文介绍了为iOS8应用制作预览视频技巧和工具。</p></li>
<li><p><a href="http://onevcat.com/2014/10/ib-customize-view/">《WWDC 2014 Session笔记 &ndash; 可视化开发，IB 的新时代》</a>：文章介绍了 Xcode 6 中为 IB 锦上添花的一个特性，那就是实时地预览自定义 view，这个特性让 IB 开发的流程更加直观可视，也可以减少很多无聊的参数配置和 UI 设置的时间。</p></li>
<li><p><a href="http://www.cocoachina.com/swift/20141022/10008.html">《我在开发第一个Swift App过程中学到的四件事》</a>：本文作者Greg Heo，这是他为讲授iOS 8 App Extensions视频教程而实际使用Swift开发了一款App的经验，本是是他开发过程中的心得体验。</p></li>
<li><p><a href="http://imtx.me/archives/1913.html">《让你的 Mac App 支持 OS X Yosemite 的暗色菜单（Dark Menu）》</a>：文章介绍了如何让应用兼容 Yosemite 的暗色菜单。</p></li>
<li><p><a href="http://www.waerfa.com/sketch-skills-series-chapter-one">《玩转 Sketch 系列文章一：进入一个全新的时代》</a>：很多设计师都已经把主要的工作平台彻底迁移到了 Sketch。那么，是什么让他们放下了多年的 Photoshop，转身投入了 Sketch 的怀抱呢？理由很复杂，但用一句话表达：再也找不到比 Sketch 更顺手的设计软件了！对于那些还没有深入接触 Sketch 的同学，本文将是一个入门引导。虽然没有具体某一模块或功能的介绍，但文章从 Sketch 那上百种吸引人的特性中，选出几样与你分享，让你对它有一个大致的了解。</p></li>
<li><p><a href="http://www.raywenderlich.com/79764/custom-subscripting-swift-tutorial">《Custom Subscripting in Swift Tutorial》</a>：文章介绍了在Swift语言中使用自定义下标操作符。</p></li>
<li><p><a href="http://robbiepearce.com/devices">《Fully Scaleable Apple iOS Devices for Sketch》</a>：作者提供了用于设计的iOS设备Sketch资源。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/yuantiku/YTKKeyValueStore">YTKKeyValueStore</a>：YTKKeyValueStore是由笔者开源出来的一个基于sqlite的key-value存储工具。它被使用在了粉笔网、猿题库、小猿搜题三个客户端中后，我发现它不但完全能够满足大多数移动端开发的需求，而且非常适合移动端采用，所以开源出来。</p></li>
<li><p><a href="https://github.com/michaelarmstrong/SuperRecord">SuperRecord</a>：SuperRecord是一个方便在Swift语言中使用CoreData的库。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-30T21:34:29+08:00" pubdate data-updated="true">Oct 30<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第28期]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/22/ios-weekly-28/"/>
    <updated>2014-10-22T21:49:37+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/22/ios-weekly-28</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/10/apple-product-release-conference">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果召开新品发布会、收据验证、Facebook开源AsyncDisplayKit等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://money.163.com/14/1017/10/A8OJTF7700254TI5.html">《苹果召开新品发布会》</a>：北京时间10月17日凌晨1点，苹果在美国加州库比蒂诺总部Infinite Loop园区的Town Hall大会堂如期召开了主题为“久违了（It’s been way too long）”的新品发布会。这也是继苹果iPhone6、iPhone 6 Plus正式发布后，苹果在今年秋季举办的第二场大型发布会。在此次发布会上，苹果正式发布了iPad Air 2、iPad mini 3；视网膜屏iMac；新款Mac mini；以及iOS8.1和Yosemite系统。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.sunnyxx.com/2014/10/14/fp-essential/">《( ) &ndash;> ( )》</a>：<code>() -&gt; ()</code>不是什么表情符号，而是一种高度抽象的编程范式，它表示了一个函数式的编程思想，即值的变化过程。本文从swift语言入手分析，元组，函数，闭包等的设计对它进行解释，并阐释swift语言设计的大局观，最后分享一个Reactive Cocoa作者的Talk中的编程思想。</p></li>
<li><p><a href="http://objccn.io/issue-17-3/">《收据验证》</a>：收据 (Receipts) 是在 OS X 10.6.6 更新后，和 Mac App Store 一起出现的。 iOS 在内购的时候总是需要向服务器提供收据。验证收据的代码部分必须在安全方面高度敏感。如果被避开或者攻击，你就失去了核实用户权限的能力，并且无法验证用户是否购买。因此，让验证收据的代码能够承受黑客的攻击变得至关重要。本文讨论了如何安全地验证收据。</p></li>
<li><p><a href="http://robb.is/working-on/a-hamburger-button-transition/">《如何用Swift做一个不错的按钮变换动画》</a>：文章介绍了如何用Swift语言，采用<code>Core Graphics</code>来完成两个按钮之间的切换动画效果（效果图如下所示）。作者也将相关的代码开源在了<a href="https://github.com/robb/hamburger-button">这里</a>。</p></li>
</ol>


<p> <img src="http://robb.is/img/hamburger-button.gif" alt="" /></p>

<ol>
<li><p><a href="http://imtx.me/archives/1910.html">《适配 iOS 8 时遇到的问题两则：远程推送和 Unwind Segue》</a>：作者介绍了适配 iOS 8 时遇到的问题以及解决方案，值得大家参考。</p></li>
<li><p><a href="http://www.iwangke.me/2014/10/13/Why-Changba-iOS-choose-Mantle/">《为什么唱吧iOS 6.0选择了Mantle》</a>：唱吧6.0一个很重大的修改就是基于Mantle重建(新建)了Model层。文章分享了使用Mantle的决策及执行过程。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/facebook/AsyncDisplayKit">AsyncDisplayKit</a>：AsyncDisplayKit是facebook开源的一个框架，它能让复杂的用户交互效果流畅地显示，facebook使用它开发完成了paper。Facebook也在 <a href="https://code.facebook.com/posts/721586784561674/introducing-asyncdisplaykit-for-smooth-and-responsive-apps-on-ios/">这篇文章</a> 中，详细介绍了AsyncDisplayKit。</p></li>
<li><p><a href="https://github.com/krzysztofzablocki/KZBootstrap">KZBootstrap</a>：一个方便iOS工程初始化的项目，它包含一些推荐的工程设置和工具。</p></li>
<li><p><a href="https://github.com/chenqihui/NewsFourApp">NewsFourApp</a>：一个模仿网易4.0新UI框架的开源项目。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-22T21:49:37+08:00" pubdate data-updated="true">Oct 22<span>nd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第27期]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/12/ios-weekly-27/"/>
    <updated>2014-10-12T16:33:21+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/12/ios-weekly-27</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/10/ios6">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：国内iOS6比例已经低于5%，Apple 发布 Swift 语言和 Xcode 入门视频，Facebook&rsquo;s iOS Infrastructure等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://weibo.com/1708947107/BoBnZ1qy9?mod=weibotime#_rnd1412427404394">《国内iOS6比例已经低于5%》</a>：来自国内友盟的统计以及笔者开发的应用（猿题库）统计结果都显示，国内的iOS6用户比例已经低于5%。</p></li>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-09-27/10059651916.shtml">《苹果关闭iOS 7.1.2验证：iOS 8将无法降级》</a>：在发布iOS 8的两个更新之后，苹果停止了为iOS 7.1.2固件提供签名。这意味着，已经升级至新版iOS 8的用户将无法再降级回iOS 7.1.2。</p></li>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-10-04/08109666982.shtml">《新恶意软件iWorm已感染全球1.7万台Mac电脑》</a>：信息安全研究人员近期发现，全球超过1.7万台Mac电脑已经感染了一种名为“iWorm”的新的OS X恶意软件。这种恶意软件曾使用Reddit网站作为传播媒介，能窃取用户数据，触发多种系统操作，并执行Lua脚本。用户可以通过测试路径<code>/Library/Application Support/JavaW</code>是否存在，在判断是否中病毒。如果OS X找不到这一文件夹，那么Mac电脑就是安全的。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://swift-cheatsheet.co.uk/">《iOS8 Swift Cheat Sheet and Quick Reference Guide》</a>：这份速查表列出了Swift的常见的基本用法。</p></li>
<li><p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=422">《 获取当前安装的所有App》</a>：作者介绍了利用私有API在非越狱的iOS 7和8机器上，获取iOS中安装的所有App的办法。</p></li>
<li><p><a href="http://weibo.com/p/23041889d963070102v39b">《iOS8企业应用部署Bug》</a>：作者发现使用iOS企业部署（In-HouseDistribution）方式进行应用升级时，在iOS8下无法成功，删除应用再重新安装也不行。经过调研，作者发现这个是Apple的bug，并且提供了临时解决办法。</p></li>
<li><p><a href="https://designcode.io/learn">《The best resources for learning iOS design and Xcode》</a>：作者整理了一系列关于iOS 设计和 Xcode 方面的学习资源，并提供邮件订阅。</p></li>
<li><p><a href="http://www.iwangke.me/2014/10/06/how-to-implement-a-core-animation-based-60-fps-ktv-lyrics-view/">《基于Core Animation的KTV歌词视图的平滑实现》</a>：文章介绍了唱吧歌词视图的技术实现细节。</p></li>
<li><p><a href="https://medium.com/swift-programming/15-swift-ios-open-source-projects-you-cannot-ignore-6bd4ac37d7dd">《10 Swift IOS open-source projects you cannot ignore》</a>：文章介绍了10大不能错过的 Swift 开源项目。</p></li>
<li><p><a href="http://www.appdesignvault.com/ios-8-custom-keyboard-extension/#a_aid=mdev">《iOS 8 Custom Keyboard Tutorial: How to Create A Third-Party Keyboard Extension》</a>：文章介绍了如何在iOS8下自定义键盘。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><p><a href="http://www.guomii.com/posts/39029">《Apple 发布 Swift 语言和 Xcode 入门视频》</a>：Apple 在 Swift 官方博客上发布了一段6分钟多的视频，介绍如何从零开始使用 Xcode 套件开发 iOS 应用，非常值得想现在开始学 iOS 开发的朋友一看。</p></li>
<li><p><a href="https://www.youtube.com/watch?v=XhXC4SKOGfQ">《Facebook&rsquo;s iOS Infrastructure》</a>：Facebook在视频中分享了他们的iOS端架构。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/SwiftP2P/SwiftSSL">SwiftSSL</a>：SwiftSSL 是一个基于CommonCrypto的Swift语言的加密库。</p></li>
<li><p><a href="https://github.com/daltoniam/SwiftHTTP">SwiftHTTP</a>：用Swift语言实现的HTTP网络库。</p></li>
<li><p><a href="https://github.com/stephencelis/SQLite.swift">SQLite.swift</a>：SQLite.swift是一个将SQLite3封装成Swift语言的包装库。</p></li>
<li><p><a href="https://github.com/Brimizer/Slidden">Slidden</a>: Slidden是一个老外开源的开发自定义键盘的库，利用这个开源库，可以方便的配置键位、颜色以及键位对应的图片。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-12T16:33:21+08:00" pubdate data-updated="true">Oct 12<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开源一个Key-Value存储工具类]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/03/opensouce-a-key-value-storage-tool/"/>
    <updated>2014-10-03T22:06:18+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/03/opensouce-a-key-value-storage-tool</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>还记得大学刚学数据库那会儿，天真地以为世界上所有的存储都需要用数据库来做。后来毕业后，正值NOSQL流行，那时我在网易参与了网易微博的开发，我们当时使用了有道自己做的“BigTable”— OMAP来存储微博数据，那个时候才发现，其实Key-Value这种简单的存储也能搞定微博这类不太简单的存储逻辑。</p>

<p>相比MYSQL，当数据量上千万后，NOSQL的优势体现出来了：对于海量数据，NOSQL在存取速度上没有任何影响，另外，天生的多备份和分布式，也说数据安全和扩容变得异常容易。</p>

<h2>iOS端的尝试</h2>

<p>后来我从后台转做iOS端的开发，我就尝试了在iOS端直接使用Key-Value式的存储。经过在粉笔网、猿题库、小猿搜题三个客户端中的尝试后，我发现Key-Value式的存储不但完全能够满足大多数移动端开发的需求，而且非常适合移动端采用。主要原因是：移动端存储的数据量不会很大：</p>

<ul>
<li>如果是单机的应用（例如效率工具Clear），用户自己一个人创建的数据最多也就上万条。</li>
<li>如果是有服务端的应用（例如网易新闻，微博），那移动端通常不会保存全量的数据，每次会从服务器上获取数据，本地只是做一些内容的缓存而已，所以也不会有很大的数据量。</li>
</ul>


<p>如果数据量不大的话，那么在iOS端使用最简单直接的Key-Value存储就能带来开发上的效率优势。它能保证：</p>

<ol>
<li>Model层的代码编写简单，易于测试。</li>
<li>由于Value是JSON格式，所以在做Model字段更改时，易于扩展和兼容。</li>
</ol>


<h2>实现方案</h2>

<p>在存储引擎上，2年前我直接选择了Sqlite当做存储引擎，相当于每个数据库表只有Key，Value两个字段。后来，随着LevelDB的流行，业界也有一些应用采用了LevelDB来做iOS端的Key-Value存储引擎，例如开源的<a href="https://github.com/viewfinderco/viewfinder">ViewFinder</a>。</p>

<p>因为LevelDB本身并不是为移动端设计的，我担心它过于占用内存，我自己也没有看到业界有在移动端针对LevelDB做很详细的测试，连LevelDB的iOS端移植都不是官方做的。加上我自己写的基于Sqlite的Key-Value存储用着也没有什么问题，所以我也就一直没有更换成LevelDB。</p>

<h2>开源</h2>

<p>经过两年的使用和测试，我认为它非常好用，而且代码也非常简单，只有不到400行。所以现在开源分享给大家，这个项目叫<a href="https://github.com/yuantiku/YTKKeyValueStore">YTKKeyValueStore</a>，项目代码在<a href="https://github.com/yuantiku/YTKKeyValueStore">这里</a>。</p>

<p>以下是一个简单的使用示例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>YTKKeyValueStore *store = [[YTKKeyValueStore alloc] initDBWithName:@"test.db"];
</span><span class='line'>NSString *tableName = @"user_table";
</span><span class='line'>[store createTableWithName:tableName];
</span><span class='line'>// 保存
</span><span class='line'>NSString *key = @"1";
</span><span class='line'>NSDictionary *user = @{@"id": @1, @"name": @"tangqiao", @"age": @30};
</span><span class='line'>[store putObject:user withId:key intoTable:tableName];
</span><span class='line'>// 查询
</span><span class='line'>NSDictionary *queryUser = [store getObjectById:key fromTable:tableName];
</span><span class='line'>NSLog(@"query data result: %@", queryUser);</span></code></pre></td></tr></table></div></figure>


<h2>集成说明</h2>

<p>使用本项目，你需要将开源代码中的<code>YTKKeyValueStore.h</code>和<code>YTKKeyValueStore.m</code>添加到你的工程中，并且在工程设置的<code>Link Binary With Libraries</code>中，增加<code>libsqlite3.dylib</code>，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/key-value-store-setup.jpg"></p>

<p>由于时间关系，当前还未提供Cocoapods方式集成。</p>

<h2>使用说明</h2>

<p>所有的接口都封装在<code>YTKKeyValueStore</code>类中。以下是一些常用方法说明。</p>

<h3>打开（或创建）数据库</h3>

<p>通过<code>initDBWithName</code>方法，即可在程序的<code>Document</code>目录打开指定的数据库文件。如果该文件不存在，则会创建一个新的数据库。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 打开名为test.db的数据库，如果该文件不存在，则创新一个新的。
</span><span class='line'>YTKKeyValueStore *store = [[YTKKeyValueStore alloc] initDBWithName:@"test.db"];</span></code></pre></td></tr></table></div></figure>


<h3>创建数据库表</h3>

<p>通过<code>createTableWithName</code>方法，我们可以在打开的数据库中创建表，如果表名已经存在，则会忽略该操作。如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>YTKKeyValueStore *store = [[YTKKeyValueStore alloc] initDBWithName:@"test.db"];
</span><span class='line'>NSString *tableName = @"user_table";
</span><span class='line'>// 创建名为user_table的表，如果已存在，则忽略该操作
</span><span class='line'>[store createTableWithName:tableName];</span></code></pre></td></tr></table></div></figure>


<h3>读写数据</h3>

<p><code>YTKKeyValueStore</code>类提供key-value的存储接口，存入的所有数据需要提供key以及其对应的value，读取的时候需要提供key来获得相应的value。</p>

<p><code>YTKKeyValueStore</code>类支持的value类型包括：NSString, NSNumber, NSDictionary和NSArray，为此提供了以下接口：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)putString:(NSString *)string withId:(NSString *)stringId intoTable:(NSString *)tableName;
</span><span class='line'>- (void)putNumber:(NSNumber *)number withId:(NSString *)numberId intoTable:(NSString *)tableName;
</span><span class='line'>- (void)putObject:(id)object withId:(NSString *)objectId intoTable:(NSString *)tableName;</span></code></pre></td></tr></table></div></figure>


<p>与此对应，有以下value为NSString, NSNumber, NSDictionary和NSArray的读取接口：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSString *)getStringById:(NSString *)stringId fromTable:(NSString *)tableName;
</span><span class='line'>- (NSNumber *)getNumberById:(NSString *)numberId fromTable:(NSString *)tableName;
</span><span class='line'>- (id)getObjectById:(NSString *)objectId fromTable:(NSString *)tableName;</span></code></pre></td></tr></table></div></figure>


<h3>删除数据接口</h3>

<p><code>YTKKeyValueStore</code>提供了以下接口用于删除数据。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 清除数据表中所有数据
</span><span class='line'>- (void)clearTable:(NSString *)tableName;
</span><span class='line'>
</span><span class='line'>// 删除指定key的数据
</span><span class='line'>- (void)deleteObjectById:(NSString *)objectId fromTable:(NSString *)tableName;
</span><span class='line'>
</span><span class='line'>// 批量删除一组key数组的数据
</span><span class='line'>- (void)deleteObjectsByIdArray:(NSArray *)objectIdArray fromTable:(NSString *)tableName;
</span><span class='line'>
</span><span class='line'>// 批量删除所有带指定前缀的数据
</span><span class='line'>- (void)deleteObjectsByIdPrefix:(NSString *)objectIdPrefix fromTable:(NSString *)tableName;</span></code></pre></td></tr></table></div></figure>


<h3>更多接口</h3>

<p><code>YTKKeyValueStore</code>还提供了以下接口来获取表示内部存储的key-value对象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 获得指定key的数据
</span><span class='line'>- (YTKKeyValueItem *)getYTKKeyValueItemById:(NSString *)objectId fromTable:(NSString *)tableName;
</span><span class='line'>// 获得所有数据
</span><span class='line'>- (NSArray *)getAllItemsFromTable:(NSString *)tableName;</span></code></pre></td></tr></table></div></figure>


<p>由于<code>YTKKeyValueItem</code>类带有<code>createdTime</code>字段，可以获得该条数据的插入（或更新）时间，以便上层做复杂的处理（例如用来做缓存过期逻辑）。</p>

<h2>其它</h2>

<p>两年前写过不少测试用例，后来给弄丢了，所以现在开项项目中还没有测试用例。由于时间关系，更详细的使用说明稍后会更新到项目中。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-03T22:06:18+08:00" pubdate data-updated="true">Oct 3<span>rd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在创业两周年]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/01/startup-2nd-year-summary/"/>
    <updated>2014-10-01T22:06:20+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/01/startup-2nd-year-summary</id>
    <content type="html"><![CDATA[<p>一年前写了一篇名为<a href="http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note/">《写在创业一周年》</a>的文章，眼看创业已经两年多了，我就寻思着是不是再写一个创业两周年的总结。之所以拖了几个月，一是因为刚刚满两年的时候，我们公司刚刚拿下了<a href="http://tech.sina.com.cn/i/2014-07-22/11209510273.shtml">1500万美元的C轮融资</a>，但是还没有对外公开，所以不方便写。二是因为最近在忙<a href="http://www.yuansouti.com/">小猿搜题</a>这个新项目，顾不过来。现在正好国庆了，可以有时间好好思考总结下。</p>

<p>如果说创业第一年，我努力提高了自己的基本功：包括技术实力，沟通能力，执行力，情绪控制等。那么创业第二年，我的提高可能就是更多的思考了。为什么我们能够在短短两年时间就做到1.25亿美元的估值？我觉得核心的原因就是：正确的决策+强大的执行力。执行力在以前已经说过很多次了，这次想分享一下我们的决策。</p>

<p>创业两年，在我看来我们经历了两次重要的决策。</p>

<p>第一次重要决策是：放弃做粉笔网转而做猿题库。这其实可以拆成两件事情：一、放弃粉笔网，二、决定做猿题库。有些创业公司成功的关键是坚持，有些创业公司成功的关键是转型。在我看来这两者并不矛盾，其实关键是你想清楚了所有的事情。</p>

<p>放弃粉笔网是因为我们想清楚了这个模式是有问题的，所以我们并没有在这上面投入更多的市场推广费用，为团队节省了大量资金。这次试错，我们花的时间不到半年。不过也是因为运营粉笔网，我们发现了新的方向。我们的市场运营同事在邀请老师加入粉笔网时，发现了学生在手机上做题的需求，从而为团队找到了新的努力方向。</p>

<p><img src="http://blog.devtang.com/images/2013-summary-fenbi-close.jpg"></p>

<p>我们团队的特点就是执行力强，猿题库从计划到上线，我们只花了3个月。猿题库行测上线之后，收到了来自用户的良好反馈，这使得团队一下子确定了方向是正确的，大家的信心都恢复了。</p>

<p>第二次重要的决策是：切入K12市场。我们本来打算把所有职业类考试的客户端都做一遍。但是我们的CEO李勇觉得这个模式如果被竞争者抢先用来做K12市场后，我们会很难受。所以我们主动放弃了很多职业类考试类客户端的开发，转而做猿题库高考。</p>

<p>正因为这次决策，使得我们能够在短短半年时间，就积累起全中国超过10%的高考用户（每9个高考学生，就有一个用猿题库高考），随后的猿题库初高中整合版本也非常受学生欢迎，登上了AppStore教育榜首（我们没有刷榜）。也因为这次决策，才使得我们能够有C轮1.25亿美元这么高的估值。</p>

<p><img src="http://blog.devtang.com/images/ape_appstore_top.jpg"></p>

<p>虽然我没能参与这两次决策，但是我能感受到公司的管理层在创业上的深度思考，每一步都是经过仔细分析和推敲的。也因为这样，我们团队的大多数人就能够专心到事情的执行层面，把具体的事情做好。</p>

<p>另外，我们公司非常强调“透明”，李勇会通过邮件或者周五全体会议的方式，将公司的想法传递给每一个人，大家能够知道每一个决策背后的原因，从而在做事情的时候有一个最根本的指导。李勇也多次强调大家有问题要说出来，通过沟通达到相互之间信息的透明。</p>

<p>未来，猿题库应该还会经历很多重要决策，例如怎样用移动互联网的特点获得更多用户，例如如何给用户提供更多增值服务，获得收入。在线教育这个创业方向，与移动互联网结合起来，到底能有多大的想像空间，还需要我们一步一步探索。</p>

<p>我很期待着与团队同事一起，为教育开辟一块新的市场，最终改变教育。</p>

<p>最后，欢迎大家加入我们，这里有我们的<a href="http://www.yuantiku.com/campus/">职位介绍</a>。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-10-01T22:06:20+08:00" pubdate data-updated="true">Oct 1<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第26期]]></title>
    <link href="http://blog.devtang.com/blog/2014/09/24/ios-weekly-26/"/>
    <updated>2014-09-24T20:49:02+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/09/24/ios-weekly-26</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/09/swift-strong-point">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Swift 的强大之处、iOS8开发者专题、在Xcode 6中使用矢量PDF、iOS 8 App Extensions等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://www.guomii.com/posts/38832">《Apple 上线 Android 到 iPhone 数据迁移教程》</a>：为了让更多的 Android 用户加入到 iPhone 阵营，Apple 主动出击，上线了一个<a href="http://support.apple.com/kb/HT6407">专门的页面</a>，帮助 Android 用户购买 iPhone 之后迁移数据。涉及到的内容包括邮件、通讯录、日历、照片、视频、音乐、电子书、PDF、文档、应用等的迁移。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://objccn.io/issue-16-1/">《Swift 的强大之处》</a>：介绍了Swift语言的特性，包括支持函数式编程、类型安全、不可变性等。</p></li>
<li><p><a href="http://objccn.io/issue-16-4/">《Swift 的函数式 API》</a>：Swift 引入了泛型和函数式编程的思想，极大地扩展了设计的空间。文章借对 Core Image 进行函数式 API 封装为例，展示出应用 Swift 进行函数式编程的能力。</p></li>
<li><p><a href="http://www.cocoachina.com/special/ios8/">《iOS8开发者专题》</a>：由CocoaChina整理出来的iOS8相关的资料汇总。</p></li>
<li><p><a href="http://blog.callmewhy.com/2014/09/15/todo-list-in-swift/">《用 Swift 开发一个 TODO 应用》</a>：作者 <a href="http://weibo.com/small1030light">@请叫我汪二</a> 在文章中教你如何完成一个 TODO 的应用，功能包括添加任务和浏览任务。适合有一定 Objective-C 的开发基础但是还没怎么接触 Swift 的 iOS 开发者，希望通过这样一个简单的例子可以和大家一起熟悉一下 Swift。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/09/15/objc-attribute-cleanup/">《黑魔法<strong>attribute</strong>((cleanup))》</a>：编译器属性 <code>__attribute__</code>用于向编译器描述特殊的标识、检查或优化。作者在文章中介绍了其中一个名为<code>cleanup</code>的“黑魔法”属性。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/swiftzhong-lei-de-chu-shi-hua-qi-yu-ji-cheng">《Swift中类的初始化器与继承》</a>：Swift 为类定义了两种初始化器来确保类中所有的储存属性都能得到一个初始化值。这两种初始化器就是「指定初始化器」(Designated Initializer)与「便利初始化器」(Convenience Initializer)，文章对其做了介绍。</p></li>
<li><p><a href="http://blog.ibireme.com/2014/09/16/adapted_to_iphone6/">《大屏iPhone的适配》</a>：自从苹果出了大屏iPhone后，iOS开发也要做适配了， 这里大概总结下这几天了解到的大屏适配的注意事项。</p></li>
<li><p><a href="http://martiancraft.com/blog/2014/09/vector-images-xcode6/">《Using Vector Images in Xcode 6》</a>：文章介绍了在Xcode 6中使用矢量PDF图形的具体操作方法。</p></li>
<li><p><a href="http://radex.io/swift/methods/">《Swifty methods》</a>：文章讨论了Swift的函数命名习惯，并与Objective-C语言做了对比。</p></li>
<li><p><a href="https://developer.apple.com/apple-pay/Apple-Pay-Human-Interface-Guidelines.pdf">《Apple Pay Human Interface Guidelines》</a>：苹果发布了支付功能Apple Pay的人机交互指南。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.raywenderlich.com/83021/ios-8-app-extensions-tech-talk-video">《iOS 8 App Extensions Tech Talk Video》</a>：该视频介绍了iOS 8引入的App Extensions功能。从用户视角和开发者视角分别对其做了介绍。</li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="http://www.wuwacorp.com/specking/">specKing</a>：specKing 与 <a href="http://www.getmarkman.com/">马克鳗</a> 功能类似，用于全自动标示美术稿。不过 specKing 是以付费的 PS 外挂的形式发布的。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/shu223/iOS8-Sampler">iOS8-Sampler</a>：日本的shuさん制作的 iOS8 参考代码集。由 <a href="http://weibo.com/u/2289288323">@kimsungwhee</a> 推荐。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-09-24T20:49:02+08:00" pubdate data-updated="true">Sep 24<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第25期]]></title>
    <link href="http://blog.devtang.com/blog/2014/09/14/ios-weekly-25/"/>
    <updated>2014-09-14T19:56:42+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/09/14/ios-weekly-25</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/09/iphone-6-release">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果发布 iPhone6 和 Apple Watch、Swift 1.0 GM发布、Xcode 6支持PDF Vector作为图像素材、iPhone6分辨率与适配等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://news.ifeng.com/a/20140910/41926157_0.shtml">《苹果发布 iPhone6 和 Apple Watch》</a>：北京时间9月10日凌晨1点，美国苹果公司在30年前发布Mac电脑的故地，正式发布了全新一代 iPhone 6以及可穿戴设备 Apple Watch。</p></li>
<li><p><a href="http://www.infoq.com/cn/news/2014/09/swift-10-gm">《Swift 1.0 GM发布》</a>：北京时间9月10日，Swift迎来了第二个里程碑：Swift 1.0 GM发布。GM是Golden Master的缩写，GM版几乎等同于正式版.不过这次苹果还特意在发布新闻中提到GM版并非final版本，未来Swift还将添加其它更高级的新功能、提升性能以及精简语法。</p></li>
<li><p><a href="http://weibo.com/1846569133/BmD7gEvkZ">《Xcode 6支持PDF Vector作为图像素材》</a>：Xcode 6 的默认 App 模板已经用 PDF Vector 矢量作为图像素材了。所以 iOS 的适配可以说是轻松的，布局用 AutoLayout，图标用矢量，可以无视分辨率的存在。设计师们在用 Sketch 设计时，不要再输出1x、2x、3x 的 PNG 了。</p></li>
<li><p><a href="http://digi.it.sohu.com/20140912/n404256321.shtml">《苹果隐晦表示Apple Watch续航约为一天》</a>：苹果没有在发布会上提到Apple Watch的续航问题，但在记者问到时，苹果官方的回复是：“我们没有对外公布，但是我们希望用户白天戴表，晚上可以充电。”</p></li>
<li><p><a href="http://weibo.com/1708947107/BmuUHA9RY?mod=weibotime#_rnd1410529835695">《iTunes Connect Bug导致只接受支持arm64的应用》</a>：苹果9月10日的iTunes Connect更新造成一个Bug，导致审核后台只接受支持arm64的应用上传。由于国内大量的第三方SDK并未更新到支持arm64，所以此Bug导致国内众多应用无法上传。好在问题只持续了一天，但是此事也给那些一直懒于更新第三方SDK的厂商敲响了警钟。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://www.objc.io/issue-16/">《Swift》</a>：objc.io第16期的专题为Swift，为我们带来了关于Swift的5篇精品文章。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/09/10/iphone6-resolution/">《iPhone6分辨率与适配》</a>：文章介绍了iPhone6的图片适配问题。</p></li>
<li><p><a href="http://www.taofengping.com/2014/09/09/leak-GPUImage_cocoapods/#.VBL897ySyXw">《你的Pod出现内存泄露了吗》</a>：文章介绍了深度使用Cocoapods时可能遇到的内存泄漏问题。</p></li>
<li><p><a href="http://kimsungwhee.com/xcode6-%E5%BC%80%E5%90%AF-iphone6-iphone6-plus-%E5%88%86%E8%BE%A8%E7%8E%87/">《xcode6 开启 iPhone6 &amp; iPhone6 plus 分辨率》</a>：文章介绍了在Xcode6 GM下如何开启iPhone6和iPhone6 plus的分辨率。作者微博：<a href="http://weibo.com/u/2289288323">@kimsungwhee</a>。</p></li>
<li><p><a href="http://www.bignerdranch.com/blog/asynchronous-testing-with-xcode-6/">《Asynchronous Testing With Xcode 6》</a>：在Xcode 6以前，写异步的测试用例比较麻烦。该文章介绍了在Xcode 6下使用<code>XCTestExpectation</code>类，如何更方便地写一些异步的测试用例。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/tonymillion/Reachability">Reachability</a>：苹果提供过一个Reachability类，用于检测网络状态。但是该类由于年代久远，并不支持ARC。该项目旨在提供一个苹果的Reachability类的替代品，支持ARC和block的使用方式。</p></li>
<li><p><a href="https://github.com/ch3n/ZAlert">ZAlert</a>：ZAlert是一个用Swift实现的，用于显示<code>UIAlertView</code>和<code>UIActionSheet</code>的工具类，支持链式调用，仅支持iOS8。作者微博：<a href="http://weibo.com/fantcbug">@ch3nz</a>。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-09-14T19:56:42+08:00" pubdate data-updated="true">Sep 14<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[适合码农工作时玩的游戏：Scrum]]></title>
    <link href="http://blog.devtang.com/blog/2014/09/13/scrum-introduction/"/>
    <updated>2014-09-13T18:23:17+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/09/13/scrum-introduction</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/scrum_logo.jpg"></p>

<h1>前言</h1>

<p>昨天遇到一个来自微软的面试者，在面试的最后，我简单介绍了一下我们团队使用一周一次的Scrum来做项目管理。他回答说：”我在微软也用Scrum，不过我们一周两次，时间在周二和周四上午，每次15分钟“。我听了就笑了，我说：“同学，你说的这个应该是Scrum的站立会议，Scrum实际上有4个会议，站立会议只是其中一个。另外，标准的站立会议应该每天一次，不是每周两次。”接着我给他介绍了Scrum的4个会议，每个会议的意义是什么，他若有所思。</p>

<p>今天和同事吃饭说起这件事情，同事pw说：在他所了解到的使用Scrum的公司里面，我们应该是执行Scrum做得最规范的，同时我们从Scrum实践中，收获了非常多。</p>

<p>大约在3年前（当时我们团队还在网易），我们团队开始尝试用Scrum来进行软件开发的项目管理。在经过了3年的摸索和调整后，我们不但多次保证了项目的顺利上线，而且建立起了适合自己团队的工作方式。</p>

<p>正如Scrum官方指南所说，“Scrum是易于理解，但难以精通的”，在此向大家分享我们实践的心得体会，希望更多的开发团队能够运用Scrum来流化自己的开发流程。</p>

<h1>Scrum是游戏规则</h1>

<p>在<a href="https://www.scrum.org/Scrum-Guide">Scrum官方网站</a>上，提供了中文版本的<a href="https://www.scrum.org/Portals/0/Documents/Scrum%20Guides/2013/Scrum-Guide-CN.pdf#zoom=100">《Scrum指南》</a>，这份只有14页的文档的封面上，写下了其最核心原则：游戏规则。</p>

<p><img src="http://blog.devtang.com/images/scrum_guide_cover.jpg"></p>

<p>什么是游戏规则？游戏规则是玩游戏的人为了更好地娱乐而制定的规则。所以Scrum的规则是为了让大家更开心，更有效地工作，而不是约束大家。事实上由于Scrum只是一个框架，所以在实践Scrum时，更多的规则需要团队成员共同制定，这更加体现了游戏规则的思想——大家自己制定的规则，必定是得到大家一致同意的、能让大家舒服工作的规则。</p>

<h1>Scrum是基于经验的</h1>

<p>Scrum强调经验的重要性，但是经验又是需要不断调整的，所以Scrum通过迭代增量的开发方式，来每次调整整个团队的经验，从而来优化可预测性。</p>

<p>例如，我们在开发猿题库时，在每轮Scrum的结束时，我们会开回顾会议，将大家每天处理待办事项的速度（我们称做日均Story Point）总结在Wiki中，如下图所示。这样当我们估计一个新一轮的迭代工作是否能够完成时，就可以参考前面几十次的经验，做出更加理性地判断。</p>

<p><img src="http://blog.devtang.com/images/scrum_story_point.jpg"></p>

<h1>Scrum的三大支柱</h1>

<p><img src="http://blog.devtang.com/images/scrum_keys.jpg"></p>

<p>透明性、检视、调整是Scrum的三大支柱。</p>

<ul>
<li>透明性是指：团队成员要达到对信息的完全共享，以便对观察到的信息有相同的理解。</li>
<li>检视是指：团队成员要不停地检查自己的状态，类似汽车的定期检查一样，通过检视了解当前项目的状态。</li>
<li>调整是指：团队成员发现出现了会影响项目进度的事件后，要及时寻找对策。</li>
</ul>


<p>以上的说法有些学术化，我们可以这样理解：</p>

<p>群体智商常常会出现低于个体智商的现象，这是因为个体之间的信息通常不一致，每个人的信息都是片面的，所以造成了观点的片面，而通常情况下团队领导由于接受到的信息更全面，所以他的决策考虑会更周到一些。</p>

<p>但是Scrum又强调团队需要是“自组织”的，这就需要群体进行决策而不是领导。为了群体更好的决策，所以Scrum特别强调信息的透明，这样大家的信息都是充分共享的，而检视是一种保证信息透明的方法，即定期地查看自己和团队的状态，有了信息的透明，这样团队成员就能共同发现项目执行中的问题，进而一起寻找解决办法，从而达到“自组织”的团队。</p>

<h1>Scrum的基础游戏规则</h1>

<p>Scrum定义了基础的游戏规则，在基础的游戏规则之上，团队可以依据自己的经验，制定更细致的规则。但更细致的规则不应该违背基础的规则。这就像国家的宪法一样，其它法律不能与宪法违背。</p>

<p>那我们来看看Scrum有哪些基础的游戏规则。</p>

<h2>角色定义</h2>

<p><img src="http://blog.devtang.com/images/scrum_roles.jpg"></p>

<p>玩三国杀的同学都知道，玩之前大家会抽身份：主公、反賊、忠臣、内奸。而Scrum的游戏规则里面，有以下几种身份角色：</p>

<ul>
<li><p>产品负责人：产品负责人是管理产品待办列表的唯一责任人，也是产品最终的责任人。（稍后我们在介绍计划会议时，解释什么是产品待办列表。）简单来说，最终如果产品没做好，应该扣产品负责人的工资。</p></li>
<li><p>开发团队：开发团队是负责将每轮Scrum迭代中计划的功能（可能是产品稿+美术稿的形式），交付成可发布的产品的各种专业人员。这里的各种专业人员包括：服务器端开发、Javascript前端开发、客户端开发、测试人员等。开发团队是真正在玩这个Scrum游戏的人，其他人（例如产品负责人都只是部分参与）。</p></li>
<li><p>Scrum Master：Scrum Master类似于杀人游戏中的法官，即游戏组织者。Scrum Master并不是团队的领导，他仅仅是做一些组织工作，而对于一个“自组织”的团队来说，其实真正需要组织的事情也不太多，所以他常常由开发团队中的某一个人兼任。</p></li>
</ul>


<h3>没有子团队</h3>

<p>在Scrum的官方文档中，这样说道：</p>

<blockquote><p>Scrum 不认可开发团队中的所谓“子团队”,无论是测试还是业务分析的成员都不能划分为“子团队”。此规则无一例外。</p></blockquote>

<p>所以我们看到，Scrum在定义角色的时候，强调开发团队中一个整体，包含把产品发布出来的所有相关的专业技术人员，并且开发团队共同承担开发的责任，只有这样，大家才能形成利益共同体，共同努力把产品做好。</p>

<p>这一点也解释了为什么很多大公司玩不好Scrum。拿百度举例，百度的一个项目就有很多“子团队”。在百度，前端开发人员属于前端组，移动端开发人员属于移动端组，测试有专门的QA组，PM也有专门的组。这样的划分，进而造成大家的绩效评估并不是完全由项目执行的好坏来决定，而PM也需要花很大精力去推动大家，这样的团队没有共同的利益，是很难做到“自组织”的。</p>

<h3>强调平等</h3>

<p>Scrum中仅定义了“开发团队”这个整体的角色，在“开发团队”内部，大家都是平等的。因为只有这样，大家才能更加自由的共享信息，共同决策，否则决策权仍然掌握在少部分人手里。在Scrum的官方文档中，是这样说的：</p>

<blockquote><p>Scrum 不认可开发团队成员的头衔，无论承担哪种工作他们都叫做开发人员。此规则无一例外。</p></blockquote>

<h3>游戏人数规则</h3>

<p>开发团队还有一个不能不说的特点，就是他的规模必须足够小，因为他强调信息的透明，如果人数过大，光沟通的成本就大到无法承受了，所以官方文档上推荐的人数是 10人以内（不包括产品负责人和Scrum Master，除非他们也参与开发）。</p>

<p>但是在实际执行中，由于业务的增长，团队人数很容易就超过10人。比如我们猿题库在创业时只有不到10人，现在已经成长到几十人了。这个时候，比较好的做法是进行团队的切分，比如我们试过将猿题库的服务器端和客户端进行拆分，这样保证每个团队还是在10人以内。如果以后再增长，可能客户端会再进行拆分成iOS团队和Android团队。</p>

<h3>游戏时间</h3>

<p>Scrum对每一轮的迭代时间并没有严格的规定，但它要求是小于一个月。对于每一轮的迭代，Scrum把它称作Sprint（冲刺）。</p>

<p>作为创业公司，我们在最近两年都实践着一周一次Sprint的方式来工作。一周一次Sprint能够保证调整足够快，Sprint执行中是不鼓励需求改动的。所以一周一次的Sprint能够做到，对于比较急迫的需求改动，在下次Sprint时（下周）就可以执行。</p>

<p>一周一次的Sprint也有不少问题，由于偏离本文主题，所以就不展开介绍了。现在我们的猿题库直播课项目组也在尝试进行2周一次的Sprint。总之，Sprint多长是由开发团队根据项目的具体特点来决定的，只要不超过一个月即可。</p>

<h2>游戏玩法</h2>

<p>讲了半天，终于讲到核心了，到底怎么玩这个游戏啊！为了更好的理解，我们先看看杀人游戏的玩法，杀人游戏定义了如下几个事件：</p>

<ol>
<li>天黑请闭眼，这个时候大家都闭上眼睛</li>
<li>杀手睁眼，杀手杀人，杀手闭眼</li>
<li>警察睁眼，警察检查，警察闭眼</li>
<li>天亮了，宣布谁死了，大家讨论并投票谁是杀手，投出的嫌疑人被杀死。如果警察或杀手死了，宣布游戏结束，否则跳到第1步。</li>
</ol>


<p>刚好，Scrum也定义了4个事件，分别是：</p>

<ol>
<li>计划会议</li>
<li>每日站立会议</li>
<li>评审会议</li>
<li>回顾会议</li>
</ol>


<p>以下我们来详细介绍一下这4个会议到底要具体怎么做。</p>

<h3>计划会议</h3>

<p>计划会议主要通过讨论，完成两件事情：做什么、怎么做。</p>

<p>关于“做什么”：产品负责人会给出一个产品待办列表，然后由团队成员来根据预计的工作量以及以往的表现，来挑选接下来的Sprint需要完成的待办项。这里的特点是：由开发团队成员自己来挑选待办项，而不是由传统意义上的Tech Leader或产品负责人来挑选。这样保证了开发任务是由团队成员自己决定的，他更有责任心把事情完成。同时作为产品负责人，有必要非常明确地告诉开发团队每一个待办项的意义和重要性，这样开发团队才能做出有利于产品的挑选工作。</p>

<p>关于“怎么做”：开发团队从待办列表中挑选完需要完成的待办项之后，就需要对每个要做的待办项进行评估。评估的工作就是讨论具体怎么做，这包括技术架构、实现细节的讨论。只有讨论得非常清楚之后，这项工作的工作量才会比较清楚。</p>

<p>在讨论怎么做之后，一些敏捷公司推荐使用“出牌”的方式来评估工作量，我们也采用了这种方式，我们还专门做了一套Scrum扑克，用于出牌。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/scrum_card.jpg"></p>

<p>出牌的规则是每个人出一张牌，用牌上的数字表示当前工作的工作量。通常大家还会事先约定好数字2代表的工作量，以保证大家的标准相同。为了避免相互影响，大家先把要出的牌扣着，然后同时翻开。之后，出最高分的和出最低分的同学要表达意见，说明为什么自己估计成这样，大家讨论，这样的过程可以保证大家的信息都是透明的，即没有忽略掉的技术实现难度或细节，在信息充分共享的情况下，通常大家第二次出牌时就可以达成一致了。</p>

<h3>每日站立会议</h3>

<p>每日站立会议是进行检视的方法。通常选择固定时间（我们是每天早上10点10分开），以养成团队工作习惯来避免组织成本。站立会议要尽量的短，通常控制在15分钟以内，选择站着开会，也是让大家有更大的预期快速结束。</p>

<p>站立会议主要是为了沟通，以及发现潜在可能的问题，在站立会议上，团队成员每个人要讲3句话：</p>

<ol>
<li>我昨天做了什么</li>
<li>我今天打算做什么</li>
<li>我遇到了什么问题</li>
</ol>


<p>通过这3句话来达到高效沟通的目的，对于会上提到的问题，通常是下来相关人员自行解决。</p>

<p>站立会议通常能够发现项目进展的状态是否顺利，从而尽早采取相应的措施。时间较长的Sprint可以配合燃尽图，更方便地审视项目进展速度。</p>

<h3>评审会议</h3>

<p>Sprint 评审会议在 Sprint 结束时举行，用于检查计划中的工作，哪些完成了，哪些没有完成。在我们的实践中，我们会让开发的同事演示自己所做的功能，然后PM会看这个功能是否达到了要求。</p>

<h3>回顾会议</h3>

<p>回顾会议是开发团队检视自己，发现团队运转中的问题，并且定制游戏规则的过程。通过对前一个Sprint中的人、关系、过程、工具进行检视，团队成员能够总结出做得好的，和做得不好的。进而制定一个改进的方案。</p>

<p>回顾会议是Scrum创建“自组织”团队的关键，它将团队自我改进变成了一个例行的会议，在这个会议中，讨论的都是大家对该游戏的感受，包括好的和不好的，最终大家为了玩得更爽，就会发扬好的，努力避免不好的，成为一个能够自我进化的集体。</p>

<p>需要注意的是，回顾会议不应该成为吐槽大会，大家应该本着发现问题，解决问题的态度来讨论。例如：如果在回顾会议仅仅是抱怨产品老是改需求，或者抱怨时间不够，而不提出解决方案的话，是非常不好的。</p>

<p>提出问题是容易的，麻烦的是提出解决方案。我们的老大郭常圳提出了一个办法，即我们思考：“如果再来一次，我们能不能做得更好”？如果我们发现，如果再来一次，由于客观原则，我们可能仍然无法避免同样的问题，那么我们就选择坦然接受而不是抱怨。</p>

<p>因为很多时候本来就没有完美的、没有任何问题的解决方案，这就像软件都有Bug一样，如果Bug不可避免，我们就选择发现的时候尽量修复而不是编码的时候避免。</p>

<h3>框架图</h3>

<p>下图介绍了Scrum的整个框架：</p>

<p><img src="http://blog.devtang.com/images/scrum_meetings.jpg"></p>

<h2>一些问题</h2>

<h3>有什么辅助Scrum的工具？</h3>

<p>我们使用的是Redmine的Scrum插件来开相关的Scrum会议。我们Scrum的回顾会议总结放在内部的Wiki上。也有团队喜欢直接用白板+便签来完成Scrum的相关会议。像JIRA一类的专业项目管理软件，也都支持Scrum。</p>

<h3>游戏超时怎么办？</h3>

<p>游戏超时通常就意味着游戏结束。在Scrum这个游戏中，团队成员不接受Sprint延期。所以不管有没有完成所有任务，评审会议和回顾会议都需要按时开，没有完成的任务需要进行仔细讨论，分析其原因到底是什么，从而在下一轮Sprint中尽量避免出现同样的问题。</p>

<h3>开发团队自己挑任务，会不会造成项目进度很慢？</h3>

<p>通常情况下不会。如果我们真正把Scrum做好，大家能享受到Scrum带来的各种好处，例如团队每个人都能参与决策团队做事方式，每个人都能积极的追求效率，而一次次成功的Scrum，带给大家的成就感也是巨大的。</p>

<p>好的Scrum执行还能保证团队不会随意加班，我们已经很久没有周末加班了，平时晚上大部分时间也都能做到按时下班，这对于互联网公司来说，几乎是不可想像的。</p>

<p>不加班只是一个附属品，最重要的是按时发布产品，我们创业2年多来从来没有延期发布过产品。这样使得我们的运营推广计划能够非常有序地执行。</p>

<p>需要强调的是，不加班并不是代表我们的工作轻松，通常情况下我们的Scrum安排还是比较紧张的，因为我们都想创业时跑得快一些。不加班也不是我们的原则，我们的原则是按时发布产品，所以当有一些特殊情况产生时，我们也会适当的加班。我们只是不把加班当作一个常态的工作方式，因为我们认为工作效率比工作时长更为重要。另一方面我们认为创业是长跑，保持良好的发布节奏已经非常好了，长期加班造成的身体懈怠可能会造成工作效率的损失。</p>

<h3>Scrum适合所有团队吗？</h3>

<p>首先Scrum是非常适合程序员的，因为程序员天生就不喜欢约束。Scrum的“自组织”团队的思想很容易让程序员感觉到自己是团队的主人。另外Scrum是非常反会议的，4个会议都严格地规定了时间长度，所以可以让程序员有充足的时间花在编码上。Scrum也是比较反需求临时变更的，由于Sprint周期短（我们才一周），所以变更可以根据重要程度放到下一个Sprint中。</p>

<p>Scrum非常强调团队作为一个整体来做事情，所以并没有刻意地去评估每个人具体的工作量。这需要团队每个人都比较自觉。当然，由于强调透明和检视，所以团队内如果有人懈怠的话，团队里其他人是很容易发现的。</p>

<p>所以，如果你的团队人数在10人左右，又能保证团队是一个整体为项目负责，那就有了尝试Scrum的基础。</p>

<h3>为什么很多公司用不好Scrum？</h3>

<p>Scrum指南里面也提到，Scrum是“易于学习，难于精通的”。所以Scrum本来就比较难做好。我感觉到几个比较容易出现的问题是：</p>

<ol>
<li><p>团队里面有人不信Scrum能比以前的软件开发方式更好。游戏规则使终是游戏规则，如果有人不想玩游戏的话，游戏玩起来就没有那么愉快了。真正想做好Scrum就得认真学习Scrum指南，然后努力遵守Scrum的规则。只有当大家都努力玩这个游戏时，才能享受游戏的乐趣。</p></li>
<li><p>随意更改Scrum的规则。例如我以前在有道的团队就把Scrum的每日站会改成了每周二，周四开一个坐会，开会的方式也变成产品经理询问进度，各个技术人员汇报的方式，会议一次要开半个多小时。这一下子就把每日站会做得变味了。</p></li>
<li><p>难以组建团队。之前说过像百度这类大公司，其公司文化不是一朝一夕形成的。Scrum的工作方式要求大家都为项目完全负责，而很多传统公司按职能来划分团队，例如PM团队、客户端团队、前端团队等，这会影响Scrum的执行。</p></li>
</ol>


<h3>Scrum是终极大招吗</h3>

<p>Scrum不是银弹，它并不能解决所有问题，实际上，很多时候它根本不提供解决问题的方法。Scrum本身只是一个框架，通过这个框架，我们更容易发现项目运行中的问题，通过定期的回顾会议来解决问题。</p>

<h1>结束语</h1>

<p>本文旨在通过介绍Scrum的核心思想和基本框架，吸引大家了解Scrum。要实践Scrum，还是需要进一步的学习才行。欢迎大家详细阅读<a href="https://www.scrum.org/Portals/0/Documents/Scrum%20Guides/2013/Scrum-Guide-CN.pdf#zoom=100">《Scrum指南》</a>，然后尝试使用Scrum来让自己每天的工作变得轻松愉快。</p>

<p>PS：我们的公司猿题库创业两年，做在线教育方向，不久前顺利拿到了1500万美元的C轮融资。我们现在很缺人，也欢迎大家加入我们，和我们一起玩Scrum游戏，感兴趣的可以看：<a href="http://www.yuantiku.com/campus/">职位介绍</a>。</p>

<p>愿大家玩得开心～</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-09-13T18:23:17+08:00" pubdate data-updated="true">Sep 13<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第24期]]></title>
    <link href="http://blog.devtang.com/blog/2014/09/09/ios-weekly-24/"/>
    <updated>2014-09-09T21:16:05+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/09/09/ios-weekly-24</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/09/itunes-connect">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果更新了iTunes Connect的设计、UIKit Dynamics 教程：抛掷 Views、iOS APP 架构漫谈等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://www.36kr.com/p/215155.html">《苹果更新了 iTunes Connect 的设计》</a>：新版的iTunes Connect与 iOS 即视感更浓厚，与 iCloud.com 的风格更搭。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://beyondvincent.com/blog/2014/09/02/uikit-dynamics-tutorial-tossing-views/">《UIKit Dynamics 教程：抛掷 Views》</a>：文章介绍了如何用手势很自然的将 view 抛掷出屏幕。本文非常适合中级开发者，因为对 view 抛掷操作中，使用的技术嵌套了多个效果，例如使用内置的 UIKit 框架对 view 进行旋转 (rotation)、飞离 (fly-away) 动画。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/08/29/ios-architecture/">《iOS APP 架构漫谈》</a>：文章从一些具体的场景出发，讲解iOS应用架构的技巧。</p></li>
<li><p><a href="http://www.anselz.com/2014/09/07/objective-c%E4%B8%AD%E7%9A%84initialize%E5%92%8Cload/">《Objective-C中的+initialize和+load》</a>：文章介绍了Objective-C中的<code>+initialize</code>和<code>+load</code>方法的一些执行细节和注意事项。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/08/30/objc-pre-main/">《iOS程序main函数之前发生了什么》</a>：一个iOS app的main()函数位于main.m中，这是我们熟知的程序入口。但对objc了解更多之后发现，程序在进入我们的main函数前已经执行了很多代码，比如熟知的+ load方法等。本文将跟随程序执行顺序，刨根问底，从dyld到runtime，看看main函数之前都发生了什么。</p></li>
<li><p><a href="http://mattgemmell.com/api-design/">《API Design》</a>：文章介绍了Objective-C中类、接口以及通知的接口设计原则。</p></li>
<li><p><a href="https://developer.apple.com/app-store/review/rejections/">《Common App Rejections》</a>：苹果官方总结了一些常见的应用审核被拒的情况。</p></li>
<li><p><a href="http://furbo.org/2014/09/03/xcode-vs-gatekeeper/">《Xcode vs. Gatekeeper》</a>：文章介绍了通过禁用 Gatekeeper 的功能，来加快第一次开启Xcode 的速度的办法。</p></li>
<li><p><a href="http://www.merowing.info/2014/07/implementing-observable-in-swift/#.VA1YcrySyXw">《Implementing Observable in Swift》</a>：文章介绍了如何在Swift中实现类似Objective-C中的KVO功能。</p></li>
<li><p><a href="http://chris.eidhof.nl/posts/swift-ideas.html">《Some ideas for projects in Swift》</a>：文章列出了Swift要真正被大家方便使用起来，还需要提供的第三方库。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.infoq.com/cn/presentations/evolution-and-enlightenment-of-qq-im-backend-architecture">《QQ IM后台架构的演化与启示(二) &mdash;移动时代》</a>：腾讯技术副总监韦彬介绍了QQ IM后台包括状态系统、消息系统、逻辑层等基础架构是如何应对移动时代的挑战并继续演化。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/yuhua-chen/MCLog">MCLog</a>: MCLog是一个可以提供Xcode中的console log过滤功能的Xcode插件。</p></li>
<li><p><a href="http://www.relativewave.com/form.html">Form</a>：Form是一个类似Origami的原型设计工具。它比Origami强大的地方在于，它可以直接在移动端查看效果。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/ParsePlatform/f8DeveloperConferenceApp">f8DeveloperConferenceApp</a>：这是一个f8 Conference Apps的会议应用，由Parse开源。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-09-09T21:16:05+08:00" pubdate data-updated="true">Sep 9<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第23期]]></title>
    <link href="http://blog.devtang.com/blog/2014/09/01/ios-weekly-23/"/>
    <updated>2014-09-01T20:22:54+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/09/01/ios-weekly-23</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/08/afnetworking2.0">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果发出9月9日发布会邀请函，AFNetworking2.0源码解析，objc与鸭子对象，Protecting iOS Applications等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://tech.sina.com.cn/mobile/n/apple/2014-08-29/01339582927.shtml">《苹果发出9月9日发布会邀请函》</a>：苹果公司刚刚向外界发出邀请函，太平洋时间9月9日上午10点（北京时间9月10日凌晨1点），将在美国库伯提诺市弗林特剧院举行发布会。本次发布会的主角极有可能是iPhone 6及iWatch智能手表。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.cnbang.net/tech/2320/">《AFNetworking2.0源码解析》</a>：AFNetworking是著名的iOS网络库，文章作者分享了其阅读AFNetworking2.0源码的收获。</p></li>
<li><p><a href="http://www.raywenderlich.com/76433/how-to-make-a-custom-control-swift">《Creating a Custom Control in Swift》</a>：文章介绍了如何使用Swift自定义一个进度条控件。</p></li>
<li><p><a href="http://baoz.me/452378">《iOS干货精选》</a>：本文是《码农周刊》中的精品文章的集合，包括iOS和Android部分。</p></li>
<li><p><a href="http://www.topcoder.com/blog/kicking-off-our-500k-learn-swift-series/">《Kicking Off our $500K Learn Swift Series》</a>：TopCoder推出学习Swift系列比赛，拿出多达50万美元奖励学习成绩突出者。</p></li>
<li><p><a href="https://developer.apple.com/swift/blog/?id=12">《Optionals Case Study: valuesForKeys》</a>：来自苹果官方博客的教程，通过学习Dictionary的valuesForKeys方法，来了解Optional类型。</p></li>
<li><p><a href="http://blog.csdn.net/u011247468/article/details/16332071">《Xcode5 Asset Catalog 使用备忘》</a>：Asset Catalog是Xcode5引入的一个新的图片管理方式，文章介绍了使用Asset Catalog创建可拉伸图片的方法。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/08/24/objc-duck/">《objc与鸭子对象（上）》</a>、<a href="http://blog.sunnyxx.com/2014/08/26/objc-duck-advanced/">《objc与鸭子对象（下）》</a>：文章上半部分介绍了鸭子类型和它在ObjC中的实践，以及一个使用NSProxy实现JSON Entity的鸭子类。下半部分介绍了鸭子对象的进阶用法，并简单介绍由鸭子对象思想衍生出的依赖注入。</p></li>
<li><p><a href="http://www.polidea.com/#!heartbeat/blog/Protecting_iOS_Applications">《Protecting iOS Applications》</a>：文章系统地介绍了如何保护iOS程序的代码安全，防止反汇编分析。</p></li>
<li><p><a href="http://iosdevelopertips.com/xcode/swift-replacement-pragma.html">《Swift’s Answer to #pragma mark, FIXME and TODO》</a>：文章介绍了在ObjC中支持的#pragma mark, FIXME 和 TODO，在Swift语言中是如何使用的。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/Polidea/ios-class-guard">ios-class-guard</a>：一个用于混淆iOS的类名、方法名以及变量名的开源库。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-09-01T20:22:54+08:00" pubdate data-updated="true">Sep 1<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第22期]]></title>
    <link href="http://blog.devtang.com/blog/2014/08/24/ios-weekly-22/"/>
    <updated>2014-08-24T19:14:22+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/08/24/ios-weekly-22</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/08/shares-of-apple">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果股价创新高，iOS8自动调整UITableView布局，Swift学习心得等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://tech.qq.com/a/20140820/007526.htm">《苹果股价创新高 市值全球第一超第二名30%》</a>： 8月20日，苹果公司周二收盘股价创下历史新高水平，超过了2012年保持的最高记录。苹果作为全球市值最高的公司，比全球市值第二大的埃克森美孚公司高出了30%。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://zonble.net/archives/2014_08/1616.php">《Swift学习心得》</a>：作者分享了学习Swift语言的心得，包括苹果为什么要设计Swift语言以及Swift语言的各种特性。</p></li>
<li><p><a href="http://yulingtianxia.com/blog/2014/08/17/New-in-Table-and-Collection-Views/">《iOS8自动调整UITableView和UICollectionView布局》</a>：本文讲述了UITableView、UICollectionView实现self-sizing cell布局的知识，以及如何用InvalidationContext优化UICollectionView布局的更新。作者微博：<a href="http://weibo.com/yulingtianxia">@杨萧玉HIT</a>。</p></li>
<li><p><a href="http://yulingtianxia.com/blog/2014/08/19/best-practices-for-building-spritekit-games/">《创建SpriteKit游戏的最佳范例》</a>：本文从拓展性、游戏构造和性能三个方面分别讲述建立SpriteKit游戏时的一些实践经验和范例。作者微博：<a href="http://weibo.com/yulingtianxia">@杨萧玉HIT</a>。</p></li>
<li><p><a href="http://beyondvincent.com/blog/2014/07/30/provision-ios-ipa-app-for-in-house-enterprise-distribution/">《在企业内部分发 iOS 应用程序》</a>：在企业内部分发 iOS 应用程序非常复杂，作者详细介绍了实现的过程。</p></li>
<li><p><a href="https://developer.apple.com/swift/blog/?id=10">《Value and Reference Types》</a>：苹果的这篇官方微博介绍了Swift的值类型和引用类型的差别。</p></li>
<li><p><a href="http://www.raywenderlich.com/76519/add-table-view-search-swift">《How to Add Table View Search in Swift》</a>：来自raywenderlich的教程，用Swift实现为TableView增加搜索功能。</p></li>
<li><p><a href="https://www.mikeash.com/pyblog/friday-qa-2014-08-15-swift-name-mangling.html">《Swift Name Mangling》</a>：文章分析了Swift编译器对于函数名的处理方式。</p></li>
<li><p><a href="http://nshipster.com/swift-literal-convertible/">《Swift Literal Convertibles》</a>：文章介绍了Swift中的字面量（Literal）的类型转换规则。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/facebook/fishhook">fishhook</a>：fishhook是Facebook开源的一个可以hook系统方法的工具。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-08-24T19:14:22+08:00" pubdate data-updated="true">Aug 24<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第21期]]></title>
    <link href="http://blog.devtang.com/blog/2014/08/18/ios-weekly-21/"/>
    <updated>2014-08-18T21:53:55+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/08/18/ios-weekly-21</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/08/apple-icloud">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果iCloud中国数据转存中国电信，Swift Operators，100 个 Swift 必备 tips，FLEXLoader等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://www.36kr.com/p/214546">《苹果iCloud中国数据转存中国电信》</a>：出自抚州市崇仁县电信分公司的新闻显示：中国电信正式为苹果 iCloud 中国用户提供云存储服务，成为苹果公司在中国大陆地区唯一的云存储服务提供商。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://nshipster.com/swift-operators/">《Swift Operators》</a>：AFNetworking的作者<a href="http://mattt.me/">Mattt Thompson</a>在本文中详细介绍了swift的操作符，包括基本操作符，操作符重载以及一些使用原则。</p></li>
<li><p><a href="http://s2dongman.com/?p=658">《为移动而设计，第3章：视觉设计》</a>：理解规则，打破规则，为移动而设计需要我们不断思考，持续发现新的、优美的、易用的解决方案。本文讨论了在视觉设计上如何创造优美、移动应用的解决方案，以及相关的最佳实践。</p></li>
<li><p><a href="http://www.raywenderlich.com/76285/beginning-core-image-swift">《Beginning Core Image in Swift》</a>：文章介绍了在Swift中使用Core Image，包括使用基础滤镜、从相册加载图片、保存图片到相册等。</p></li>
<li><p><a href="http://www.raywenderlich.com/79863/video-tutorial-introduction-unity-part-1-introduction">《Introduction to Unity Part 1: Introduction》</a>：本视频对Unity进行了入门性的介绍。</p></li>
</ol>


<h2>图书</h2>

<ol>
<li><a href="http://swifter.tips">《Swifter &ndash; 100 个 Swift 必备 tips》</a>：著名iOS博客作者onevcat总结和分享了 Swift 中 100 条十分实用的小技巧和需要特别注意的地方，希望能让大家更好更快地掌握 Swift。本书提供了5章的试读，最低售价3.99$。</li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="http://joeyio.com/2014/08/12/tweak-flexloader/">FLEXLoader</a>：FLEXLoader是<a href="http://weibo.com/2js3">@拓词Joey</a>写的一个可以动态加载FLEX的开源越狱插件，它以加载动态库的方式注入到系统App和用户的App中。FLEX全称是”Flipboard Explorer”，是Flipboard团队开发一组调试和探测App的开源工具，功能非常强大，比如查看和修改View的层级结构，查看和修改堆内存中的对象信息等等，更多FLEX介绍和使用信息参考<a href="https://github.com/Flipboard/FLEX">这里</a>。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/ochococo/Design-Patterns-In-Swift">Design-Patterns-In-Swift</a>：该项目用Swift实现了多种设计模式，读者可以当作代码示例参考。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-08-18T21:53:55+08:00" pubdate data-updated="true">Aug 18<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第20期]]></title>
    <link href="http://blog.devtang.com/blog/2014/08/12/ios-weekly-20/"/>
    <updated>2014-08-12T20:08:34+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/08/12/ios-weekly-20</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/08/ios-notification-center">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：iOS 通知中心扩展制作入门，iOS APP可执行文件的组成，objc非主流代码技巧等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://onevcat.com/2014/08/notification-today-widget/">《iOS 通知中心扩展制作入门》</a>：本文通过一个简单的实用 demo 介绍了一下 iOS 8 中扩展开发的一些共通方法和一个通知中心扩展的实际制作。</p></li>
<li><p><a href="http://blog.cnbang.net/tech/2296/">《iOS APP可执行文件的组成》</a>：iOS APP编译后，除了一些资源文件，剩下的就是一个可执行文件，本文分析了该可执行文件的组成。该文章的作者是 <a href="http://weibo.com/bang">@bang</a>。</p></li>
<li><p><a href="http://yulingtianxia.com/blog/2014/08/08/spritekitzai-ios8he-osx10-dot-10zhong-de-xin-te-xing/#jtss-tsina">《SpriteKit在iOS8和OSX10.10中的新特性》</a>：在iOS8和OSX10.10中SpriteKit迎来了重大升级。在物理表现方面增加了着色器，光照和阴影；在物理模拟方面增加了像素物理体、力场和宇宙动力学和约束等；在Xcode中集成了场景编辑器，你不需要写代码就能完成一些复杂的工作；此外它还集成了SceneKit以及其他的改进。本文对这些新特性做了详细介绍。</p></li>
<li><p><a href="http://billwang1990.github.io/blog/2014/08/07/remote-use-lldb/">《使用LLDB远程调试APP》</a>：文章作者因为最近要开始学习一些iOS逆向的一些东西，调试别人的app自然是必不可少的工作。试验后发现用GDB调试并不好用，而且苹果推的也是LLDB，所以需要使用LLDB来进行调试工作。使用LLDB就不像使用GDB进行调试那么方便，使用GDB的话直接在Cydia里面安装好GDB之后，ssh到你的设备就可以开始工作了，使用LLDB远程调试你越狱设备上的APP稍微麻烦一点。作者详细介绍了使用细节。</p></li>
<li><p><a href="http://blog.xcodev.com/archives/objective-c-naming/">《Objective-C之优雅的命名》</a>：计算机语言是人和计算机之间通讯的媒介。好的代码应该是就像人对计算机说话那样，自然而优雅。命名看上去是一件很简单的事，而往往越是简单的事越难做好，否则大师们也不会把命名看成是计算机界的难题了。如何把Objective-C这门计算机语言以优雅的方式“说”出，还是比较考验工程师对它的理解深度的。在苹果的SDK中有大量的API，我们可以从这些API中体会到一些命名的艺术。</p></li>
<li><p><a href="http://www.jessesquires.com/apples-to-apples-part-two/">《Apples to apples, Part II》</a>：本文是JSQMessagesViewController 的作者 Jesse Squires 博客上写的一篇 Objective-C 与 Swift 性能对比分析文章。从中可以了解到在开启完优化之后，Swift在性能上的表现是非常不错的。本文来自 <a href="http://weibo.com/u/2034474825">@isaced</a>的推荐。</p></li>
<li><p><a href="https://github.com/ShinobiControls/iOS8-day-by-day">《iOS8-day-by-day》</a>：这是一个学习iOS8的系列文章合集，一共有16篇文章。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/08/02/objc-weird-code/">《objc非主流代码技巧》</a>：看开源代码时，总会看到一些大神级别的代码，给人眼前一亮的感觉，多数都是被淡忘的C语言语法，作者在文章中总结了objc写码中遇到的各类非主流代码技巧和一些妙用。</p></li>
<li><p><a href="http://msching.github.io/blog/2014/08/02/audio-in-ios-5/">《iOS音频播放 (五)：AudioQueue》</a>：本文讲解了如何使用AudioQueue播放音频数据。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://fauxpasapp.com/">Faux Pas for Xcode</a>：Faux Pas for Xcode是一个项目检查工具。使用它相当于给自己的项目请了一个专业的 Reviewer，它会指出项目级别上不规范不合理的地方，并且有相关内容的链接可以学习。</p></li>
<li><p><a href="http://ios.b2mp.cn/tools">App Icons Create Tool</a>：这是  <a href="http://weibo.com/helou?from=usercardnew">@往何处寻</a> 做的一键创建iOS APP应用图标的在线工具，可以帮助你生成各种尺寸的应用图标。</p></li>
<li><p><a href="https://github.com/lexrus/ios-dev-playbook">ios-dev-playbook</a>: ios-dev-playbook是一个快速配置 iOS 开发需要的服务器工具。目前只支持 Debian Wheezy服务器，可以安装 GitLab、Countly、Jenkins 等。该项目作者是<a href="https://twitter.com/lexrus">@lexrus</a>。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/Alamofire/Alamofire">Alamofire</a>：Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。</p></li>
<li><p><a href="http://www.oschina.net/p/easyios">EasyIOS</a>: EasyIOS是基于MVVM 的iOS开发框架。它封装了Scene、SceneModel、Model、Action四种模型来对IOS进行开发，4种模型的定义解决了IOS开发中ViewController承担了过多角色而造成的代码质量低下，使得结构思路更加清晰。</p></li>
<li><p><a href="https://github.com/AgileBits/onepassword-app-extension">1Password Extension for iOS Apps</a>：1Password的扩展SDK，可以方便地集成到iOS应用中。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-08-12T20:08:34+08:00" pubdate data-updated="true">Aug 12<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第19期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/30/ios-weekly-19/"/>
    <updated>2014-07-30T22:10:03+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/30/ios-weekly-19</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/apple-earnings-announcement">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果第三季度财报公布，iOS界面开发的大一统，Flipboard开源的FLEX工具等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://pad.pconline.com.cn/514/5144196.html">《净利润达77亿美元!苹果第三季度财报公布》</a>：苹果发布了截至6月28日的2014财年第三季度财报。从财报中我们可以看到，苹果在第三财季营收374亿美元，同比增长6%；净利润为77亿美元，同比增长12%。</p></li>
<li><p><a href="http://tech.qq.com/a/20140721/005712.htm">《苹果iOS在日本占据了超过50%的市场》</a>：苹果iOS在日本占据了超过50%的市场，在中国的份额为14.7%。</p></li>
<li><p><a href="http://www.huxiu.com/article/38395/1.html">《苹果财报解读》</a>：中国地区 iPhone 销量上升 48%，iPhone 6 备受瞩目。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://onevcat.com/2014/07/ios-ui-unique/">《WWDC 2014 Session笔记 &ndash; iOS界面开发的大一统》</a>：iOS 8 和 OS X 10.10 中一个被强调了多次的主题就是大一统，Apple 希望通过 Hand-off 和各种体验的无缝切换和集成将用户黏在由 Apple 设备构成的生态圈中。对于广大 iOS 开发者赖以生存的 UIKit 来说，这次最大的变化就是 Size Classes 的引入和新的 Presentation 系统了，本文对Size Classes及其相关知识进行了详细的介绍。</p></li>
<li><p><a href="http://airspeedvelocity.net/">《Airspeed Velocity》</a>：一个专门介绍Swift语言的博客。</p></li>
<li><p><a href="http://nomothetis.svbtle.com/">《ALEXANDROS SALAZAR》</a>：一个专门介绍Swift语言的博客。</p></li>
<li><p><a href="http://www.raywenderlich.com/72021/supercharging-xcode-efficiency">《Supercharging Your Xcode Efficiency》</a>：文章介绍了各种提高开发效率的Xcode使用技巧。</p></li>
<li><p><a href="http://objccn.io/issue-14-3/">《插件》</a>：插件是给你已经发布的 App 增加功能的一个好办法，Mac 上的 App 支持插件已经有很长的历史了。在 NSBundle 的帮助下，插件开发变得很简单，本文介绍了在Mac上进行插件开发的方法。</p></li>
<li><p><a href="https://github.com/vsouza/awesome-ios">《Awesome iOS》</a>：一个iOS的各类优秀的开源项目集合。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2014/07/27/ios-evelup-tips/">《iOS开发如何提高》</a>：本文分享了iOS开发提高的各种方法。</p></li>
<li><p><a href="http://weibo.com/2584320772/BfHoM6MM4">《如何编写 iOS 8 Widget》</a>：作者简单介绍了 iOS 8 Widget的编写方法。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="https://www.youtube.com/user/UIKonf/feed">《UIKonf 2014》</a>：国外的iOS开发技术会议UIKonf视频。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/markohlebar/Peckham">Peckham</a>：你是否遇到这样的场景?在源码中用到一个类，写完发现因为没有import它的头文件，所以编译不通过。正常情况下，你需要跳转到源代码头部加入该头文件，然后再继续跳回上次编辑位置继续写代码。这样的跳转很不方便，而且让你的逻辑被打断。<a href="https://github.com/markohlebar/Peckham">Peckham</a>是一个帮助你填写#import头文件的Xcode插件，使用它可以方便在源代码的任意位置插入所需要的头文件。</p></li>
<li><p><a href="http://www.robovm.com/">RoboVM</a>：用Java来写原生的iOS程序。</p></li>
<li><p><a href="https://github.com/Flipboard/FLEX">FLEX</a>：FLEX是Flipboard开源的一系列在应用中调试的工具集。该工具集提供了查看和修改相关view的属性功能。</p></li>
<li><p><a href="https://appbot.co/">AppBot</a>: AppBot是可以订阅App Store用户的评价和评分，不局限于自己的产品，其他App也可以订阅然后会邮件发送给你，随时了解用户的评价，改善产品。本条来自 <a href="http://weibo.com/phpmaple">@KooFrank</a>的推荐。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/ftao/vpn-deploy-playbook">vpn-deploy-playbook</a>：一个自动部署各种翻墙服务的工具，包括IPSec，L2TP，PPTP，Cisco AnyConnect，SigmaVPN，APN，shadowsocks，OpenVPN，DNS，SPDY，用户管理等功能。</p></li>
<li><p><a href="https://github.com/maciekish/iReSign">iReSign</a>：一个可以把ipa用企业证书重新签名的开源项目。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-30T22:10:03+08:00" pubdate data-updated="true">Jul 30<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发如何提高]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/27/ios-levelup-tips/"/>
    <updated>2014-07-27T17:17:30+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/27/ios-levelup-tips</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/weixin-why.jpg"></p>

<p>许多人在博客和微信上咨询我iOS开发如何提高，经过一番思考之后，我能想到如下一些提高的办法，我个人也是通过这些方法来提高的。</p>

<h2>阅读博客</h2>

<p>在现在这个碎片化阅读流行的年代，博客的风头早已被微博盖过。而我却坚持写作博客，并且大量地阅读同行的iOS开发博客。博客的文章长度通常在3000字左右，许多iOS开发知识都至少需要这样的篇幅才能完整地讲解清楚。并且博客相对于书籍来说，并没有较长的出版发行时间，所以阅读博客对于获取最新的iOS开发知识有着非常良好的效果。</p>

<p>我自己精心整理了国内40多位iOS开发博主的博客地址列表：<a href="https://github.com/tangqiaoboy/iOSBlogCN">https://github.com/tangqiaoboy/iOSBlogCN</a>，希望大家都能培养起阅读博客的习惯。</p>

<p>国外也有很多优秀的iOS开发博客，他们整体质量比中文的博客更高，以下是一些推荐的博客地址列表：</p>

<table>
<thead>
<tr>
<th>博客名 </th>
<th> 博客地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>objc.io </td>
<td> <a href="http://www.objc.io/">http://www.objc.io/</a></td>
</tr>
<tr>
<td>Ray Wenderlich</td>
<td> <a href="http://www.raywenderlich.com">http://www.raywenderlich.com</a></td>
</tr>
<tr>
<td>iOS Developer Tips </td>
<td> <a href="http://iosdevelopertips.com/">http://iosdevelopertips.com/</a></td>
</tr>
<tr>
<td>iOS Dev Weekly </td>
<td> <a href="http://iosdevweekly.com/">http://iosdevweekly.com/</a></td>
</tr>
<tr>
<td>NSHipster </td>
<td> <a href="http://nshipster.com/">http://nshipster.com/</a></td>
</tr>
<tr>
<td>Bartosz Ciechanowski </td>
<td> <a href="http://ciechanowski.me">http://ciechanowski.me</a></td>
</tr>
<tr>
<td>Big Nerd Ranch Blog </td>
<td> <a href="http://blog.bignerdranch.com">http://blog.bignerdranch.com</a></td>
</tr>
<tr>
<td>Nils Hayat </td>
<td> <a href="http://nilsou.com/">http://nilsou.com/</a></td>
</tr>
</tbody>
</table>


<p>另外，使用博客RSS聚合工具（例如Feedly：<a href="http://www.feedly.com/">http://www.feedly.com/</a>）可以获得更好的博客阅读体验。手机上也有很多优秀的博客阅读工具（我使用的是<a href="http://newsify.co/">Newsify</a>）。合理地使用这些工具也可以将你在地铁上、睡觉前等碎片时间充分利用上。</p>

<h2>读书</h2>

<p>博客的内容通常只能详细讲解一个知识点，而书籍则能成体系地介绍整个知识树。相比国外，中国的书籍售价相当便宜，所以这其实是一个非常划算的提高的方式。建议大家每年至少坚持读完1本高质量的iOS开发书籍。</p>

<p>去年出版的<a href="http://as.wiley.com/WileyCDA/WileyTitle/productCd-1118818342.html">《iOS 7 Programming Pushing the Limits》</a> 以及  <a href="http://item.jd.com/11258970.html">《Objective-C高级编程：iOS与OS X多线程和内存管理》</a> 都算是不错的进阶方面的读物。顺便打个广告，我自己也在写一本iOS进阶方面的图书，年底前应该能上市。</p>

<h2>看WWDC视频</h2>

<p>由于iOS开发在快速发展，每年苹果都会给我们带来很多新的知识。而对于这些知识，第一手的资料就是WWDC的视频。</p>

<p>通常情况下，一个iOS开发的新知识首先会在WWDC上被苹果公开，然后3个月左右，会有国内外的博客介绍这些知识，再过半年左右，会有国外的图书介绍这些知识。所以如果想尽早地了解这些知识，那么只有通过WWDC的视频。</p>

<p>现在每年的WWDC视频都会在会议过程中逐步放出，重要的视频会带有英文字幕。坚持阅读这些视频不但可以获得最新的iOS开发知识，还可以提高英文听力水平。</p>

<h2>看苹果的官方文档</h2>

<p>苹果的官方文档相当详尽，对于不熟悉的API，阅读官方文档也是最直接有效地方式。</p>

<p>苹果的文档比较海量，适合选一些重点来阅读，比如人机交互指南就是必读的，而其它的内容可以遇到的时候作为重点资源来查阅。</p>

<h2>看开源项目的代码</h2>

<p>大家一定有这样的感受，很多时候用文字讲解半天，还不如写几行代码来得直观。阅读优秀的开源项目代码，不但可以学习到iOS开发本身的基本知识，还能学习到设计模式等软件架构上的知识。</p>

<p>如果读者能够参与到开源项目的开发中，则能进一步提高自己的能力。</p>

<h2>多写代码，多思考</h2>

<p>知识的积累离不开实践和总结，我认为iOS代码量如果没有超过10万行，是不能称得上熟悉iOS开发的。某些在校的学生，仅仅做了几个C++的大作业，就在求职简历里面写上“精通C++”，则真是让人哭笑不得。</p>

<p>在多写代码的同时，我们也要注意不要&#8221;重复造轮子&#8221;，尽量保证每次写的代码都能具有复用性。在代码结构因为业务需求需要变更时，及时重构，在不要留下技术债的同时，我们也要多思考如何设计应用架构，能够保证满足灵活多变的产品需求。</p>

<p>在多次重构和思考的过程中，我们就会慢慢积累出一类问题的“最佳实践”方式，成为自己宝贵的经验。</p>

<h2>多和同行交流</h2>

<p>有些时候遇到一些难解的技术问题，和同行的几句交流就可能让你茅塞顿开。。另外常见的技术问题通常都有人以前遇到过，简单指导几句就能让你一下子找到正确的解决方向。</p>

<p>国内开发者之间的交流，可以通过论坛，微博，QQ群等方式来进行。另外各大公司有时候会办技术沙龙，这也是一个认识同行的好机会。</p>

<p>需要特别提醒的是，和国内开发者之前交流要注意讨论质量，有一些论坛和QQ群讨论质量相当低下，提的问题都是能通过简单Google获得的，这种社区一定要远离，以提高自己的沟通效率。</p>

<p>除了在国内的技术社区交流，建议读者可以去国外的stackoverflow：<a href="http://www.stackoverflow.com">http://www.stackoverflow.com</a>上提问或回答问题。</p>

<h2>分享</h2>

<p>值得尝试的分享方式有：发起一个开源项目、写技术博客、在技术会议上做报告。这几种方式都比较有挑战，但是如果能大胆尝试，肯定会有巨大的收获。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-27T17:17:30+08:00" pubdate data-updated="true">Jul 27<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第18期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/22/ios-weekly-18/"/>
    <updated>2014-07-22T21:19:39+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/22/ios-weekly-18</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/apple-ibm-cooperation">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果与 IBM 展开长期深度合作，Swift官方博客，Swift开发的视频教程等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.36kr.com/p/213771.html">《苹果与 IBM 展开长期深度合作，双方优势互补，专注企业级移动市场》</a>：苹果与 IBM 达成排他性合作协议，联合各自领先市场的优势，共同打造一样新品类商业应用，建立全新的企业级移动体验——IBM 享誉已久的大数据及分析能力将注入苹果的 iPhone 与 iPad——结合后者擅长的用户体验，共同改善企业及员工使用 iOS 设备工作的流程。</p></li>
<li><p><a href="http://www.cocoachina.com/applenews/apple/2014/0715/9148.html">《苹果官方数据显示iOS 7渗透率已达90%》</a>：苹果最新数据显示，7月7日到13日之间，在访问App Store的设备中，90%的设备运行了iOS 7系统，而距离iOS 7正式发布仅仅为10个月的时间。不过国内iOS 7系统的比例还远远未达到80%。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="https://developer.apple.com/swift/blog/">《Swift官方博客》</a>：苹果在开发者中心建立了Swift官方博客，用于帮助开发者获得Swift的相关知识和资源。</p></li>
<li><p><a href="http://wonderffee.github.io/blog/2014/07/19/quincykit-and-kscrash/">《利用QuincyKit + KSCrash构建自己的Crash Log收集与管理系统 》</a>：iOS bug定位是极看重crash log的，目前网上Crash Log收集与管理服务较有名的有Crashlytics, Flurry, 友盟等。本文介绍了QuincyKit + KSCrash构建自己的Crash Log收集与管理系统的适用场景和特点。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/07/17/ios_0code_vc/">《0 代码 ViewController》</a>：作者尝试利用Interface Builder的Object控件实现了一个0行代码的View Controller，在减小Controller体积小，提供了一些新颖的思路。不过需要注意，其文章示例代码中的ViewModel持久了View对象，其实不是指的（MVVM）中ViewModel，更像是一个Controller的代理。</p></li>
<li><p><a href="http://www.thinkandbuild.it/from-objective-c-to-swift/">《From Objective-C to Swift: thoughts and hints》</a>：文章详细比较了Objective-C与Swift在编程中的细节差异。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.imooc.com/learn/149">《Swift开发的视频》</a>：jakelin做了一个Swift开发的视频，视频从头到尾的讲述了如何开发一个Swift Weather app，同时也讲述了CococaPods，Core Location和AFNetworking的使用，源码地址在 <a href="https://github.com/JakeLin/SwiftWeather">这里</a> 。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://pgyer.com/">蒲公英</a>：蒲公英是专为iOS开发者提供的免费应用众测平台，旨在解决开发者将应用分发给内测用户及众测时的繁杂、低效的问题。使用蒲公英，开发者可将应用一键上传至蒲公英网站实现托管，托管后的应用拥单独的下载页面。开发者只需将下载页面地址（或二维码）发给内测用户，测试用户即可用手机直接安装，避免了之前测试用户需要将手机用数据线连接到电脑，才能安装测试应用的痛苦过程。它的特点是可以帮你用企业证书签名，同时设置密码，帮助大家分发测试版本。</p></li>
<li><p><a href="https://github.com/realm/jazzy">jazzy</a>：jazzy是一个为Objective-C和Swift语言生成帮助文档的开源工具。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/realm/realm-cocoa">Realm</a>：Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-22T21:19:39+08:00" pubdate data-updated="true">Jul 22<span>nd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第17期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/11/ios-weekly-17/"/>
    <updated>2014-07-11T19:36:11+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/11/ios-weekly-17</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/swift-beta3-change">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Swift 进入TIOBE 指数排名16，Swift 在 Beta3 中的变化，WebKit in iOS 8等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">《Swift 进入TIOBE 指数排名16》</a>：在TIOBE的 2014年7月编程语言排行榜上，苹果公司新的编程语言Swift发布一个月内就进入TIOBE指数，名列位置16，前三名则没有变化，依旧是C、Java、Objective-C。</p></li>
<li><p><a href="http://www.guomii.com/posts/38291">《韩国当局下令 Apple 改变 App Store 退款政策》</a>：近日韩国当局已经下令 Apple 修改其公司的 App Store 退款政策，理由是现有政策违反了公平贸易的相关规定。众所周知，目前 App Store 的退款政策是用户先提交请求，然后由 Apple 员工审核要不要进行退款。也就是说，最终是否能够退款存在着员工一定的主观因素，因此被韩国公平贸易委员会认为这是不公平的。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://andelf.github.io/blog/2014/07/08/swift-beta3-changes/">《Swift 在 Beta3 中的变化》</a>：刚刚更新的Xcode 6 Beta3中，Swift编译器又进行了较大的更改，本文章详细介绍了改动细节。</p></li>
<li><p><a href="http://www.taofengping.com/2014/07/04/pinterest-transition-swift/">《用Swift实现Pinterest中的转场效果》</a>：在StackOverFlow上有人问Pinterest中转场的效果是如何实现的，在<a href="http://engineering.pinterest.com/post/67769846580/behind-the-pins-building-pinterest-3-0-for-ios">Pinterest的Blog</a>上工程师大致对Pinterest的结构作了大致的介绍，但是没有涉及到具体动画部分的实现。所以作者抽空用Swift重新实现了一遍这个转场的效果。</p></li>
<li><p><a href="http://www.hotobear.com/?p=741">《WebKit in iOS 8》</a>：苹果在WWDC上公布了iOS的新框架WebKit.framework，其包含了新的网页浏览控件WKWebView。本文介绍了其相对于UIWebView所做的改进。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/ios-8-presentation-controller">《iOS 8 presentation controller》</a>：iOS 8 新加入一个类：UIPresentationController，它与 iOS 7 新添加的类与协议一道，帮助我们方便快捷地实现View Controller 的自定义过渡效果。作者完成了一个使用相关API的演示程序。</p></li>
<li><p><a href="http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1">《MVVM Tutorial with ReactiveCocoa》</a>：RW新的ReactiveCocoa教材出炉了。不同于上次SimpleWeather的面面俱到，这次主讲MVVM设计模式和数据绑定。</p></li>
<li><p><a href="http://oleb.net/blog/2014/07/swift-strings/">《Strings in Swift》</a>：文章介绍了Swift中字符串的各种细节上的使用注意事项。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.infoq.com/cn/presentations/security-issues-behind-mobile-app">《移动APP背后的安全问题》</a>：现在已进入移动互联网时代，吃喝玩乐、办公支付等等各种应用都在抢占移动APP市场，由于安全无处不在的本质，在多年前就已经有少数人在研究移动APP的中木马、钓鱼等等，但很少有人想到移动APP安全跟WEB安全的关系。安全宝安全团队Leader尹毅在视频中分享了： 1、移动APP市场安全现状 2、安卓APP的反编译及漏洞挖掘 3、利用移动APP渗透的各种“猥琐”思路 4、自动化移动APP安全漏洞挖掘的程序实现。</li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="http://answerhuang.duapp.com/index.php/2014/07/06/dsym_tool/">《dSYM 文件分析工具》</a>：Xcode编译项目后，我们会看到一个同名的 dSYM 文件，dSYM 是保存 16 进制函数地址映射信息的中转文件，我们调试的 symbols 都会包含在这个文件中，并且每次编译项目的时候都会生成一个新的 dSYM 文件。作者分享了一个工具，能够根据dSYM文件方便从Crash信息中分析出有可能错误的地方。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/kylef/QueryKit">QueryKit</a>：QueryKit是一个用Swift实现的、方便对CoreData数据进行查询的工具库。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-11T19:36:11+08:00" pubdate data-updated="true">Jul 11<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第16期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/03/ios-weekly-16/"/>
    <updated>2014-07-03T20:41:49+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/03/ios-weekly-16</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/ios8-new-features">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：i​OS 8的新特性，敏感逻辑的保护方案，iOS绘图教程，WKWebView的使用等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://nshipster.cn/ios8/">《i​OS 8》</a>：Mattt Thompson在文章中介绍了iOS8的各种新特性。</p></li>
<li><p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/29210413">《iOS安全攻防：敏感逻辑的保护方案》</a>：文章介绍了一种低学习成本的，简易的Objective-C逻辑代码重写为C代码的办法。</p></li>
<li><p><a href="http://imtx.me/archives/1899.html">《谈谈 iOS 8 拍照和摄影功能的增强》</a>：iPhone 的照相功能有着敏捷的反应速度和不错的成像素质，使得 iPhone 成为最佳的随手拍手机。这次 WWDC 14 上尽管没有任何新硬件的更新，但是 iOS 8 在照相功能上的增强再次让我这样的随手拍狂人激动不已。文章主要介绍了iOS 8 带来的倒计时拍摄和延时摄影功能。</p></li>
<li><p><a href="http://blog.rpplusplus.me/blog/2014/06/26/wwdc14-session-401/">《WWDC14 Session 401 學習筆記》</a>：文章总结了WWDC14 Session 401介绍的PlayGround、Interface Builder和Debug相关功能的改进。</p></li>
<li><p><a href="http://www.cnblogs.com/xdream86/archive/2012/12/12/2814552.html">《iOS绘图教程》</a>：本文是《Programming iOS5》中Drawing一章的翻译，考虑到主题完整性，翻译版本中加入了一些书中未涉及到的内容。该文章中比较完整地介绍了iOS的整个绘图原理及相关的API。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/06/24/core-animation/">《Core Animation基本概念和Additive Animation》</a>：文章介绍一些Core Animation基本概念，最后提到一些iOS8的动画改动。</p></li>
<li><p><a href="https://mikeash.com/pyblog/friday-qa-2014-06-20-interesting-swift-features.html">《Interesting Swift Features》</a>：文章介绍了Swift相对于Objective-C增加的一些有趣的特性，并且讨论了其带来的好处。</p></li>
<li><p><a href="http://www.raywenderlich.com/76260/video-tutorial-introduction-swift-part-6-functions">《Introduction to Swift Part 6: Functions》</a>：Ray Wenderlich上的关于Swift函数的视频教程。</p></li>
<li><p><a href="http://www.raywenderlich.com/76248/facebook-pop-tech-talk-video">《Facebook Pop Tech Talk Video》</a>：Ray Wenderlich上的关于Facebook Pop的视频教程。</p></li>
<li><p><a href="http://www.kinderas.com/technology/2014/6/7/getting-started-with-wkwebview-using-swift-in-ios-8">《Getting started with WKWebView using Swift in iOS 8》</a>：文章介绍了iOS8中新加的WKWebView的使用。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://github.com/uranusjr/macdown">macdown</a>：macdown是一个开源的Mac下的markdown编辑器。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/lexrus/LTMorphingLabel">LTMorphingLabel</a>：用swift写的文字飘入飘出的效果。</p></li>
<li><p><a href="https://github.com/hewigovens/Crashlytics-FPCustomHandler">Crashlytics-FPCustomHandler</a>：这是一个为 Crashlytics 写的 category, 可以方便添加自己的崩溃处理函数。</p></li>
<li><p><a href="https://github.com/relatedcode/ParseChat">ParseChat</a>：ParseChat是基于Parse实现的一个实时的聊天室开源应用。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-03T20:41:49+08:00" pubdate data-updated="true">Jul 3<span>rd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC2014，苹果的“软件”发布会]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/02/talk-about-wwdc2014/"/>
    <updated>2014-07-02T22:04:10+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/02/talk-about-wwdc2014</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/wwdc2014.jpg"></p>

<p>在今年的6月2日到6日，苹果照例举行了一年一次的全球开发者大会（World Wide Developer Conference，简称WWDC）。由于去年大会门票在不到2分钟之内被抢购一空，今年苹果改成了用抽签的方式来决定WWDC现场门票的购买权。在发布会前，大家对今年的发布会充满了各种期待，希望在发布会上见到iPhone6、iWatch、新一代的耳机（因为苹果收购了耳机厂商beats）以及新版的Macbook。但是让人惊讶的是，苹果这次在大会上并没有发布任何新的硬件产品，但展示出其在软件上的各种功能改进和整合上的巨大努力，让我们一起来看看今年苹果的WWDC到底带来了哪些改变。</p>

<h2>OS X</h2>

<p>苹果沿用了从去年开始的，以地名来命名操作系统的习惯，新的OS X 10.10操作系统的名字为Yosemite（约塞米蒂国家公园）。Yosemite吸收了iOS7开始的扁平化的设计风格，整个Finder、Dock栏及相关应用都重新绘制了新的图标和界面，并且支持偏平化和毛玻璃的半透明效果。另外Yosemite还有一些细节改进，例如重新设计的通知中心、更快的Safari、更好用的邮件客户端等。与去年一样，新版的Yosemite操作系统仍然完全免费。</p>

<p>另外我们可以看到，今年苹果在软件上的许多改进都“借鉴”了不少其它应用。例如新版的Spotlight就和Mac下优秀的应用Alfred非常相似。而全新的 iCloud Drive 客户端，不但支持所有Mac和iOS设备，还支持Windows平台，这无疑是和Dropbox开始了正面的竞争（Dropbox在两年前拒绝了来自乔布斯8亿美元左右的收购请求，现在估值达到了100亿美元）。</p>

<p>不过在我看来，以上这些改进比起handoff功能来说，都不算什么。handoff功能显示出苹果对于功能整合的深度思考。苹果提了几个问题：</p>

<ul>
<li>当我在电脑上工作时，这个时候来了一个电话或短信，为什么我不能直接在电脑上接电话或回复短信呢？</li>
<li>当我在电脑的浏览器上看到一个电话号码时，我为什么不能直接点击这个电话号码拨打电话呢？</li>
<li>当我在手机上回复邮件写了一半，这个时候走到电脑前面了，为什么不能方便地在电脑上继续写邮件呢？</li>
<li>当我在电脑上看到一个小说正入迷，这个时候要出门，为什么不能直接拿起手机继续看呢？</li>
</ul>


<p>于是这次，苹果将Mac电脑和iPhone、iPad的功能进行了深度整合，当你拥有这三个设备时，它们每一个都可以接打电话和收发短信，你在它们任何一个设备上编辑的文档，也可以实时同步到另一个设备上。handoff并不是苹果的应用独有的功能，苹果将其相关的API都开放给了开发者，所以开发者也可以完全开发出支持handoff功能的应用。</p>

<p>handoff功能对于苹果而言意义重大，因为它再次重新定义了硬件生态圈，通过软件的深度整合，拥有多个苹果设备的用户会享受到极大的便利性。每一个设备的功能和信息都和其它苹果设备完美配合，使得单个硬件本身的功能被放大。这将催进拥有一个苹果设备的用户购买更多苹果的其它设备。随着苹果以后推出更多的智能硬件，其构造的硬件生态圈将像App Store软件生态圈一样，增加其产品的竞争力。</p>

<h2>iOS</h2>

<p>苹果在这次大会上推出了新的iOS8操作系统。在iOS8中，iMessage功能更一步增强，增加了发送语音的功能以及支持多人群聊，很多人都调侃说：“如果加上朋友圈，iMessage就和微信功能一样了”。但iMessage并不支持Android平台，所以对微信一类的应用来说完全没有任何威胁。iOS8中的图片编辑功能也得到了增强，通知中心允许用户进行更多地定制。另外苹果提供了HealthKit，用于集成用户健康相关的信息。新的Extension功能类似于Android的Intent，能够方便应用间相互调用。</p>

<p>相对于Yosemite带来的整合方面的改进，新版iOS8的改进的重点则是开放。苹果开放了输入法接口，允许第三方提供输入法。苹果也开放了Touch ID，允许第三方应用获得指纹信息。HomeKit则为智能硬件开放了不少可以互操作的接口。另外，iOS8还新增了4000个新的API，开放了大量底层API接口供应用调用。所以对于普通用户而言，iOS8新增的可见功能可能是有限的，但是其开放的大量API和新SDK释放出了巨大的想象空间，相信会产生更多有趣的应用。</p>

<h2>Swift</h2>

<p>这次的WWDC的口号是：“Write the code. Change the world”，Swift的推出算是很好地诠释了本口号。苹果的Objective-C语言发明于与C++同时期的上世纪80年代初，虽然苹果对其进行了很多次改进，但这终究像给应用打补丁一样，不是特别舒服。</p>

<p>这次Swift的推出，算是苹果大胆的一次尝试，试图用全新的编程语言来提高OS X和iOS程序员的开发效率，单从语言特性上来看，Swift吸收了众多现代编程语言的优秀特性，例如类型推断（Type inference）、范型（Generic）、闭包（Closure）、命名空间（namespace），元组（tuple）等，整体语法上也更加简洁。我们也了解到Swift是苹果从4年前就开始筹划中的事情，可见苹果在长远规划上对于Swift语言的重视，相信未来Swift会接替更多Objective-C原本的地位，所有iOS开发者都应该花时间学习这门全新的语言。</p>

<p>苹果这次推出Swift也吸引了大量的讨论，其中比较不正确的观点是认为iOS开发的门槛因此而降低了。从我和身边的同行对Swift的学习和讨论来看，Swift并不是一门可以简单上手的语言。并且在未来一到两年内，iOS开发必然会经历同时使用Objective-C和Swift的过渡阶段。对于iOS开发者，除了必须掌握以前的Objective-C语言的知识，还需要学习并不简单的Swift，可见iOS开发的门槛不但没有降低，反而提高了不少。</p>

<h2>总结</h2>

<p>总体来说，苹果今年的WWDC大会虽然没有推出硬件上的新品，但是其在软件功能整合、开放系统API以及改进开发工具上做出了巨大努力，这些都会给苹果产品带来更大的竞争优势。</p>

<p>注：本文已投稿发表到<a href="http://www.csdn.net/article/2014-07-01/2820470%E3%80%82">CSDN</a>，未经允许不得转载。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-02T22:04:10+08:00" pubdate data-updated="true">Jul 2<span>nd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些好用的iOS开发工具]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/29/ios-dev-tools/"/>
    <updated>2014-06-29T13:12:01+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/29/ios-dev-tools</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/ColorSync-Utility-icon.png"></p>

<h2>版权说明</h2>

<p>本文首发于《程序员》杂志2014年6月刊，未经允许，请勿转载。</p>

<h2>前言</h2>

<p>从苹果发明iPhone起，AppStore上的一个又一个类似flappy bird的一夜暴富的故事刺激着大量开发者加入移动开发大军。随着这些开发者出现的，还有大量方便iOS开发者的各种工具。这些工具作为整个应用开发生态链的重要一环，极大地方便了广大应用开发者，节省了应用开发的时间。</p>

<p>本文将从应用工具、命令行工具、插件工具3个方面，介绍这些优秀的应用。</p>

<h2>图形应用工具</h2>

<h3>Charles</h3>

<p><img src="http://blog.devtang.com/images/charles-logo.png"></p>

<p>Charles（<a href="http://www.charlesproxy.com">http://www.charlesproxy.com</a>）是在Mac下常用的截取网络封包的工具，在做iOS开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Charles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<p>Charles详细的使用说明，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/">《iOS开发工具-网络封包分析工具Charles》</a></p>

<h3>界面调试</h3>

<p>PonyDebugger（<a href="https://github.com/square/PonyDebugger">https://github.com/square/PonyDebugger</a>）、Reveal（<a href="http://revealapp.com/">http://revealapp.com/</a>）、Spark Inspector（<a href="http://sparkinspector.com/">http://sparkinspector.com/</a>）是三个常用的界面调试工具，可以在程序运行时动态调试iOS应用界面。PonyDebugger是免费并且开源的，后两者是收费的，不过功能更加强大。</p>

<p>对于动态或复杂的交互界面，手写UI的是不可避免的，而Reveal一类的工具可以方便我们查看控件的相应属性是否正常，并且可以在程序运行时，动态地修改界面元素。这样就不用反复地修改代码并且重启程序了。</p>

<h3>xScope</h3>

<p>xScope（<a href="http://xscopeapp.com/">http://xscopeapp.com/</a>）是一类与界面开发相关的工具集。对于iOS开发，比较好用的功能包括它的放大镜取色工具、标尺工具等。其中放大镜取色工具可以将取到的多个色集收集起来，方便后续使用，并且支持直接粘贴成相关的程序颜色代码。</p>

<p>xScope是收费软件，对于未付费版本，其功能有一些限制。</p>

<h3>ImageOptim</h3>

<p>ImageOptim（<a href="http://imageoptim.com/">http://imageoptim.com/</a>）是一个图象压缩的免费工具。iOS工程默认使用的是 pngcrush 命令来压缩图片，不过其压缩比率其实不高。对于应用中图片资源比较多的读者，可以尝试使用 ImageOptim 来达到最大的图片压缩效果。</p>

<p>如果你从未尝试过ImageOptim一类的图片压缩工具，那么第一次给IPA文件瘦身的效果应该是比较惊人的。我个人的经验是，初次使用时ImageOptim能减少至少10%的应用图片资源占用。</p>

<p>ImageOptim的实现原理是使用各种开源的图像压缩工具，然后取效果最好的那一个。它尝试的工具包括：PNGOUT, Zopfli, Pngcrush, AdvPNG, extended OptiPNG, JpegOptim, jpegrescan, jpegtran 和 Gifsicle。</p>

<p>安装方式是从其官方网站（<a href="http://imageoptim.com/">http://imageoptim.com/</a>）上下载程序文件，拖动到“应用程序”目录即可。下图是本篇文章所有的配图，可以看到使用ImageOptim达到了29.5%的体积缩小。</p>

<p><img src="http://blog.devtang.com/images/tool-imageoptim.jpg"></p>

<h3>马克鳗</h3>

<p>马克鳗（<a href="http://www.getmarkman.com/">http://www.getmarkman.com/</a>）是国人开发的一款免费标注工具，可以方便地在美术输出的设计稿上标注相应界面元素的大小，颜色，边距，说明等。</p>

<h2>命令行工具</h2>

<h2>CocoaPods</h2>

<p><img src="http://blog.devtang.com/images/xcode-cmd-cocoapods.png"></p>

<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具或者是中央代码仓库。比如Java的maven，Nodejs的npm等。而CocoaPods（<a href="http://cocoapods.org/">http://cocoapods.org/</a>）是为iOS程序提供依赖管理的工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<p>在我开发猿题库客户端时，其使用了24个第三方开源库。在没有使用CocoaPods以前，我需要:</p>

<ol>
<li>把这些第三方开源库的源代码文件复制到项目中，或者设置成git的submodule。</li>
<li>对于这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如通常情况下，一个网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics, zlib。</li>
<li>对于某些开源库，我还需要设置<code>-licucore</code>或者 <code>-fno-objc-arc</code>等编译参数</li>
<li>管理这些依赖包的更新。</li>
</ol>


<p>这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行<code>pod install</code>。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>

<p>使用CocoaPods还需要注意以下几点：</p>

<ol>
<li>需要使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次<code>pod update</code>命令。</li>
<li>当你执行<code>pod install</code>之后，除了Podfile外，CocoaPods还会生成一个名为<code>Podfile.lock</code>的文件，你应该把这个文件加入到版本管理中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行<code>pod install</code> 不会更改版本，要<code>pod update</code>才会改<code>Podfile.lock</code>了。这样的好处是：当多人协作的时候，可以保证所有人的第三库环境是完全一样的。</li>
</ol>


<p>详细的使用说明，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">《用CocoaPods做iOS程序的依赖管理》</a></p>

<h2>nomad</h2>

<p>nomad（<a href="http://nomad-cli.com/">http://nomad-cli.com/</a>）是一个方便你操作苹果开发者中心（Apple Developer Center）的命令行工具，可以做的事情包括方便地添加测试设备，更新证书文件，增加App id，验证IAP的凭证等。</p>

<p>安装方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install nomad-cli</span></code></pre></td></tr></table></div></figure>


<p>安装完后，首先执行<code>ios login</code>，你的Developer账号密码会被它存储到Keychain中，之后就可以用命令行来完成各种后台操作了，例如：</p>

<p>添加测试设备：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ios devices:add "TangQiaos iPhone"=&lt;Device Identifier&gt;</span></code></pre></td></tr></table></div></figure>


<p>更新证书文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ios profiles:devices:add TangQiao_Profile "TangQiaos iPhone"=&lt;Device Identifier&gt;</span></code></pre></td></tr></table></div></figure>


<p>nomad还有很多功能，建议大家阅读其官方网站的文档进一步学习。</p>

<h2>xctool</h2>

<p>xctool（<a href="https://github.com/facebook/xctool">https://github.com/facebook/xctool</a>）是facebook开源的一个iOS编译和测试的工具。使用它而不是用Xcode的UI界面是因为它是一个纯命令行工具。比如：我们可以使用xctool在命令生下进行编译和单元测试，然后将测试结果集成到Jenkins中，这样就实现了自动化的持续集成。虽然苹果也在OSX Server上推出了自己的自动化集成工具BOT，但其配置和使用上现在仍然不太方便。</p>

<p>安装xctool可以使用brew命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install xctool</span></code></pre></td></tr></table></div></figure>


<p>使用xctool编译项目可以使用如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>path/to/xctool.sh \
</span><span class='line'>  -project YourProject.xcodeproj \
</span><span class='line'>  -scheme YourScheme \
</span><span class='line'>  build</span></code></pre></td></tr></table></div></figure>


<p>使用xctool执行单元测试，可以使用如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>path/to/xctool.sh \
</span><span class='line'>  -workspace YourWorkspace.xcworkspace \
</span><span class='line'>  -scheme YourScheme \
</span><span class='line'>  test</span></code></pre></td></tr></table></div></figure>


<p>xctool还有很多功能，建议大家阅读xctool官方网站的文档进一步了解更多的功能。</p>

<h2>appledoc</h2>

<p>appledoc（<a href="https://github.com/tomaz/appledoc">https://github.com/tomaz/appledoc</a>）是一个从源码中抽取文档的工具。</p>

<p>对于开发者来说，文档最好和源码在一起，这样更新起来更加方便和顺手。象Java一类的语言本身就自带javadoc命令，可以从源码中抽取文档。而appledoc就是一个类似javadoc的命令行程序，可以从iOS工程的源代码中抽取相应的注释，生成帮助文档。</p>

<p>相对于其它的文档生成工具，appledoc的优点是：</p>

<ul>
<li>它默认生成的文档风格和苹果的官方文档是一致的。</li>
<li>appledoc就是用objective-c写的，必要的时候调试和改动也比较方便。</li>
<li>它可以生成docset，并且集成到xcode中。集成之后，在相应的API调用处，按住option再单击就可以调出相关的帮助文档。</li>
<li>它没有特殊的注释要求，兼容性高。</li>
</ul>


<p>安装appledoc可以直接使用brew命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install appledoc</span></code></pre></td></tr></table></div></figure>


<p>使用时切换到iOS工程目录下，执行以下操作即可，appledoc会扫描当前路径下的所有文件，然后生成好文档放到doc目录下。你也可以用appledoc —help查看所有可用的参数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appledoc -o &lt;output_path&gt; \
</span><span class='line'>--project-name &lt;project_name&gt; \
</span><span class='line'>--project-company &lt;project_company&gt; .</span></code></pre></td></tr></table></div></figure>


<p>详细的使用介绍，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/">《使用Objective-C的文档生成工具:appledoc》</a></p>

<h2>Xcode插件</h2>

<p>Xcode是iOS的集成开发环境，虽然苹果一直在不断改进Xcode，但程序员总是有各种新奇的想法和需求，当Xcode无法满足他们时，于是他们就会通过插件的方式来为Xcode增加新的功能。本节将会给大家介绍一些常用的Xcode增强插件。</p>

<p>Xcode所有的插件都安装在目录<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code>下，每个插件为一个子目录，你也可以手工切换到这个目录来增加或删除插件。</p>

<h3>Alcatraz</h3>

<p><img src="http://blog.devtang.com/images/tool-alcatraz-logo.jpg"></p>

<p>Alcatraz（<a href="http://alcatraz.io/">http://alcatraz.io/</a>）是管理Xcode所有插件的插件，它可以直接集成到Xcode的图形界面中，让你感觉就像在使用Xcode自带的功能一样。Alcatraz不但可以管理Xcode的插件，它另外还提供了管理Xcode工程模版以及颜色配置的功能。</p>

<p>使用如下的命令行来安装Alcatraz：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p ~/Library/Application\ Support/\
</span><span class='line'>Developer/Shared/Xcode/Plug-ins;
</span><span class='line'>curl -L http://git.io/lOQWeA |\
</span><span class='line'> tar xvz -C ~/Library/Application\ Support/\
</span><span class='line'> Developer/Shared/Xcode/Plug-ins
</span></code></pre></td></tr></table></div></figure>


<p>安装成功后重启Xcode，就可以在Xcode的顶部菜单中的&#8221;Window&#8221;&ndash;>“Package Manager”中找到Alcatraz。点击“Package Manager”，即可启动插件列表页面。你可以在右上角搜索插件，对于想安装的插件，点击其左边的图标，即可下载安装，如下所示，我正在安装KImageNamed插件：</p>

<p><img src="http://blog.devtang.com/images/alcatraz-install.jpg"></p>

<p>安装完成后，再次点击插件左边的图标，可以将该插件删除。</p>

<p>以下所有介绍的插件均可用该方法来安装或删掉，就不另行介绍了。</p>

<p>Alcatraz详细的使用介绍，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/">《使用Alcatraz来管理Xcode插件》</a></p>

<h3>KSImageNamed</h3>

<p>KSImageNamed（<a href="https://github.com/ksuther/KSImageNamed-Xcode">https://github.com/ksuther/KSImageNamed-Xcode</a>）是一个帮助你输入[UIImage imageNamed:]中的资源名的插件。当你输入<code>[UIImage imageNamed:]</code>时，会自动的弹出上下文菜单，供你选择你需要输入的图片资源名字，另外在选择图片资源时，还可以在左侧预览该资源。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/xcode-plugin-nsimage.jpg"></p>

<h3>XVim</h3>

<p>XVim（<a href="https://github.com/JugglerShu/XVim">https://github.com/JugglerShu/XVim</a>）是一个Xcode的vim插件，可以在Xcode的编辑窗口中开启vim模式。</p>

<p>vim模式最大的好处是可以全键盘操作，可以方便地移动光标以及复制、粘贴代码。XVim对于Xcode的分栏模式也有很好的支持，与vim自带的分栏模式一样，可以用快捷键<code>ctrl + w</code>来切换当前编辑的分栏。</p>

<h3>FuzzyAutocompletePlugin</h3>

<p>FuzzyAutocompletePlugin (<a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin</a>) 允许使用模糊的方式来进行代码自动补全。</p>

<p>举个例子，如果我们要重载 <code>viewDidAppear:</code>方法，那么我们必须依次建入view、did、appear 才能得到相应的补全信息，使用FuzzyAutocompletePlugin之后，我们可以建入vda (view、did、appear 三个单词的首字母)，或任意符合viewDidAppear整个单词出现顺序的子串(例如 vdapp, adear等)，即可匹配到该方法。</p>

<p><img src="https://raw.githubusercontent.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/master/demo.gif" alt="" /></p>

<h3>XToDo</h3>

<p>XToDo（<a href="https://github.com/trawor/XToDo">https://github.com/trawor/XToDo</a>）是一个查找项目中所有的带有 <code>TODO</code>, <code>FIXME</code>, <code>???</code>, <code>!!!</code> 标记的注释。</p>

<p>通常我们在项目开发中，由于种种原因，一些事情需要以后处理，这个时候为了防止遗忘，加上<code>TODO</code>或<code>FIXME</code>注释是非常有必要的，但是上线或提交代码前要寻找这些未解决的事项却稍显麻烦。XToDo可以提供一个汇总的界面，集中显示所有的未完成的<code>TODO</code>和<code>FIXME</code>标记。</p>

<h3>BBUDebuggerTuckAway</h3>

<p>BBUDebuggerTuckAway（<a href="https://github.com/neonichu/BBUDebuggerTuckAway">https://github.com/neonichu/BBUDebuggerTuckAway</a>）是一个非常小的工具，可以在你编辑代码的时候自动隐藏底部的调试窗口。因为通常情况下，调试的时候是加断点或监控变量变化，或者在Console窗口用<code>po</code>来输出一些调试信息。如果开始编辑代码了，说明已经调试结束了，这个时候隐藏调试窗口，可以给编辑界面更多空间，方便我们修改代码。</p>

<h3>SCXcodeSwitchExpander</h3>

<p>SCXcodeSwitchExpander（<a href="https://github.com/stefanceriu/SCXcodeSwitchExpander">https://github.com/stefanceriu/SCXcodeSwitchExpander</a>）帮助你迅速地在<code>switch</code>语句中填充枚举类型的每种可能的取值。</p>

<p>例如，当你输入<code>switch</code>，然后键入一个<code>NSTableViewAnimationOptions</code>类时，该插件会将其可能的取值补全在每一个<code>case</code>之后，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/xcode-plugin-switch.jpg"></p>

<h3>deriveddata-exterminator</h3>

<p>deriveddata-exterminator（<a href="https://github.com/kattrali/deriveddata-exterminator">https://github.com/kattrali/deriveddata-exterminator</a>）是一个清除Xcode缓存目录的插件。</p>

<p>有些时候Xcode会出各种奇怪的问题，最常见的是在某些复杂操作下（例如同一个项目，来回切换到各种分支版本），会造成Xcode显示一些编译的错误或警告，但是最终却又可以编译通过。新手遇到这种问题常常束手无策，而熟悉Xcode的人就知道，通常清除Xcode缓存就可以解决这类问题。该插件在Xcode菜单上增加了一个清除缓存按钮，可以一键方便地清楚缓存内容。</p>

<h3>VVDocumenter</h3>

<p>VVDocumenter（<a href="https://github.com/onevcat/VVDocumenter-Xcode">https://github.com/onevcat/VVDocumenter-Xcode</a>）是一个自动生成代码注释的工具，可以方便地将函数的参数名和返回值提取出来，这样结合上一节介绍的<code>appledoc</code>命令，就可以方便地将帮助文档输出。</p>

<p><img src="http://blog.devtang.com/images/xcode-plugin-vvdocument.png"></p>

<h3>ClangFormat</h3>

<p>ClangFormat（<a href="https://github.com/travisjeffery/ClangFormat-Xcode">https://github.com/travisjeffery/ClangFormat-Xcode</a>）是一个自动调整代码风格（Code Style）的工具。Xcode本身的代码缩进自动调整功能比较弱，特别是对于JSON格式，常常产生非常丑陋的默认缩进效果。ClangFormat-Xcode可以更好地对代码进行重新排版，并且内置了各种排版风格，也支持自定义风格。</p>

<h3>ColorSense</h3>

<p>ColorSense（<a href="https://github.com/omz/ColorSense-for-Xcode">https://github.com/omz/ColorSense-for-Xcode</a>）是一个<code>UIColor</code>颜色输入辅助工具，可以帮助你在编写<code>UIColor</code>代码时，实时预览相应的颜色，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/xcode-plugin-color.png"></p>

<h3>XcodeBoost</h3>

<p>XcodeBoost（<a href="https://github.com/fortinmike/XcodeBoost">https://github.com/fortinmike/XcodeBoost</a>）包含多个辅助修改代码的小功能，比如：</p>

<ul>
<li>可以在.m文件中复制方法实现，然后将该方法的定义粘贴到对应的.h文件中</li>
<li>可以在某一个源文件中直接输入正则表达式查找</li>
<li>可以复制粘贴代码时不启用Xcode的自动缩进功能（Xcode的自动缩进经常出问题，造成已经调整好的代码缩进，因为粘贴时被Xcode调整坏了）</li>
</ul>


<h2>小结</h2>

<p>本文分图形应用工具，命令行工具，Xcode插件三个部分，介绍了iOS开发中好用的工具。其中涉及的图形工具部分是收费的，而命令行工具和Xcode插件工具全部是免费并且开源的工具，笔者在此也感谢广大的开源软件作者，是他们让整个软件生态圈更加美好。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-06-29T13:12:01+08:00" pubdate data-updated="true">Jun 29<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
</feed>
