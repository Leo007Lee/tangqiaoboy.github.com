<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-08-24T19:16:20+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第22期]]></title>
    <link href="http://blog.devtang.com/blog/2014/08/24/ios-weekly-22/"/>
    <updated>2014-08-24T19:14:22+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/08/24/ios-weekly-22</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/08/shares-of-apple">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果股价创新高，iOS8自动调整UITableView布局，Swift学习心得等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://tech.qq.com/a/20140820/007526.htm">《苹果股价创新高 市值全球第一超第二名30%》</a>： 8月20日，苹果公司周二收盘股价创下历史新高水平，超过了2012年保持的最高记录。苹果作为全球市值最高的公司，比全球市值第二大的埃克森美孚公司高出了30%。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://zonble.net/archives/2014_08/1616.php">《Swift学习心得》</a>：作者分享了学习Swift语言的心得，包括苹果为什么要设计Swift语言以及Swift语言的各种特性。</p></li>
<li><p><a href="http://yulingtianxia.com/blog/2014/08/17/New-in-Table-and-Collection-Views/">《iOS8自动调整UITableView和UICollectionView布局》</a>：本文讲述了UITableView、UICollectionView实现self-sizing cell布局的知识，以及如何用InvalidationContext优化UICollectionView布局的更新。作者微博：<a href="http://weibo.com/yulingtianxia">@杨萧玉HIT</a>。</p></li>
<li><p><a href="http://yulingtianxia.com/blog/2014/08/19/best-practices-for-building-spritekit-games/">《创建SpriteKit游戏的最佳范例》</a>：本文从拓展性、游戏构造和性能三个方面分别讲述建立SpriteKit游戏时的一些实践经验和范例。作者微博：<a href="http://weibo.com/yulingtianxia">@杨萧玉HIT</a>。</p></li>
<li><p><a href="http://beyondvincent.com/blog/2014/07/30/provision-ios-ipa-app-for-in-house-enterprise-distribution/">《在企业内部分发 iOS 应用程序》</a>：在企业内部分发 iOS 应用程序非常复杂，作者详细介绍了实现的过程。</p></li>
<li><p><a href="https://developer.apple.com/swift/blog/?id=10">《Value and Reference Types》</a>：苹果的这篇官方微博介绍了Swift的值类型和引用类型的差别。</p></li>
<li><p><a href="http://www.raywenderlich.com/76519/add-table-view-search-swift">《How to Add Table View Search in Swift》</a>：来自raywenderlich的教程，用Swift实现为TableView增加搜索功能。</p></li>
<li><p><a href="https://www.mikeash.com/pyblog/friday-qa-2014-08-15-swift-name-mangling.html">《Swift Name Mangling》</a>：文章分析了Swift编译器对于函数名的处理方式。</p></li>
<li><p><a href="http://nshipster.com/swift-literal-convertible/">《Swift Literal Convertibles》</a>：文章介绍了Swift中的字面量（Literal）的类型转换规则。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/facebook/fishhook">fishhook</a>：fishhook是Facebook开源的一个可以hook系统方法的工具。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-08-24T19:14:22+08:00" pubdate data-updated="true">Aug 24<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第21期]]></title>
    <link href="http://blog.devtang.com/blog/2014/08/18/ios-weekly-21/"/>
    <updated>2014-08-18T21:53:55+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/08/18/ios-weekly-21</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/08/apple-icloud">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果iCloud中国数据转存中国电信，Swift Operators，100 个 Swift 必备 tips，FLEXLoader等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://www.36kr.com/p/214546">《苹果iCloud中国数据转存中国电信》</a>：出自抚州市崇仁县电信分公司的新闻显示：中国电信正式为苹果 iCloud 中国用户提供云存储服务，成为苹果公司在中国大陆地区唯一的云存储服务提供商。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://nshipster.com/swift-operators/">《Swift Operators》</a>：AFNetworking的作者<a href="http://mattt.me/">Mattt Thompson</a>在本文中详细介绍了swift的操作符，包括基本操作符，操作符重载以及一些使用原则。</p></li>
<li><p><a href="http://s2dongman.com/?p=658">《为移动而设计，第3章：视觉设计》</a>：理解规则，打破规则，为移动而设计需要我们不断思考，持续发现新的、优美的、易用的解决方案。本文讨论了在视觉设计上如何创造优美、移动应用的解决方案，以及相关的最佳实践。</p></li>
<li><p><a href="http://www.raywenderlich.com/76285/beginning-core-image-swift">《Beginning Core Image in Swift》</a>：文章介绍了在Swift中使用Core Image，包括使用基础滤镜、从相册加载图片、保存图片到相册等。</p></li>
<li><p><a href="http://www.raywenderlich.com/79863/video-tutorial-introduction-unity-part-1-introduction">《Introduction to Unity Part 1: Introduction》</a>：本视频对Unity进行了入门性的介绍。</p></li>
</ol>


<h2>图书</h2>

<ol>
<li><a href="http://swifter.tips">《Swifter &ndash; 100 个 Swift 必备 tips》</a>：著名iOS博客作者onevcat总结和分享了 Swift 中 100 条十分实用的小技巧和需要特别注意的地方，希望能让大家更好更快地掌握 Swift。本书提供了5章的试读，最低售价3.99$。</li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="http://joeyio.com/2014/08/12/tweak-flexloader/">FLEXLoader</a>：FLEXLoader是<a href="http://weibo.com/2js3">@拓词Joey</a>写的一个可以动态加载FLEX的开源越狱插件，它以加载动态库的方式注入到系统App和用户的App中。FLEX全称是”Flipboard Explorer”，是Flipboard团队开发一组调试和探测App的开源工具，功能非常强大，比如查看和修改View的层级结构，查看和修改堆内存中的对象信息等等，更多FLEX介绍和使用信息参考<a href="https://github.com/Flipboard/FLEX">这里</a>。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/ochococo/Design-Patterns-In-Swift">Design-Patterns-In-Swift</a>：该项目用Swift实现了多种设计模式，读者可以当作代码示例参考。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-08-18T21:53:55+08:00" pubdate data-updated="true">Aug 18<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第20期]]></title>
    <link href="http://blog.devtang.com/blog/2014/08/12/ios-weekly-20/"/>
    <updated>2014-08-12T20:08:34+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/08/12/ios-weekly-20</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/08/ios-notification-center">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：iOS 通知中心扩展制作入门，iOS APP可执行文件的组成，objc非主流代码技巧等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://onevcat.com/2014/08/notification-today-widget/">《iOS 通知中心扩展制作入门》</a>：本文通过一个简单的实用 demo 介绍了一下 iOS 8 中扩展开发的一些共通方法和一个通知中心扩展的实际制作。</p></li>
<li><p><a href="http://blog.cnbang.net/tech/2296/">《iOS APP可执行文件的组成》</a>：iOS APP编译后，除了一些资源文件，剩下的就是一个可执行文件，本文分析了该可执行文件的组成。该文章的作者是 <a href="http://weibo.com/bang">@bang</a>。</p></li>
<li><p><a href="http://yulingtianxia.com/blog/2014/08/08/spritekitzai-ios8he-osx10-dot-10zhong-de-xin-te-xing/#jtss-tsina">《SpriteKit在iOS8和OSX10.10中的新特性》</a>：在iOS8和OSX10.10中SpriteKit迎来了重大升级。在物理表现方面增加了着色器，光照和阴影；在物理模拟方面增加了像素物理体、力场和宇宙动力学和约束等；在Xcode中集成了场景编辑器，你不需要写代码就能完成一些复杂的工作；此外它还集成了SceneKit以及其他的改进。本文对这些新特性做了详细介绍。</p></li>
<li><p><a href="http://billwang1990.github.io/blog/2014/08/07/remote-use-lldb/">《使用LLDB远程调试APP》</a>：文章作者因为最近要开始学习一些iOS逆向的一些东西，调试别人的app自然是必不可少的工作。试验后发现用GDB调试并不好用，而且苹果推的也是LLDB，所以需要使用LLDB来进行调试工作。使用LLDB就不像使用GDB进行调试那么方便，使用GDB的话直接在Cydia里面安装好GDB之后，ssh到你的设备就可以开始工作了，使用LLDB远程调试你越狱设备上的APP稍微麻烦一点。作者详细介绍了使用细节。</p></li>
<li><p><a href="http://blog.xcodev.com/archives/objective-c-naming/">《Objective-C之优雅的命名》</a>：计算机语言是人和计算机之间通讯的媒介。好的代码应该是就像人对计算机说话那样，自然而优雅。命名看上去是一件很简单的事，而往往越是简单的事越难做好，否则大师们也不会把命名看成是计算机界的难题了。如何把Objective-C这门计算机语言以优雅的方式“说”出，还是比较考验工程师对它的理解深度的。在苹果的SDK中有大量的API，我们可以从这些API中体会到一些命名的艺术。</p></li>
<li><p><a href="http://www.jessesquires.com/apples-to-apples-part-two/">《Apples to apples, Part II》</a>：本文是JSQMessagesViewController 的作者 Jesse Squires 博客上写的一篇 Objective-C 与 Swift 性能对比分析文章。从中可以了解到在开启完优化之后，Swift在性能上的表现是非常不错的。本文来自 <a href="http://weibo.com/u/2034474825">@isaced</a>的推荐。</p></li>
<li><p><a href="https://github.com/ShinobiControls/iOS8-day-by-day">《iOS8-day-by-day》</a>：这是一个学习iOS8的系列文章合集，一共有16篇文章。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/08/02/objc-weird-code/">《objc非主流代码技巧》</a>：看开源代码时，总会看到一些大神级别的代码，给人眼前一亮的感觉，多数都是被淡忘的C语言语法，作者在文章中总结了objc写码中遇到的各类非主流代码技巧和一些妙用。</p></li>
<li><p><a href="http://msching.github.io/blog/2014/08/02/audio-in-ios-5/">《iOS音频播放 (五)：AudioQueue》</a>：本文讲解了如何使用AudioQueue播放音频数据。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://fauxpasapp.com/">Faux Pas for Xcode</a>：Faux Pas for Xcode是一个项目检查工具。使用它相当于给自己的项目请了一个专业的 Reviewer，它会指出项目级别上不规范不合理的地方，并且有相关内容的链接可以学习。</p></li>
<li><p><a href="http://ios.b2mp.cn/tools">App Icons Create Tool</a>：这是  <a href="http://weibo.com/helou?from=usercardnew">@往何处寻</a> 做的一键创建iOS APP应用图标的在线工具，可以帮助你生成各种尺寸的应用图标。</p></li>
<li><p><a href="https://github.com/lexrus/ios-dev-playbook">ios-dev-playbook</a>: ios-dev-playbook是一个快速配置 iOS 开发需要的服务器工具。目前只支持 Debian Wheezy服务器，可以安装 GitLab、Countly、Jenkins 等。该项目作者是<a href="https://twitter.com/lexrus">@lexrus</a>。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/Alamofire/Alamofire">Alamofire</a>：Alamofire是AFNetworking的作者mattt新写的网络请求的swift库。</p></li>
<li><p><a href="http://www.oschina.net/p/easyios">EasyIOS</a>: EasyIOS是基于MVVM 的iOS开发框架。它封装了Scene、SceneModel、Model、Action四种模型来对IOS进行开发，4种模型的定义解决了IOS开发中ViewController承担了过多角色而造成的代码质量低下，使得结构思路更加清晰。</p></li>
<li><p><a href="https://github.com/AgileBits/onepassword-app-extension">1Password Extension for iOS Apps</a>：1Password的扩展SDK，可以方便地集成到iOS应用中。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-08-12T20:08:34+08:00" pubdate data-updated="true">Aug 12<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第19期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/30/ios-weekly-19/"/>
    <updated>2014-07-30T22:10:03+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/30/ios-weekly-19</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/apple-earnings-announcement">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果第三季度财报公布，iOS界面开发的大一统，Flipboard开源的FLEX工具等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://pad.pconline.com.cn/514/5144196.html">《净利润达77亿美元!苹果第三季度财报公布》</a>：苹果发布了截至6月28日的2014财年第三季度财报。从财报中我们可以看到，苹果在第三财季营收374亿美元，同比增长6%；净利润为77亿美元，同比增长12%。</p></li>
<li><p><a href="http://tech.qq.com/a/20140721/005712.htm">《苹果iOS在日本占据了超过50%的市场》</a>：苹果iOS在日本占据了超过50%的市场，在中国的份额为14.7%。</p></li>
<li><p><a href="http://www.huxiu.com/article/38395/1.html">《苹果财报解读》</a>：中国地区 iPhone 销量上升 48%，iPhone 6 备受瞩目。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://onevcat.com/2014/07/ios-ui-unique/">《WWDC 2014 Session笔记 &ndash; iOS界面开发的大一统》</a>：iOS 8 和 OS X 10.10 中一个被强调了多次的主题就是大一统，Apple 希望通过 Hand-off 和各种体验的无缝切换和集成将用户黏在由 Apple 设备构成的生态圈中。对于广大 iOS 开发者赖以生存的 UIKit 来说，这次最大的变化就是 Size Classes 的引入和新的 Presentation 系统了，本文对Size Classes及其相关知识进行了详细的介绍。</p></li>
<li><p><a href="http://airspeedvelocity.net/">《Airspeed Velocity》</a>：一个专门介绍Swift语言的博客。</p></li>
<li><p><a href="http://nomothetis.svbtle.com/">《ALEXANDROS SALAZAR》</a>：一个专门介绍Swift语言的博客。</p></li>
<li><p><a href="http://www.raywenderlich.com/72021/supercharging-xcode-efficiency">《Supercharging Your Xcode Efficiency》</a>：文章介绍了各种提高开发效率的Xcode使用技巧。</p></li>
<li><p><a href="http://objccn.io/issue-14-3/">《插件》</a>：插件是给你已经发布的 App 增加功能的一个好办法，Mac 上的 App 支持插件已经有很长的历史了。在 NSBundle 的帮助下，插件开发变得很简单，本文介绍了在Mac上进行插件开发的方法。</p></li>
<li><p><a href="https://github.com/vsouza/awesome-ios">《Awesome iOS》</a>：一个iOS的各类优秀的开源项目集合。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2014/07/27/ios-evelup-tips/">《iOS开发如何提高》</a>：本文分享了iOS开发提高的各种方法。</p></li>
<li><p><a href="http://weibo.com/2584320772/BfHoM6MM4">《如何编写 iOS 8 Widget》</a>：作者简单介绍了 iOS 8 Widget的编写方法。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="https://www.youtube.com/user/UIKonf/feed">《UIKonf 2014》</a>：国外的iOS开发技术会议UIKonf视频。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/markohlebar/Peckham">Peckham</a>：你是否遇到这样的场景?在源码中用到一个类，写完发现因为没有import它的头文件，所以编译不通过。正常情况下，你需要跳转到源代码头部加入该头文件，然后再继续跳回上次编辑位置继续写代码。这样的跳转很不方便，而且让你的逻辑被打断。<a href="https://github.com/markohlebar/Peckham">Peckham</a>是一个帮助你填写#import头文件的Xcode插件，使用它可以方便在源代码的任意位置插入所需要的头文件。</p></li>
<li><p><a href="http://www.robovm.com/">RoboVM</a>：用Java来写原生的iOS程序。</p></li>
<li><p><a href="https://github.com/Flipboard/FLEX">FLEX</a>：FLEX是Flipboard开源的一系列在应用中调试的工具集。该工具集提供了查看和修改相关view的属性功能。</p></li>
<li><p><a href="https://appbot.co/">AppBot</a>: AppBot是可以订阅App Store用户的评价和评分，不局限于自己的产品，其他App也可以订阅然后会邮件发送给你，随时了解用户的评价，改善产品。本条来自 <a href="http://weibo.com/phpmaple">@KooFrank</a>的推荐。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/ftao/vpn-deploy-playbook">vpn-deploy-playbook</a>：一个自动部署各种翻墙服务的工具，包括IPSec，L2TP，PPTP，Cisco AnyConnect，SigmaVPN，APN，shadowsocks，OpenVPN，DNS，SPDY，用户管理等功能。</p></li>
<li><p><a href="https://github.com/maciekish/iReSign">iReSign</a>：一个可以把ipa用企业证书重新签名的开源项目。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-30T22:10:03+08:00" pubdate data-updated="true">Jul 30<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发如何提高]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/27/ios-levelup-tips/"/>
    <updated>2014-07-27T17:17:30+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/27/ios-levelup-tips</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/weixin-why.jpg"></p>

<p>许多人在博客和微信上咨询我iOS开发如何提高，经过一番思考之后，我能想到如下一些提高的办法，我个人也是通过这些方法来提高的。</p>

<h2>阅读博客</h2>

<p>在现在这个碎片化阅读流行的年代，博客的风头早已被微博盖过。而我却坚持写作博客，并且大量地阅读同行的iOS开发博客。博客的文章长度通常在3000字左右，许多iOS开发知识都至少需要这样的篇幅才能完整地讲解清楚。并且博客相对于书籍来说，并没有较长的出版发行时间，所以阅读博客对于获取最新的iOS开发知识有着非常良好的效果。</p>

<p>我自己精心整理了国内40多位iOS开发博主的博客地址列表：<a href="https://github.com/tangqiaoboy/iOSBlogCN">https://github.com/tangqiaoboy/iOSBlogCN</a>，希望大家都能培养起阅读博客的习惯。</p>

<p>国外也有很多优秀的iOS开发博客，他们整体质量比中文的博客更高，以下是一些推荐的博客地址列表：</p>

<table>
<thead>
<tr>
<th>博客名 </th>
<th> 博客地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>objc.io </td>
<td> <a href="http://www.objc.io/">http://www.objc.io/</a></td>
</tr>
<tr>
<td>Ray Wenderlich</td>
<td> <a href="http://www.raywenderlich.com">http://www.raywenderlich.com</a></td>
</tr>
<tr>
<td>iOS Developer Tips </td>
<td> <a href="http://iosdevelopertips.com/">http://iosdevelopertips.com/</a></td>
</tr>
<tr>
<td>iOS Dev Weekly </td>
<td> <a href="http://iosdevweekly.com/">http://iosdevweekly.com/</a></td>
</tr>
<tr>
<td>NSHipster </td>
<td> <a href="http://nshipster.com/">http://nshipster.com/</a></td>
</tr>
<tr>
<td>Bartosz Ciechanowski </td>
<td> <a href="http://ciechanowski.me">http://ciechanowski.me</a></td>
</tr>
<tr>
<td>Big Nerd Ranch Blog </td>
<td> <a href="http://blog.bignerdranch.com">http://blog.bignerdranch.com</a></td>
</tr>
<tr>
<td>Nils Hayat </td>
<td> <a href="http://nilsou.com/">http://nilsou.com/</a></td>
</tr>
</tbody>
</table>


<p>另外，使用博客RSS聚合工具（例如Feedly：<a href="http://www.feedly.com/">http://www.feedly.com/</a>）可以获得更好的博客阅读体验。手机上也有很多优秀的博客阅读工具（我使用的是<a href="http://newsify.co/">Newsify</a>）。合理地使用这些工具也可以将你在地铁上、睡觉前等碎片时间充分利用上。</p>

<h2>读书</h2>

<p>博客的内容通常只能详细讲解一个知识点，而书籍则能成体系地介绍整个知识树。相比国外，中国的书籍售价相当便宜，所以这其实是一个非常划算的提高的方式。建议大家每年至少坚持读完1本高质量的iOS开发书籍。</p>

<p>去年出版的<a href="http://as.wiley.com/WileyCDA/WileyTitle/productCd-1118818342.html">《iOS 7 Programming Pushing the Limits》</a> 以及  <a href="http://item.jd.com/11258970.html">《Objective-C高级编程：iOS与OS X多线程和内存管理》</a> 都算是不错的进阶方面的读物。顺便打个广告，我自己也在写一本iOS进阶方面的图书，年底前应该能上市。</p>

<h2>看WWDC视频</h2>

<p>由于iOS开发在快速发展，每年苹果都会给我们带来很多新的知识。而对于这些知识，第一手的资料就是WWDC的视频。</p>

<p>通常情况下，一个iOS开发的新知识首先会在WWDC上被苹果公开，然后3个月左右，会有国内外的博客介绍这些知识，再过半年左右，会有国外的图书介绍这些知识。所以如果想尽早地了解这些知识，那么只有通过WWDC的视频。</p>

<p>现在每年的WWDC视频都会在会议过程中逐步放出，重要的视频会带有英文字幕。坚持阅读这些视频不但可以获得最新的iOS开发知识，还可以提高英文听力水平。</p>

<h2>看苹果的官方文档</h2>

<p>苹果的官方文档相当详尽，对于不熟悉的API，阅读官方文档也是最直接有效地方式。</p>

<p>苹果的文档比较海量，适合选一些重点来阅读，比如人机交互指南就是必读的，而其它的内容可以遇到的时候作为重点资源来查阅。</p>

<h2>看开源项目的代码</h2>

<p>大家一定有这样的感受，很多时候用文字讲解半天，还不如写几行代码来得直观。阅读优秀的开源项目代码，不但可以学习到iOS开发本身的基本知识，还能学习到设计模式等软件架构上的知识。</p>

<p>如果读者能够参与到开源项目的开发中，则能进一步提高自己的能力。</p>

<h2>多写代码，多思考</h2>

<p>知识的积累离不开实践和总结，我认为iOS代码量如果没有超过10万行，是不能称得上熟悉iOS开发的。某些在校的学生，仅仅做了几个C++的大作业，就在求职简历里面写上“精通C++”，则真是让人哭笑不得。</p>

<p>在多写代码的同时，我们也要注意不要&#8221;重复造轮子&#8221;，尽量保证每次写的代码都能具有复用性。在代码结构因为业务需求需要变更时，及时重构，在不要留下技术债的同时，我们也要多思考如何设计应用架构，能够保证满足灵活多变的产品需求。</p>

<p>在多次重构和思考的过程中，我们就会慢慢积累出一类问题的“最佳实践”方式，成为自己宝贵的经验。</p>

<h2>多和同行交流</h2>

<p>有些时候遇到一些难解的技术问题，和同行的几句交流就可能让你茅塞顿开。。另外常见的技术问题通常都有人以前遇到过，简单指导几句就能让你一下子找到正确的解决方向。</p>

<p>国内开发者之间的交流，可以通过论坛，微博，QQ群等方式来进行。另外各大公司有时候会办技术沙龙，这也是一个认识同行的好机会。</p>

<p>需要特别提醒的是，和国内开发者之前交流要注意讨论质量，有一些论坛和QQ群讨论质量相当低下，提的问题都是能通过简单Google获得的，这种社区一定要远离，以提高自己的沟通效率。</p>

<p>除了在国内的技术社区交流，建议读者可以去国外的stackoverflow：<a href="http://www.stackoverflow.com">http://www.stackoverflow.com</a>上提问或回答问题。</p>

<h2>分享</h2>

<p>值得尝试的分享方式有：发起一个开源项目、写技术博客、在技术会议上做报告。这几种方式都比较有挑战，但是如果能大胆尝试，肯定会有巨大的收获。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-27T17:17:30+08:00" pubdate data-updated="true">Jul 27<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第18期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/22/ios-weekly-18/"/>
    <updated>2014-07-22T21:19:39+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/22/ios-weekly-18</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/apple-ibm-cooperation">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果与 IBM 展开长期深度合作，Swift官方博客，Swift开发的视频教程等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.36kr.com/p/213771.html">《苹果与 IBM 展开长期深度合作，双方优势互补，专注企业级移动市场》</a>：苹果与 IBM 达成排他性合作协议，联合各自领先市场的优势，共同打造一样新品类商业应用，建立全新的企业级移动体验——IBM 享誉已久的大数据及分析能力将注入苹果的 iPhone 与 iPad——结合后者擅长的用户体验，共同改善企业及员工使用 iOS 设备工作的流程。</p></li>
<li><p><a href="http://www.cocoachina.com/applenews/apple/2014/0715/9148.html">《苹果官方数据显示iOS 7渗透率已达90%》</a>：苹果最新数据显示，7月7日到13日之间，在访问App Store的设备中，90%的设备运行了iOS 7系统，而距离iOS 7正式发布仅仅为10个月的时间。不过国内iOS 7系统的比例还远远未达到80%。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="https://developer.apple.com/swift/blog/">《Swift官方博客》</a>：苹果在开发者中心建立了Swift官方博客，用于帮助开发者获得Swift的相关知识和资源。</p></li>
<li><p><a href="http://wonderffee.github.io/blog/2014/07/19/quincykit-and-kscrash/">《利用QuincyKit + KSCrash构建自己的Crash Log收集与管理系统 》</a>：iOS bug定位是极看重crash log的，目前网上Crash Log收集与管理服务较有名的有Crashlytics, Flurry, 友盟等。本文介绍了QuincyKit + KSCrash构建自己的Crash Log收集与管理系统的适用场景和特点。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/07/17/ios_0code_vc/">《0 代码 ViewController》</a>：作者尝试利用Interface Builder的Object控件实现了一个0行代码的View Controller，在减小Controller体积小，提供了一些新颖的思路。不过需要注意，其文章示例代码中的ViewModel持久了View对象，其实不是指的（MVVM）中ViewModel，更像是一个Controller的代理。</p></li>
<li><p><a href="http://www.thinkandbuild.it/from-objective-c-to-swift/">《From Objective-C to Swift: thoughts and hints》</a>：文章详细比较了Objective-C与Swift在编程中的细节差异。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.imooc.com/learn/149">《Swift开发的视频》</a>：jakelin做了一个Swift开发的视频，视频从头到尾的讲述了如何开发一个Swift Weather app，同时也讲述了CococaPods，Core Location和AFNetworking的使用，源码地址在 <a href="https://github.com/JakeLin/SwiftWeather">这里</a> 。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://pgyer.com/">蒲公英</a>：蒲公英是专为iOS开发者提供的免费应用众测平台，旨在解决开发者将应用分发给内测用户及众测时的繁杂、低效的问题。使用蒲公英，开发者可将应用一键上传至蒲公英网站实现托管，托管后的应用拥单独的下载页面。开发者只需将下载页面地址（或二维码）发给内测用户，测试用户即可用手机直接安装，避免了之前测试用户需要将手机用数据线连接到电脑，才能安装测试应用的痛苦过程。它的特点是可以帮你用企业证书签名，同时设置密码，帮助大家分发测试版本。</p></li>
<li><p><a href="https://github.com/realm/jazzy">jazzy</a>：jazzy是一个为Objective-C和Swift语言生成帮助文档的开源工具。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/realm/realm-cocoa">Realm</a>：Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-22T21:19:39+08:00" pubdate data-updated="true">Jul 22<span>nd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第17期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/11/ios-weekly-17/"/>
    <updated>2014-07-11T19:36:11+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/11/ios-weekly-17</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/swift-beta3-change">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Swift 进入TIOBE 指数排名16，Swift 在 Beta3 中的变化，WebKit in iOS 8等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">《Swift 进入TIOBE 指数排名16》</a>：在TIOBE的 2014年7月编程语言排行榜上，苹果公司新的编程语言Swift发布一个月内就进入TIOBE指数，名列位置16，前三名则没有变化，依旧是C、Java、Objective-C。</p></li>
<li><p><a href="http://www.guomii.com/posts/38291">《韩国当局下令 Apple 改变 App Store 退款政策》</a>：近日韩国当局已经下令 Apple 修改其公司的 App Store 退款政策，理由是现有政策违反了公平贸易的相关规定。众所周知，目前 App Store 的退款政策是用户先提交请求，然后由 Apple 员工审核要不要进行退款。也就是说，最终是否能够退款存在着员工一定的主观因素，因此被韩国公平贸易委员会认为这是不公平的。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://andelf.github.io/blog/2014/07/08/swift-beta3-changes/">《Swift 在 Beta3 中的变化》</a>：刚刚更新的Xcode 6 Beta3中，Swift编译器又进行了较大的更改，本文章详细介绍了改动细节。</p></li>
<li><p><a href="http://www.taofengping.com/2014/07/04/pinterest-transition-swift/">《用Swift实现Pinterest中的转场效果》</a>：在StackOverFlow上有人问Pinterest中转场的效果是如何实现的，在<a href="http://engineering.pinterest.com/post/67769846580/behind-the-pins-building-pinterest-3-0-for-ios">Pinterest的Blog</a>上工程师大致对Pinterest的结构作了大致的介绍，但是没有涉及到具体动画部分的实现。所以作者抽空用Swift重新实现了一遍这个转场的效果。</p></li>
<li><p><a href="http://www.hotobear.com/?p=741">《WebKit in iOS 8》</a>：苹果在WWDC上公布了iOS的新框架WebKit.framework，其包含了新的网页浏览控件WKWebView。本文介绍了其相对于UIWebView所做的改进。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/ios-8-presentation-controller">《iOS 8 presentation controller》</a>：iOS 8 新加入一个类：UIPresentationController，它与 iOS 7 新添加的类与协议一道，帮助我们方便快捷地实现View Controller 的自定义过渡效果。作者完成了一个使用相关API的演示程序。</p></li>
<li><p><a href="http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1">《MVVM Tutorial with ReactiveCocoa》</a>：RW新的ReactiveCocoa教材出炉了。不同于上次SimpleWeather的面面俱到，这次主讲MVVM设计模式和数据绑定。</p></li>
<li><p><a href="http://oleb.net/blog/2014/07/swift-strings/">《Strings in Swift》</a>：文章介绍了Swift中字符串的各种细节上的使用注意事项。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.infoq.com/cn/presentations/security-issues-behind-mobile-app">《移动APP背后的安全问题》</a>：现在已进入移动互联网时代，吃喝玩乐、办公支付等等各种应用都在抢占移动APP市场，由于安全无处不在的本质，在多年前就已经有少数人在研究移动APP的中木马、钓鱼等等，但很少有人想到移动APP安全跟WEB安全的关系。安全宝安全团队Leader尹毅在视频中分享了： 1、移动APP市场安全现状 2、安卓APP的反编译及漏洞挖掘 3、利用移动APP渗透的各种“猥琐”思路 4、自动化移动APP安全漏洞挖掘的程序实现。</li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="http://answerhuang.duapp.com/index.php/2014/07/06/dsym_tool/">《dSYM 文件分析工具》</a>：Xcode编译项目后，我们会看到一个同名的 dSYM 文件，dSYM 是保存 16 进制函数地址映射信息的中转文件，我们调试的 symbols 都会包含在这个文件中，并且每次编译项目的时候都会生成一个新的 dSYM 文件。作者分享了一个工具，能够根据dSYM文件方便从Crash信息中分析出有可能错误的地方。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/kylef/QueryKit">QueryKit</a>：QueryKit是一个用Swift实现的、方便对CoreData数据进行查询的工具库。</li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-11T19:36:11+08:00" pubdate data-updated="true">Jul 11<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第16期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/03/ios-weekly-16/"/>
    <updated>2014-07-03T20:41:49+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/03/ios-weekly-16</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/ios8-new-features">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：i​OS 8的新特性，敏感逻辑的保护方案，iOS绘图教程，WKWebView的使用等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://nshipster.cn/ios8/">《i​OS 8》</a>：Mattt Thompson在文章中介绍了iOS8的各种新特性。</p></li>
<li><p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/29210413">《iOS安全攻防：敏感逻辑的保护方案》</a>：文章介绍了一种低学习成本的，简易的Objective-C逻辑代码重写为C代码的办法。</p></li>
<li><p><a href="http://imtx.me/archives/1899.html">《谈谈 iOS 8 拍照和摄影功能的增强》</a>：iPhone 的照相功能有着敏捷的反应速度和不错的成像素质，使得 iPhone 成为最佳的随手拍手机。这次 WWDC 14 上尽管没有任何新硬件的更新，但是 iOS 8 在照相功能上的增强再次让我这样的随手拍狂人激动不已。文章主要介绍了iOS 8 带来的倒计时拍摄和延时摄影功能。</p></li>
<li><p><a href="http://blog.rpplusplus.me/blog/2014/06/26/wwdc14-session-401/">《WWDC14 Session 401 學習筆記》</a>：文章总结了WWDC14 Session 401介绍的PlayGround、Interface Builder和Debug相关功能的改进。</p></li>
<li><p><a href="http://www.cnblogs.com/xdream86/archive/2012/12/12/2814552.html">《iOS绘图教程》</a>：本文是《Programming iOS5》中Drawing一章的翻译，考虑到主题完整性，翻译版本中加入了一些书中未涉及到的内容。该文章中比较完整地介绍了iOS的整个绘图原理及相关的API。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/06/24/core-animation/">《Core Animation基本概念和Additive Animation》</a>：文章介绍一些Core Animation基本概念，最后提到一些iOS8的动画改动。</p></li>
<li><p><a href="https://mikeash.com/pyblog/friday-qa-2014-06-20-interesting-swift-features.html">《Interesting Swift Features》</a>：文章介绍了Swift相对于Objective-C增加的一些有趣的特性，并且讨论了其带来的好处。</p></li>
<li><p><a href="http://www.raywenderlich.com/76260/video-tutorial-introduction-swift-part-6-functions">《Introduction to Swift Part 6: Functions》</a>：Ray Wenderlich上的关于Swift函数的视频教程。</p></li>
<li><p><a href="http://www.raywenderlich.com/76248/facebook-pop-tech-talk-video">《Facebook Pop Tech Talk Video》</a>：Ray Wenderlich上的关于Facebook Pop的视频教程。</p></li>
<li><p><a href="http://www.kinderas.com/technology/2014/6/7/getting-started-with-wkwebview-using-swift-in-ios-8">《Getting started with WKWebView using Swift in iOS 8》</a>：文章介绍了iOS8中新加的WKWebView的使用。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://github.com/uranusjr/macdown">macdown</a>：macdown是一个开源的Mac下的markdown编辑器。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/lexrus/LTMorphingLabel">LTMorphingLabel</a>：用swift写的文字飘入飘出的效果。</p></li>
<li><p><a href="https://github.com/hewigovens/Crashlytics-FPCustomHandler">Crashlytics-FPCustomHandler</a>：这是一个为 Crashlytics 写的 category, 可以方便添加自己的崩溃处理函数。</p></li>
<li><p><a href="https://github.com/relatedcode/ParseChat">ParseChat</a>：ParseChat是基于Parse实现的一个实时的聊天室开源应用。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-03T20:41:49+08:00" pubdate data-updated="true">Jul 3<span>rd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC2014，苹果的“软件”发布会]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/02/talk-about-wwdc2014/"/>
    <updated>2014-07-02T22:04:10+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/02/talk-about-wwdc2014</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/wwdc2014.jpg"></p>

<p>在今年的6月2日到6日，苹果照例举行了一年一次的全球开发者大会（World Wide Developer Conference，简称WWDC）。由于去年大会门票在不到2分钟之内被抢购一空，今年苹果改成了用抽签的方式来决定WWDC现场门票的购买权。在发布会前，大家对今年的发布会充满了各种期待，希望在发布会上见到iPhone6、iWatch、新一代的耳机（因为苹果收购了耳机厂商beats）以及新版的Macbook。但是让人惊讶的是，苹果这次在大会上并没有发布任何新的硬件产品，但展示出其在软件上的各种功能改进和整合上的巨大努力，让我们一起来看看今年苹果的WWDC到底带来了哪些改变。</p>

<h2>OS X</h2>

<p>苹果沿用了从去年开始的，以地名来命名操作系统的习惯，新的OS X 10.10操作系统的名字为Yosemite（约塞米蒂国家公园）。Yosemite吸收了iOS7开始的扁平化的设计风格，整个Finder、Dock栏及相关应用都重新绘制了新的图标和界面，并且支持偏平化和毛玻璃的半透明效果。另外Yosemite还有一些细节改进，例如重新设计的通知中心、更快的Safari、更好用的邮件客户端等。与去年一样，新版的Yosemite操作系统仍然完全免费。</p>

<p>另外我们可以看到，今年苹果在软件上的许多改进都“借鉴”了不少其它应用。例如新版的Spotlight就和Mac下优秀的应用Alfred非常相似。而全新的 iCloud Drive 客户端，不但支持所有Mac和iOS设备，还支持Windows平台，这无疑是和Dropbox开始了正面的竞争（Dropbox在两年前拒绝了来自乔布斯8亿美元左右的收购请求，现在估值达到了100亿美元）。</p>

<p>不过在我看来，以上这些改进比起handoff功能来说，都不算什么。handoff功能显示出苹果对于功能整合的深度思考。苹果提了几个问题：</p>

<ul>
<li>当我在电脑上工作时，这个时候来了一个电话或短信，为什么我不能直接在电脑上接电话或回复短信呢？</li>
<li>当我在电脑的浏览器上看到一个电话号码时，我为什么不能直接点击这个电话号码拨打电话呢？</li>
<li>当我在手机上回复邮件写了一半，这个时候走到电脑前面了，为什么不能方便地在电脑上继续写邮件呢？</li>
<li>当我在电脑上看到一个小说正入迷，这个时候要出门，为什么不能直接拿起手机继续看呢？</li>
</ul>


<p>于是这次，苹果将Mac电脑和iPhone、iPad的功能进行了深度整合，当你拥有这三个设备时，它们每一个都可以接打电话和收发短信，你在它们任何一个设备上编辑的文档，也可以实时同步到另一个设备上。handoff并不是苹果的应用独有的功能，苹果将其相关的API都开放给了开发者，所以开发者也可以完全开发出支持handoff功能的应用。</p>

<p>handoff功能对于苹果而言意义重大，因为它再次重新定义了硬件生态圈，通过软件的深度整合，拥有多个苹果设备的用户会享受到极大的便利性。每一个设备的功能和信息都和其它苹果设备完美配合，使得单个硬件本身的功能被放大。这将催进拥有一个苹果设备的用户购买更多苹果的其它设备。随着苹果以后推出更多的智能硬件，其构造的硬件生态圈将像App Store软件生态圈一样，增加其产品的竞争力。</p>

<h2>iOS</h2>

<p>苹果在这次大会上推出了新的iOS8操作系统。在iOS8中，iMessage功能更一步增强，增加了发送语音的功能以及支持多人群聊，很多人都调侃说：“如果加上朋友圈，iMessage就和微信功能一样了”。但iMessage并不支持Android平台，所以对微信一类的应用来说完全没有任何威胁。iOS8中的图片编辑功能也得到了增强，通知中心允许用户进行更多地定制。另外苹果提供了HealthKit，用于集成用户健康相关的信息。新的Extension功能类似于Android的Intent，能够方便应用间相互调用。</p>

<p>相对于Yosemite带来的整合方面的改进，新版iOS8的改进的重点则是开放。苹果开放了输入法接口，允许第三方提供输入法。苹果也开放了Touch ID，允许第三方应用获得指纹信息。HomeKit则为智能硬件开放了不少可以互操作的接口。另外，iOS8还新增了4000个新的API，开放了大量底层API接口供应用调用。所以对于普通用户而言，iOS8新增的可见功能可能是有限的，但是其开放的大量API和新SDK释放出了巨大的想象空间，相信会产生更多有趣的应用。</p>

<h2>Swift</h2>

<p>这次的WWDC的口号是：“Write the code. Change the world”，Swift的推出算是很好地诠释了本口号。苹果的Objective-C语言发明于与C++同时期的上世纪80年代初，虽然苹果对其进行了很多次改进，但这终究像给应用打补丁一样，不是特别舒服。</p>

<p>这次Swift的推出，算是苹果大胆的一次尝试，试图用全新的编程语言来提高OS X和iOS程序员的开发效率，单从语言特性上来看，Swift吸收了众多现代编程语言的优秀特性，例如类型推断（Type inference）、范型（Generic）、闭包（Closure）、命名空间（namespace），元组（tuple）等，整体语法上也更加简洁。我们也了解到Swift是苹果从4年前就开始筹划中的事情，可见苹果在长远规划上对于Swift语言的重视，相信未来Swift会接替更多Objective-C原本的地位，所有iOS开发者都应该花时间学习这门全新的语言。</p>

<p>苹果这次推出Swift也吸引了大量的讨论，其中比较不正确的观点是认为iOS开发的门槛因此而降低了。从我和身边的同行对Swift的学习和讨论来看，Swift并不是一门可以简单上手的语言。并且在未来一到两年内，iOS开发必然会经历同时使用Objective-C和Swift的过渡阶段。对于iOS开发者，除了必须掌握以前的Objective-C语言的知识，还需要学习并不简单的Swift，可见iOS开发的门槛不但没有降低，反而提高了不少。</p>

<h2>总结</h2>

<p>总体来说，苹果今年的WWDC大会虽然没有推出硬件上的新品，但是其在软件功能整合、开放系统API以及改进开发工具上做出了巨大努力，这些都会给苹果产品带来更大的竞争优势。</p>

<p>注：本文已投稿发表到<a href="http://www.csdn.net/article/2014-07-01/2820470%E3%80%82">CSDN</a>，未经允许不得转载。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-07-02T22:04:10+08:00" pubdate data-updated="true">Jul 2<span>nd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些好用的iOS开发工具]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/29/ios-dev-tools/"/>
    <updated>2014-06-29T13:12:01+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/29/ios-dev-tools</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/ColorSync-Utility-icon.png"></p>

<h2>版权说明</h2>

<p>本文首发于《程序员》杂志2014年6月刊，未经允许，请勿转载。</p>

<h2>前言</h2>

<p>从苹果发明iPhone起，AppStore上的一个又一个类似flappy bird的一夜暴富的故事刺激着大量开发者加入移动开发大军。随着这些开发者出现的，还有大量方便iOS开发者的各种工具。这些工具作为整个应用开发生态链的重要一环，极大地方便了广大应用开发者，节省了应用开发的时间。</p>

<p>本文将从应用工具、命令行工具、插件工具3个方面，介绍这些优秀的应用。</p>

<h2>图形应用工具</h2>

<h3>Charles</h3>

<p><img src="http://blog.devtang.com/images/charles-logo.png"></p>

<p>Charles（<a href="http://www.charlesproxy.com">http://www.charlesproxy.com</a>）是在Mac下常用的截取网络封包的工具，在做iOS开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Charles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<p>Charles详细的使用说明，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/">《iOS开发工具-网络封包分析工具Charles》</a></p>

<h3>界面调试</h3>

<p>PonyDebugger（<a href="https://github.com/square/PonyDebugger">https://github.com/square/PonyDebugger</a>）、Reveal（<a href="http://revealapp.com/">http://revealapp.com/</a>）、Spark Inspector（<a href="http://sparkinspector.com/">http://sparkinspector.com/</a>）是三个常用的界面调试工具，可以在程序运行时动态调试iOS应用界面。PonyDebugger是免费并且开源的，后两者是收费的，不过功能更加强大。</p>

<p>对于动态或复杂的交互界面，手写UI的是不可避免的，而Reveal一类的工具可以方便我们查看控件的相应属性是否正常，并且可以在程序运行时，动态地修改界面元素。这样就不用反复地修改代码并且重启程序了。</p>

<h3>xScope</h3>

<p>xScope（<a href="http://xscopeapp.com/">http://xscopeapp.com/</a>）是一类与界面开发相关的工具集。对于iOS开发，比较好用的功能包括它的放大镜取色工具、标尺工具等。其中放大镜取色工具可以将取到的多个色集收集起来，方便后续使用，并且支持直接粘贴成相关的程序颜色代码。</p>

<p>xScope是收费软件，对于未付费版本，其功能有一些限制。</p>

<h3>ImageOptim</h3>

<p>ImageOptim（<a href="http://imageoptim.com/">http://imageoptim.com/</a>）是一个图象压缩的免费工具。iOS工程默认使用的是 pngcrush 命令来压缩图片，不过其压缩比率其实不高。对于应用中图片资源比较多的读者，可以尝试使用 ImageOptim 来达到最大的图片压缩效果。</p>

<p>如果你从未尝试过ImageOptim一类的图片压缩工具，那么第一次给IPA文件瘦身的效果应该是比较惊人的。我个人的经验是，初次使用时ImageOptim能减少至少10%的应用图片资源占用。</p>

<p>ImageOptim的实现原理是使用各种开源的图像压缩工具，然后取效果最好的那一个。它尝试的工具包括：PNGOUT, Zopfli, Pngcrush, AdvPNG, extended OptiPNG, JpegOptim, jpegrescan, jpegtran 和 Gifsicle。</p>

<p>安装方式是从其官方网站（<a href="http://imageoptim.com/">http://imageoptim.com/</a>）上下载程序文件，拖动到“应用程序”目录即可。下图是本篇文章所有的配图，可以看到使用ImageOptim达到了29.5%的体积缩小。</p>

<p><img src="http://blog.devtang.com/images/tool-imageoptim.jpg"></p>

<h3>马克鳗</h3>

<p>马克鳗（<a href="http://www.getmarkman.com/">http://www.getmarkman.com/</a>）是国人开发的一款免费标注工具，可以方便地在美术输出的设计稿上标注相应界面元素的大小，颜色，边距，说明等。</p>

<h2>命令行工具</h2>

<h2>CocoaPods</h2>

<p><img src="http://blog.devtang.com/images/xcode-cmd-cocoapods.png"></p>

<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具或者是中央代码仓库。比如Java的maven，Nodejs的npm等。而CocoaPods（<a href="http://cocoapods.org/">http://cocoapods.org/</a>）是为iOS程序提供依赖管理的工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<p>在我开发猿题库客户端时，其使用了24个第三方开源库。在没有使用CocoaPods以前，我需要:</p>

<ol>
<li>把这些第三方开源库的源代码文件复制到项目中，或者设置成git的submodule。</li>
<li>对于这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如通常情况下，一个网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics, zlib。</li>
<li>对于某些开源库，我还需要设置<code>-licucore</code>或者 <code>-fno-objc-arc</code>等编译参数</li>
<li>管理这些依赖包的更新。</li>
</ol>


<p>这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行<code>pod install</code>。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>

<p>使用CocoaPods还需要注意以下几点：</p>

<ol>
<li>需要使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次<code>pod update</code>命令。</li>
<li>当你执行<code>pod install</code>之后，除了Podfile外，CocoaPods还会生成一个名为<code>Podfile.lock</code>的文件，你应该把这个文件加入到版本管理中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行<code>pod install</code> 不会更改版本，要<code>pod update</code>才会改<code>Podfile.lock</code>了。这样的好处是：当多人协作的时候，可以保证所有人的第三库环境是完全一样的。</li>
</ol>


<p>详细的使用说明，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">《用CocoaPods做iOS程序的依赖管理》</a></p>

<h2>nomad</h2>

<p>nomad（<a href="http://nomad-cli.com/">http://nomad-cli.com/</a>）是一个方便你操作苹果开发者中心（Apple Developer Center）的命令行工具，可以做的事情包括方便地添加测试设备，更新证书文件，增加App id，验证IAP的凭证等。</p>

<p>安装方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install nomad-cli</span></code></pre></td></tr></table></div></figure>


<p>安装完后，首先执行<code>ios login</code>，你的Developer账号密码会被它存储到Keychain中，之后就可以用命令行来完成各种后台操作了，例如：</p>

<p>添加测试设备：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ios devices:add "TangQiaos iPhone"=&lt;Device Identifier&gt;</span></code></pre></td></tr></table></div></figure>


<p>更新证书文件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ios profiles:devices:add TangQiao_Profile "TangQiaos iPhone"=&lt;Device Identifier&gt;</span></code></pre></td></tr></table></div></figure>


<p>nomad还有很多功能，建议大家阅读其官方网站的文档进一步学习。</p>

<h2>xctool</h2>

<p>xctool（<a href="https://github.com/facebook/xctool">https://github.com/facebook/xctool</a>）是facebook开源的一个iOS编译和测试的工具。使用它而不是用Xcode的UI界面是因为它是一个纯命令行工具。比如：我们可以使用xctool在命令生下进行编译和单元测试，然后将测试结果集成到Jenkins中，这样就实现了自动化的持续集成。虽然苹果也在OSX Server上推出了自己的自动化集成工具BOT，但其配置和使用上现在仍然不太方便。</p>

<p>安装xctool可以使用brew命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install xctool</span></code></pre></td></tr></table></div></figure>


<p>使用xctool编译项目可以使用如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>path/to/xctool.sh \
</span><span class='line'>  -project YourProject.xcodeproj \
</span><span class='line'>  -scheme YourScheme \
</span><span class='line'>  build</span></code></pre></td></tr></table></div></figure>


<p>使用xctool执行单元测试，可以使用如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>path/to/xctool.sh \
</span><span class='line'>  -workspace YourWorkspace.xcworkspace \
</span><span class='line'>  -scheme YourScheme \
</span><span class='line'>  test</span></code></pre></td></tr></table></div></figure>


<p>xctool还有很多功能，建议大家阅读xctool官方网站的文档进一步了解更多的功能。</p>

<h2>appledoc</h2>

<p>appledoc（<a href="https://github.com/tomaz/appledoc">https://github.com/tomaz/appledoc</a>）是一个从源码中抽取文档的工具。</p>

<p>对于开发者来说，文档最好和源码在一起，这样更新起来更加方便和顺手。象Java一类的语言本身就自带javadoc命令，可以从源码中抽取文档。而appledoc就是一个类似javadoc的命令行程序，可以从iOS工程的源代码中抽取相应的注释，生成帮助文档。</p>

<p>相对于其它的文档生成工具，appledoc的优点是：</p>

<ul>
<li>它默认生成的文档风格和苹果的官方文档是一致的。</li>
<li>appledoc就是用objective-c写的，必要的时候调试和改动也比较方便。</li>
<li>它可以生成docset，并且集成到xcode中。集成之后，在相应的API调用处，按住option再单击就可以调出相关的帮助文档。</li>
<li>它没有特殊的注释要求，兼容性高。</li>
</ul>


<p>安装appledoc可以直接使用brew命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install appledoc</span></code></pre></td></tr></table></div></figure>


<p>使用时切换到iOS工程目录下，执行以下操作即可，appledoc会扫描当前路径下的所有文件，然后生成好文档放到doc目录下。你也可以用appledoc —help查看所有可用的参数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appledoc -o &lt;output_path&gt; \
</span><span class='line'>--project-name &lt;project_name&gt; \
</span><span class='line'>--project-company &lt;project_company&gt; .</span></code></pre></td></tr></table></div></figure>


<p>详细的使用介绍，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/">《使用Objective-C的文档生成工具:appledoc》</a></p>

<h2>Xcode插件</h2>

<p>Xcode是iOS的集成开发环境，虽然苹果一直在不断改进Xcode，但程序员总是有各种新奇的想法和需求，当Xcode无法满足他们时，于是他们就会通过插件的方式来为Xcode增加新的功能。本节将会给大家介绍一些常用的Xcode增强插件。</p>

<p>Xcode所有的插件都安装在目录<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code>下，每个插件为一个子目录，你也可以手工切换到这个目录来增加或删除插件。</p>

<h3>Alcatraz</h3>

<p><img src="http://blog.devtang.com/images/tool-alcatraz-logo.jpg"></p>

<p>Alcatraz（<a href="http://alcatraz.io/">http://alcatraz.io/</a>）是管理Xcode所有插件的插件，它可以直接集成到Xcode的图形界面中，让你感觉就像在使用Xcode自带的功能一样。Alcatraz不但可以管理Xcode的插件，它另外还提供了管理Xcode工程模版以及颜色配置的功能。</p>

<p>使用如下的命令行来安装Alcatraz：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p ~/Library/Application\ Support/\
</span><span class='line'>Developer/Shared/Xcode/Plug-ins;
</span><span class='line'>curl -L http://git.io/lOQWeA |\
</span><span class='line'> tar xvz -C ~/Library/Application\ Support/\
</span><span class='line'> Developer/Shared/Xcode/Plug-ins
</span></code></pre></td></tr></table></div></figure>


<p>安装成功后重启Xcode，就可以在Xcode的顶部菜单中的&#8221;Window&#8221;&ndash;>“Package Manager”中找到Alcatraz。点击“Package Manager”，即可启动插件列表页面。你可以在右上角搜索插件，对于想安装的插件，点击其左边的图标，即可下载安装，如下所示，我正在安装KImageNamed插件：</p>

<p><img src="http://blog.devtang.com/images/alcatraz-install.jpg"></p>

<p>安装完成后，再次点击插件左边的图标，可以将该插件删除。</p>

<p>以下所有介绍的插件均可用该方法来安装或删掉，就不另行介绍了。</p>

<p>Alcatraz详细的使用介绍，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/">《使用Alcatraz来管理Xcode插件》</a></p>

<h3>KSImageNamed</h3>

<p>KSImageNamed（<a href="https://github.com/ksuther/KSImageNamed-Xcode">https://github.com/ksuther/KSImageNamed-Xcode</a>）是一个帮助你输入[UIImage imageNamed:]中的资源名的插件。当你输入<code>[UIImage imageNamed:]</code>时，会自动的弹出上下文菜单，供你选择你需要输入的图片资源名字，另外在选择图片资源时，还可以在左侧预览该资源。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/xcode-plugin-nsimage.jpg"></p>

<h3>XVim</h3>

<p>XVim（<a href="https://github.com/JugglerShu/XVim">https://github.com/JugglerShu/XVim</a>）是一个Xcode的vim插件，可以在Xcode的编辑窗口中开启vim模式。</p>

<p>vim模式最大的好处是可以全键盘操作，可以方便地移动光标以及复制、粘贴代码。XVim对于Xcode的分栏模式也有很好的支持，与vim自带的分栏模式一样，可以用快捷键<code>ctrl + w</code>来切换当前编辑的分栏。</p>

<h3>FuzzyAutocompletePlugin</h3>

<p>FuzzyAutocompletePlugin (<a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin</a>) 允许使用模糊的方式来进行代码自动补全。</p>

<p>举个例子，如果我们要重载 <code>viewDidAppear:</code>方法，那么我们必须依次建入view、did、appear 才能得到相应的补全信息，使用FuzzyAutocompletePlugin之后，我们可以建入vda (view、did、appear 三个单词的首字母)，或任意符合viewDidAppear整个单词出现顺序的子串(例如 vdapp, adear等)，即可匹配到该方法。</p>

<p><img src="https://raw.githubusercontent.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/master/demo.gif" alt="" /></p>

<h3>XToDo</h3>

<p>XToDo（<a href="https://github.com/trawor/XToDo">https://github.com/trawor/XToDo</a>）是一个查找项目中所有的带有 <code>TODO</code>, <code>FIXME</code>, <code>???</code>, <code>!!!</code> 标记的注释。</p>

<p>通常我们在项目开发中，由于种种原因，一些事情需要以后处理，这个时候为了防止遗忘，加上<code>TODO</code>或<code>FIXME</code>注释是非常有必要的，但是上线或提交代码前要寻找这些未解决的事项却稍显麻烦。XToDo可以提供一个汇总的界面，集中显示所有的未完成的<code>TODO</code>和<code>FIXME</code>标记。</p>

<h3>BBUDebuggerTuckAway</h3>

<p>BBUDebuggerTuckAway（<a href="https://github.com/neonichu/BBUDebuggerTuckAway">https://github.com/neonichu/BBUDebuggerTuckAway</a>）是一个非常小的工具，可以在你编辑代码的时候自动隐藏底部的调试窗口。因为通常情况下，调试的时候是加断点或监控变量变化，或者在Console窗口用<code>po</code>来输出一些调试信息。如果开始编辑代码了，说明已经调试结束了，这个时候隐藏调试窗口，可以给编辑界面更多空间，方便我们修改代码。</p>

<h3>SCXcodeSwitchExpander</h3>

<p>SCXcodeSwitchExpander（<a href="https://github.com/stefanceriu/SCXcodeSwitchExpander">https://github.com/stefanceriu/SCXcodeSwitchExpander</a>）帮助你迅速地在<code>switch</code>语句中填充枚举类型的每种可能的取值。</p>

<p>例如，当你输入<code>switch</code>，然后键入一个<code>NSTableViewAnimationOptions</code>类时，该插件会将其可能的取值补全在每一个<code>case</code>之后，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/xcode-plugin-switch.jpg"></p>

<h3>deriveddata-exterminator</h3>

<p>deriveddata-exterminator（<a href="https://github.com/kattrali/deriveddata-exterminator">https://github.com/kattrali/deriveddata-exterminator</a>）是一个清除Xcode缓存目录的插件。</p>

<p>有些时候Xcode会出各种奇怪的问题，最常见的是在某些复杂操作下（例如同一个项目，来回切换到各种分支版本），会造成Xcode显示一些编译的错误或警告，但是最终却又可以编译通过。新手遇到这种问题常常束手无策，而熟悉Xcode的人就知道，通常清除Xcode缓存就可以解决这类问题。该插件在Xcode菜单上增加了一个清除缓存按钮，可以一键方便地清楚缓存内容。</p>

<h3>VVDocumenter</h3>

<p>VVDocumenter（<a href="https://github.com/onevcat/VVDocumenter-Xcode">https://github.com/onevcat/VVDocumenter-Xcode</a>）是一个自动生成代码注释的工具，可以方便地将函数的参数名和返回值提取出来，这样结合上一节介绍的<code>appledoc</code>命令，就可以方便地将帮助文档输出。</p>

<p><img src="http://blog.devtang.com/images/xcode-plugin-vvdocument.png"></p>

<h3>ClangFormat</h3>

<p>ClangFormat（<a href="https://github.com/travisjeffery/ClangFormat-Xcode">https://github.com/travisjeffery/ClangFormat-Xcode</a>）是一个自动调整代码风格（Code Style）的工具。Xcode本身的代码缩进自动调整功能比较弱，特别是对于JSON格式，常常产生非常丑陋的默认缩进效果。ClangFormat-Xcode可以更好地对代码进行重新排版，并且内置了各种排版风格，也支持自定义风格。</p>

<h3>ColorSense</h3>

<p>ColorSense（<a href="https://github.com/omz/ColorSense-for-Xcode">https://github.com/omz/ColorSense-for-Xcode</a>）是一个<code>UIColor</code>颜色输入辅助工具，可以帮助你在编写<code>UIColor</code>代码时，实时预览相应的颜色，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/xcode-plugin-color.png"></p>

<h3>XcodeBoost</h3>

<p>XcodeBoost（<a href="https://github.com/fortinmike/XcodeBoost">https://github.com/fortinmike/XcodeBoost</a>）包含多个辅助修改代码的小功能，比如：</p>

<ul>
<li>可以在.m文件中复制方法实现，然后将该方法的定义粘贴到对应的.h文件中</li>
<li>可以在某一个源文件中直接输入正则表达式查找</li>
<li>可以复制粘贴代码时不启用Xcode的自动缩进功能（Xcode的自动缩进经常出问题，造成已经调整好的代码缩进，因为粘贴时被Xcode调整坏了）</li>
</ul>


<h2>小结</h2>

<p>本文分图形应用工具，命令行工具，Xcode插件三个部分，介绍了iOS开发中好用的工具。其中涉及的图形工具部分是收费的，而命令行工具和Xcode插件工具全部是免费并且开源的工具，笔者在此也感谢广大的开源软件作者，是他们让整个软件生态圈更加美好。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-06-29T13:12:01+08:00" pubdate data-updated="true">Jun 29<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第15期]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/24/ios-weekly-15/"/>
    <updated>2014-06-24T12:58:31+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/24/ios-weekly-15</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/06/ios8-osx10.10-extension">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Swift 和 C# 的语法比较，一个CoreText排版性能问题，谈谈 iOS 8 和 OS X 10.10 的 Extension等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://swift.sh/topic/125/swift-c/">《Swift 和 C# 的语法比较》</a>：适合有C#开发经验的朋友快速了解Swift语言。</p></li>
<li><p><a href="https://leverich.github.io/swiftislikescala/">《Swift 和 Scala 的语法比较》</a>：适合有 Scala 开发经验的朋友快速了解Swift语言。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/06/13/auto-layout/">《AutoLayout 相关概念介绍和动画demo》</a>：文章从传统布局的问题入手，介绍了AutoLayout 相关概念，最后提供了一个示例的Demo程序。</p></li>
<li><p><a href="http://blog.cnbang.net/tech/2268/">《一个CoreText排版性能问题》</a>：伊书的阅读器是用CoreText排版的，在中文字体的选择上，自带的字体中只有黑体，后来发现日文字体Hiragino也是可以用于中文，而且显示效果比黑体好很多，于是选用了这个字体。但在CoreText排版中遇到个问题，用Hiragino字体排版速度非常慢，几乎是默认黑体的100倍。作者分享了整个问题查找和最后解决的过程。</p></li>
<li><p><a href="http://imtx.me/archives/1898.html">《谈谈 iOS 8 和 OS X 10.10 的 Extension》</a>：作者介绍了 WWDC 14 的视频之《Creating Extensions for iOS and OS X》中介绍的Extensions技术，解释了为何 Extensions 这么重要。</p></li>
<li><p><a href="http://objccn.io/issue-13/">《objc第13期：架构》</a>：本期objc.io的中文翻译带来了5篇高质量的关于iOS程序架构方面的文章，分别是：<a href="http://objccn.io/issue-13-1/">《MVVM 介绍》</a>、<a href="http://objccn.io/issue-13-2/">《避免滥用单例》</a>、 <a href="http://objccn.io/issue-13-3/">《iOS 中的行为》</a>、<a href="http://objccn.io/issue-13-4/">《子类》</a>、 <a href="http://objccn.io/issue-13-5/">《使用 VIPER 构建 iOS 应用》</a>。</p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-06-22-quartz-composer-and-origami-tutorial-button-animation.md">《用 Quartz Composer 和 Origami 制作一个简单的按钮动画》</a>: 文章由 <a href="http://weibo.com/nixzhu">@nixzhu</a> 翻译。阅读本文，然后照着做一遍。只需20分钟，你就能了解 QC 和 Origami 是什么，能做什么，以及怎么做。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/03/06/rac_1_macros/">《Reactive Cocoa详解》</a>：Reactive Cocoa是一个函数响应式编程思想在Objective-C语言下的实现。本文将从几个方面详细介绍Reactive Cocoa。</p></li>
<li><p><a href="http://nshipster.cn/cocoapods/">《Cocoa​Pods》</a>：在Objective-C的情况下，CocoaPods提供了一个绝佳的整合合作开发的工具，并且在快速发展的开发社区中起到了一个集结点的作用。在本文中，我们将通过讨论CocoaPods的过去，现在以及将来，一起庆祝0.33版本（具有里程碑意义）的发布。</p></li>
<li><p><a href="http://geeklu.com/2014/05/facebook-pop-usage/">《Facebook Pop 使用指南》</a>：Facebook Pop其实是基于CADisplayLink(Mac平台上使用的CVDisplayLink)实现的独立于Core Animation之外的动画方案。作者在文章中主要介绍了Facebook Pop的使用。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/iosxtools/WWDC2014">WWDC2014字幕下载工具</a>：一个 OSX App，方便下载WWDC2014的视频。</p></li>
<li><p><a href="http://octavianlogigan.com/1360/how-to-export-notes-from-ibooks/">《如何导出iBooks中的笔记》</a>：文章介绍了从iBook导出笔记的技巧。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-06-24T12:58:31+08:00" pubdate data-updated="true">Jun 24<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第14期]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/10/ios-weekly-14/"/>
    <updated>2014-06-10T20:36:23+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/10/ios-weekly-14</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/06/ios-mobile-weekly">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果发布Swift编程语言以及Swift编程语言相关学习资料。</p>

<h2>教程</h2>

<ol>
<li><p><a href="https://itunes.apple.com/gb/book/swift-programming-language/id881256329?mt=11">《The Swift Programming Language》</a>：这是苹果官方出版的Swift学习教材，可以免费下载到iBooks中阅读。其中文版翻译项目也在 Github 上火热进行中，地址在<a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese">这里</a>。</p></li>
<li><p><a href="http://www.raywenderlich.com/73967/swift-cheat-sheet-and-quick-reference">《Swift Cheat Sheet and Quick Reference》</a>：出自raywenderlich的一份Swift快速参考手册，现在还比较简单，但它正快速更新中。</p></li>
<li><p><a href="http://www.raywenderlich.com/73997/swift-language-highlights">《Swift Language Highlights: An Objective-C Developer’s Perspective》</a>：文章比较了Swift和Objective-C语言的差异性。</p></li>
<li><p><a href="http://blog.txx.im/blog/2014/06/07/wwdc14-session-402/">《WWDC14 Session 402 》学习笔记</a>：<a href="http://weibo.com/rpplusplus">@糖炒小虾_txx</a>完成了三篇关于Swift的学习笔记，主要内容均来自WWDC14 Session 402的视频。</p></li>
<li><p><a href="http://www.splasmata.com/?p=2798">《Swift 和Objective-C性能测试》</a>：苹果在WWDC视频中只是简单提到Swift在排序和加密算法上比Objective-C快。本文对两者的性能进行了更复杂的测试，文章中做的测试结果如下：循环100万次，Objective-C比Swift快 29倍；变量增加1， Objective-C比Swift快 46倍。还有一些其它比较，大家可以自己看原文，所以真相是：Swift其实不一定比OC快。</p></li>
<li><p><a href="http://onevcat.com/2014/06/walk-in-swift/">《行走于 Swift 的世界中》</a>：笔者和周围朋友讨论swift的技术细节，大家都觉得swift比想像中要复杂，onevcat的本文讲述了不少swift的细节。从中你会看到，swift真的不简单。</p></li>
<li><p><a href="http://code.csdn.net/news/2820075">《Swift编程语言资料大合集》</a>：来自CSDN整理的Swift学习合集资料。</p></li>
<li><p><a href="http://weekly.manong.io/issues/33?ref=swift">《Swift 特刊》</a>：来自码农周刊的Swift学习合集资料。</p></li>
</ol>


<h2>工具</h2>

<p><a href="http://www.iwangke.me/2014/06/07/wwdc-2014-download-script/">下载脚本</a>：该脚本是WWDC 2014 PDF 及session 视频下载脚本。</p>

<h2>开源项目</h2>

<ol>
<li><p><a href="https://developer.apple.com/wwdc/resources/sample-code/">WWDC的示例代码</a>：比起GitHub上的开源项目，官方的代码更有参考价值。比如Session 406的代码Lister就用一个Swift实现的包含OSX和iOS的Productivity App，还演示了各种Cocoa新功能。</p></li>
<li><p><a href="https://github.com/fullstackio/FlappySwift">FlappySwift</a>：FlappySwift用swift重写的一个开源Flappy Bird游戏。</p></li>
<li><p><a href="https://github.com/YANGReal/JokeClient-Swift">JokeClient-Swift</a>：JokeClient-Swift是<a href="http://weibo.com/208083608">@YANGReal</a>用swift写了一个开源的糗事百科的客户端，主要涉及网络请求，图片加载、缓存、自定义UITableViewCell、delegate以及closure，内容接口基于糗事百科API。</p></li>
<li><p><a href="https://github.com/austinzheng/swift-2048">swift-2048</a>：一个用Swift实现的2048游戏。</p></li>
<li><p><a href="https://github.com/croath/UIImageView-BetterFace-Swift">UIImageView-BetterFace-Swift</a>：UIImageView-BetterFace-Swift是一个根据目标图象中头像的位置进行智能图片裁剪的开源库，该地址是其更新的Swift版本。</p></li>
<li><p><a href="https://github.com/onevcat/Easy-Cal-Swift">Easy-Cal-Swift</a>：swift是类型安全（type safe) 的语言。但是，由于它有类型推断（type inference）能力，所以当能推断出类型时，你不必非要写对应的类型。对于 字面量（literal value），整数会被推断成Int，浮点数会被推断成Double类型。但是，它并没有定义整数和浮点之间的加法，本项目实现了一个常用的运算符重载，这样就可以支持整数和浮点数做加法了。</p></li>
<li><p><a href="https://github.com/amitburst/HackerNews">HackerNews</a>：用Swift实现的HackerNews客户端。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-06-10T20:36:23+08:00" pubdate data-updated="true">Jun 10<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将博客从GitHub迁移到GitCafe]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog/"/>
    <updated>2014-06-02T17:22:02+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog</id>
    <content type="html"><![CDATA[<p>我之前一直使用<a href="https://pages.github.com/">Github Pages功能</a>以及<a href="http://octopress.org/">Octopress</a>来搭建个人博客，我也写了一篇文章<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">《象写程序一样写博客：搭建基于github的博客》</a>来分享博客搭建的技术细节。</p>

<p>但是自从我的博客每天访问量超过2000次以后，我就发现博客的访问速度还是一个不可忽视的问题。通过<a href="http://www.jiankongbao.com/">监控宝</a>和<a href="http://www.google.com/analytics/">Google Analytics</a>，我发现有些博客文章的平均打开时间长达4秒钟。于是我开始考虑将博客搭建在更快的服务器上面。</p>

<p>我的首先考虑是购买独立的VPS，<a href="https://www.linode.com/pricing">Linode</a>每月30$的价格还是略贵，于是我买的是 <a href="https://www.digitalocean.com/?refcode=f54eef197afd">DigitalOcean</a>，<a href="https://www.digitalocean.com/?refcode=f54eef197afd">DigitalOcean</a>算下来每月只需要5$。于是在一个周末，我花时间购买了DigitalOcean家的VPS，安装了Nginx，然后在上面运行了一个脚本，定时将我github博客的内容自动更新过来（其实就是定期<code>git pull</code>一下我博客的repo）。</p>

<p>就这样运行了一个月，我发现虽然<a href="https://www.digitalocean.com/?refcode=f54eef197afd">DigitalOcean</a>服务器的ping值相比github要快一些。但是从监控数据上看，整体的网页访问速度并没有什么提高。就在我在微博上抱怨的时候，一个朋友推荐我试试<a href="http://gitcafe.com/signup?invited_by=tangqiaoboy">GitCafe</a>。于是我就尝试了一下，结果你猜怎么着？我被吓坏了。</p>

<p>ping值直接从200ms左右减少到3ms左右，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/gitcafe-ping.jpg"></p>

<p>监控宝的统计显示，首页平均打开时间从原来的1800ms减少到350ms左右，快了5倍，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/gitcafe-jiankong.jpg"></p>

<p>所以我强烈建议各位基于Github Pages功能来搭建个人博客的朋友，将博客内容镜像到<a href="http://gitcafe.com/signup?invited_by=tangqiaoboy">GitCafe</a>上。如果你有个人的独立域名，那么镜像之后就可以随时将博客地址在Github和Gitcafe之间切换了。对于各位博主来说，这样做没有任何风险，因为你可以随时再切换回去。当然，免费用了人家的服务，如果你能像我这样，在网站的底部附上感谢内容，那是再好不过的了。</p>

<p>以下为大家介绍详细的迁移过程。</p>

<h2>迁移教程</h2>

<h3>注册</h3>

<p>如果你还没有注册过<a href="http://gitcafe.com/signup?invited_by=tangqiaoboy">GitCafe</a>，首先需要<a href="https://gitcafe.com/signup">点这里</a>注册一下。</p>

<p>注册完成之后，去<a href="https://gitcafe.com/account/public_keys">公钥管理</a>那儿添加一下你的ssh公钥，这样以后提交代码会方便很多。当然你也可以不设置这一步，每次提交通过密码来验证。</p>

<h3>在GitCafe上新建一个博客项目</h3>

<p>然后我们需要先在GitCafe上新建一个博客项目。GitCafe的博客搭建官方教程藏得比较深，所以我第一次还没有找到，教程地址在<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki">这里</a>。具体来说，就是创建一个与用户名(如果是组织，就是组织名)相同名称的项目。如果你创建的项目名与用户名相同，GitCafe会自动识别成这是一个Page项目，如下所示：</p>

<p><img src="http://blog.devtang.com/images/gitcafe-create-page.jpg"></p>

<h3>设置多个Git Remote源</h3>

<p>接下来我们需要将原本提交到Github上的博客内容同步提交到GitCafe。因为我的博客是基于<a href="http://octopress.org/">Octopress</a>的，我介绍一下Octopress的做法，其它博客引擎的做法类似。</p>

<p>对于Octopress，我们只需要每次提交网站内容时，执行完 <code>rake deploy</code>之后，再执行以下脚本即可（你可以将该脚本中的代码仓库地址换成你的，然后将其保存成一个脚 本文件，需要时执行一下即可）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'><span class="c"># 添加 gitcafe 源</span>
</span><span class='line'>git remote add gitcafe git@gitcafe.com:tangqiaoboy/tangqiaoboy.git &gt;&gt; /dev/null 2&gt;&amp;1
</span><span class='line'><span class="c"># 提交博客内容</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;### Pushing to GitCafe...&quot;</span>
</span><span class='line'>git push -u gitcafe master:gitcafe-pages
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;### Done&quot;</span>%
</span></code></pre></td></tr></table></div></figure>


<p>大概解释一下以上内容，Octopress在发布时会将自己的 <code>_delpoy</code>目录切换到master分支，然后将生成的博客内容放到<code>_delpoy</code>目录中，然后执行<code>git push</code>操作。正常情况下，默认内容是push到github上的。我们执行的以上脚本，就是为该项目增加了一个名为<code>gitcafe</code>的远程仓库，然后将master分支push到<code>gitcafe</code>的<code>gitcafe-pages</code>分支。</p>

<h3>修改Rakefile (可选)</h3>

<p>除了以上方法外，你也可以直接修改<code>Rakefile</code>。在其第269行后增加如下代码，也可以达到同样的目的，这样你每次就仍然只需要执行<code>rake deploy</code>即可同时将博客同步到github和gitcafe：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">system</span> <span class="s2">&quot;git remote add gitcafe git@gitcafe.com:tangqiaoboy/tangqiaoboy.git &gt;&gt; /dev/null 2&gt;&amp;1&quot;</span>
</span><span class='line'><span class="nb">system</span> <span class="s2">&quot;git push -u gitcafe master:gitcafe-pages&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>插入代码的示例位置如下：</p>

<p><img src="http://blog.devtang.com/images/gitcafe-edit-rakefile.jpg"></p>

<h3>设置域名</h3>

<p>GitCafe的自定义域名设置比github要友好得多，它不但提供了图形界面设置，并且支持同时设置多个域名。在<code>项目管理</code>&ndash;><code>域名管理</code>中，我们可以找到相应的设置项，如下所示：</p>

<p><img src="http://blog.devtang.com/images/gitcafe-set-domain.jpg"></p>

<p>在设置完之后，我们需要去域名解析的服务商那儿，将对应的域名用<code>A记录</code>类型，解析到<code>117.79.146.98</code>即可。</p>

<h3>添加对GitCafe的感谢(可选)</h3>

<p>如果你也想像我一样，想在博客底部添加对GitCafe的感谢，可以参考<a href="https://github.com/tangqiaoboy/tangqiaoboy.github.com/commit/a8ff6914d6fca786baf5702de3da01d408bd7b43">这个提交</a>。它通过修改Octopress的<code>source/_includes/custom/footer.html</code>模版文件完成。</p>

<h2>感谢</h2>

<p>最后再次感谢GitCafe，上个月在QCon大会上了解到他们的发展思路和Github很不一样。虽然它还是一家创业公司，但是我期待看到它最终能够推动国内开源和技术社区的发展。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-06-02T17:22:02+08:00" pubdate data-updated="true">Jun 2<span>nd</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第13期]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/01/ios-weekly-13/"/>
    <updated>2014-06-01T17:27:22+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/01/ios-weekly-13</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/05/facebook-pop">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Facebook Pop 使用指南，用CocoaPods做iOS程序的依赖管理，在 iOS 上捕捉签名，加密你的SQLite等。</p>

<h2>教程</h2>

<ol>
<li><p> <a href="http://geeklu.com/2014/05/facebook-pop-usage/">《Facebook Pop 使用指南》</a>：Facebook Pop其实是基于CADisplayLink(Mac平台上使用的CVDisplayLink)实现的独立于Core Animation之外的动画方案。文章主要介绍了Facebook Pop如何使用。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">《用CocoaPods做iOS程序的依赖管理》</a>：文章除了介绍了CocoaPods的基本功能外，还增加了如何设置国内spec镜像、使用私有pod、podfile.lock、如何创建spec文件等内容。</p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-05-27-capture-a-signature-on-ios.md">《在 iOS 上捕捉签名》</a>：文章介绍了如何绘制像 Paper 应用那样的真正平滑的曲线，包括如何使用二次贝塞尔曲线使签名平滑，以及基于触摸速度，使签名宽度可变，从而创建出更加自然的笔画。</p></li>
<li><p><a href="http://blog.t-xx.me/blog/2014/05/28/hack-weibo-sdk/">《解決WeiboSDK Bundleid 綁定問題》</a>：@糖炒小虾_txx 利用IDA分析和 method_swizzling 破解了微博SDK的bundle d綁定，这样就可以绕开weibo sdk 的sso 和bundle id綁定的要求，这算是Objective-C黑魔法的一次有效实践。</p></li>
<li><p> <a href="http://wangzz.github.io/blog/2014/05/19/jia-mi-ni-de-sqlite/">《加密你的SQLite》</a>：SQLite是一个轻量的、跨平台的、开源的数据库引擎，它的在读写效率、消耗总量、延迟时间和整体简单性上具有的优越性，使其成为移动平台数据库的最佳解决方案。然而免费版的SQLite有一个致命缺点：不支持加密。这就导致存储在SQLite中的数据可以被任何人用任何文本编辑器查看到。本文讨论了各种对SQLite的加密方法。</p></li>
<li><p> <a href="http://security.ios-wiki.com/issue-3-4/">《Reveal：分析iOS UI的利器》</a>：Reveal能够在运行时调试和修改iOS应用程序。它能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。就像用chrome调试HTML页面一样，在不需要重写代码、重新构建和重新部署应用程序的情况下就能够调试和修改iOS用户界面。文章简要介绍了Reveal的功能和几种加载方法。</p></li>
<li><p> <a href="http://blog.codingcoder.com/ios-games-by-tutorials-chapter8%EF%BC%8Dpart1/">《Sprite Kit 物理引擎初体验 Part 1》</a>：Sprite Kit 内建了一个强大的并且非常容易使用的物理引擎，你可以很容易的使用这个内置的物理引擎来模拟真实世界中的移动。文章介绍了Sprite Kit的基本使用。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://itunes.apple.com/cn/app/podlife/id725023109?l=en&amp;mt=8">Podlife</a>：Podlife是一个免费的iOS应用，可以在手机上搜寻各种 CocoaPods，并得到更新提醒。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/schneiderandre/popping">popping</a>：popping是一个POP 使用实例工程。</p></li>
<li><p><a href="https://github.com/venmo/synx">synx</a>：synx可以自动帮你整理项目里的文件，按 group 重新放置。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-06-01T17:27:22+08:00" pubdate data-updated="true">Jun 1<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[专访《iOS测试指南》作者羋峮]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/01/interview-on-miqun/"/>
    <updated>2014-06-01T17:07:31+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/01/interview-on-miqun</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/04/interview-ios-test-guide-author">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>在 2014年<a href="http://www.qconbeijing.com/">QCon北京</a>大会上，羋峮进行了他的新书<a href="http://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/product-description/B00JPVNFKM">《iOS测试指南》</a>的签售会。在大会中，我代表InfoQ与羋峮进行了一次专访，羋峮分享了他在iOS平台做自动化测试的一些经验。</p>

<p>羋峮有着多年的测试经验，先后在高德、豆瓣以及豌豆夹从事过测试相关的工作。他在豆瓣工作时，实现并且开源了iOS的自动化测试工具<a href="https://github.com/douban/ynm3k">ynm3k</a>，并且刚刚完成了系统介绍iOS自动化测试的新书《iOS测试指南》。</p>

<p>InfoQ：羋峮你好，我想请你先介绍一下你的测试工作经历。</p>

<blockquote><p>羋峮：我是03年毕业的，修了三年地铁以后就转行做软件测试工作了。到现在，做测试有七到八年的时间，我是从豆瓣开始做的移动测试相关的工作，当时移动测试也正好赶上一个起步的阶段，所以还有一点小小的心得。</p></blockquote>

<p>InfoQ：我想问的第一个主题是关于自动化测试和持续集成的方面的问题。就我所了解的情况，现在大部分的互联网公司关于移动端的测试的工具都还处于比较初级的阶段，很多公司也没有真正应用上那个自动化测试。我昨天跟阿里的iOS Leader聊，他们没有用到移动端自动化测试，我之前在网易工作，他们也没有做移动端自动化测试，你觉得是什么原因造成移动端自动化测试还没有流行起来，没有大规模的应用？</p>

<blockquote><p>羋峮：测试的投入产出比，尤其是自动化测试的投入产出比一直都没有一个非常简单有效的说明方法。当投入产出比的说不清楚的时候，可能很多人选择观望。tinyfool在给我写这本书的书序的时候，他也做了一个小调查，基本上就是不测试，或者简单测试的占很大的比重，比较细致的测试非常少。测试做的非常少主要有这么几方面的原因：</p>

<p>1、移动端是一个新生事物，总结出来的方法还没有被普遍的认可。移动端承接了更多UI展现方面的工作，其中有很多的和人交互的东西。不但功能复杂，并且还没有唯一的标准。测试的注意力很容易不分散，并且效果非常的不明显。</p>

<p>2、移动端现在更多的是市场行为，需要有产品的占领地盘。还没有到精雕细琢的时代。所以，测试在这个时候明显不如产品或者设计师有话语权。并且现在需要的是“有”，还没有到“精”的程度。</p>

<p>3、国内测试界相对比较浮躁，更多的不是从技术角度去解决问题。所以导致测试需要关注点过于分散，没有真正的定义好自己的工作职责和范围。什么事情都需要关注，最后就是什么事情都没有关注好。</p>

<p>我比较幸运，当时去了豆瓣。豆瓣当时明确的定义了QA的工作职责——推荐新技术或者开发新工具，让开发工程师更好的测试。并且设计师在测试阶段也会投入很大的精力去review设计稿中各种交互方面的不足。</p></blockquote>

<p>InfoQ：你在豆瓣开始尝试iOS的自动化测试，那我想知道你在这个过程中取得哪些成果？</p>

<blockquote><p>羋峮：刚去豆瓣接手工作的时候自己思维还是有局限性的，只是把自己工作定位在去实现一些基于界面操作的自动化的东西，这个其实现在看来可能它是一个切入点，但是可能并不是一个非常好的切入点，其实还有很多工作要做，由于当时自己思维局限所以就做了。</p>

<p>另外一方面，就是因为只想到这一点，所以就是精力比较集中,更容易出一些成果。2011年年底的时候开始做这些工作，自己先后找了有五款自动化测试工具调研。调研的方法是先写一些demo的东西，然后再看看工具的源代码。搞清楚工作的架构和底层原理。最后发现，当时的工具都有一些这样那样的问题。然后自己就开始幻想写一个适合自己的这个自动化工具。</p>

<p>当iOS5发布以后，苹果的对于UI Automation进行了一个改进，增加了<code>performTaskWithPathArgumentsTimeout</code>接口。通过该接口可以实现UI Automation和外部程序的简单通信。基于这个改进，自己拉了在豆瓣的一个开发的同事，两个人就用一个半月的时间写了一个自动化测试工具。也是因为有了performTaskWithPathArgumentsTimeout接口的发布，所以淘宝也当时利用那个接口写了另外一种实现的iOS的测试工具。</p>

<p>在完成ynm3k的开发以后，使用它为豆瓣FM和豆瓣电影写了一些自动化测试用例。效果还可以。</p></blockquote>

<p>InfoQ：淘宝那个开源了吗？</p>

<blockquote><p>羋峮：淘宝那个开源了，叫 <a href="http://code.taobao.org/p/athrun/src/">athrun</a> ，我那个也开源了叫 <a href="https://github.com/douban/ynm3k">ynm3k</a>，当时是12年7月份，那个ADC的专门都有分享，在网上应该也都有链接 <a href="http://adc.taobao.com/carnival/video/147_0">Athrun instrument driver</a>和<a href="http://adc.taobao.com/carnival/video/148_0">豆瓣iOS自动化测试实践和经验</a> 。</p></blockquote>

<p>InfoQ：当时你们花一个半月开发这个自动化测试工具是用20%的工作时间，还是完全的工作时间来做这个事情？因为我觉得你在开发这段时间内肯定也有普通的正常的测试任务要完成，你们公司是怎么平衡这件事情的？</p>

<blockquote><p>羋峮：我们应该是业余时间完成的这个框架。主要就是晚上，或者是快下班的时候，自己挤出来一些时间做这个事情。</p></blockquote>

<p>InfoQ：跟同事的配合也是在那段时间来进行的？</p>

<blockquote><p>羋峮：当时就是我俩分工相对来说很明确，一方面需要有更好的遍历控件和定位控件的方法，是由我来现实的；另一方面，需要引入一个JavaScript语言的单元测试框架。这部分由我豆瓣的同事<a href="http://weibo.com/p/1005051689931124">@SeanLionheart</a>完成，他在正式发布的时候已经去美国上学。</p>

<p>我们两个之间的配合非常顺畅，因为各自的部分是完全解耦的，互补不影响。在交流的时候，还能相互给出自己的想法和意见。</p></blockquote>

<p>InfoQ：你们做这件事情，豆瓣有从文化上，或者从其他方面对你们这件事情有鼓励或者激励吗？我想知道，是否这个公司的文化对于促进了你们做这件事情？</p>

<blockquote><p>羋峮：这个肯定是促进的。首先这个想法是我在一次周会上提出来的。提出来以后，当时我的Leader 解彦博老师就特别鼓励我们去做这件事情，并且大家都很感兴趣，当时的整个测试团队都给我们提供意见或者交流过想法。</p>

<p>第二，在豆瓣的骨子里，就有很多工程师去愿意去用自己的业余时间去写一些小工具来改进效率，或者是提高效率，或者改进流程，这个在豆瓣都是很流行。自己写的工具，在豆瓣内部得到了广泛的应用，对工程师来说这是很高的荣誉。</p></blockquote>

<p>InfoQ：当你产品在快速迭代的时候，它的整个页面的组织，界面逻辑都会在快速变化，这个时候自动化测试是否是在这种场景下不太适合？自动化测试是怎么解决产品快速迭代的问题呢？</p>

<blockquote><p>羋峮：无法适应变化一直是自动化测试的软肋。首先，有一些变化需要测试做兼容，这个兼容可能需要测试框架本身来支持，也可能需要自动化测试脚本通过一些更加层次化的方法来兼容。举一个例子来说，一个登录按钮，从 NavigationBar上移到了可能在中间页面的一个 LoginButton 上面，所以这种情况下是应该去兼容的，因为它只是位置发生了变化，它大的业务逻辑没有发生变化，这种是需要测试框架去兼容的。如果是更大一点的变化，需要测试脚本一定量的维护。
其次，测试脚本一定要不断的维护。有很多自动化测试最终失败是因为期间放弃过自动化测试脚本的维护。自动化测试脚本不但需要维护，还需要有很好的代码结构。相关测试脚本的代码结构可以参看一些PageObject的思想，也可以看看cucumber等BDD工具，都会帮助你最小改动的维护自动化测试脚本。
当然，自动化测试接入工程的时机等因素也很重要。这些都没有固定的模式，需要结合自己团队的特点来开展。自动化测试和持续集成是一对好基友。自动化测试执行和结果展示都需要持续集成的帮助。有了持续集成，自动化测试才会被更多的人认可，可才会有更多的人加入到自动化测试的维护中来。
最后，可能需要更新一下对自动化测试的认识。自动化测试不会降低成本，自动化测试不会主动发现bug。自动化测试可以更标准更快速的重复回归一些功能测试。所以，对自动化测试有一个更加客观的认识，才会帮助你在具体的工程项目中更好的开展自动化测试实践。</p></blockquote>

<p>InfoQ：刚才你提到你在豆瓣开源的ynm3k这个开源测试工具，然后你同时也提到淘宝也开源的athrun，你有没有比较过你们两者之间工具各自有什么特点？</p>

<blockquote><p>羋峮：首先两款工具都同时用到了一个接口，接口的名字是：performTaskWithPathArgumentsTimeout，这个接口可以去运行一个本地的命令行程序。这个接口提供了UI Automation和命令行工具的一个交互的可能。</p>

<p>我用那个接口用的非常轻量，需要把运行完的测试结果通过那个接口写文件写出来，写成标准的XML以后，通过 Jenkins 或者是 Hudson 这些持续集成的工具，把它展现在持续集成工具的页面里头。</p>

<p>我只是写了文件，淘宝的 athrun 做了一个进程之间的通信，所以他那个工具解决的问题是：用户可以不用JavaScript来写UI Automation的东西。athrun自己定义了通信协议，并且通过performTaskWithPathArgumentsTimeout接口来完成和UI Automation的通信。用户可以使用Java语言来做UI Automation的自动化测试。</p>

<p>同样类似的国外也有，就像eBay的<a href="http://ios-driver.github.io/ios-driver/">ios-driver</a>，还有就是最近特别火的 <a href="http://appium.io/">appium</a>，原理上都是通过那个接口实现了两个进程间的通信来驱动UI Automation来完成自动化测试的。appium在驱动UI Automation的基础上还兼容了WebDriver的Json Wire protocl协议。使用者可以使用Java、Python、Ruby等语言直接调用WebDriver的API来完成iOS的自动化测试。WebDriver对很多Web端的测试工程师来说都很熟悉。由于appium兼容了Json Wire protocl协议，使用者还可以使用Gird来并发的测试。当然，appium也支持Android的一些自动化测试。</p>

<p>在《iOS测试指南》书中，大概也进行了一个分类，ynm3k属于扩展型的，扩展型的工具只是提供了一些JavaScript的开发库，用户只需要import进来，可能就会有更简化的写法和更强大的功能，然后但是对本身的UI Automation的，就基本上没有改变。</p>

<p>但是通过苹果提供<code>performTaskWithPathArgumentsTimeout</code>接口进行进程间通信的这种自动化测试工具，我在书里面把它归类为驱动型的测试工具。使用驱动型的测试工具，用户可以有更多种语言的选择，并且可以拥有动态的调试功能。但是驱动型的测试工具，无法在instruments的图形界面下运行，也就失去了，运行自动化测试的时候同时检查内存泄露，统计网络流量等功能。所以，工具对比下来只有适合不适合的说法，并没有绝对意义上的好与坏。</p></blockquote>

<p>InfoQ：刚才也都是提到你的UI测试的书本，我希望你简单介绍一下这本书适合哪些读者，有没有什么你觉得特别值得推荐的书里面的内容可以分享给大家？</p>

<blockquote><p>羋峮：我书里前两章写的很短，就说了一些基本的概念；第三章说的是单元测试的一些实践，并且完成一个简单的app的单元测试。</p>

<p>第四章就简要的介绍一下Automation的基础知识，很多自动化测试工具都是基于UI Automation来做的。不管是用哪个工具，从底层了解一些UI Automation的API，都是有帮助。</p>

<p>第五章写的是iOS端的Web测试的一个方案，介绍了两种工具，其中也提到了Appium，我也更推荐使用Appium来做自动化测试；然后第六章介绍了持续集成方面的事情，就是三到六章应该都是一个综合解决方案中的各个部分的技能的分散介绍。然后第七章介绍了一下，除了功能测试，手机端还需要去做哪些类型的测试，或者借助工具，我们应该怎么样简单的去确认，或者是去更精确的衡量；第八章是基于第三、四、五、六章然后做了一个最后的一个汇总介绍。因为书写的比较慢，在书稿还没有完全完成的时候，苹果就发布了XCode5和OS X 10.9。在这一次更新以后，苹果本身也提供了一个持续集成的解决方案。在XCode5中还升级了单元测试框架。所以这一系列的变化就有了第九章的内容。</p>

<p>书的内容本身是想给刚入门iOS测试的工程师来看的。最早写书的主要目的也是，为了汇总一些资料。因为相关iOS测试的资料实在是太少并且太分散了。但是当书写完以后，才发现原来用到了3-4种变成语言。所以，现在看来可能还需要读者有一定的编程功底。所以本书的最适合读者是有编码能力或者测试经验的人需要了解移动端测试的这样一个人群。</p></blockquote>

<p>InfoQ：你刚才讲到你的工具是开源的，然后你花了业余时间在这个上面，然后你的这本书是你的一个人通过业余时间写作完成的作品，我就想知道你开源和写作大概花费了你多少的业余时间，业余时间里面你是如何安排这些事情的？</p>

<blockquote><p>羋峮：做开源的时候还好了，只需要挤出来一定的时间把框架搭完了，慢慢的可以用零散的工作去实现个别功能，或者优化个别功能。写书的话，整个过程中，其实还是需要一些大块的时间去投入，因为自己语文水平比较差，有的时候明白一件事，可能还要去想一想怎么能写明白。对于我而言，往往需要大块的时间去写书，需要写一个小时以后感觉才能进入状态，进入状态之后写作效率还算OK。一般一次写作的时间会在4个小时以上。我自己估了一下，如果一页的内容，代码和截图占到一半以上的话那一页的时间，大概是1.5个小时，如果是这一页内容是纯文字的话，那一页的时间大概是两个半小时。所以整个大概写了四百个小时左右。</p></blockquote>

<p>InfoQ：这确实是一个很大的工作量。感谢你为大家带来的开源工具和作品，谢谢你！</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-06-01T17:07:31+08:00" pubdate data-updated="true">Jun 1<span>st</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/interview/'>interview</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解Tagged Pointer]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/30/understand-tagged-pointer/"/>
    <updated>2014-05-30T22:15:29+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/30/understand-tagged-pointer</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/deep-understanding-of-tagged-pointer">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<p>【摘要】：为了节省内存和提高执行效率，苹果提出了<code>Tagged Pointer</code>的概念。对于64位程序，引入Tagged Pointer后，相关逻辑能减少一半的内存占用，以及3倍的访问速度提升，100倍的创建、销毁速度提升。本文从<code>Tagged Pointer</code>试图解决的问题入手，带领读者理解<code>Tagged Pointer</code>的实现细节和优势，最后指出了使用时的注意事项。</p>

<h2>前言</h2>

<p>在2013年9月，苹果推出了<a href="http://en.wikipedia.org/wiki/IPhone_5S">iPhone5s</a>，与此同时，iPhone5s配备了首个采用64位架构的<a href="http://en.wikipedia.org/wiki/Apple_A7">A7双核处理器</a>，为了节省内存和提高执行效率，苹果提出了<code>Tagged Pointer</code>的概念。对于64位程序，引入Tagged Pointer后，相关逻辑能减少一半的内存占用，以及3倍的访问速度提升，100倍的创建、销毁速度提升。本文从<code>Tagged Pointer</code>试图解决的问题入手，带领读者理解<code>Tagged Pointer</code>的实现细节和优势，最后指出了使用时的注意事项。</p>

<h2>问题</h2>

<p>我们先看看原有的对象为什么会浪费内存。假设我们要存储一个NSNumber对象，其值是一个整数。正常情况下，如果这个整数只是一个NSInteger的普通变量，那么它所占用的内存是与CPU的位数有关，在32位CPU下占4个字节，在64位CPU下是占8个字节的。而指针类型的大小通常也是与CPU位数相关，一个指针所占用的内存在32位CPU下为4个字节，在64位CPU下也是8个字节。</p>

<p>所以一个普通的iOS程序，如果没有<code>Tagged Pointer</code>对象，从32位机器迁移到64位机器中后，虽然逻辑没有任何变化，但这种NSNumber、NSDate一类的对象所占用的内存会翻倍。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/tagged_pointer_before.jpg"></p>

<p>我们再来看看效率上的问题，为了存储和访问一个NSNumber对象，我们需要在堆上为其分配内存，另外还要维护它的引用计数，管理它的生命期。这些都给程序增加了额外的逻辑，造成运行效率上的损失。</p>

<h2>Tagged Pointer</h2>

<p>为了改进上面提到的内存占用和效率问题，苹果提出了<code>Tagged Pointer</code>对象。由于NSNumber、NSDate一类的变量本身的值需要占用的内存大小常常不需要8个字节，拿整数来说，4个字节所能表示的有符号整数就可以达到20多亿（注：2<sup>31</sup>=2147483648，另外1位作为符号位)，对于绝大多数情况都是可以处理的。</p>

<p>所以我们可以将一个对象的指针拆成两部分，一部分直接保存数据，另一部分作为特殊标记，表示这是一个特别的指针，不指向任何一个地址。所以，引入了<code>Tagged Pointer</code>对象之后，64位CPU下NSNumber的内存图变成了以下这样：</p>

<p><img src="http://blog.devtang.com/images/tagged_pointer_after.jpg"></p>

<p>对此，我们也可以用 Xcode做实验来验证。我们的实验代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSNumber</span> <span class="o">*</span><span class="n">number1</span> <span class="o">=</span> <span class="err">@</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSNumber</span> <span class="o">*</span><span class="n">number2</span> <span class="o">=</span> <span class="err">@</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSNumber</span> <span class="o">*</span><span class="n">number3</span> <span class="o">=</span> <span class="err">@</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSNumber</span> <span class="o">*</span><span class="n">numberFFFF</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="mh">0xFFFF</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;number1 pointer is %p&quot;</span><span class="p">,</span> <span class="n">number1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;number2 pointer is %p&quot;</span><span class="p">,</span> <span class="n">number2</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;number3 pointer is %p&quot;</span><span class="p">,</span> <span class="n">number3</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;numberffff pointer is %p&quot;</span><span class="p">,</span> <span class="n">numberFFFF</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">UIApplicationMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">AppDelegate</span> <span class="n">class</span><span class="p">]));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在该代码中，我们将几个Number类型的指针的值直接输出。需要注意的是，我们需要将模拟器切换成 64位的CPU来测试，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/tagged_pointer_switch_64bit_simulator.jpg"></p>

<p>运行之后，我们得到的结果如下，可以看到，除去最后的数字最末尾的2以及最开头的0xb，其它数字刚好表示了相应NSNumber的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">number1</span> <span class="n">pointer</span> <span class="n">is</span> <span class="mh">0xb000000000000012</span>
</span><span class='line'><span class="n">number2</span> <span class="n">pointer</span> <span class="n">is</span> <span class="mh">0xb000000000000022</span>
</span><span class='line'><span class="n">number3</span> <span class="n">pointer</span> <span class="n">is</span> <span class="mh">0xb000000000000032</span>
</span><span class='line'><span class="n">numberFFFF</span> <span class="n">pointer</span> <span class="n">is</span> <span class="mh">0xb0000000000ffff2</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见，苹果确实是将值直接存储到了指针本身里面。我们还可以猜测，数字最末尾的2以及最开头的0xb是否就是苹果对于<code>Tagged Pointer</code>的特殊标记呢？我们尝试放一个8字节的长的整数到<code>NSNumber</code>实例中，对于这样的实例，由于<code>Tagged Pointer</code>无法将其按上面的压缩方式来保存，那么应该就会以普通对象的方式来保存，我们的实验代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">bigNumber</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="mh">0xEFFFFFFFFFFFFFFF</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;bigNumber pointer is %p&quot;</span><span class="p">,</span> <span class="n">bigNumber</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行之后，结果如下，验证了我们的猜测，<code>bigNumber</code>的地址更像是一个普通的指针地址，和它本身的值看不出任何关系：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">bigNumber</span> <span class="n">pointer</span> <span class="n">is</span> <span class="mh">0x10921ecc0</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见，当8字节可以承载用于表示的数值时，系统就会以<code>Tagged Pointer</code>的方式生成指针，如果8字节承载不了时，则又用以前的方式来生成普通的指针。关于以上关于<code>Tag Pointer</code>的存储细节，我们也可以在<a href="https://www.mikeash.com/pyblog/friday-qa-2012-07-27-lets-build-tagged-pointers.html">这里</a>找到相应的讨论，但是其中关于<code>Tagged Pointer</code>的实现细节与我们的实验并不相符，笔者认为可能是苹果更改了具体的实现细节，并且这并不影响<code>Tagged Pointer</code>我们讨论<code>Tagged Pointer</code>本身的优点。</p>

<h2>特点</h2>

<p>我们也可以在WWDC2013的《Session 404 Advanced in Objective-C》视频中，看到苹果对于<code>Tagged Pointer</code>特点的介绍：</p>

<ol>
<li><code>Tagged Pointer</code>专门用来存储小的对象，例如<code>NSNumber</code>和<code>NSDate</code></li>
<li><code>Tagged Pointer</code>指针的值不再是地址了，而是真正的值。所以，实际上它不再是一个对象了，它只是一个披着对象皮的普通变量而已。所以，它的内存并不存储在堆中，也不需要malloc和free。</li>
<li>在内存读取上有着3倍的效率，创建时比以前快106倍。</li>
</ol>


<p>由此可见，苹果引入<code>Tagged Pointer</code>，不但减少了64位机器下程序的内存占用，还提高了运行效率。完美地解决了小内存对象在存储和访问效率上的问题。</p>

<h2>isa指针</h2>

<p><code>Tagged Pointer</code>的引入也带来了问题，即<code>Tagged Pointer</code>因为并不是真正的对象，而是一个伪对象，所以你如果完全把它当成对象来使，可能会让它露马脚。比如我在<a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">《Objective-C对象模型及应用》</a>一文中就写道，所有对象都有 <code>isa</code> 指针，而<code>Tagged Pointer</code>其实是没有的，因为它不是真正的对象。
因为不是真正的对象，所以如果你直接访问<code>Tagged Pointer</code>的<code>isa</code>成员的话，在编译时将会有如下警告：</p>

<p><img src="http://blog.devtang.com/images/tagged_pointer_isa_forbidden.jpg"></p>

<p>对于上面的写法，应该换成相应的方法调用，如 <code>isKindOfClass</code> 和 <code>object_getClass</code>。只要避免在代码中直接访问对象的isa变量，即可避免这个问题。</p>

<h2>总结</h2>

<p>苹果将<code>Tagged Pointer</code>引入，给64位系统带来了内存的节省和运行效率的提高。<code>Tagged Pointer</code>通过在其最后一个bit位设置一个特殊标记，用于将数据直接保存在指针本身中。因为<code>Tagged Pointer</code>并不是真正的对象，我们在使用时需要注意不要直接访问其isa变量。</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-05-30T22:15:29+08:00" pubdate data-updated="true">May 30<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用CocoaPods做iOS程序的依赖管理]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/"/>
    <updated>2014-05-25T14:09:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/cocoapods-logo.png"></p>

<h2>文档更新说明</h2>

<ul>
<li>2012-12-02 v1.0 初稿</li>
<li>2014-01-08 v1.1 增加设置ruby淘宝源相关内容</li>
<li>2014-05-25 v2.0 增加国内spec镜像、使用私有pod、podfile.lock、创建spec文件等内容</li>
</ul>


<h2>CocoaPods简介</h2>

<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具，例如Java语言的Maven，nodejs的npm。随着iOS开发者的增多，业界也出现了为iOS程序提供依赖管理的工具，它的名字叫做：<a href="http://cocoapods.org/">CocoaPods</a>。</p>

<p>CocoaPods<a href="https://github.com/CocoaPods/CocoaPods">项目的源码</a>在Github上管理。该项目开始于2011年8月12日，经过多年发展，现在已经成为iOS开发事实上的依赖管理标准工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<p>在我开发猿题库客户端时，其使用了24个第三方开源库。在没有使用CocoaPods以前，我需要:</p>

<ol>
<li>把这些第三方开源库的源代码文件复制到项目中，或者设置成git的submodule。</li>
<li>对于这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如通常情况下，一个网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics, zlib。</li>
<li>对于某些开源库，我还需要设置<code>-licucore</code>或者 <code>-fno-objc-arc</code>等编译参数</li>
<li>管理这些依赖包的更新。</li>
</ol>


<p>这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行<code>pod install</code>。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>

<h2>CocoaPods的安装和使用介绍</h2>

<h3>安装</h3>

<p>安装方式异常简单, Mac下都自带ruby，使用ruby的gem命令即可下载安装：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install cocoapods
</span><span class='line'><span class="nv">$ </span>pod setup
</span></code></pre></td></tr></table></div></figure>


<p>如果你的gem太老，可能也会有问题，可以尝试用如下命令升级gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gem update --system
</span></code></pre></td></tr></table></div></figure>


<p>另外，ruby的软件源rubygems.org因为使用的亚马逊的云服务，所以被墙了，需要更新一下ruby的源，如下代码将官方的ruby源替换成国内淘宝的源：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -l
</span></code></pre></td></tr></table></div></figure>


<p>还有一点需要注意，<code>pod setup</code>在执行时，会输出<code>Setting up CocoaPods master repo</code>，但是会等待比较久的时间。这步其实是Cocoapods在将它的信息下载到 <code>~/.cocoapods</code>目录下，如果你等太久，可以试着cd到那个目录，用<code>du -sh *</code>来查看下载进度。你也可以参考本文接下来的<code>使用cocoapods的镜像索引</code>一节的内容来提高下载速度。</p>

<h3>使用CocoaPods的镜像索引</h3>

<p>所有的项目的Podspec文件都托管在<code>https://github.com/CocoaPods/Specs</code>。第一次执行<code>pod setup</code>时，CocoaPods会将这些<code>podspec</code>索引文件更新到本地的 <code>~/.cocoapods/</code>目录下，这个索引文件比较大，有80M左右。所以第一次更新时非常慢，笔者就更新了将近1个小时才完成。</p>

<p>一个叫<a href="http://akinliu.github.io/2014/05/03/cocoapods-specs-/">akinliu</a>的朋友在<a href="http://gitcafe.com/">gitcafe</a>和<a href="http://www.oschina.net/">occhina</a>上建立了CocoaPods索引库的镜像，因为gitcafe和occhina都是国内的服务器，所以在执行索引更新操作时，会快很多。如下操作可以将CocoaPods设置成使用gitcafe镜像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pod repo remove master
</span><span class='line'>pod repo add master https://gitcafe.com/akuandev/Specs.git
</span><span class='line'>pod repo update
</span></code></pre></td></tr></table></div></figure>


<p>将以上代码中的 <code>https://gitcafe.com/akuandev/Specs.git</code> 替换成 <code>http://git.oschina.net/akuandev/Specs.git</code> 即可使用occhina上的镜像。</p>

<h3>使用CocoaPods</h3>

<p>使用时需要新建一个名为Podfile的文件，以如下格式，将依赖的库名字依次列在文件中即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>platform :ios
</span><span class='line'>pod <span class="s1">&#39;JSONKit&#39;</span>,       <span class="s1">&#39;~&gt; 1.4&#39;</span>
</span><span class='line'>pod <span class="s1">&#39;Reachability&#39;</span>,  <span class="s1">&#39;~&gt; 3.0.0&#39;</span>
</span><span class='line'>pod <span class="s1">&#39;ASIHTTPRequest&#39;</span>
</span><span class='line'>pod <span class="s1">&#39;RegexKitLite&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="s2">&quot;your project home&quot;</span>
</span><span class='line'>pod install
</span></code></pre></td></tr></table></div></figure>


<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下2点即可：</p>

<ol>
<li>使用CocoaPods生成的 <em>.xcworkspace 文件来打开工程，而不是以前的 </em>.xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次<code>pod update</code>命令。</li>
</ol>


<h3>查找第三方库</h3>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过pod search命令进行查找，以下是我用pod search json查找到的所有可用的库：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pod search json
</span><span class='line'>
</span><span class='line'>-&gt; AnyJSON <span class="o">(</span>0.0.1<span class="o">)</span>
</span><span class='line'>   Encode / Decode JSON by any means possible.
</span><span class='line'>   - Homepage: https://github.com/mattt/AnyJSON
</span><span class='line'>   - Source:   https://github.com/mattt/AnyJSON.git
</span><span class='line'>   - Versions: 0.0.1 <span class="o">[</span>master repo<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>-&gt; JSONKit <span class="o">(</span>1.5pre<span class="o">)</span>
</span><span class='line'>   A Very High Performance Objective-C JSON Library.
</span><span class='line'>   - Homepage: https://github.com/johnezang/JSONKit
</span><span class='line'>   - Source:   git://github.com/johnezang/JSONKit.git
</span><span class='line'>   - Versions: 1.5pre, 1.4 <span class="o">[</span>master repo<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>// ...以下省略若干行
</span></code></pre></td></tr></table></div></figure>


<h3>关于.gitignore</h3>

<p>当你执行<code>pod install</code>之后，除了Podfile外，CocoaPods还会生成一个名为<code>Podfile.lock</code>的文件，你不应该把这个文件加入到<code>.gitignore</code>中。因为<code>Podfile.lock</code>会锁定当前各依赖库的版本，之后如果多次执行<code>pod install</code> 不会更改版本，要<code>pod update</code>才会改<code>Podfile.lock</code>了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。</p>

<p>CocoaPods的这篇<a href="http://guides.cocoapods.org/using/using-cocoapods.html#should-i-ignore-the-pods-directory-in-source-control">官方文档</a>也在<code>What is a Podfile.lock</code>一节中介绍了<code>Podfile.lock</code>的作用，并且指出：</p>

<blockquote><p>This file should always be kept under version control.</p></blockquote>


<h2>为自己的项目创建podspec文件</h2>

<p>我们可以为自己的开源项目创建<code>podspec</code>文件，首先通过如下命令初始化一个<code>podspec</code>文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pod spec create your_pod_spec_name
</span></code></pre></td></tr></table></div></figure>


<p>该命令执行之后，CocoaPods会生成一个名为<code>your_pod_spec_name.podspec</code>的文件，然后我们修改其中的相关内容即可。</p>

<p>具体步骤可以参考这两篇博文中的相关内容：<a href="http://ishalou.com/blog/2012/10/16/how-to-create-a-cocoapods-spec-file/">《如何编写一个CocoaPods的spec文件》</a> 和<a href="http://studentdeng.github.io/blog/2013/09/13/cocoapods-tutorial/">《Cocoapods 入门》</a>。</p>

<h2>使用私有的pods</h2>

<p>我们可以直接指定某一个依赖的<code>podspec</code>，这样就可以使用公司内部的私有库。该方案有利于使企业内部的公共项目支持CocoaPods。如下是一个示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pod <span class="s1">&#39;MyCommon&#39;</span>, :podspec <span class="o">=</span>&gt; <span class="s1">&#39;https://yuantiku.com/common/myCommon.podspec&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>不更新podspec</h2>

<p>CocoaPods在执行<code>pod install</code>和<code>pod update</code>时，会默认先更新一次<code>podspec</code>索引。使用<code>--no-repo-update</code>参数可以禁止其做索引更新操作。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pod install --no-repo-update
</span><span class='line'>pod update --no-repo-update
</span></code></pre></td></tr></table></div></figure>


<h3>生成第三方库的帮助文档</h3>

<p>如果你想让CococaPods帮你生成第三方库的帮助文档，并集成到Xcode中，那么用brew安装appledoc即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install appledoc
</span></code></pre></td></tr></table></div></figure>


<p>关于appledoc，我在另一篇博客<a href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/">《使用Objective-C的文档生成工具:appledoc》</a>中有专门介绍。它最大的优点是可以将帮助文档集成到Xcode中，这样你在敲代码的时候，按住opt键单击类名或方法名，就可以显示出相应的帮助文档。</p>

<h2>原理</h2>

<p>大概研究了一下CocoaPods的原理，它是将所有的依赖库都放到另一个名为Pods项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。发现的一些技术细节有：</p>

<ol>
<li>Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</li>
<li>对于资源文件，CocoaPods提供了一个名为Pods-resources.sh的bash脚本，该脚本在每次项目编译的时候都会执行，将第三方库的各种资源文件复制到目标目录中。</li>
<li>CocoaPods通过一个名为Pods.xcconfig的文件来在编译时设置所有的依赖和参数。</li>
</ol>


<p>愿大家玩得开心～</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-05-25T14:09:00+08:00" pubdate data-updated="true">May 25<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术人员如何坚持写作]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/24/how-to-persist-writing/"/>
    <updated>2014-05-24T14:00:12+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/24/how-to-persist-writing</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/writing.jpg"></p>

<h2>我和朋友的故事</h2>

<p>这个月我给<a href="http://www.infoq.com/cn">InfoQ网站</a>、<a href="http://programmer.csdn.net/">《程序员》</a>的投稿所获的稿费，加上去人人网分享技术所得到的礼物，一共有将近3000块。看到这个数字之后我自己都吓了一跳，不知不觉中，写作和分享竟然给自己带来了这么大的直观收入。</p>

<p>但是相比那些非金钱上的收获，这些直接收入又显得微不足道。我在<a href="http://blog.devtang.com/blog/2014/01/08/why-we-need-write/">《作为码农，我们为什么要写作》</a>一文中，总结了写作给自己带来的非金钱上的收获，包括：<code>提高自己对知识的掌握层次</code>、<code>提高表达和沟通的能力</code>、<code>错误内容反馈</code>、<code>认识朋友</code>、<code>了解更多相关信息</code>、<code>提高影响力</code>和<code>获得传递知识的乐趣</code>。</p>

<p>由于我自己从写作中获得了巨大的好处，所以我尝试向身边的朋友推荐这个自我提高的方式，但是非常令人惊讶的是，即使知道这里面会有巨大的好处，我身边的很多朋友仍然不能坚持写作。我从他们中收集到的负面反馈包括：</p>

<ol>
<li><p>写作太花时间。我的朋友A发现，完成一篇给InfoQ的投稿需要花费他周末2天的时间（包括查找资料和写作，和InfoQ编辑的沟通，多次改稿等）。而从稿费得到的直接收入，远远不能弥补他所花费的时间。通常人们都喜欢将自己的月工资除以22，然后算出来每天自己的时间成本。当发现自己的写作直接收入远远不能匹配工作的收入时，很多人都会选择放弃。</p></li>
<li><p>自己不擅长写作。我的朋友B对于Origami非常精通，我本来打算向他约一篇深入介绍Origami的稿件，但是当然得知稿件的稿费只有千字150元时，他就放弃了。拿他的话来说，写文章憋出几个字可比写代码费劲多了，为了这篇文章，他可能得花费数周才能完成，最终的稿费收入可能只有几百块。</p></li>
<li><p>写作对自己收获不大。我的朋友C是一个技术牛人，但是他习惯通过记笔记的方式来整理知识，对于一些知识点，因为是消化过的，所以他就只需要在笔记中将关键的内容记录下来，就可以方便地在后期进行知识的回顾。而如果他要写文章的话，因为文章是面向其他读者，他就需要非常仔细地介绍知识的前因后果，做各种铺垫，还需要做到有条理，表达清晰。这些如果要做好，配图、举例子、提供参考资料等工作是免不了的，所以让我的朋友C觉得实在太花时间了，性价比太低。</p></li>
<li><p>自己不能坚持。我的朋友D完全同意我的观点，认为写作能够带来的巨大好处，但是他就是坚持不下来。这就像有些人不能坚持锻炼身体，有些人不能坚持早睡早起，有些人不能坚持控制饮食一样，对于一些有好处但是需要和自己的潜意识做斗争的事情，很容易被自己打败。</p></li>
</ol>


<h2>坚持写作的关键</h2>

<p>他们说得有道理吗？我认为非常有道理。而且我认为，我的ABCD四个朋友，都会在各自领域成为大牛，因为他们都热爱编程，喜欢专研，并且有着认真做事情的态度。所以反过来，我认为坚持写作并不是一个人通往成功的必经之路，但是写作是帮助你成功的一个重要的加分项。</p>

<p>那我们为什么坚持写作？我只想到一个理由：爱好。</p>

<p>但是我不同意爱好就等同于擅长的事情。通常情况下某一个人因为在天赋上擅长做某件事情，然后就会在这件事情上持续收获满足感，进而在该件事情上比别人投入更多时间。但是也有那种反过来的，因为爱好一件事情，从而不断地坚持做那件事情，最终因为投入巨大的时间而成功。</p>

<p>我个人坚持写作就属于后者。高中时，我的语文成绩一直在应试教育的阴影之下，由于并不擅长记忆，我的语文成绩一直非常差，高考时语文差一点不及格，满分150的考卷最终只有92分。但是我内心深处还是喜欢表达的，所以最终工作后还是坚持将自己的学习收获写成文章表达出来，慢慢写多了就有一些感觉了，最终能够熟练地进行技术写作。</p>

<p>我个人对于编程也是这样，由于初高中时对于编程的痴迷，得以花费大量的课余时间学习编程。其实我还是比较笨的，例如高中时为了看懂一个非递归的枚举代码就花了近一个月。那个时候还坚持买《程序员》杂志，虽然大部分看不懂=。= ，下图是今年春节回家在家里看到一本11年前买的《程序杂》杂志。</p>

<p><img src="http://blog.devtang.com/images/programmer-2003.jpg"></p>

<p>所以，你不需要一定擅长写作，只需要有一个喜欢表达和分享的心就可以。</p>

<p>对于爱好，李笑来的<a href="http://book.douban.com/subject/3609132/">《把时间当作朋友》</a>一书中的观点更加极端。他在书的第一章“心智的力量”中认为：只要人足够强大，能够控制自己的心智，那么就可以无视兴趣的力量，坚持做对自己有收获的事情，然后反而过由于长久坚持而收获成功，得到最终的满足感，最后通过满足感反过来得到兴趣。他的原话是：</p>

<blockquote><p>只要一件事儿你能做好，并且做到比谁都好，或者至少比大多数人好，你没办法对那件事情没兴趣。</p><p>往往并不是有兴趣才能做好，而是做好了才有兴趣。</p></blockquote>


<p>但是我终究认为人不是机器，我个人更喜欢随性一些，如果做A和B两件事情都能带来成功，我更倾向于用我个人的兴趣或直觉来选择，而不是“控制心智”，完全理智地看A和B哪个收益更大。</p>

<p>本文接下来的部分是写给那些内心爱好写作与分享的朋友，以及那些能够“控制心智”的朋友。我们将讨论如何坚持写作。</p>

<h2>如何坚持写作</h2>

<p>在有了兴趣之后，我们来解决上面ABCD四个朋友提出的各种问题，看如何能坚持写作。对于ABCD提出的各种问题，我们可以尝试以下这些解决办法：</p>

<ol>
<li><p>对于不擅长写作的朋友，可以尝试刚开始不要写那么深入的文章，也不要太追求完美而忽略效率。写作能力的提高本来就循序渐进的，刚开始写简单一些，总归比不写要好得多。我刚开始的写作内容，就是尝试把苹果WWDC视频中的内容看懂后，用自己的话再讲一遍。慢慢的，就可以写一些原创的深入文章了。</p></li>
<li><p>对于觉得写作太花时间的朋友，可以尝试把写作内容变短。例如每天用200-500个字总结一些今天在技术上的收获。慢慢坚持，就可以提高自己的表达能力。我个人就喜欢用微博或微信公共帐号来发表简短的原创内容，虽然很多时候就是介绍一个架构或新闻，但是思考怎么用简短的几个字表达清楚，并且能吸引读者转发或阅读，也是能有不少小的提高的。</p></li>
<li><p>对于觉得写作收获不大的朋友，如果你把写作当爱好，就不应该计较收获了。另外，我认为写作的收获在早期可能不明显，但是当你的写作积累了一定量的时候，收获就会被成倍地放大，就像我现在这样。我从写作上获得的收入是巨大的。</p></li>
<li><p>对于不能坚持的朋友，也可以尝试上面说的方法2，即每天写少量的内容，这样时间开销会比较少。</p></li>
</ol>


<p>最后，学习和模仿别人的写法也是一个不错的提高方式，像 <a href="http://onevcat.com/">onevcat</a> 和 <a href="http://macshuo.com/">池建强</a> 的文章就比我写得风趣得多，我也在尝试多一些有趣的表达方式。</p>

<h2>推荐</h2>

<p>最后推荐大家在有一定写作能力后，尝试给 <a href="http://www.infoq.com/cn">InfoQ网站</a> 或<a href="http://programmer.csdn.net/">《程序员》</a>杂志投稿，通常他们对于稿件会有更加严格的审核，所以即使稿件被拒，也能让自己找到未来提高的地方。</p>

<p>当你给InfoQ的原创文章投稿超过3篇被发表后，就可以申请成为兼职编辑，InfoQ编辑每月有一次集体的“我是吃货”聚会，各种海吃海喝之后，还可以和InfoQ CEO Kevin、男神池建强、张龙老师、交际花显峰等其他编辑当面交流技术，实在是一次难得的机会。</p>

<p>每年InfoQ兼职编辑还可以用3篇原创稿件换取5800元的QCon门票，并可以采访QCon上来自全国各地的技术高手。比如今年的<a href="http://www.qconbeijing.com/">QCon会</a>上，我就<a href="http://www.infoq.com/cn/news/2014/04/interview-ios-test-guide-author">采访</a>了<a href="http://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/product-description/B00JPVNFKM">《iOS测试指南》</a>的作者羋峮。虽然大家看到了最终的<a href="http://www.infoq.com/cn/news/2014/04/interview-ios-test-guide-author">采访稿件</a>，但是亲自面对面交流的收获很难完全体现在稿件中的，比如有一条羋峮对于测试的看法：“只测试需要测试的逻辑”这一条，虽然只是采访之后随口所说，但对我的影响还是非常大的，但我很难将其思想体现在稿件中。</p>

<p>希望本文能让那些喜欢写作和分享的人，都能坚持自己的这个爱好，最终从中得到巨大的回报！</p>

<p>愿大家玩得开心～</p>
 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-05-24T14:00:12+08:00" pubdate data-updated="true">May 24<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/summary/'>summary</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第12期]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/24/ios-weekly-12/"/>
    <updated>2014-05-24T10:04:19+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/24/ios-weekly-12</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/05/apple-renew-wwdc2014-application">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果更新WWDC 2014应用、GCD 深入理解、objc.io第12期翻译等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-05-22/08099393630.shtml">《苹果更新WWDC 2014应用 公布主题演讲时间》</a>：2014年苹果公司全球开发者大会(WWDC)将于6月2日举行。5月21日，他们更新了iOS版WWDC官方应用，并将公布主题演讲时间。</p></li>
<li><p><a href="https://github.com/orta/wwdc_parties_2014">《各种WWDC2014现场聚会》</a>：该项目列出了各种第三方公司或组织打算在WWDC时候进行的线下聚会。</p></li>
<li><p><a href="http://weicdsq.lofter.com/post/20a5c5_13cc45e">《关于发现的一个流氓黑客恶意盗号插件的源头追踪》</a>：威锋技术组分享了追踪一个恶意盗号插件源头的过程。从中我们可以看到越狱手机市场有多么混乱和危险。笔者认为，如果不是研究安全为目的，就不要越狱，特别是不要为了装盗版而越狱。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-05-14-grand-central-dispatch-in-depth-part-2.md">《GCD 深入理解：第二部分》</a>：本文是由<a href="http://weibo.com/riven0951">Riven</a>和<a href="https://twitter.com/nixzhu">@nixzhu</a>共同翻译的GCD 深入理解的第二部分。文章更加深入地介绍了 GCD 的高级用法，包括 Dispatch Group 、并发的危害、正确的阻塞方式、信号量以及 Dispatch Source 等。</p></li>
<li><p><a href="http://objccn.io/issue-12/">《objc.io第12期翻译：动画》</a>：本期翻译涵盖了iOS动画的方方面面——从 UIView 动画，Core Animation，一直到从零打造一个你自己定义的动画。文章还讨论了 View Controller 和 Collection View 有关的动画，以及如何让动画变得可以交互。</p></li>
<li><p><a href="http://bomberstudios.com/post/54587126654/using-sketch-mirror-liveview-silkscreen-skala">《Using Sketch Mirror, LiveView, SilkScreen, Skala Preview, AirServer &amp; others via USB》</a>：文章介绍了用 USB 热点共享提高演示时 iPhone 画面帧数的技巧，该技巧可用于在使用AirServer或Sketch mirror等应用时，在wifi糟糕的环境下解决数据传输太慢的问题。</p></li>
<li><p><a href="http://highperformancecoredata.com/">《High Performance Core Data》</a>：文章列出了讲Core Data 性能方面的各种资源，包括博客、Podcast以及开源代码。</p></li>
<li><p> <a href="http://nsscreencast.com/">NSScreenCast</a>：NSScreenCast是一个风格有趣的iOS教程网站。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/ideo/avocado/">avocado</a>：avocado是一个基于Facebook Origami的交互设计工具集。其由<a href="http://www.ideo.com/">IDEO</a>开源，可用于做交互原型设计。</p></li>
<li><p><a href="http://resolution.im/">resolution.im</a>：resolution.im是一个提问各种iOS设备尺寸信息以及设计模版的网站。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/Ciechan/BCMeshTransformView">BCMeshTransformView</a>：BCMeshTransformView是一个用于实现Mesh变换效果的开源库，关于Mesh变换，可以查阅<a href="http://ciechanowski.me/blog/2014/05/14/mesh-transforms/">这篇博文</a>。</p></li>
<li><p><a href="https://github.com/hfossli/AGGeometryKit-POP">AGGeometryKit-POP</a>：AGGeometryKit-POP是一个基于facebook POP的动效框架，这里有一个它能提供的动效<a href="http://vimeo.com/95383807">演示视频</a>。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-05-24T10:04:19+08:00" pubdate data-updated="true">May 24<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第11期]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/16/ios-weekly-11/"/>
    <updated>2014-05-16T21:36:16+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/16/ios-weekly-11</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/05/ios-app-security-development">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：iOS应用安全开发概述，Collection View 动画，可变参数列表的实现原理，XcodeBoost插件等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://www.csdn.net/article/2014-04-30/2819573-The-Secret-Of-App-Dev-Security">《iOS应用安全开发，你不知道的那些事》</a>：iOS应用由于其直接运行在手机上，相比运行在服务器的后台服务，更有可能被黑客攻击。本文从网络安全、本地文件和数据安全、源代码安全三个方面，阐述iOS应用在安全性上遇到的挑战。</p></li>
<li><p><a href="http://objccn.io/issue-12-5/">《Collection View 动画》</a>：<code>UICollectionView</code> 和相关类的设置非常灵活和强大。但是灵活性一旦增强，某种程度上也增加了其复杂性： <code>UICollectionView</code> 比老式的 <code>UITableView</code> 更有深度，适用性也更强。本文的第一部分将集中讨论并举例说明如何用不同的类和方法来共同帮助实现一些常见的 <code>UICollectionView</code> 动画。在第二部分，我们将看一下带有 collection views 的 view controller 转场动画以及在 <code>useLayoutToLayoutNavigationTransitions</code> 可用时使用其进行转场，如果不可用时，我们会实现一个自定义转场动画。</p></li>
<li><p><a href="http://gracelancy.com/blog/2014/05/05/variable-argument-lists/">《Variable Argument Lists》</a>：可变参数函数（Variadic Function），即是指一个可以接受可变数量的参数的函数。在C语言中，对该特性的支持，即是通过可变参数列表（Variable Argument list）来实现的。本文讨论了其具体的实现内部原理。最后作者<a href="http://weibo.com/lancy1014">晨钰Lancy</a>介绍了其开源的一个能够接收block作为回调的自定义的<a href="https://github.com/lancy/cyalertview">AlertView组件</a>。</p></li>
<li><p><a href="http://imoldman.github.io/blog/2014/04/30/why-assert-enabled-under-release-in-xcode/">《assert出问题了》</a>：作者分享了在Xcode中使用Assert时需要注意的问题。</p></li>
<li><p><a href="http://stackoverflow.com/questions/7385439/exception-thrown-in-nsorderedset-generated-accessors">《CoreData的坑》</a>：<a href="http://weibo.com/pinxue">pinxue</a>分享了一个持续3年都没有修复的CoreData的Bug。</p></li>
<li><p><a href="http://www.taofengping.com/2014/05/07/multi-similar-application/#.U3N25q2SyrJ">《使用cocoapods创建多个类似工程的尝试》</a>：因为业务的需要，作者做了一批类似无聊图的App，应用本身没有复杂的逻辑，所有类“无聊图”的应用都针对特定的用户群，设计了不同界面风格的，比如适合宅男的女神应用，适合吃货的美食应用等等诸如此类，大概一共七八个。作者介绍了其使用cocoapods创建多个类似工程的尝试。</p></li>
<li><p><a href="http://miao.hu/2012/02/26/osx-exp-share/">《Mac 软件和学习经验分享》</a>：作者介绍了一些优秀的 Mac 软件和学习Mac的经验。</p></li>
<li><p><a href="http://subjc.com/">subjc.com</a>：subjc.com是一个介绍iOS界面编程技巧的网站。网站中有动画实例分析以及实现的代码。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/fortinmike/XcodeBoost">XcodeBoost</a>：XcodeBoost包含多个辅助修改代码的小功能，比如：</p>

<ol>
<li>可以在.m文件中复制方法实现，然后将该方法的定义粘贴到对应的.h文件中</li>
<li>可以在某一个源文件中直接输入正则表达式查找</li>
<li>可以复制粘贴代码时不启用Xcode的自动缩进功能（Xcode的自动缩进经常出问题，造成已经调整好的代码缩进，因为粘贴时被Xcode调整坏了）</li>
</ol>
</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/monoclesociety/eggscellent">Eggscellent开源</a>：Eggscellent是Mac上的开源的番茄钟应用。</p></li>
<li><p><a href="https://github.com/viewfinderco/viewfinder">Viewfinder</a>：移动支付公司 Square 将去年收购的照片应用 Viewfinder 开源了，包含服务端、iOS 和 Android 应用代码。<a href="http://corner.squareup.com/2014/05/open-sourcing-viewfinder.html">这里</a>有该项目的介绍。</p></li>
<li><p><a href="https://github.com/kevinzhow/PNChart">PNChart</a>：作者<a href="http://weibo.com/kevinzhow">周楷雯Kevin</a>发布了PNChart 0.5版本，提供了一个更漂亮的Pie Chart界面。</p></li>
<li><p><a href="https://atom.io/">文本编辑器Atom开源</a>：GitHub将其开发的文本编辑器Atom开源。</p></li>
</ol>

 <p class="meta"> 
  

<span class="byline author vcard">Posted by <span class="fn">唐巧</span></span>
 








  


<time datetime="2014-05-16T21:36:16+08:00" pubdate data-updated="true">May 16<span>th</span>, 2014</time> 

<span class="categories">
  
    <a class='category' href='/blog/categories/ios/'>iOS</a>, <a class='category' href='/blog/categories/weekly/'>weekly</a>
  
</span>

 </p> <p class="meta"> 原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" id="">Creative Commons BY-NC-ND 3.0</a>
 </p>]]></content>
  </entry>
  
</feed>
