<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-07-22T21:22:14+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第18期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/22/ios-weekly-18/"/>
    <updated>2014-07-22T21:19:39+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/22/ios-weekly-18</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/apple-ibm-cooperation">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果与 IBM 展开长期深度合作，Swift官方博客，Swift开发的视频教程等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.36kr.com/p/213771.html">《苹果与 IBM 展开长期深度合作，双方优势互补，专注企业级移动市场》</a>：苹果与 IBM 达成排他性合作协议，联合各自领先市场的优势，共同打造一样新品类商业应用，建立全新的企业级移动体验——IBM 享誉已久的大数据及分析能力将注入苹果的 iPhone 与 iPad——结合后者擅长的用户体验，共同改善企业及员工使用 iOS 设备工作的流程。</p></li>
<li><p><a href="http://www.cocoachina.com/applenews/apple/2014/0715/9148.html">《苹果官方数据显示iOS 7渗透率已达90%》</a>：苹果最新数据显示，7月7日到13日之间，在访问App Store的设备中，90%的设备运行了iOS 7系统，而距离iOS 7正式发布仅仅为10个月的时间。不过国内iOS 7系统的比例还远远未达到80%。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="https://developer.apple.com/swift/blog/">《Swift官方博客》</a>：苹果在开发者中心建立了Swift官方博客，用于帮助开发者获得Swift的相关知识和资源。</p></li>
<li><p><a href="http://wonderffee.github.io/blog/2014/07/19/quincykit-and-kscrash/">《利用QuincyKit + KSCrash构建自己的Crash Log收集与管理系统 》</a>：iOS bug定位是极看重crash log的，目前网上Crash Log收集与管理服务较有名的有Crashlytics, Flurry, 友盟等。本文介绍了QuincyKit + KSCrash构建自己的Crash Log收集与管理系统的适用场景和特点。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/07/17/ios_0code_vc/">《0 代码 ViewController》</a>：作者尝试利用Interface Builder的Object控件实现了一个0行代码的View Controller，在减小Controller体积小，提供了一些新颖的思路。不过需要注意，其文章示例代码中的ViewModel持久了View对象，其实不是指的（MVVM）中ViewModel，更像是一个Controller的代理。</p></li>
<li><p><a href="http://www.thinkandbuild.it/from-objective-c-to-swift/">《From Objective-C to Swift: thoughts and hints》</a>：文章详细比较了Objective-C与Swift在编程中的细节差异。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.imooc.com/learn/149">《Swift开发的视频》</a>：jakelin做了一个Swift开发的视频，视频从头到尾的讲述了如何开发一个Swift Weather app，同时也讲述了CococaPods，Core Location和AFNetworking的使用，源码地址在 <a href="https://github.com/JakeLin/SwiftWeather">这里</a> 。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://pgyer.com/">蒲公英</a>：蒲公英是专为iOS开发者提供的免费应用众测平台，旨在解决开发者将应用分发给内测用户及众测时的繁杂、低效的问题。使用蒲公英，开发者可将应用一键上传至蒲公英网站实现托管，托管后的应用拥单独的下载页面。开发者只需将下载页面地址（或二维码）发给内测用户，测试用户即可用手机直接安装，避免了之前测试用户需要将手机用数据线连接到电脑，才能安装测试应用的痛苦过程。它的特点是可以帮你用企业证书签名，同时设置密码，帮助大家分发测试版本。</p></li>
<li><p><a href="https://github.com/realm/jazzy">jazzy</a>：jazzy是一个为Objective-C和Swift语言生成帮助文档的开源工具。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/realm/realm-cocoa">Realm</a>：Realm是一个真正为移动设备打造的数据库，同时支持Objective-C和Swfit。Realm宣称其相比Sqlite，在移动设备上有着更好的性能表现。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第17期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/11/ios-weekly-17/"/>
    <updated>2014-07-11T19:36:11+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/11/ios-weekly-17</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/swift-beta3-change">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Swift 进入TIOBE 指数排名16，Swift 在 Beta3 中的变化，WebKit in iOS 8等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">《Swift 进入TIOBE 指数排名16》</a>：在TIOBE的 2014年7月编程语言排行榜上，苹果公司新的编程语言Swift发布一个月内就进入TIOBE指数，名列位置16，前三名则没有变化，依旧是C、Java、Objective-C。</p></li>
<li><p><a href="http://www.guomii.com/posts/38291">《韩国当局下令 Apple 改变 App Store 退款政策》</a>：近日韩国当局已经下令 Apple 修改其公司的 App Store 退款政策，理由是现有政策违反了公平贸易的相关规定。众所周知，目前 App Store 的退款政策是用户先提交请求，然后由 Apple 员工审核要不要进行退款。也就是说，最终是否能够退款存在着员工一定的主观因素，因此被韩国公平贸易委员会认为这是不公平的。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://andelf.github.io/blog/2014/07/08/swift-beta3-changes/">《Swift 在 Beta3 中的变化》</a>：刚刚更新的Xcode 6 Beta3中，Swift编译器又进行了较大的更改，本文章详细介绍了改动细节。</p></li>
<li><p><a href="http://www.taofengping.com/2014/07/04/pinterest-transition-swift/">《用Swift实现Pinterest中的转场效果》</a>：在StackOverFlow上有人问Pinterest中转场的效果是如何实现的，在<a href="http://engineering.pinterest.com/post/67769846580/behind-the-pins-building-pinterest-3-0-for-ios">Pinterest的Blog</a>上工程师大致对Pinterest的结构作了大致的介绍，但是没有涉及到具体动画部分的实现。所以作者抽空用Swift重新实现了一遍这个转场的效果。</p></li>
<li><p><a href="http://www.hotobear.com/?p=741">《WebKit in iOS 8》</a>：苹果在WWDC上公布了iOS的新框架WebKit.framework，其包含了新的网页浏览控件WKWebView。本文介绍了其相对于UIWebView所做的改进。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/ios-8-presentation-controller">《iOS 8 presentation controller》</a>：iOS 8 新加入一个类：UIPresentationController，它与 iOS 7 新添加的类与协议一道，帮助我们方便快捷地实现View Controller 的自定义过渡效果。作者完成了一个使用相关API的演示程序。</p></li>
<li><p><a href="http://www.raywenderlich.com/74106/mvvm-tutorial-with-reactivecocoa-part-1">《MVVM Tutorial with ReactiveCocoa》</a>：RW新的ReactiveCocoa教材出炉了。不同于上次SimpleWeather的面面俱到，这次主讲MVVM设计模式和数据绑定。</p></li>
<li><p><a href="http://oleb.net/blog/2014/07/swift-strings/">《Strings in Swift》</a>：文章介绍了Swift中字符串的各种细节上的使用注意事项。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.infoq.com/cn/presentations/security-issues-behind-mobile-app">《移动APP背后的安全问题》</a>：现在已进入移动互联网时代，吃喝玩乐、办公支付等等各种应用都在抢占移动APP市场，由于安全无处不在的本质，在多年前就已经有少数人在研究移动APP的中木马、钓鱼等等，但很少有人想到移动APP安全跟WEB安全的关系。安全宝安全团队Leader尹毅在视频中分享了： 1、移动APP市场安全现状 2、安卓APP的反编译及漏洞挖掘 3、利用移动APP渗透的各种“猥琐”思路 4、自动化移动APP安全漏洞挖掘的程序实现。</li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="http://answerhuang.duapp.com/index.php/2014/07/06/dsym_tool/">《dSYM 文件分析工具》</a>：Xcode编译项目后，我们会看到一个同名的 dSYM 文件，dSYM 是保存 16 进制函数地址映射信息的中转文件，我们调试的 symbols 都会包含在这个文件中，并且每次编译项目的时候都会生成一个新的 dSYM 文件。作者分享了一个工具，能够根据dSYM文件方便从Crash信息中分析出有可能错误的地方。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/kylef/QueryKit">QueryKit</a>：QueryKit是一个用Swift实现的、方便对CoreData数据进行查询的工具库。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第16期]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/03/ios-weekly-16/"/>
    <updated>2014-07-03T20:41:49+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/03/ios-weekly-16</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/07/ios8-new-features">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：i​OS 8的新特性，敏感逻辑的保护方案，iOS绘图教程，WKWebView的使用等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://nshipster.cn/ios8/">《i​OS 8》</a>：Mattt Thompson在文章中介绍了iOS8的各种新特性。</p></li>
<li><p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/29210413">《iOS安全攻防：敏感逻辑的保护方案》</a>：文章介绍了一种低学习成本的，简易的Objective-C逻辑代码重写为C代码的办法。</p></li>
<li><p><a href="http://imtx.me/archives/1899.html">《谈谈 iOS 8 拍照和摄影功能的增强》</a>：iPhone 的照相功能有着敏捷的反应速度和不错的成像素质，使得 iPhone 成为最佳的随手拍手机。这次 WWDC 14 上尽管没有任何新硬件的更新，但是 iOS 8 在照相功能上的增强再次让我这样的随手拍狂人激动不已。文章主要介绍了iOS 8 带来的倒计时拍摄和延时摄影功能。</p></li>
<li><p><a href="http://blog.rpplusplus.me/blog/2014/06/26/wwdc14-session-401/">《WWDC14 Session 401 學習筆記》</a>：文章总结了WWDC14 Session 401介绍的PlayGround、Interface Builder和Debug相关功能的改进。</p></li>
<li><p><a href="http://www.cnblogs.com/xdream86/archive/2012/12/12/2814552.html">《iOS绘图教程》</a>：本文是《Programming iOS5》中Drawing一章的翻译，考虑到主题完整性，翻译版本中加入了一些书中未涉及到的内容。该文章中比较完整地介绍了iOS的整个绘图原理及相关的API。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/06/24/core-animation/">《Core Animation基本概念和Additive Animation》</a>：文章介绍一些Core Animation基本概念，最后提到一些iOS8的动画改动。</p></li>
<li><p><a href="https://mikeash.com/pyblog/friday-qa-2014-06-20-interesting-swift-features.html">《Interesting Swift Features》</a>：文章介绍了Swift相对于Objective-C增加的一些有趣的特性，并且讨论了其带来的好处。</p></li>
<li><p><a href="http://www.raywenderlich.com/76260/video-tutorial-introduction-swift-part-6-functions">《Introduction to Swift Part 6: Functions》</a>：Ray Wenderlich上的关于Swift函数的视频教程。</p></li>
<li><p><a href="http://www.raywenderlich.com/76248/facebook-pop-tech-talk-video">《Facebook Pop Tech Talk Video》</a>：Ray Wenderlich上的关于Facebook Pop的视频教程。</p></li>
<li><p><a href="http://www.kinderas.com/technology/2014/6/7/getting-started-with-wkwebview-using-swift-in-ios-8">《Getting started with WKWebView using Swift in iOS 8》</a>：文章介绍了iOS8中新加的WKWebView的使用。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://github.com/uranusjr/macdown">macdown</a>：macdown是一个开源的Mac下的markdown编辑器。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/lexrus/LTMorphingLabel">LTMorphingLabel</a>：用swift写的文字飘入飘出的效果。</p></li>
<li><p><a href="https://github.com/hewigovens/Crashlytics-FPCustomHandler">Crashlytics-FPCustomHandler</a>：这是一个为 Crashlytics 写的 category, 可以方便添加自己的崩溃处理函数。</p></li>
<li><p><a href="https://github.com/relatedcode/ParseChat">ParseChat</a>：ParseChat是基于Parse实现的一个实时的聊天室开源应用。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC2014，苹果的“软件”发布会]]></title>
    <link href="http://blog.devtang.com/blog/2014/07/02/talk-about-wwdc2014/"/>
    <updated>2014-07-02T22:04:10+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/07/02/talk-about-wwdc2014</id>
    <content type="html"><![CDATA[<p><img src="/images/wwdc2014.jpg"></p>

<p>在今年的6月2日到6日，苹果照例举行了一年一次的全球开发者大会（World Wide Developer Conference，简称WWDC）。由于去年大会门票在不到2分钟之内被抢购一空，今年苹果改成了用抽签的方式来决定WWDC现场门票的购买权。在发布会前，大家对今年的发布会充满了各种期待，希望在发布会上见到iPhone6、iWatch、新一代的耳机（因为苹果收购了耳机厂商beats）以及新版的Macbook。但是让人惊讶的是，苹果这次在大会上并没有发布任何新的硬件产品，但展示出其在软件上的各种功能改进和整合上的巨大努力，让我们一起来看看今年苹果的WWDC到底带来了哪些改变。</p>

<h2>OS X</h2>

<p>苹果沿用了从去年开始的，以地名来命名操作系统的习惯，新的OS X 10.10操作系统的名字为Yosemite（约塞米蒂国家公园）。Yosemite吸收了iOS7开始的扁平化的设计风格，整个Finder、Dock栏及相关应用都重新绘制了新的图标和界面，并且支持偏平化和毛玻璃的半透明效果。另外Yosemite还有一些细节改进，例如重新设计的通知中心、更快的Safari、更好用的邮件客户端等。与去年一样，新版的Yosemite操作系统仍然完全免费。</p>

<p>另外我们可以看到，今年苹果在软件上的许多改进都“借鉴”了不少其它应用。例如新版的Spotlight就和Mac下优秀的应用Alfred非常相似。而全新的 iCloud Drive 客户端，不但支持所有Mac和iOS设备，还支持Windows平台，这无疑是和Dropbox开始了正面的竞争（Dropbox在两年前拒绝了来自乔布斯8亿美元左右的收购请求，现在估值达到了100亿美元）。</p>

<p>不过在我看来，以上这些改进比起handoff功能来说，都不算什么。handoff功能显示出苹果对于功能整合的深度思考。苹果提了几个问题：</p>

<ul>
<li>当我在电脑上工作时，这个时候来了一个电话或短信，为什么我不能直接在电脑上接电话或回复短信呢？</li>
<li>当我在电脑的浏览器上看到一个电话号码时，我为什么不能直接点击这个电话号码拨打电话呢？</li>
<li>当我在手机上回复邮件写了一半，这个时候走到电脑前面了，为什么不能方便地在电脑上继续写邮件呢？</li>
<li>当我在电脑上看到一个小说正入迷，这个时候要出门，为什么不能直接拿起手机继续看呢？</li>
</ul>


<p>于是这次，苹果将Mac电脑和iPhone、iPad的功能进行了深度整合，当你拥有这三个设备时，它们每一个都可以接打电话和收发短信，你在它们任何一个设备上编辑的文档，也可以实时同步到另一个设备上。handoff并不是苹果的应用独有的功能，苹果将其相关的API都开放给了开发者，所以开发者也可以完全开发出支持handoff功能的应用。</p>

<p>handoff功能对于苹果而言意义重大，因为它再次重新定义了硬件生态圈，通过软件的深度整合，拥有多个苹果设备的用户会享受到极大的便利性。每一个设备的功能和信息都和其它苹果设备完美配合，使得单个硬件本身的功能被放大。这将催进拥有一个苹果设备的用户购买更多苹果的其它设备。随着苹果以后推出更多的智能硬件，其构造的硬件生态圈将像App Store软件生态圈一样，增加其产品的竞争力。</p>

<h2>iOS</h2>

<p>苹果在这次大会上推出了新的iOS8操作系统。在iOS8中，iMessage功能更一步增强，增加了发送语音的功能以及支持多人群聊，很多人都调侃说：“如果加上朋友圈，iMessage就和微信功能一样了”。但iMessage并不支持Android平台，所以对微信一类的应用来说完全没有任何威胁。iOS8中的图片编辑功能也得到了增强，通知中心允许用户进行更多地定制。另外苹果提供了HealthKit，用于集成用户健康相关的信息。新的Extension功能类似于Android的Intent，能够方便应用间相互调用。</p>

<p>相对于Yosemite带来的整合方面的改进，新版iOS8的改进的重点则是开放。苹果开放了输入法接口，允许第三方提供输入法。苹果也开放了Touch ID，允许第三方应用获得指纹信息。HomeKit则为智能硬件开放了不少可以互操作的接口。另外，iOS8还新增了4000个新的API，开放了大量底层API接口供应用调用。所以对于普通用户而言，iOS8新增的可见功能可能是有限的，但是其开放的大量API和新SDK释放出了巨大的想象空间，相信会产生更多有趣的应用。</p>

<h2>Swift</h2>

<p>这次的WWDC的口号是：“Write the code. Change the world”，Swift的推出算是很好地诠释了本口号。苹果的Objective-C语言发明于与C++同时期的上世纪80年代初，虽然苹果对其进行了很多次改进，但这终究像给应用打补丁一样，不是特别舒服。</p>

<p>这次Swift的推出，算是苹果大胆的一次尝试，试图用全新的编程语言来提高OS X和iOS程序员的开发效率，单从语言特性上来看，Swift吸收了众多现代编程语言的优秀特性，例如类型推断（Type inference）、范型（Generic）、闭包（Closure）、命名空间（namespace），元组（tuple）等，整体语法上也更加简洁。我们也了解到Swift是苹果从4年前就开始筹划中的事情，可见苹果在长远规划上对于Swift语言的重视，相信未来Swift会接替更多Objective-C原本的地位，所有iOS开发者都应该花时间学习这门全新的语言。</p>

<p>苹果这次推出Swift也吸引了大量的讨论，其中比较不正确的观点是认为iOS开发的门槛因此而降低了。从我和身边的同行对Swift的学习和讨论来看，Swift并不是一门可以简单上手的语言。并且在未来一到两年内，iOS开发必然会经历同时使用Objective-C和Swift的过渡阶段。对于iOS开发者，除了必须掌握以前的Objective-C语言的知识，还需要学习并不简单的Swift，可见iOS开发的门槛不但没有降低，反而提高了不少。</p>

<h2>总结</h2>

<p>总体来说，苹果今年的WWDC大会虽然没有推出硬件上的新品，但是其在软件功能整合、开放系统API以及改进开发工具上做出了巨大努力，这些都会给苹果产品带来更大的竞争优势。</p>

<p>注：本文已投稿发表到<a href="http://www.csdn.net/article/2014-07-01/2820470%E3%80%82">CSDN</a>，未经允许不得转载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些好用的iOS开发工具]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/29/ios-dev-tools/"/>
    <updated>2014-06-29T13:12:01+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/29/ios-dev-tools</id>
    <content type="html"><![CDATA[<p><img src="/images/ColorSync-Utility-icon.png"></p>

<h2>版权说明</h2>

<p>本文首发于《程序员》杂志2014年6月刊，未经允许，请勿转载。</p>

<h2>前言</h2>

<p>从苹果发明iPhone起，AppStore上的一个又一个类似flappy bird的一夜暴富的故事刺激着大量开发者加入移动开发大军。随着这些开发者出现的，还有大量方便iOS开发者的各种工具。这些工具作为整个应用开发生态链的重要一环，极大地方便了广大应用开发者，节省了应用开发的时间。</p>

<p>本文将从应用工具、命令行工具、插件工具3个方面，介绍这些优秀的应用。</p>

<h2>图形应用工具</h2>

<h3>Charles</h3>

<p><img src="/images/charles-logo.png"></p>

<p>Charles（<a href="http://www.charlesproxy.com">http://www.charlesproxy.com</a>）是在Mac下常用的截取网络封包的工具，在做iOS开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Charles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<p>Charles详细的使用说明，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/">《iOS开发工具-网络封包分析工具Charles》</a></p>

<h3>界面调试</h3>

<p>PonyDebugger（<a href="https://github.com/square/PonyDebugger">https://github.com/square/PonyDebugger</a>）、Reveal（<a href="http://revealapp.com/">http://revealapp.com/</a>）、Spark Inspector（<a href="http://sparkinspector.com/">http://sparkinspector.com/</a>）是三个常用的界面调试工具，可以在程序运行时动态调试iOS应用界面。PonyDebugger是免费并且开源的，后两者是收费的，不过功能更加强大。</p>

<p>对于动态或复杂的交互界面，手写UI的是不可避免的，而Reveal一类的工具可以方便我们查看控件的相应属性是否正常，并且可以在程序运行时，动态地修改界面元素。这样就不用反复地修改代码并且重启程序了。</p>

<h3>xScope</h3>

<p>xScope（<a href="http://xscopeapp.com/">http://xscopeapp.com/</a>）是一类与界面开发相关的工具集。对于iOS开发，比较好用的功能包括它的放大镜取色工具、标尺工具等。其中放大镜取色工具可以将取到的多个色集收集起来，方便后续使用，并且支持直接粘贴成相关的程序颜色代码。</p>

<p>xScope是收费软件，对于未付费版本，其功能有一些限制。</p>

<h3>ImageOptim</h3>

<p>ImageOptim（<a href="http://imageoptim.com/">http://imageoptim.com/</a>）是一个图象压缩的免费工具。iOS工程默认使用的是 pngcrush 命令来压缩图片，不过其压缩比率其实不高。对于应用中图片资源比较多的读者，可以尝试使用 ImageOptim 来达到最大的图片压缩效果。</p>

<p>如果你从未尝试过ImageOptim一类的图片压缩工具，那么第一次给IPA文件瘦身的效果应该是比较惊人的。我个人的经验是，初次使用时ImageOptim能减少至少10%的应用图片资源占用。</p>

<p>ImageOptim的实现原理是使用各种开源的图像压缩工具，然后取效果最好的那一个。它尝试的工具包括：PNGOUT, Zopfli, Pngcrush, AdvPNG, extended OptiPNG, JpegOptim, jpegrescan, jpegtran 和 Gifsicle。</p>

<p>安装方式是从其官方网站（<a href="http://imageoptim.com/">http://imageoptim.com/</a>）上下载程序文件，拖动到“应用程序”目录即可。下图是本篇文章所有的配图，可以看到使用ImageOptim达到了29.5%的体积缩小。</p>

<p><img src="/images/tool-imageoptim.jpg"></p>

<h3>马克鳗</h3>

<p>马克鳗（<a href="http://www.getmarkman.com/">http://www.getmarkman.com/</a>）是国人开发的一款免费标注工具，可以方便地在美术输出的设计稿上标注相应界面元素的大小，颜色，边距，说明等。</p>

<h2>命令行工具</h2>

<h2>CocoaPods</h2>

<p><img src="/images/xcode-cmd-cocoapods.png"></p>

<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具或者是中央代码仓库。比如Java的maven，Nodejs的npm等。而CocoaPods（<a href="http://cocoapods.org/">http://cocoapods.org/</a>）是为iOS程序提供依赖管理的工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<p>在我开发猿题库客户端时，其使用了24个第三方开源库。在没有使用CocoaPods以前，我需要:</p>

<ol>
<li>把这些第三方开源库的源代码文件复制到项目中，或者设置成git的submodule。</li>
<li>对于这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如通常情况下，一个网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics, zlib。</li>
<li>对于某些开源库，我还需要设置<code>-licucore</code>或者 <code>-fno-objc-arc</code>等编译参数</li>
<li>管理这些依赖包的更新。</li>
</ol>


<p>这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行<code>pod install</code>。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>

<p>使用CocoaPods还需要注意以下几点：</p>

<ol>
<li>需要使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次<code>pod update</code>命令。</li>
<li>当你执行<code>pod install</code>之后，除了Podfile外，CocoaPods还会生成一个名为<code>Podfile.lock</code>的文件，你应该把这个文件加入到版本管理中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行<code>pod install</code> 不会更改版本，要<code>pod update</code>才会改<code>Podfile.lock</code>了。这样的好处是：当多人协作的时候，可以保证所有人的第三库环境是完全一样的。</li>
</ol>


<p>详细的使用说明，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">《用CocoaPods做iOS程序的依赖管理》</a></p>

<h2>nomad</h2>

<p>nomad（<a href="http://nomad-cli.com/">http://nomad-cli.com/</a>）是一个方便你操作苹果开发者中心（Apple Developer Center）的命令行工具，可以做的事情包括方便地添加测试设备，更新证书文件，增加App id，验证IAP的凭证等。</p>

<p>安装方式：</p>

<p><code>
gem install nomad-cli
</code></p>

<p>安装完后，首先执行<code>ios login</code>，你的Developer账号密码会被它存储到Keychain中，之后就可以用命令行来完成各种后台操作了，例如：</p>

<p>添加测试设备：</p>

<p><code>
ios devices:add "TangQiaos iPhone"=&lt;Device Identifier&gt;
</code></p>

<p>更新证书文件:</p>

<p><code>
ios profiles:devices:add TangQiao_Profile "TangQiaos iPhone"=&lt;Device Identifier&gt;
</code></p>

<p>nomad还有很多功能，建议大家阅读其官方网站的文档进一步学习。</p>

<h2>xctool</h2>

<p>xctool（<a href="https://github.com/facebook/xctool">https://github.com/facebook/xctool</a>）是facebook开源的一个iOS编译和测试的工具。使用它而不是用Xcode的UI界面是因为它是一个纯命令行工具。比如：我们可以使用xctool在命令生下进行编译和单元测试，然后将测试结果集成到Jenkins中，这样就实现了自动化的持续集成。虽然苹果也在OSX Server上推出了自己的自动化集成工具BOT，但其配置和使用上现在仍然不太方便。</p>

<p>安装xctool可以使用brew命令：</p>

<p><code>
brew install xctool
</code></p>

<p>使用xctool编译项目可以使用如下命令：</p>

<p><code>
path/to/xctool.sh \
  -project YourProject.xcodeproj \
  -scheme YourScheme \
  build
</code></p>

<p>使用xctool执行单元测试，可以使用如下命令：</p>

<p><code>
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  test
</code></p>

<p>xctool还有很多功能，建议大家阅读xctool官方网站的文档进一步了解更多的功能。</p>

<h2>appledoc</h2>

<p>appledoc（<a href="https://github.com/tomaz/appledoc">https://github.com/tomaz/appledoc</a>）是一个从源码中抽取文档的工具。</p>

<p>对于开发者来说，文档最好和源码在一起，这样更新起来更加方便和顺手。象Java一类的语言本身就自带javadoc命令，可以从源码中抽取文档。而appledoc就是一个类似javadoc的命令行程序，可以从iOS工程的源代码中抽取相应的注释，生成帮助文档。</p>

<p>相对于其它的文档生成工具，appledoc的优点是：</p>

<ul>
<li>它默认生成的文档风格和苹果的官方文档是一致的。</li>
<li>appledoc就是用objective-c写的，必要的时候调试和改动也比较方便。</li>
<li>它可以生成docset，并且集成到xcode中。集成之后，在相应的API调用处，按住option再单击就可以调出相关的帮助文档。</li>
<li>它没有特殊的注释要求，兼容性高。</li>
</ul>


<p>安装appledoc可以直接使用brew命令：</p>

<p><code>
brew install appledoc
</code></p>

<p>使用时切换到iOS工程目录下，执行以下操作即可，appledoc会扫描当前路径下的所有文件，然后生成好文档放到doc目录下。你也可以用appledoc —help查看所有可用的参数。</p>

<p><code>
appledoc -o &lt;output_path&gt; \
--project-name &lt;project_name&gt; \
--project-company &lt;project_company&gt; .
</code></p>

<p>详细的使用介绍，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/">《使用Objective-C的文档生成工具:appledoc》</a></p>

<h2>Xcode插件</h2>

<p>Xcode是iOS的集成开发环境，虽然苹果一直在不断改进Xcode，但程序员总是有各种新奇的想法和需求，当Xcode无法满足他们时，于是他们就会通过插件的方式来为Xcode增加新的功能。本节将会给大家介绍一些常用的Xcode增强插件。</p>

<p>Xcode所有的插件都安装在目录<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code>下，每个插件为一个子目录，你也可以手工切换到这个目录来增加或删除插件。</p>

<h3>Alcatraz</h3>

<p><img src="/images/tool-alcatraz-logo.jpg"></p>

<p>Alcatraz（<a href="http://alcatraz.io/">http://alcatraz.io/</a>）是管理Xcode所有插件的插件，它可以直接集成到Xcode的图形界面中，让你感觉就像在使用Xcode自带的功能一样。Alcatraz不但可以管理Xcode的插件，它另外还提供了管理Xcode工程模版以及颜色配置的功能。</p>

<p>使用如下的命令行来安装Alcatraz：</p>

<p>```
mkdir -p ~/Library/Application\ Support/\
Developer/Shared/Xcode/Plug-ins;
curl -L <a href="http://git.io/lOQWeA">http://git.io/lOQWeA</a> |\
 tar xvz -C ~/Library/Application\ Support/\
 Developer/Shared/Xcode/Plug-ins</p>

<p>```</p>

<p>安装成功后重启Xcode，就可以在Xcode的顶部菜单中的"Window"&ndash;>“Package Manager”中找到Alcatraz。点击“Package Manager”，即可启动插件列表页面。你可以在右上角搜索插件，对于想安装的插件，点击其左边的图标，即可下载安装，如下所示，我正在安装KImageNamed插件：</p>

<p><img src="/images/alcatraz-install.jpg"></p>

<p>安装完成后，再次点击插件左边的图标，可以将该插件删除。</p>

<p>以下所有介绍的插件均可用该方法来安装或删掉，就不另行介绍了。</p>

<p>Alcatraz详细的使用介绍，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/">《使用Alcatraz来管理Xcode插件》</a></p>

<h3>KSImageNamed</h3>

<p>KSImageNamed（<a href="https://github.com/ksuther/KSImageNamed-Xcode">https://github.com/ksuther/KSImageNamed-Xcode</a>）是一个帮助你输入[UIImage imageNamed:]中的资源名的插件。当你输入<code>[UIImage imageNamed:]</code>时，会自动的弹出上下文菜单，供你选择你需要输入的图片资源名字，另外在选择图片资源时，还可以在左侧预览该资源。如下图所示：</p>

<p><img src="/images/xcode-plugin-nsimage.jpg"></p>

<h3>XVim</h3>

<p>XVim（<a href="https://github.com/JugglerShu/XVim">https://github.com/JugglerShu/XVim</a>）是一个Xcode的vim插件，可以在Xcode的编辑窗口中开启vim模式。</p>

<p>vim模式最大的好处是可以全键盘操作，可以方便地移动光标以及复制、粘贴代码。XVim对于Xcode的分栏模式也有很好的支持，与vim自带的分栏模式一样，可以用快捷键<code>ctrl + w</code>来切换当前编辑的分栏。</p>

<h3>FuzzyAutocompletePlugin</h3>

<p>FuzzyAutocompletePlugin (<a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin</a>) 允许使用模糊的方式来进行代码自动补全。</p>

<p>举个例子，如果我们要重载 <code>viewDidAppear:</code>方法，那么我们必须依次建入view、did、appear 才能得到相应的补全信息，使用FuzzyAutocompletePlugin之后，我们可以建入vda (view、did、appear 三个单词的首字母)，或任意符合viewDidAppear整个单词出现顺序的子串(例如 vdapp, adear等)，即可匹配到该方法。</p>

<p><img src="https://raw.githubusercontent.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/master/demo.gif" alt="" /></p>

<h3>XToDo</h3>

<p>XToDo（<a href="https://github.com/trawor/XToDo">https://github.com/trawor/XToDo</a>）是一个查找项目中所有的带有 <code>TODO</code>, <code>FIXME</code>, <code>???</code>, <code>!!!</code> 标记的注释。</p>

<p>通常我们在项目开发中，由于种种原因，一些事情需要以后处理，这个时候为了防止遗忘，加上<code>TODO</code>或<code>FIXME</code>注释是非常有必要的，但是上线或提交代码前要寻找这些未解决的事项却稍显麻烦。XToDo可以提供一个汇总的界面，集中显示所有的未完成的<code>TODO</code>和<code>FIXME</code>标记。</p>

<h3>BBUDebuggerTuckAway</h3>

<p>BBUDebuggerTuckAway（<a href="https://github.com/neonichu/BBUDebuggerTuckAway">https://github.com/neonichu/BBUDebuggerTuckAway</a>）是一个非常小的工具，可以在你编辑代码的时候自动隐藏底部的调试窗口。因为通常情况下，调试的时候是加断点或监控变量变化，或者在Console窗口用<code>po</code>来输出一些调试信息。如果开始编辑代码了，说明已经调试结束了，这个时候隐藏调试窗口，可以给编辑界面更多空间，方便我们修改代码。</p>

<h3>SCXcodeSwitchExpander</h3>

<p>SCXcodeSwitchExpander（<a href="https://github.com/stefanceriu/SCXcodeSwitchExpander">https://github.com/stefanceriu/SCXcodeSwitchExpander</a>）帮助你迅速地在<code>switch</code>语句中填充枚举类型的每种可能的取值。</p>

<p>例如，当你输入<code>switch</code>，然后键入一个<code>NSTableViewAnimationOptions</code>类时，该插件会将其可能的取值补全在每一个<code>case</code>之后，如下图所示：</p>

<p><img src="/images/xcode-plugin-switch.jpg"></p>

<h3>deriveddata-exterminator</h3>

<p>deriveddata-exterminator（<a href="https://github.com/kattrali/deriveddata-exterminator">https://github.com/kattrali/deriveddata-exterminator</a>）是一个清除Xcode缓存目录的插件。</p>

<p>有些时候Xcode会出各种奇怪的问题，最常见的是在某些复杂操作下（例如同一个项目，来回切换到各种分支版本），会造成Xcode显示一些编译的错误或警告，但是最终却又可以编译通过。新手遇到这种问题常常束手无策，而熟悉Xcode的人就知道，通常清除Xcode缓存就可以解决这类问题。该插件在Xcode菜单上增加了一个清除缓存按钮，可以一键方便地清楚缓存内容。</p>

<h3>VVDocumenter</h3>

<p>VVDocumenter（<a href="https://github.com/onevcat/VVDocumenter-Xcode">https://github.com/onevcat/VVDocumenter-Xcode</a>）是一个自动生成代码注释的工具，可以方便地将函数的参数名和返回值提取出来，这样结合上一节介绍的<code>appledoc</code>命令，就可以方便地将帮助文档输出。</p>

<p><img src="/images/xcode-plugin-vvdocument.png"></p>

<h3>ClangFormat</h3>

<p>ClangFormat（<a href="https://github.com/travisjeffery/ClangFormat-Xcode">https://github.com/travisjeffery/ClangFormat-Xcode</a>）是一个自动调整代码风格（Code Style）的工具。Xcode本身的代码缩进自动调整功能比较弱，特别是对于JSON格式，常常产生非常丑陋的默认缩进效果。ClangFormat-Xcode可以更好地对代码进行重新排版，并且内置了各种排版风格，也支持自定义风格。</p>

<h3>ColorSense</h3>

<p>ColorSense（<a href="https://github.com/omz/ColorSense-for-Xcode">https://github.com/omz/ColorSense-for-Xcode</a>）是一个<code>UIColor</code>颜色输入辅助工具，可以帮助你在编写<code>UIColor</code>代码时，实时预览相应的颜色，如下图所示：</p>

<p><img src="/images/xcode-plugin-color.png"></p>

<h3>XcodeBoost</h3>

<p>XcodeBoost（<a href="https://github.com/fortinmike/XcodeBoost">https://github.com/fortinmike/XcodeBoost</a>）包含多个辅助修改代码的小功能，比如：</p>

<ul>
<li>可以在.m文件中复制方法实现，然后将该方法的定义粘贴到对应的.h文件中</li>
<li>可以在某一个源文件中直接输入正则表达式查找</li>
<li>可以复制粘贴代码时不启用Xcode的自动缩进功能（Xcode的自动缩进经常出问题，造成已经调整好的代码缩进，因为粘贴时被Xcode调整坏了）</li>
</ul>


<h2>小结</h2>

<p>本文分图形应用工具，命令行工具，Xcode插件三个部分，介绍了iOS开发中好用的工具。其中涉及的图形工具部分是收费的，而命令行工具和Xcode插件工具全部是免费并且开源的工具，笔者在此也感谢广大的开源软件作者，是他们让整个软件生态圈更加美好。</p>
]]></content>
  </entry>
  
</feed>
