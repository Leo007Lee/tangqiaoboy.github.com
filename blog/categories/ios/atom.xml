<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2015-02-01T13:18:22+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[写iOS SDK注意事项]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/31/write-sdk-tips/"/>
    <updated>2015-01-31T21:44:33+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/31/write-sdk-tips</id>
    <content type="html"><![CDATA[<p>我发现即使是像腾讯、小米这样的大厂提供的 SDK 质量在规范上也有很多问题，而且包括我以及我身边的很多朋友都被恶心到了，所以我就把这些注意事项总结出来，希望大家不要犯同样的错误。</p>

<h3>注意事项一：所有类名都应该加前缀</h3>

<p>说明：没有前缀的类名有冲突的风险。</p>

<p>Bad Case：微信分享的 SDK，文件名：<code>WXApiObject.h</code>，代码如下，其中<code>BaseReq</code>类和<code>BaseResp</code>类都没有加前缀。</p>

<p>```
@interface BaseReq : NSObject</p>

<p>/<strong> 请求类型 */
@property (nonatomic, assign) int type;
/</strong> 由用户微信号和 AppID 组成的唯一标识，发送请求时第三方程序必须填写，用于校验微信用户是否换号登录 <em>/
@property (nonatomic, retain) NSString</em> openID;</p>

<p>@end</p>

<h1>pragma mark &ndash; BaseResp</h1>

<p>/<em>! @brief 该类为微信终端 SDK 所有响应类的基类
 *
 </em>/
@interface BaseResp : NSObject
/<strong> 错误码 */
@property (nonatomic, assign) int errCode;
/</strong> 错误提示字符串 <em>/
@property (nonatomic, retain) NSString </em>errStr;
/<em>* 响应类型 </em>/
@property (nonatomic, assign) int type;</p>

<p>@end
```</p>

<h3>注意事项二：所有 category 方法加前缀</h3>

<p>说明：category 方法如果不加前缀，有冲突的风险。</p>

<p>Bad Case：腾讯分享的 SDK，它为 NSArray 增加了一个 JSONArray 的 category，造成我们本身的同名 category 被覆盖。另外他们为 NSArray 增加的其它 category 和著名的 Cordova 开源库冲突，造成 Cordova 无法使用。</p>

<h3>注意事项三：不要将第三方库打包进 SDK</h3>

<p>说明：尽量不要将第三方库打包进 SDK，如果要打包，最好也要将该第三方库重命名，以避免冲突。</p>

<p>Bad Case：小米的推送 SDK，直接在 SDK 静态库里面编进去一个第三方依赖库，而且这个库还是 ASIHttpRequest。ASIHttp 当前已经处于无人维护状态，很多 Bug 都是大家自己在修复（例如网易就自己维护了一个 ASIHttpRequest 的分支）。在 SDK 中依赖这种库还是比较麻烦的。</p>

<h3>注意事项四：做基本的检查和测试</h3>

<p>说明：SDK 对外公布前应该进行基本的编译检查，不应该有编译器警告存在。</p>

<p>Bad Case：腾讯分享的 SDK。它的 <code>CGIParamsWrap.o</code> 和  <code>TencentOAuth.o</code> 文件里面的方法名冲突了，如下所示：</p>

<blockquote><p>ld: warning: instance method &lsquo;deleteAPIRequestBySeq:&rsquo; in category from /Users/tangqiao/work/iphone/solar-ios/lib_common/TencentOpenApi/TencentOpenAPI.framework/TencentOpenAPI(CGIParamsWrap.o) overrides method from class in /Users/tangqiao/work/iphone/solar-ios/lib_common/TencentOpenApi/TencentOpenAPI.framework/TencentOpenAPI(TencentOAuth.o)</p></blockquote>

<h3>注意事项五：文档完整并且正确</h3>

<p>说明：这就不用解释了吧？</p>

<p>Bad Case: 微信官方的微信支付的示例代码，里面有各种错误，代码都无法编译成功。如下所示的是其中一个错误：</p>

<p><img src="/images/weixin-pay-error.jpg"></p>

<p>于是还有人专门帮微信另外制作了一个非官方的说明文档，地址在这里：<a href="https://github.com/gbammc/WechatPayDemo">https://github.com/gbammc/WechatPayDemo</a></p>

<h3>注意事项六：支持最新的 CPU 版本</h3>

<p>说明：去年苹果的一次 Bug，造成上传应用必须支持 arm64 的 CPU 版本，结果众多应用因为依赖的 SDK 不支持 arm64 而无法更新。当然，这次 Bug 出来之后，各 SDK 厂商都紧急做了更新。但是我觉得这种事情如果要做得专业，就应该一开始就紧跟技术更新，及时更新，而不是被迫更新。</p>

<h2>总结</h2>

<p>以上 6 点是我认为写一个 SDK 的最最基本的要求，希望被点名批评的同学能尽快改正哟～</p>

<p>如果大家在使用其它 SDK 时也发现了类似的问题，欢迎在文章下面留言。希望通过这种方式给开发相关 SDK 的同学一些压力，让他们好好改一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第37期]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/31/ios-weekly-37/"/>
    <updated>2015-01-31T09:34:58+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/31/ios-weekly-37</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，地址是<a href="http://www.infoq.com/cn/news/2015/01/ios-v-advanced-technology-road">这里</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>本期 iOS 移动开发周报带来如下内容：iOS大V的技术进阶之路、ARC 对 self 的内存管理、Method Swizzling 和 AOP 实践、使用 iMovie 和 Keynote 制作 App Preview等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.cocoachina.com/programmer/20150115/10930.html">《唐巧访谈： iOS大V的技术进阶之路》</a>：文章来自于 CocoaChina 的访谈，采访对象是唐巧，他的新书<a href="https://github.com/tangqiaoboy/iOS-Pro">《iOS开发进阶》</a>已经和大家见面.采访中唐巧表达了他对于技术学习、建设技术影响力等方面的经验和看法。</p></li>
<li><p><a href="http://wangling.me/2015/01/moke-2014.html#fn-1?utm_source=qdan.me#/">《Moke 2014 以及 1 元应用效应》</a>：Moke 作者分享了他的应用在 2014 年的销售额以及他对于 1 元应用的看法。</p></li>
<li><p><a href="http://www.cocoachina.com/programmer/20150121/10966.html">《王巍访谈：关于 Swift 学习和 AppleWatch 开发的一些建议》</a>：文章来自于 CocoaChina 的访谈，采访对象是王巍，微博 ID“onevcat”，圈儿内人称喵神，知名 iOS/Unity 开发者，现居日本，就职于 LINE。喵神是 <a href="http://objccn.io/">objc 中国</a>项目发起人，开源过广受开发者喜爱的 Xcode 插件 VVDocumenter，主创或参与开发《姬骑士和最后的百龙战争》、《英雄 Slash》、《冒险谜题王国》以及《小熊推金币》等多款游戏，个人应用代表有《番茄工作法》(Pomodoro Do) 和《云端记账》(Our Money)。</p></li>
<li><p><a href="http://iiiyu.com/2015/01/20/2014-oh-my-star-app-annual-summary/">《2014 年 Oh My Star 总结》</a>：Oh My Star 是一款由国人 <a href="http://weibo.com/n/Sumi-iYu">@Sumi-iYu</a> 开发的管理 Github 上 star 项目的工具。笔者使用过，对于 star 功能的重度用户来说，非常好用。本文分享了作者在开发该软件的过程以及收货。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.sunnyxx.com/2015/01/17/self-in-arc/">《ARC 对 self 的内存管理》</a>：文章从 YTKNetwork 的几行代码出发，讨论了 LLVM 编译器在传递 self 参数时，对 self 的引用计数的特殊处理。</p></li>
<li><p><a href="http://blog.nswebfrog.com/2015/01/08/autolayout-trick/">《AutoLayout 布局技巧－等宽子视图》</a>：所谓等宽子视图，也就是对一个有 n 个子视图的父视图来说，无论父视图的宽度怎么变化，所有子视图的宽度是相等的。文章介绍了这一类排版需求的 AutoLayout 布局技巧。</p></li>
<li><p><a href="http://tech.glowing.com/cn/objective-c-runtime/">《Objective-C Runtime》</a>：Objective-C 是一个动态语言，这意味着它不仅需要一个编译器，也需要一个运行时系统来动态得创建类和对象、进行消息传递和转发。理解 Objective-C 的 Runtime 机制可以帮我们更好的了解这个语言，适当的时候还能对语言进行扩展，从系统层面解决项目中的一些设计或技术问题。本文讲解了 Runtime 的核心 &ndash; 消息传递 （Messaging）。</p></li>
<li><p><a href="http://tech.glowing.com/cn/method-swizzling-aop/">《Method Swizzling 和 AOP 实践》</a>：利用 Objective-C 的 Runtime 特性，我们可以给语言做扩展，帮助解决项目开发中的一些设计和技术问题。这一篇，我们来探索一些利用 Objective-C Runtime 的黑色技巧。这些技巧中最具争议的或许就是 Method Swizzling 。文本介绍了利用 Method Swizzling，结合 AOP 来做一些打 Log 的工作。利用 objective-C Runtime 特性和 Aspect Oriented Programming ，我们可以把琐碎事务的逻辑从主逻辑中分离出来，作为单独的模块。它是对面向对象编程模式的一个补充。</p></li>
<li><p><a href="http://weibo.com/p/1001603800875490492754">《CocoaPods 最佳实践探讨》</a>：作者在文章中表达了对目前常见的 CocoaPods 使用方法的意见。希望大家根据自己的经验，一起讨论出一份真正的 “最佳实践”。</p></li>
<li><p><a href="http://www.jianshu.com/p/358106d653cf">《使用 iMovie 和 Keynote 制作 App Preview》</a>：App Preview 就是一段 15-30 秒的短视频，用来展示你的应用的特性、用户界面、交互方式等内容。在 App Store 你的应用的详细信息页面里，放在原来的截图之前。体验上会比截图更有冲击力，也能够表现更多的东西。茫茫的 App 海洋之中，如何脱颖而出，卖相至关重要。本文作者分享了他使用 iMovie 和 Keynote 制作 App Preview 的经验，并且提供了相关的效果视频和 Keynote 源文件。</p></li>
<li><p><a href="http://blog.callmewhy.com/2015/01/20/wtf-in-old-code/">《要你命三千：老代码中的那些坑》</a>: 最近在给以前的老项目维护，说起来工作很简单，一个字：改 Bug。这看起来平淡无常的工作，实际上凶险无比，藏坑无数。时至今日，感觉整个人都得到了升华。在睡觉前抽空写篇博客，和各位分享一下踩坑经历，一起品味其中的种种酸苦辣 (没甜)。</p></li>
<li><p><a href="http://natashatherobot.com/unit-testing-swift-dependency-injection/">《Unit Testing in Swift: Dependency Injection》</a>：文章介绍了在 Swift 实现的单元测试中实现依赖注入，不过实际写起来还是比较麻烦。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://ship.io">ship.io</a>：ship.io 是一个持续集成服务。现在所有套餐免费，支持 Xcode 6.1.1。</p></li>
<li><p><a href="https://crowdin.com/">Crowdin</a>: Crowdin 是一个多语言翻译服务。可以便于开发者将应用改成支持多语言。类似的服务还有：<a href="https://www.transifex.com/">Transifex</a>。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/dasdom/BreakOutToRefresh">BreakOutToRefresh</a>：BreakOutToRefresh 是一个有趣的项目，它利用 SpriteKit 在下拉刷新过程中做了一个打砖块游戏。</p></li>
<li><p><a href="https://github.com/Ramotion/animated-tab-bar">RAMAnimatedTabBarController</a>：RAMAnimatedTabBarController 是一个让 TabBar 上的元素能够显示动画效果的开源库。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用蒲公英来做iOS测试应用的分发]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/22/pgy-usage-guide/"/>
    <updated>2015-01-22T19:16:06+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/22/pgy-usage-guide</id>
    <content type="html"><![CDATA[<p><img src="/images/pgy_0.jpg"></p>

<h2>前言</h2>

<p>我在 <a href="http://blog.devtang.com/blog/2012/02/16/apply-daily-build-in-ios-project/">《给 iOS 工程增加 Daily Build》</a> 一文中介绍过如何用命令行生成 IPA 文件以及通过 <code>itms-services</code> 协议 来让用户可以直接在网页上安装测试应用。但是这种方法虽然有效，但是还是比较麻烦，因为：</p>

<ol>
<li>开发者需要自己写相关的 Build 脚本。</li>
<li>开发者需要自己搭建好应用下载的服务器。</li>
<li>如果要做得更友好，开发者还需要部署 CDN 服务、增加扫描二维码下载等功能。</li>
</ol>


<p>所以本文给大家推荐一个叫 “<a href="http://www.pgyer.com/">蒲公英</a>” 的免费服务，帮助开发者能够方便地来做 iOS 应用的测试分发工作。蒲公英于 2014 年 7 月正式上线，我自己使用过一段时间，还是挺满意的。</p>

<p>下面我们就来看看，如何使用 “<a href="http://www.pgyer.com/">蒲公英</a>” 来进行测试版本应用的分发工作。</p>

<h2>生成 IPA 文件</h2>

<p>生成应用的 IPA 文件可以使用命令行 <code>xcodebuild exportArchive -exportFormat ipa</code>来完成，也可以使用 Xcode 提供的相应功能。相信大部分同学应该都用过，我就简单介绍一下。</p>

<p>首先将编译的目标机器设置成 “iOS Device"，然后点击”Product"&ndash;>&ldquo;Archive"，Archive 成功之后，就可以在 Xcode 的 Organizer 中看到相应的文件。</p>

<p>接下来点击 Organizer 中的 &ldquo;Export&rdquo; 按钮，如下图所示：</p>

<p><img src="/images/export_ipa_1.jpg"></p>

<p>在接下来的弹出界面中选择 “Save for Ad Hoc Deployment"。如下图所示：</p>

<p><img src="/images/export_ipa_2.jpg"></p>

<p>选择完成后点 Next，Xcode 会自动将测试设备的签名信息附加上，并将相应的 IPA 文件导出。</p>

<h2>上传到蒲公英</h2>

<p>如果是第一次使用蒲公英，我们需要访问 <a href="http://www.pgyer.com/user/register">蒲公英的网址</a> 进行注册。注册主要是为了保护测试应用的安全和设置相应的权限（例如设置下载密码）。</p>

<p>注册之后，点击<a href="http://www.pgyer.com/">蒲公英网站首页</a>的 &ldquo;发布应用"，然后选择之前生成的 IPA 文件即可完成上传 IPA 的过程。蒲公英对上传速度进行了很大程度的优化，上传应用速度非常快，下图是我测试上传猿题库的过程（上传 18M 的 IPA 文件大概花了半分钟时间，平均速度应该超过了 500K 每秒）：</p>

<p><img src="/images/pgy_1.jpg"></p>

<p>上传成功后，蒲公英会自动分析应用的 Bundle ID 信息，将其在 App Store 上的应用介绍和截图获取下来。然后你可以选择设置一个 “安装密码”，以避免一些越狱用户非法安装你的应用。对于小范围试用的应用，建议也不要将其发布到 &ldquo;应用广场"。如下所示：</p>

<p><img src="/images/pgy_2.jpg"></p>

<p>设置好所有需要的信息后，点击发布应用，蒲公英会生成一个应用分发的网页。如下图所示：</p>

<p><img src="/images/pgy_3.jpg"></p>

<p>你可以把这个网页发给你的测试用户:</p>

<ul>
<li>如果用户在手机上打开这个页面，则可以直接点击 “安装按钮” 来一键下载和安装测试应用。</li>
<li>如果用户在电脑上打开这个应用，则可以用扫描二维码的方式来一键下载和安装测试应用。</li>
</ul>


<h2>一些小技巧</h2>

<ul>
<li>有企业证书的同学，如果将 IPA 在本地用企业证书签名，则可以把蒲公英当作一个企业应用发布渠道，省去部署分发服务器的烦恼，但最好设置安装密码，以免被苹果认为滥用企业证书。</li>
<li>嫌每次打开蒲公英的网页太麻烦？蒲公英提供了 <a href="http://www.pgyer.com/apps">Mac 客户端</a>，所有上传和设置操作都可以在客户端上直接进行。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第36期]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/18/ios-weekly-36/"/>
    <updated>2015-01-18T10:25:45+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/18/ios-weekly-36</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：中国超越美国成最大iPhone消费市场、一个iOS开发工程师的职业规划思考、Functional Swift Conference等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://money.163.com/15/0111/14/AFMEA0VN002526O3.html">《瑞士银行：中国超越美国成最大iPhone消费市场》</a>：瑞士银行统计报告显示，在过去一个季度，苹果向消费者出售了6930万支iPhone。其中，中国区的销量占到总销量的35%，超过美国区24%的占比。瑞士银行的分析师Steven Milunovich提到，“数据显示，iPhone在中国区的销量出现显著增长，在过去这个季度iPhone中国区的销量占到总销量的35%，而这一数 据在去年同期只是22%”。</p></li>
<li><p><a href="http://www.infoq.com/cn/articles/interpretation-of-2014-ios-part-embrace-change">《解读2014之iOS篇：拥抱变化》</a>：对于 iOS 技术领域，2014 年是变化巨大的一年。除了软硬件外，编程语言、中国区、开发社区在 2014 年也有着巨大变化，文章试着用几个关键词来勾勒出 iOS 技术领域在 2014 年所经历的变化。</p></li>
<li><p><a href="http://www.cocoachina.com/appstore/20150109/10887.html">《苹果调整多个国家App Store应用售价》</a>：苹果最近通过邮件告知开发者，即将调整加拿大、俄罗斯以及欧洲一些国家App Store中软件售价。</p></li>
<li><p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=684">《奔向三张，不破不立：一个iOS开发工程师的职业规划思考》</a>：本文作者是《iOS应用逆向工程：分析与实战》的作者。他从自己的经历为例，分享了他自己对于iOS开发工程师的职业规划思考。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://limboy.me/ios/2014/12/31/learning-ios.html">《自学 iOS 开发的一些经验》</a>：不知不觉作为 iOS 开发也有两年多的时间了，记得当初看到 OC 的语法时，愣是被吓了回去，隔了好久才重新耐下心去啃一啃。啃了一阵，觉得大概有了点概念，看到 Cocoa 那么多的 Class，又懵了，怎么才能调用系统的相机？怎么保存信息？怎么做一个像 Twitter 个人页那样的页面？总之就是不知道该从哪切入。现在回想起来，其实路一直都在，而且有很多条，当初如果有人能够指出一条还不错的道，或许就能走得不那么艰难。于是就有了这篇文章，希望对后人能有所帮助吧。</p></li>
<li><p><a href="http://imtx.me/archives/1916.html">《Swift 小技巧（一）：如何正确地定义一个类变量（和类常量）》</a>：Swift 语言对于无论是静态语言过来还是动态语言过来的开发者来说，都有点点不适应，很多问题的解决思路不能用已经习以为常的方法去做。比如一个很常用的：如何定义类变量（和类常量）？本文介绍了作者对此问题的思考。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://2014.funswiftconf.com/">Functional Swift Conference</a>：这是在美国布鲁克林举办的一个关于Swift函数式编程的会议视频。共有6位演讲者介绍了他们对于Swift函数式编程的感悟和心得。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://pan.baidu.com/s/1gd1noSr">Log Guru</a>：Log Guru是一个收集Log的小工具, 可以在 Mac 上查看 iOS 设备的实时系统日志. 现在可以直接高亮显示在 FIR.im 上安装 app 失败的原因。后续会增加各种进程过滤、高亮某进程、只看 Error level 等功能。与此类似的工具还有：<a href="http://lemonjar.com/iosconsole/">iOS Console</a>。</p></li>
<li><p><a href="http://swiftdoc.org/">SwiftDoc</a>：SwiftDoc是一个在线的Swift帮助文档。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/onevcat/VVBlurPresentation">VVBlurPresentation</a>：VVBlurPresentation是一个很简单易用的在原来view conntroller基础上做模糊，然后present新的view controller的小项目。作者是<a href="http://www.weibo.com/onevcat?from=feed&amp;loc=nickname">onevcat</a>。</p></li>
<li><p><a href="https://github.com/ipader/SwiftGuide/blob/master/Featured.md">《Swift开源项目精选》</a>：该作者将 2014 年 Swift 开源项目做了一个筛选和汇总。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对《iOS开发进阶》一书的解释]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/18/explain-ios-pro-book/"/>
    <updated>2015-01-18T10:17:21+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/18/explain-ios-pro-book</id>
    <content type="html"><![CDATA[<p>《iOS开发进阶》虽然仅仅在<a href="http://product.china-pub.com/3770871">互动出版社</a>可以买到，还没有在京东和亚马逊上架，但是在 v2ex 上已经引起了一些讨论和误解，见 <a href="http://v2ex.com/t/161929?p=1">此贴</a>。所以我想在这里，对本书的内容和定位做一些解释。</p>

<h2>定位</h2>

<p>《iOS开发进阶》定位于帮助那些iOS开发刚刚入门的同行快速提高自己的水平，适用于至少有3个月以上iOS开发经验的读者。不适合没有任何iOS开发基础的读者阅读。对于iOS熟练开发者，本书也能补充其知识点的可能的盲区，使其相关知识体系更为完善。</p>

<p>我可能需要强调一下，对于iOS熟练开发者（工作时间大于1年），本书也<font color=blue>只能做到补充其可能的盲区的作用</font>。或者有一些比较牛的朋友，本书也可能<font color=red>补不了什么盲区</font>。</p>

<p>我自认为其中 “CoreText排版引擎章节”以及第三章的底层原理部分是适合这部分iOS熟练开发者的。但不排除很多熟练开发者对底层原理已经很了解了，同时对CoreText不感兴趣。</p>

<p>所以希望iOS熟练开发者能够在买书前翻阅一下<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>。</p>

<h2>内容</h2>

<p>本书中的所有内容都是我的原创，但是有部分在博客上公开过，我自己数了一下，一共有9个章节在我的博客上可以看到完整的内容，另外11个章节在我的博客上只能看到部分内容或完全看不到内容。但是很有可能，随着图书的慢慢发售，我将其它未公开的电子版内容放到网上。</p>

<p>经常看我的博客的朋友，可能会有些失望或者觉得不值。所以希望大家在买书前翻阅一下<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>，以避免买了后悔。</p>

<h2>书名</h2>

<p>有人抱怨说《iOS开发进阶》这个书名太过于有欺骗性，应该叫《iOS开发备忘录》。对此我不太认同，《iOS开发进阶》很好地排除了那些iOS初学者，从书名上他们就会放弃看本书，而如果叫《iOS开发备忘录》就不一定了。另外，任何一个读者都应该看过目录再买书的吧？我不认为本书的书名会有那么大的欺骗性。</p>

<h2>质量</h2>

<p>一些人批评本书的内容质量比国外的 objc.io 和 <a href="raywenderlich.com/">RW</a> 的书差多了。对此我想说，您批评得对，我还需要努力！但是这不代表本书就没有价值吧？例如CoreText章节，我现在在国内外的图书中，仍然没有看到有谁把这个从浅入深讲完整的呀。第一部分对工具的介绍虽然技术含量低，但也没有谁完整整理过。与其自叹和国外有差距，不如自己实际来努力一下，改善一下国内的知识分享环境，不是更好么？</p>

<h2>最后</h2>

<ul>
<li>我写本书不指望能挣多少钱，实际上它也不能给我带来多少收入。但我真心希望这本书能够帮助到大家。现在看来，本书最合适的读者仍然是刚刚入门3个月的开发者。</li>
<li>请所有购买此书的朋友购买前先看目录：<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>。一本书不可能适合所有水平的读者，请自己决定。</li>
</ul>


<p>愿大家玩得开心～</p>
]]></content>
  </entry>
  
</feed>
