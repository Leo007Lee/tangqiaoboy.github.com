<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的开发总结博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2012-02-04T17:36:56+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[Tang Qiao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Github来管理xcode4中的代码片段]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets/"/>
    <updated>2012-02-04T14:32:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets</id>
    <content type="html"><![CDATA[<h3>代码片段介绍</h3>

<p>xcode4引入了一个新feature: code snippets，在整个界面的右下角，可以通过快捷键：cmd + ctrl + opt + 2 调出来。code snippets是一些代码的模版，对于一些常见的编程模式，xcode都将这些代码抽象成模版放到code snippet中，使用的时候，只需要键入快捷键，就可以把模版的内容填到代码中。</p>

<!--more-->


<p>例如，在引入GCD(Grand Central Dispatch)后，当我们需要一个延时的操作时，只需要在xcode中键入：dispatch
, 就可以看到xcode中弹出一个上下文菜单，第一项就是相应的代码片段。如下图所示：</p>

<p><img src="/images/dispatch_after_snippet.jpg"></p>

<h3>定义自己的代码片段</h3>

<p>那么如何自定义code snippet呢，相当简单，当你觉得某段代码很有用，可以当作模版的时候，将其整块选中，
拖动到xcode右下角的code snippets区域中即可。xcode会自动帮你创建一个新的代码片段。
之后你可以单击该代码片段，在弹出的界面中选择edit，即可为此代码片段设置快捷键等信息。</p>

<p>如果有些地方你想让用户替换掉，可以用 &lt;#被替换的内容#> 的格式。
这样在代码片段被使用后，焦点会自动移到该处，你只需要连贯的键入替换后的内容即可。如下图所示：</p>

<p><img src="/images/edit_code_snippet.jpg"></p>

<p>关于xcode的一些代码片段，<a href="http://nearthespeedoflight.com/article/xcode_4_code_snippets">这里</a>有一些用户的总结心得。</p>

<h3>使用Git管理代码片段</h3>

<p>在了解了code snippet之后，我在想能不能用Git来管理它，于是就研究了一下，发现它都存放于目录 ~/Library/Developer/Xcode/UserData/CodeSnippets 中。于是，我就将这个目录设置成一个Git的版本库，然后将自己整理
的代码片段都放到Github上了。现在我有2台mac机器，一台笔记本，一台公司的iMac，我常常在2台机器间切换着工作，由于将代码片段都放在github上，所以我在任何一端有更新，另一端都可以很方便的用git pull将更新拉到本地。前两天将公司机器升级到lion，又重装了lion版的xcode，简单设置一下，所有代码片段都回来了，非常方便。</p>

<p>我的代码片段所在的github地址是<a href="https://github.com/tangqiaoboy/xcode_tool">https://github.com/tangqiaoboy/xcode_tool</a>,使用它非常方便，只需要如下3步即可：</p>

<p><code>
git clone https://github.com/tangqiaoboy/xcode_tool
cd xcode_tool
./setup_snippets.sh
</code></p>

<p>大家也可以将我的github项目fork一份，改成自己的。这样可以方便地增加和管理自己的代码片段。</p>

<p>祝大家玩得开心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Objective-C的文档生成工具:appledoc]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/"/>
    <updated>2012-02-01T20:37:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>做项目的人多了，就需要文档了。今天开始尝试写一些项目文档。但是就源代码来说，文档最好和源码在一起，这样更新起来更加方便和顺手。象Java语言本身就自带javadoc命令，可以从源码中抽取文档。今天抽空调研了一下objective-c语言的类似工具。</p>

<!-- more -->


<p>从<a href="http://stackoverflow.com/questions/813529/documentation-generator-for-objective-c">stackoverflow</a> 上找到三个比较popular的工具：doxygen, headdoc和appledoc 。它们分别的官方网址如下：</p>

<ul>
<li>docxygen <a href="http://www.stack.nl/~dimitri/doxygen/index.html">http://www.stack.nl/~dimitri/doxygen/index.html</a></li>
<li>headdoc <a href="http://developer.apple.com/opensource/tools/headerdoc.html">http://developer.apple.com/opensource/tools/headerdoc.html</a></li>
<li>appledoc <a href="http://gentlebytes.com/appledoc/">http://gentlebytes.com/appledoc/</a></li>
</ul>


<h2>介绍</h2>

<p>我把这3个工具都大概调研了一下，说一下我的感受。</p>

<h3>docxygen</h3>

<p>docxygen感觉是这3个工具中支持语言最多的，可以配置的地方也比较多。我大概看了一下文档，觉得还是比较复杂，而且默认生成的风格与苹果的风格不一致。就去看后面2个工具的介绍了。另外，它虽然是开源软件，但是没有将源码放到github上让我感觉这个工具的开发活跃度是不是不够。</p>

<h3>headerdoc</h3>

<p>headerdoc是xcode 自带的文档生成工具。在安装完xcode后，就可以用命令行：headdoc2html + 源文件名 来生成对应的文档。我个人试用了一下，还是比较方便的，不过headerdoc的注释生成规则比较特别，只生成以 /*! */ 的格式的注释。还有一个缺点是每个类文件对应一个注释文件，没有汇总的文件，这点感觉有点不爽。</p>

<h3>appledoc</h3>

<p>appledoc是在stackoverflow上被大家推荐的一个注释工具。有几个原因造成我比较喜欢它：</p>

<ol>
<li>它默认生成的文档风格和苹果的官方文档是一致的，而doxygen需要另外配置。</li>
<li>appledoc就是用objective-c生成的，必要的时候调试和改动也比较方便。</li>
<li>可以生成docset，并且集成到xcode中。这一点是很赞的，相当于在源码中按住option再单击就可以调出相应方法的帮助。</li>
<li>appledoc源码在github上，而doxygen在svn上。我个人比较偏激地认为比较活跃的开源项目都应该在github上。</li>
<li>相对于headerdoc，它没有特殊的注释要求，可以用/** */ 的格式，也可以兼容/*! */的格式的注释，并且生成的注释有汇总页面。</li>
</ol>


<h2>安装</h2>

<p>那么简单介绍一下如何安装appledoc，安装非常简单，只需要2步：
<code>
 git clone git://github.com/tomaz/appledoc.git
 cd appledoc
 sudo sh install-appledoc.sh
</code></p>

<h2>使用</h2>

<p>使用appledoc时，只需要用如下命令即可：
<code>
appledoc -o ./doc --project-name ynote --project-company youdao .
</code>
appledoc会扫描当前路径下的所有文件，然后生成好文档放到doc目录下。你也可以用appledoc --help查看所有可用的参数。</p>

<p>基本上使用起来还是比较方便的，详细的信息可以查看官方的文档：<a href="http://gentlebytes.com/appledoc/">http://gentlebytes.com/appledoc/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要在init和dealloc函数中使用accessor]]></title>
    <link href="http://blog.devtang.com/blog/2011/08/10/do-not-use-accessor-in-init-and-dealloc-method/"/>
    <updated>2011-08-10T17:32:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2011/08/10/do-not-use-accessor-in-init-and-dealloc-method</id>
    <content type="html"><![CDATA[<p>Objective-C 2.0 增加了dot syntax，用于简单地调用成员变量的accessor。相当于java的getter和setter。
因为正常情况下，写一个accessor对于初学者来说，还是挺容易犯错的。比如有一个NSString * 的成员变量叫name。一个错误的写法是：
``` objc
-(void) setName:(NSString *)newName {</p>

<pre><code> name = newName;
</code></pre>

<p>}
```</p>

<!--more-->


<p>Java同学肯定想不通上面的代码有什么错吧？原因是Objective-C需要自己负责内存的释放。
所以需要在改变reference之前，将原对象release，对新的对象，也需要retain一下，代码就改成这样：
``` objc
-(void) setName:(NSString *)newName {</p>

<pre><code> [name release];
 name = [newName retain];
</code></pre>

<p>}
```</p>

<p>初学者可能以为这样就对了，其实还是有错，如果newName和name的指向的是同一个对象，并且这个对象retain count只有1的话。
那么name release之后，这个对象就被回收掉了。所以应该改成：</p>

<p>``` objc
-(void) setName:(NSString *)newName {</p>

<pre><code> if (name != newName) {
      [name release];
      name = [newName retain];
 }
</code></pre>

<p>}
```</p>

<p>这样才算是一个正确的set函数，Java同学肯定被吓到了，虽然知道这么写，但这比Java麻烦多了。于是，Objective-C允许程序员使用 @property + @synthesize 关键字来自动生成这些代码。于是Objective-C的程序员幸福了。大部分时候根本就不用写getter和setter。</p>

<p>但是需要小心，Objective-C的accessor不能在init和dealloc函数中使用！如果你在dealloc中这么写，就有问题：
``` objc
-(void)dealloc {</p>

<pre><code> self.name = nil;
 [super dealloc]
</code></pre>

<p>}
```</p>

<p>苹果在它的developer文档库中有一个专门讲cocoa的内存管理的文章：
<a href="http://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/MemoryMgmt.pdf">http://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/MemoryMgmt.pdf</a></p>

<p>文章的第16页有一节题目是：Don’t Use Accessor Methods in Initializer Methods and dealloc</p>

<p>文章说：你唯一不应该用Accessor的地方是init函数和delloc函数。在init函数中，对于一个_count成员变量应该像下面这样赋值：</p>

<p>``` objc
-(void) init {</p>

<pre><code> self = [super init]; 
 if (self) {
      _count = [[NSNumber alloc] initWithInteger:0]; 
 }
 return self;
</code></pre>

<p>}
```</p>

<p>对于一个带参数的init函数，你应该实现成下面这样：
``` objc
- (void) initWithCount:(NSNumber *)startingCount {</p>

<pre><code> self = [super init]; 
 if (self) {
      _count = [startingCount copy];
 }
 return self;
</code></pre>

<p>}
```</p>

<p>对于在dealloc中，对应的写法应该是调release:
``` objc
- (void)dealloc {</p>

<pre><code> [_count release]; 
 [super dealloc];
</code></pre>

<p>}
```</p>

<p>但是比较郁闷的是，文章最后没有说为什么不能！去stackoverflow上搜了一下，比较不靠谱的说法是这样少一次函数调用，更快。比较靠谱的说法是：在init和dealloc中，对象的存在与否还不确定，所以给对象发消息可能不会成功。</p>

<p>顺便说一下, 当发现这个文章的时候，我们的代码中已经有了很多这样错误用法。虽然程序没有出现严重的内存问题，但是为了保险，还是打算一行一行改掉，后来我想，这个能不能用vim搞定呢？
于是我进vim，用qa启动宏录制，然后输入</p>

<pre>
:%s/self./[/g  再输入：%s/= nil/release]/g 
</pre>


<p>再输入q, 这样就可以用@a来启动刚刚录制的宏来做替换了。相当方便。</p>
]]></content>
  </entry>
  
</feed>
