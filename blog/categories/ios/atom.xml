<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2013-07-24T21:04:42+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Crashlytics来保存应用崩溃信息]]></title>
    <link href="http://blog.devtang.com/blog/2013/07/24/use-crashlytics/"/>
    <updated>2013-07-24T20:56:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/07/24/use-crashlytics</id>
    <content type="html"><![CDATA[<p><img src="/images/crashlytics-logo.jpg"></p>

<p>本文首发于InfoQ，版权归InfoQ所有，转载请保留<a href="http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools">原文链接</a>。</p>

<h2>简介</h2>

<p><a href="http://try.crashlytics.com/">Crashlytic</a> 成立于2011年，是专门为移动应用开者发提供的保存和分析应用崩溃信息的工具。Crashlytics的使用者包括：支付工具Paypal, 点评应用Yelp, 照片分享应用Path, 团购应用GroupOn等移动应用。</p>

<p>2013年1月，Crashlytics<a href="http://www.crashlytics.com/blog/crashlytics-is-joining-forces-with-twitter/">被Twitter收购</a>，成为又一个成功的创业产品。被收购之后，由于没有了创业公司的不稳定因素，我们更有理由使用它来分析应用崩溃信息。</p>

<!-- more -->


<p>使用Crashlytics的好处有：</p>

<p>1、Crashlytics不会漏掉任何应用崩溃信息。拿我的应用举例来说，在iTunes Connect的后台查看不到任何崩溃信息。但是用户确实会通过微博或者客服电话反馈应用崩溃的情况。而这些在Crashlytics中都可以统计到。如下截图分别显示了我的某应用在苹果iTunes Connect后台和Crashlytics中的差别：</p>

<p><img src="/images/crashlytics-vs-itunes-1.jpg">
<img src="/images/crashlytics-vs-itunes-2.jpg"></p>

<p>2、Crashlytics可以象Bug管理工具那样，管理这些崩溃日志。例如：Crashlytics会根据每种类型的Crash的出现频率以及影响的用户量来自动设置优先级。对于每种类型的Crash，Crashlytics会除了象一般的工具提供Call Stack外，还会显示更多相关的有助于诊断的信息例如设备是否越狱，当时的内存量，当时的iOS版本等。对于修复掉的Crash日志，可以在Crashlytics的后台将其关掉。下图所示的是一个我的早期应用的崩溃记录，在我修复后，我将其更新为已修复状态。</p>

<p><img src="/images/crashlytics-close-issue.jpg"></p>

<p>3、Crashlytics可以每天和每周将崩溃信息汇总发到你的邮箱，所有信息一目了然。</p>

<p>下面我就给大家介绍如何使用Crashlytics。</p>

<h2>使用介绍</h2>

<h3>申请帐号</h3>

<p>Crashlytics的服务是免费提供的，但是并不能直接注册使用，需要先申请，打开<a href="http://try.crashlytics.com/">Crashlytic的官网</a> ，输入自己的邮箱申请使用。如下图所示：</p>

<p><img src="/images/crashlytics-1.jpg"></p>

<p>提交完邮箱之后，你的申请会放在Crashlytics的申请队列中，网页跳转到如下界面。在这个界面的右侧，你可以提供更多有效信息来让Crashlytics优先处理你的申请，建议大家都填上更多自己的信息。</p>

<p><img src="/images/crashlytics-2.jpg"></p>

<p>如果顺利，通常1-2天左右，你就会收到Crashlytics发来的申请通过邮件，如下图所示，通过邮件链接跳转到注册界面，填写密码即可完成注册。</p>

<p><img src="/images/crashlytics-3.jpg"></p>

<h3>设置工程</h3>

<p>在使用Crashlytics前需要对原有的XCode工程进行配置，在这一点上，Crashlytics做得比其它任何我见过的SDK提供商都体贴。因为Crashlytics专门做了一个Mac端的App来帮助你进行配置，所以，在配置前你先需要去<a href="https://www.crashlytics.com/downloads/xcode">这里</a>下载该应用。</p>

<p>应用下载后，运行该应用并登录帐号。然后选择应用中的"New App"按钮，然后选择自己要增加Crashlytics的工程，然后Crashlytics的应用会提示你为工程增加一个Run Script，如果你不知道如何添加，这里有一个<a href="http://www.runscriptbuildphase.com/?utm_source=desktopapp&amp;utm_medium=setup&amp;utm_campaign=mac">帮助的文档</a>。添加好之后的工程截图如下所示</p>

<p><img src="/images/crashlytics-4.jpg"></p>

<p>接着，Crashlytics的本地应用会提示你将Crashlytics相关的framework拖到工程中。如下所示：</p>

<p><img src="/images/crashlytics-5.jpg"></p>

<p>按照提示做完之后，就到了最后一步了，在<code>AppDelegate</code>的<code>didFinishLaunchingWithOptions</code>方法中加入如下代码：</p>

<p>``` objc</p>

<h1>import &lt;Crashlytics/Crashlytics.h></h1>

<ul>
<li>(BOOL)application:(UIApplication <em>)application
  didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions {
 [Crashlytics startWithAPIKey:@"your identify code"];
}
```</li>
</ul>


<p>之后，运行一下程序，Crashlytics就会检测到你设置成功。如果你感兴趣，可以自己手工触发一个崩溃记录，看Crashlytics能否帮你收集到。使用如下代码即可</p>

<p><code>objc
[[Crashlytics sharedInstance] crash];
</code></p>

<p>如果你想测试一个Exception导致的崩溃，可以使用如下代码：</p>

<p><code>objc
[NSObject doesNotRecognizeSelector];
[arrayWithOnlyTwoElements objectAtIndex:3];
</code></p>

<p>应用对外发布后，就可以在Crashlytics后台查看和修改相关的记录。另外，Crashlytics还支持将数据导入到其它项目管理工具（例如Redmine或Jira）如下所示，配置都非常简单。</p>

<p><img src="/images/crashlytics-6.jpg"></p>

<h2>实现原理和使用体会</h2>

<h3>实现原理</h3>

<p>在原理上，Crashlytics的通过以下2步完成崩溃日志的上传和分析：</p>

<ol>
<li>提供应用SDK，你需要在应用启动时调用其SDK来设置你的应用。SDK会集成到你的应用中，完成Crash信息的收集和上传。</li>
<li>修改工程的编译配置，加入一段代码，在你每次工程编译完成后，上传该工程对应的dSYM文件。研究过手工分析Crash日志的同学应该知道，只有通过该文件，才能将Crash日志还原成可读的Call Stack信息。</li>
</ol>


<h3>使用体会</h3>

<p>为了更加方便开发者设置相应的工程，Crashlytics提供了mac端的应用程序，帮助你检测相关工程是否正确设置并且提供相应的帮助信息。后来我还发现，该程序还会自动帮你升级Crashlytics的SDK文件。虽然这一点很体贴，但是我个人觉得还是不太友好。因为毕竟修改SDK会影响应用编译后的内部逻辑，在没有任何通知的情况下升级，我都无法确定Crashlytics有没有干坏事。不过国外的服务，特别是象Twitter这种相对较大知名度公司提供的服务要有节操得多，所以在这一点上我还是比较放心的。</p>

<p>使用Crashlytics可以让你摆脱管理应用崩溃记录的烦恼。并且帮助你找出应用的一些重大隐藏性Bug。例如我之前写的一个应用就过一个缓存过期的问题，只有当缓存过期时才会触发这个Bug，这样的问题在测试人员那边很难触发，因为他们不可能了解你的应用内部实现细节。通过Crashlytics，使我清楚了解到应用Crash的数量和位置，结合自己的开发经验，就很容易找到问题所在了。</p>

<p>值得一提的是，Crashlytics本身的<a href="http://support.crashlytics.com/knowledgebase/topics/14721-crashlytics-sdk-for-ios">官方文档</a>也非常健全，如果你在使用中遇到任何问题，也可以上去查看详细的文档。</p>

<p>愿Crashlytics能让大家的应用都更加健壮～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分析支付宝客户端的插件机制]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism/"/>
    <updated>2013-06-23T12:39:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/23/alipay-plugin-mechanism</id>
    <content type="html"><![CDATA[<p><img src="/images/alipay-plugin-1.jpg"></p>

<h2>前言</h2>

<p>因为开了iOSDevTips的微信公共账号，老收到各种iOS开发的问题，前两天收到一个问题的内容是：</p>

<pre><code>请问像支付宝钱包那样可以在应用里安装自己的应用，是已经在应用里写了逻辑，还是可以向应用里发送代码?
</code></pre>

<p>我觉得这个问题挺有意思的，估计大家都感兴趣，所以今天就抽空研究了一下，将支付宝客户端的插件机制具体实现方式介绍给大家。</p>

<p>先介绍一下该插件机制，如上图所示，支付宝客户端在安装后，对于像“彩票”、“爱心捐赠”这类功能，需要再点击安装一次，然后才可以使用。有些时候该插件功能进行了升级，需要点击升级才可以继续使用。插件的方式有利于软件动态增加新的功能或升级功能，而不用再一次向AppStore提交审核。另外，由于用户不需要的插件可以不用安装，也缩小了应用本身的体积大小，节省了下载流量。</p>

<!-- more -->


<h2>分析过程</h2>

<h3>截取网络请求</h3>

<p>分析第一步，截取网络请求。截取网络请求可以查看当用户点击“彩票”进行安装的时候，客户端到底做了什么事情。使用Charles的代理设置功能，启动一个http代理，然后在iPhone上设置连接此代理，则可以看到，当点击“彩票”插件时，客户端下载了一个名为 10000011.amr的文件。如下图所示：</p>

<p><img src="/images/alipay-plugin-2.jpg"></p>

<h3>下载插件文件</h3>

<p>尝试用wget将文件下载下来，发现其没有验证cookie，下载成功，命令如下：</p>

<p><code>bash
wget http://download.alipay.com/mobilecsprod/alipay.mobile/20130601021432806/xlarge/10000011.amr
</code></p>

<p>amr本意表示是一个音频文件，明显不对，尝试将其后缀名改成zip，成功将其解压。用itools连接上支付宝的客户端，同样能看到客户端将其下载后，也是解压到document目录下的。解压后的内容与应用内新增加的内容一致，如图所示：</p>

<p><img src="/images/alipay-plugin-3.jpg"></p>

<h3>分析文件内容</h3>

<p>大概浏览了一下解压后的文件，主要包括html、css和js文件。可见支付宝的插件机器是通过UIWebView来展示内容的方式来实现的，那为什么要先下载安装这些内容而不通过UIWebView实时下载html呢？这主要应该是为了节省相应的流量。我看了一下，10000011.amr文件整个有将近1M大小，如果不通过插件机制预先下载，则只能依赖系统对于UIWebView的缓存来节省流量，这相对来说没有前者靠谱。</p>

<p>另外，使用基于UIWebView的方式来展示插件，也有利于代码的复用。因为这些逻辑都是用js来写的，可以同样应用于Android平台，在Config.js文件中，明显可以看到对于各类平台的判断逻辑。如下图所示：</p>

<p><img src="/images/alipay-plugin-4.jpg"></p>

<p>另外，/www/demo/index-alipay-native.html 文件即该插件的首页，用浏览器打开就可以看到和手机端一样的内容。如下载图所示（左半边是手机上的应用截图，右半边是浏览器打开该html文件的截图）：</p>

<p><img src="/images/alipay-plugin-5.jpg"></p>

<h3>插件的网络通讯</h3>

<p>接下来感兴趣的是该插件是如何完成和支付宝后台的网络通讯的。可以想到有两种可能的方式：</p>

<ol>
<li>直接和支付宝后台通讯</li>
<li>和Native端通讯，然后Native端和服务器通讯。</li>
</ol>


<p>要验证这个需要读该插件的js源代码，整个js源码逻辑还是比较干净的，主要用了玉伯写的<a href="http://seajs.org/docs/">seajs</a>做模块化加载，<a href="http://backbonejs.org/">backbone.js</a>是一个前端的MVC框架，<a href="http://zeptojs.com/">zepto.js</a>是一个更适合于移动端使用的"JQuery"。</p>

<p>大概扫了一下，感觉更可能是用的方法一：直接和支付宝后台通讯, 因为Config.js中都明确将网络通讯的地址写下来了。另一个证据是，利用下面的脚本扫描整个js源码，只能在backbone中搜到对于iframe的使用。而在iOS开发中，如果js端和native端要通讯，是需要用到iframe的，详细原理可以参见我的另一篇文章<a href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/">《关于UIWebView和PhoneGap的总结》</a>。不过我不能完全确认，因为我还没有找到相应控制页面切换和跳转的js代码，如果你找到了，麻烦告诉我。</p>

<p><code>bash
find . -type f -name "*.js" | xargs grep "iframe"
</code></p>

<h3>交易的安全</h3>

<p>用Charles可以截取到，当有网络交易时，应用会另外启动一个https的安全链接，完成整个交易过程的加密。如下图所示：</p>

<p><img src="/images/alipay-plugin-6.jpg"></p>

<h2>总结</h2>

<p>支付宝的插件机制整体上就是通过html和javascript方式实现的，主要的好处是：</p>

<ol>
<li>跨平台(可以同时用在iOS和Android客户端）</li>
<li>省流量（不需要的插件不用下载，插件本地缓存长期存在不会过期，自己管理插件更新逻辑）</li>
<li>更新方便（不用每次提交AppStore审核）</li>
</ol>


<p>坏处如果非要说有的话，就是用javascript写iOS界面，无法提供非常炫的UI交互以及利用到iOS的所有平台特性。不过象支付宝这种工具类应用，也不需要很复杂的UI交互效果。</p>

<p>另外教大家一个小技巧，如果你不确定某个页面是不是UIWebView做的，直接在那个页面长按，如果弹出"拷贝，定义，学习"这种菜单，那就是确定无疑是UIWebView的界面了。如下图所示：</p>

<p><img src="/images/ios-menu-2.jpg"></p>

<h2>相关工具</h2>

<p>欢迎关注我的技术微博 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 和微信公共账号 <a href="http://chuansong.me/account/iosDevTips">iOSDevTips</a> ，每天收获一些关于iOS开发的学习资料和技巧心得。</p>

<p>我在研究时使用了<a href="http://www.charlesproxy.com/">Charles</a>来截获支付宝客户端的网络请求，用<a href="http://itools.hk/">iTools</a>来查看支付宝客户端的本地内容。如果你想自行验证本文内容，请先下载上述工具。在此就不额外介绍它们的使用了。</p>

<h2>后记（2013-7-7）</h2>

<ol>
<li><p>在完成上文后，Allen在他的博客上先后分享了两篇更深入分析的文章<a href="http://imallen.com/blog/2013/06/26/inside-alipay-plugin.html">《浅析支付宝钱包插件》</a> 和 <a href="http://imallen.com/blog/2013/07/06/about-alipay-plugin-and-phonegap.html">《再谈支付宝钱包插件和说好的 Demo》</a>。 这两篇文章都比本文深入得多，值得大家阅读。</p></li>
<li><p>写完上文，居然收到了来自支付宝卫朴（花名）的工作邀请。不过我现在创业正在努力当中，所以我拒绝了邀请。看来这也是一种找工作的办法啊，比投简历管用，呵呵。</p></li>
<li><p>从一些朋友那儿了解到，支付宝因为本文而会在以后的版本中加强安全性，至少不会像现在这样，所有逻辑都在写在javascript中，并且还带有注释，这也是我希望看到的结果。愿支付宝越做越好。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发工具篇-AppStore统计工具]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/16/ios-dev-tool-app-store-tool/"/>
    <updated>2013-06-16T12:26:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/16/ios-dev-tool-app-store-tool</id>
    <content type="html"><![CDATA[<p>本文首发于InfoQ，本文版权归InfoQ所有，转载请保留<a href="http://www.infoq.com/cn/articles/appstore-statistical-tool">原文链接</a>。</p>

<h2>前言</h2>

<p>随着iOS开发的流行，针对iOS开发涉及的方方面面，早有一些公司提供了专门的解决方案或工具。这些解决方案或工具包括：用户行为统计工具（友盟，Flurry，Google Analytics等),  App Store销售分析工具（例如App annie)， App crash收集工具（例如Crashlytics)，App测试发布工具（Test Flight）, App Push服务等。</p>

<p>这些解决方案或工具节省了iOS开发者大量的开发时间，但是由于相关介绍文章的缺乏，许多开发者都在重复着自己一次又一次重新造轮子。所以我希望，将我自己使用和调研的相关的第三方服务使用经验，整理成一系列文章，以便广大开发者能够省去大量的重复性工作。</p>

<p>今天介绍AppStore统计工具：App Annie和苹果的命令行统计工具。</p>

<!-- more -->


<h2>App Annie介绍</h2>

<p><img src="/images/app-annie-homepage.jpg"></p>

<p>苹果官方的iTunes Connect提供的销售数据统计功能比较弱，例如只能保存最近30天的详细销售数据，界面丑陋，
无法查看App的排名历史变化情况等。</p>

<p><a href="http://www.appannie.com/">AppAnnie</a>是一个专门为开发者提供的，针对AppStore相关数据的统计分析工具。
该工具可以统计App在AppStore的下载量，排名变化，销售收入情况以及用户评价等信息。</p>

<h3>原理</h3>

<p>AppAnnie实现的原理是：通过你配置的管理账号，向itunes connect请求获得你的App的相关数据，包括每日下载量，用户的评分数据，以及销售数据。</p>

<h3>注册Sales类型的账号</h3>

<p>使用AppAnnie，首先需要在苹果官方的itunes connect中配置一个Sales类型的账号。
因为默认的开发者账号是Admin级的权限，该权限是非常高的，可以修改App的价格或者直接下架商品。
如果将这个账号直接配置在AppAnnie中，虽然不影响其获得相关数据，但是有一定的账号安全风险。</p>

<p>配置该账号的详细步骤如下：</p>

<p>1、登录itunes connect，选择Manager Users</p>

<p><img src="/images/itunes-connect-add-user-1.jpg"></p>

<p>2、选择iTunes Connect User</p>

<p><img src="/images/itunes-connect-add-user-2.jpg"></p>

<p>3、点击Add new User</p>

<p><img src="/images/itunes-connect-add-user-3.jpg"></p>

<p>4、填写新用户的相关信息</p>

<p><img src="/images/itunes-connect-add-user-4.jpg"></p>

<p>5、勾选用户类型为Sales</p>

<p><img src="/images/itunes-connect-add-user-5.jpg"></p>

<p>6、选择Notifications为All Notifications。点击图中所指的位置即可全选。</p>

<p><img src="/images/itunes-connect-add-user-6.jpg"></p>

<p>7、之后，邮箱中会收到iTunes Connect发来的激活邮件。
点击邮件中的激活链接，即可进入到账号注册界面，之后注册账号即可激活。如果该邮箱已经注册过Apple Id，则会进入到登录界面，登录后即可激活。</p>

<p><img src="/images/itunes-connect-add-user-7.jpg"></p>

<h2>注册 App Annie账号及配置</h2>

<p>打开App Annie的官方网站:<a href="http://www.appannie.com/">http://www.appannie.com/</a>，
注册步骤和一般网站的步骤一样，我就不介绍了，注册完成之后的配置步骤如下：</p>

<p>1、在设置页面中增加iTunes Connect账号</p>

<p><img src="/images/app-annie-1.jpg"></p>

<p>2、填写你的之前在iTunes Connect中增加的Sales类型的账号及密码</p>

<p><img src="/images/app-annie-2.jpg"></p>

<p>3、在User Setting中勾选上接收每日Report</p>

<p><img src="/images/app-annie-3.jpg"></p>

<p>4、这样，每天就可以收到AppAnnie发来的相关统计邮件了。如下是一封粉笔网的销售报告邮件截图：</p>

<p><img src="/images/app-annie-4.jpg"></p>

<h2>官方的命令行工具</h2>

<p>如果你觉得将自己的销售数据交给第三方统计服务商，有一些不太安全。可以考虑使用苹果官方提供的Autoingestion.class工具来获得每天的销售数据，然后存到本地的数据库中。</p>

<p>该工具的下载地址是<a href="http://www.apple.com/itunesnews/docs/Autoingestion.class.zip">这里</a>，
苹果对于该用户的帮助文档在<a href="http://www.apple.com/itunesnews/docs/AppStoreReportingInstructions.pdf">这里</a>。</p>

<p>下面介绍一下这个工具的使用，将Autoingestion.class下载下来后，切换到class文件所在目录，执行如下命令，即可获得对应的统计数据：</p>

<p><code>
java Autoingestion &lt;帐号名&gt; &lt;密码&gt; &lt;vendorId&gt; &lt;报告类型&gt; &lt;时间类型&gt; &lt;报告子类型&gt; &lt;时间&gt;
</code></p>

<p>其中vendor Id在iTunes Connect的如下图所示位置获得，是一个数字8开头的序列。</p>

<p><img src="/images/itunes-connect-vendor-id.jpg"></p>

<p>&lt;报告类型>可选的值是：Sales 或 Newsstand</p>

<p>&lt;时间类型>可选的值是：Daily, Weekly, Monthly 或 Yearly</p>

<p>&lt;报告子类型>可选的值是：Summary, Detailed 或 Opt-In</p>

<p>&lt;时间>以如下的格式给出：YYYYMMDD</p>

<p>以下是一个示例，它将获得2013年5月8日的日销售摘要数据。</p>

<p><code>
java Autoingestion username@fenbi.com password 85587619 Sales Daily Summary 20130508
</code></p>

<p>我试用了一下该工具，觉得还是太糙了一些，仅仅能够将销售数据备份下来，如果要做AppAnnie那样的统计报表，还需要写不少代码。而且，该工具并不象App Annie那样，还提供应用在App Store的排名变化情况。虽然可以自己再做抓取，但也是需要工作量的。</p>

<h2>其它类似App Annie的服务</h2>

<p>类似App Annie这样的服务还有：<a href="http://appfigures.com">AppFigures</a>。我试用过之后，发现它不如App Annie功能强大。不过作为一个替代方案，也一并介绍给大家。</p>

<p>在Github上也有一些开源的<a href="https://github.com/alexvollmer/itunes-connect">统计工具</a>，感兴趣的朋友也可以尝试一下。这些工具基本上也就是对苹果的命令行工具的增强，例如增加了将数据导入到数据库中等功能。</p>

<h2>功能对比</h2>

<p>App Annie和苹果本身提供的命令行工具虽然都能统计App Store的数据，但是二者功能相差悬殊。苹果的命令行工具仅仅能提供销售数据的按日、周、月、年等方式的统计和备份。而App Annie除了以更加良好的界面和交互提供这些功能外，还能跟踪App的排名变化，以及App在苹果的各种榜单中所处位置的情况。</p>

<p>建议大家都可以尝试使用App Annie或AppFigures这类统计工具，帮助你方便地查看App的销售和排名情况。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见，viewDidUnload方法]]></title>
    <link href="http://blog.devtang.com/blog/2013/05/18/goodbye-viewdidunload/"/>
    <updated>2013-05-18T17:37:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/05/18/goodbye-viewdidunload</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>我在去年的一篇文章<a href="http://blog.devtang.com/blog/2012/02/06/new-methods-in-uiviewcontroller-of-ios5/">《iOS5中UIViewController的新方法》</a>中介绍了iOS5引入的关于ViewController的新方法。但是现在如果运行该文章中的Sample代码的话，你会发现Log中不会再出现viewDidUnload方法被调用的记录。这是因为在iOS6中，viewDidUnload回调方法被Deprecated掉了。查看苹果的文档，可以看到如下的说明。</p>

<p><img src="/images/viewdidunload-1.jpg"></p>

<p>那么，原本在viewDidUnload中的代码应该怎么处理？在iOS6中，又应该怎么处理内存警告？带着这些问题，我查找了一些资料，在此分享给大家。</p>

<!-- more -->


<h3>分析</h3>

<p>在iOS4和iOS5系统中，当内存不足，应用收到Memory warning时，系统会自动调用当前没在界面上的ViewController的viewDidUnload方法。
通常情况下，这些未显示在界面上的ViewController是UINavigationController Push栈中未在栈顶的ViewController，以及UITabBarViewController中未显示的子ViewController。这些View Controller都会在Memory Warning事件发生时，被系统自动调用viewDidUnload方法。</p>

<p>在iOS6中，由于viewDidUnload事件在iOS6下任何情况都不会被触发，所以苹果在文档中建议，应该将回收内存的相关操作移到另一个回调函数：didReceiveMemoryWarning 中。但是如果你仅仅是把以前写到viewDidUnload函数中的代码移动到didReceiveMemoryWarning函数中，那么你就错了。以下是一个 <font color=red>错误的示例代码</font> ：</p>

<p>``` objc</p>

<ul>
<li>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
  if([self isViewLoaded] &amp;&amp; ![[self view] window]) {

<pre><code>  [self setView:nil];
</code></pre>

<p>  }
}</p></li>
</ul>


<p>```</p>

<p><a href="http://thejoeconwayblog.wordpress.com/2012/10/04/view-controller-lifecycle-in-ios-6/">这篇文章</a>解释了iOS6不推荐你将view置为nil的原因（链接打开需要翻墙）, 翻译过来如下：</p>

<ol>
<li><p>UIView有一个CALayer的成员变量，CALayer是具体用于将自己画到屏幕上的。如下图所示：</p>

<p><img src="/images/viewdidunload-2.jpg"></p></li>
<li><p>CALayer是一个bitmap图象的容器类，当UIView调用自身的drawRect时，CALayer才会创建这个bitmap图象类。</p></li>
<li><p>具体占内存的其实是一个bitmap图象类，CALayer只占48bytes, UIView只占96bytes。而一个iPad的全屏UIView的bitmap类会占到12M的大小！</p></li>
<li><p>在iOS6时，当系统发出MemoryWarning时，系统会自动回收bitmap类。但是不回收UIView和CALayer类。这样即回收了大部分内存，又能在需要bitmap类时，通过调用UIView的drawRect: 方法重建。</p></li>
</ol>


<h3>内存优化</h3>

<p>另外文章中还提到苹果的操作系统对此做的一个内存优化技巧，解释如下：</p>

<ol>
<li><p>当一段内存被分配时，它会被标记成“In use“, 以防止被重复使用。当内存被释放时，这段内存会被标记成"Not in use"，这样，在有新的内存申请时，这块内存就可能被分配给其它变量。</p></li>
<li><p>CALayer包括的具体的bitmap内容的私有成员变量类型为<a href="http://blog.spacemanlabs.com/2011/08/calayer-internals-contents/">CABackingStore</a>， 当收到MemroyWarning时，
CABackingStore类型的内存区会被标记成volatile类型（这里的volatile和 C以及Java语言的volatile不是一个意思），volatile表示，这块内存可能被再次被原变量重用。</p></li>
</ol>


<p>这样，有了上面的优化后，当收到Memoy Warning时，虽然所有的CALayer所包含的bitmap内存都被标记成volatile了，但是只要这块内存没有再次被复用，那么当需要重建bitmap内存时，
它就可以直接被复用，而避免了再次调用 UIView的 drawRect: 方法。</p>

<h3>总结</h3>

<p>所以，简单来说，对于iOS6，你不需要做任何以前viewDidUnload的事情，更不需要把以前viewDidUnload的代码移动到 didReceiveMemoryWarning方法中。</p>

<p>引用WWDC 2012 中的一段话来给viewDidUnload说再见：</p>

<p><blockquote><p></p></p><p><p>The method viewWillUnload and viewDidUnload. We're not going to call them anymore. I mean, there's kind of a cost-benifit equation and analysis that we went through. In the early days, there was a real performance need for us to ensure that on memory warnings we unloaded views. There was all kinds of graphics and backing stores and so forth that would also get unloaded. We now unload those independently of the view, so it isn't that big of a deal for us for those to be unloaded, and there were so many bugs where there would be pointers into。</p></p><p><p></p></blockquote></p>

<h3>参考链接</h3>

<ul>
<li><a href="http://thejoeconwayblog.wordpress.com/2012/10/04/view-controller-lifecycle-in-ios-6/">View Controller Lifecycle in iOS 6</a></li>
<li><a href="http://blog.spacemanlabs.com/2011/08/calayer-internals-contents/">CALayer Internals: Contents</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[历史上的WWDC门票售空图片]]></title>
    <link href="http://blog.devtang.com/blog/2013/04/30/the-history-of-wwdc/"/>
    <updated>2013-04-30T22:40:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/04/30/the-history-of-wwdc</id>
    <content type="html"><![CDATA[<h2>2008年</h2>

<p>62天售空。介绍了iPhone 3G。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2008.jpg" width="500px" /></p>

<h2>2009年</h2>

<p>33天售空。介绍了iPhone 3GS。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2009.png" width="500px" /></p>

<h2>2010年</h2>

<p>8天售空。介绍了iPhone 4。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2010.png" width="500px" /></p>

<h2>2011年</h2>

<p>12小时售空。介绍了iOS5, ARC, Storyboard, iCloud, Mac OS X Lion。</p>

<p>从这一年开始，iPhone新品都没能赶上在WWDC中介绍。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2011.jpg" width="500px" /></p>

<h2>2012年</h2>

<p>2小时售空。介绍了iOS6。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2012.jpg" width="500px" /></p>

<h2>2013年</h2>

<p>2分钟售空。期待。</p>

<p><img src="http://blog.devtang.com/images/wwdc-2013.jpg" width="500px" /></p>
]]></content>
  </entry>
  
</feed>
