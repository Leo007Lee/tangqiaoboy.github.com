<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-05-25T20:52:05+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用CocoaPods做iOS程序的依赖管理]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/"/>
    <updated>2014-05-25T14:09:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency</id>
    <content type="html"><![CDATA[<p><img src="/images/cocoapods-logo.png"></p>

<h2>文档更新说明</h2>

<ul>
<li>2012-12-02 v1.0 初稿</li>
<li>2014-01-08 v1.1 增加设置ruby淘宝源相关内容</li>
<li>2014-05-25 v2.0 增加国内spec镜像、使用私有pod、podfile.lock、创建spec文件等内容</li>
</ul>


<h2>CocoaPods简介</h2>

<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具，例如Java语言的Maven，nodejs的npm。随着iOS开发者的增多，业界也出现了为iOS程序提供依赖管理的工具，它的名字叫做：<a href="http://cocoapods.org/">CocoaPods</a>。</p>

<p>CocoaPods<a href="https://github.com/CocoaPods/CocoaPods">项目的源码</a>在Github上管理。该项目开始于2011年8月12日，经过多年发展，现在已经成为iOS开发事实上的依赖管理标准工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<p>在我开发猿题库客户端时，其使用了24个第三方开源库。在没有使用CocoaPods以前，我需要:</p>

<ol>
<li>把这些第三方开源库的源代码文件复制到项目中，或者设置成git的submodule。</li>
<li>对于这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如通常情况下，一个网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics, zlib。</li>
<li>对于某些开源库，我还需要设置<code>-licucore</code>或者 <code>-fno-objc-arc</code>等编译参数</li>
<li>管理这些依赖包的更新。</li>
</ol>


<p>这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行<code>pod install</code>。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>

<h2>CocoaPods的安装和使用介绍</h2>

<h3>安装</h3>

<p>安装方式异常简单, Mac下都自带ruby，使用ruby的gem命令即可下载安装：</p>

<p><code>bash
$ sudo gem install cocoapods
$ pod setup
</code></p>

<p>如果你的gem太老，可能也会有问题，可以尝试用如下命令升级gem:</p>

<p><code>bash
sudo gem update --system
</code></p>

<p>另外，ruby的软件源rubygems.org因为使用的亚马逊的云服务，所以被墙了，需要更新一下ruby的源，如下代码将官方的ruby源替换成国内淘宝的源：</p>

<p><code>
gem sources --remove https://rubygems.org/
gem sources -a http://ruby.taobao.org/
gem sources -l
</code></p>

<p>还有一点需要注意，<code>pod setup</code>在执行时，会输出<code>Setting up CocoaPods master repo</code>，但是会等待比较久的时间。这步其实是Cocoapods在将它的信息下载到 <code>~/.cocoapods</code>目录下，如果你等太久，可以试着cd到那个目录，用<code>du -sh *</code>来查看下载进度。你也可以参考本文接下来的<code>使用cocoapods的镜像索引</code>一节的内容来提高下载速度。</p>

<h3>使用CocoaPods的镜像索引</h3>

<p>所有的项目的Podspec文件都托管在<code>https://github.com/CocoaPods/Specs</code>。第一次执行<code>pod setup</code>时，CocoaPods会将这些<code>podspec</code>索引文件更新到本地的 <code>~/.cocoapods/</code>目录下，这个索引文件比较大，有80M左右。所以第一次更新时非常慢，笔者就更新了将近1个小时才完成。</p>

<p>一个叫<a href="http://akinliu.github.io/2014/05/03/cocoapods-specs-/">akinliu</a>的朋友在<a href="http://gitcafe.com/">gitcafe</a>和<a href="http://www.oschina.net/">occhina</a>上建立了CocoaPods索引库的镜像，因为gitcafe和occhina都是国内的服务器，所以在执行索引更新操作时，会快很多。如下操作可以将CocoaPods设置成使用gitcafe镜像：</p>

<p>``` bash</p>

<p>pod repo remove master
pod repo add master <a href="https://gitcafe.com/akuandev/Specs.git">https://gitcafe.com/akuandev/Specs.git</a>
pod repo update</p>

<p>```</p>

<p>将以上代码中的 <code>https://gitcafe.com/akuandev/Specs.git</code> 替换成 <code>http://git.oschina.net/akuandev/Specs.git</code> 即可使用occhina上的镜像。</p>

<h3>使用CocoaPods</h3>

<p>使用时需要新建一个名为Podfile的文件，以如下格式，将依赖的库名字依次列在文件中即可</p>

<p><code>
platform :ios
pod 'JSONKit',       '~&gt; 1.4'
pod 'Reachability',  '~&gt; 3.0.0'
pod 'ASIHTTPRequest'
pod 'RegexKitLite'
</code></p>

<p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>

<p><code>bash
cd "your project home"
pod install
</code></p>

<p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下2点即可：</p>

<ol>
<li>使用CocoaPods生成的 <em>.xcworkspace 文件来打开工程，而不是以前的 </em>.xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次<code>pod update</code>命令。</li>
</ol>


<h3>查找第三方库</h3>

<p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过pod search命令进行查找，以下是我用pod search json查找到的所有可用的库：</p>

<p>``` bash
$ pod search json</p>

<p>&ndash;> AnyJSON (0.0.1)
   Encode / Decode JSON by any means possible.
   &ndash; Homepage: <a href="https://github.com/mattt/AnyJSON">https://github.com/mattt/AnyJSON</a>
   &ndash; Source:   <a href="https://github.com/mattt/AnyJSON.git">https://github.com/mattt/AnyJSON.git</a>
   &ndash; Versions: 0.0.1 [master repo]</p>

<p>&ndash;> JSONKit (1.5pre)
   A Very High Performance Objective-C JSON Library.
   &ndash; Homepage: <a href="https://github.com/johnezang/JSONKit">https://github.com/johnezang/JSONKit</a>
   &ndash; Source:   git://github.com/johnezang/JSONKit.git
   &ndash; Versions: 1.5pre, 1.4 [master repo]</p>

<p>// &hellip;以下省略若干行</p>

<p>```</p>

<h3>关于.gitignore</h3>

<p>当你执行<code>pod install</code>之后，除了Podfile外，CocoaPods还会生成一个名为<code>Podfile.lock</code>的文件，你不应该把这个文件加入到<code>.gitignore</code>中。因为<code>Podfile.lock</code>会锁定当前各依赖库的版本，之后如果多次执行<code>pod install</code> 不会更改版本，要<code>pod update</code>才会改<code>Podfile.lock</code>了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。</p>

<p>CocoaPods的这篇<a href="http://guides.cocoapods.org/using/using-cocoapods.html#should-i-ignore-the-pods-directory-in-source-control">官方文档</a>也在<code>What is a Podfile.lock</code>一节中介绍了<code>Podfile.lock</code>的作用，并且指出：</p>

<p><blockquote><p></p></p><p><p>This file should always be kept under version control.</p></p><p><p></p></blockquote></p>

<h2>为自己的项目创建podspec文件</h2>

<p>我们可以为自己的开源项目创建<code>podspec</code>文件，首先通过如下命令初始化一个<code>podspec</code>文件：</p>

<p><code>
pod spec create your_pod_spec_name
</code></p>

<p>该命令执行之后，CocoaPods会生成一个名为<code>your_pod_spec_name.podspec</code>的文件，然后我们修改其中的相关内容即可。</p>

<p>具体步骤可以参考这两篇博文中的相关内容：<a href="http://ishalou.com/blog/2012/10/16/how-to-create-a-cocoapods-spec-file/">《如何编写一个CocoaPods的spec文件》</a> 和<a href="http://studentdeng.github.io/blog/2013/09/13/cocoapods-tutorial/">《Cocoapods 入门》</a>。</p>

<h2>使用私有的pods</h2>

<p>我们可以直接指定某一个依赖的<code>podspec</code>，这样就可以使用公司内部的私有库。该方案有利于使企业内部的公共项目支持CocoaPods。如下是一个示例：</p>

<p><code>bash
pod 'MyCommon', :podspec =&gt; 'https://yuantiku.com/common/myCommon.podspec'
</code></p>

<h2>不更新podspec</h2>

<p>CocoaPods在执行<code>pod install</code>和<code>pod update</code>时，会默认先更新一次<code>podspec</code>索引。使用<code>--no-repo-update</code>参数可以使其做索引更新操作。如下所示：</p>

<p><code>
pod install --no-repo-update
pod update --no-repo-update
</code></p>

<h3>生成第三方库的帮助文档</h3>

<p>如果你想让CococaPods帮你生成第三方库的帮助文档，并集成到Xcode中，那么用brew安装appledoc即可：</p>

<p><code>bash
brew install appledoc
</code></p>

<p>关于appledoc，我在今年初的另一篇博客<a href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/">《使用Objective-C的文档生成工具:appledoc》</a>中有专门介绍。它最大的优点是可以将帮助文档集成到XCode中，这样你在敲代码的时候，按住opt键单击类名或方法名，就可以显示出相应的帮助文档。</p>

<h2>原理</h2>

<p>大概研究了一下CocoaPods的原理，它是将所有的依赖库都放到另一个名为Pods项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。发现的一些技术细节有：</p>

<ol>
<li>Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</li>
<li>对于资源文件，CocoaPods提供了一个名为Pods-resources.sh的bash脚本，该脚本在每次项目编译的时候都会执行，将第三方库的各种资源文件复制到目标目录中。</li>
<li>CocoaPods通过一个名为Pods.xcconfig的文件来在编译时设置所有的依赖和参数。</li>
</ol>


<p>愿大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第12期]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/24/ios-weekly-12/"/>
    <updated>2014-05-24T10:04:19+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/24/ios-weekly-12</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/05/apple-renew-wwdc2014-application">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果更新WWDC 2014应用、GCD 深入理解、objc.io第12期翻译等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-05-22/08099393630.shtml">《苹果更新WWDC 2014应用 公布主题演讲时间》</a>：2014年苹果公司全球开发者大会(WWDC)将于6月2日举行。5月21日，他们更新了iOS版WWDC官方应用，并将公布主题演讲时间。</p></li>
<li><p><a href="https://github.com/orta/wwdc_parties_2014">《各种WWDC2014现场聚会》</a>：该项目列出了各种第三方公司或组织打算在WWDC时候进行的线下聚会。</p></li>
<li><p><a href="http://weicdsq.lofter.com/post/20a5c5_13cc45e">《关于发现的一个流氓黑客恶意盗号插件的源头追踪》</a>：威锋技术组分享了追踪一个恶意盗号插件源头的过程。从中我们可以看到越狱手机市场有多么混乱和危险。笔者认为，如果不是研究安全为目的，就不要越狱，特别是不要为了装盗版而越狱。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-05-14-grand-central-dispatch-in-depth-part-2.md">《GCD 深入理解：第二部分》</a>：本文是由<a href="http://weibo.com/riven0951">Riven</a>和<a href="https://twitter.com/nixzhu">@nixzhu</a>共同翻译的GCD 深入理解的第二部分。文章更加深入地介绍了 GCD 的高级用法，包括 Dispatch Group 、并发的危害、正确的阻塞方式、信号量以及 Dispatch Source 等。</p></li>
<li><p><a href="http://objccn.io/issue-12/">《objc.io第12期翻译：动画》</a>：本期翻译涵盖了iOS动画的方方面面——从 UIView 动画，Core Animation，一直到从零打造一个你自己定义的动画。文章还讨论了 View Controller 和 Collection View 有关的动画，以及如何让动画变得可以交互。</p></li>
<li><p><a href="http://bomberstudios.com/post/54587126654/using-sketch-mirror-liveview-silkscreen-skala">《Using Sketch Mirror, LiveView, SilkScreen, Skala Preview, AirServer &amp; others via USB》</a>：文章介绍了用 USB 热点共享提高演示时 iPhone 画面帧数的技巧，该技巧可用于在使用AirServer或Sketch mirror等应用时，在wifi糟糕的环境下解决数据传输太慢的问题。</p></li>
<li><p><a href="http://highperformancecoredata.com/">《High Performance Core Data》</a>：文章列出了讲Core Data 性能方面的各种资源，包括博客、Podcast以及开源代码。</p></li>
<li><p> <a href="http://nsscreencast.com/">NSScreenCast</a>：NSScreenCast是一个风格有趣的iOS教程网站。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/ideo/avocado/">avocado</a>：avocado是一个基于Facebook Origami的交互设计工具集。其由<a href="http://www.ideo.com/">IDEO</a>开源，可用于做交互原型设计。</p></li>
<li><p><a href="http://resolution.im/">resolution.im</a>：resolution.im是一个提问各种iOS设备尺寸信息以及设计模版的网站。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/Ciechan/BCMeshTransformView">BCMeshTransformView</a>：BCMeshTransformView是一个用于实现Mesh变换效果的开源库，关于Mesh变换，可以查阅<a href="http://ciechanowski.me/blog/2014/05/14/mesh-transforms/">这篇博文</a>。</p></li>
<li><p><a href="https://github.com/hfossli/AGGeometryKit-POP">AGGeometryKit-POP</a>：AGGeometryKit-POP是一个基于facebook POP的动效框架，这里有一个它能提供的动效<a href="http://vimeo.com/95383807">演示视频</a>。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第11期]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/16/ios-weekly-11/"/>
    <updated>2014-05-16T21:36:16+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/16/ios-weekly-11</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/05/ios-app-security-development">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：iOS应用安全开发概述，Collection View 动画，可变参数列表的实现原理，XcodeBoost插件等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://www.csdn.net/article/2014-04-30/2819573-The-Secret-Of-App-Dev-Security">《iOS应用安全开发，你不知道的那些事》</a>：iOS应用由于其直接运行在手机上，相比运行在服务器的后台服务，更有可能被黑客攻击。本文从网络安全、本地文件和数据安全、源代码安全三个方面，阐述iOS应用在安全性上遇到的挑战。</p></li>
<li><p><a href="http://objccn.io/issue-12-5/">《Collection View 动画》</a>：<code>UICollectionView</code> 和相关类的设置非常灵活和强大。但是灵活性一旦增强，某种程度上也增加了其复杂性： <code>UICollectionView</code> 比老式的 <code>UITableView</code> 更有深度，适用性也更强。本文的第一部分将集中讨论并举例说明如何用不同的类和方法来共同帮助实现一些常见的 <code>UICollectionView</code> 动画。在第二部分，我们将看一下带有 collection views 的 view controller 转场动画以及在 <code>useLayoutToLayoutNavigationTransitions</code> 可用时使用其进行转场，如果不可用时，我们会实现一个自定义转场动画。</p></li>
<li><p><a href="http://gracelancy.com/blog/2014/05/05/variable-argument-lists/">《Variable Argument Lists》</a>：可变参数函数（Variadic Function），即是指一个可以接受可变数量的参数的函数。在C语言中，对该特性的支持，即是通过可变参数列表（Variable Argument list）来实现的。本文讨论了其具体的实现内部原理。最后作者<a href="http://weibo.com/lancy1014">晨钰Lancy</a>介绍了其开源的一个能够接收block作为回调的自定义的<a href="https://github.com/lancy/cyalertview">AlertView组件</a>。</p></li>
<li><p><a href="http://imoldman.github.io/blog/2014/04/30/why-assert-enabled-under-release-in-xcode/">《assert出问题了》</a>：作者分享了在Xcode中使用Assert时需要注意的问题。</p></li>
<li><p><a href="http://stackoverflow.com/questions/7385439/exception-thrown-in-nsorderedset-generated-accessors">《CoreData的坑》</a>：<a href="http://weibo.com/pinxue">pinxue</a>分享了一个持续3年都没有修复的CoreData的Bug。</p></li>
<li><p><a href="http://www.taofengping.com/2014/05/07/multi-similar-application/#.U3N25q2SyrJ">《使用cocoapods创建多个类似工程的尝试》</a>：因为业务的需要，作者做了一批类似无聊图的App，应用本身没有复杂的逻辑，所有类“无聊图”的应用都针对特定的用户群，设计了不同界面风格的，比如适合宅男的女神应用，适合吃货的美食应用等等诸如此类，大概一共七八个。作者介绍了其使用cocoapods创建多个类似工程的尝试。</p></li>
<li><p><a href="http://miao.hu/2012/02/26/osx-exp-share/">《Mac 软件和学习经验分享》</a>：作者介绍了一些优秀的 Mac 软件和学习Mac的经验。</p></li>
<li><p><a href="http://subjc.com/">subjc.com</a>：subjc.com是一个介绍iOS界面编程技巧的网站。网站中有动画实例分析以及实现的代码。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/fortinmike/XcodeBoost">XcodeBoost</a>：XcodeBoost包含多个辅助修改代码的小功能，比如：</p>

<ol>
<li>可以在.m文件中复制方法实现，然后将该方法的定义粘贴到对应的.h文件中</li>
<li>可以在某一个源文件中直接输入正则表达式查找</li>
<li>可以复制粘贴代码时不启用Xcode的自动缩进功能（Xcode的自动缩进经常出问题，造成已经调整好的代码缩进，因为粘贴时被Xcode调整坏了）</li>
</ol>
</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/monoclesociety/eggscellent">Eggscellent开源</a>：Eggscellent是Mac上的开源的番茄钟应用。</p></li>
<li><p><a href="https://github.com/viewfinderco/viewfinder">Viewfinder</a>：移动支付公司 Square 将去年收购的照片应用 Viewfinder 开源了，包含服务端、iOS 和 Android 应用代码。<a href="http://corner.squareup.com/2014/05/open-sourcing-viewfinder.html">这里</a>有该项目的介绍。</p></li>
<li><p><a href="https://github.com/kevinzhow/PNChart">PNChart</a>：作者<a href="http://weibo.com/kevinzhow">周楷雯Kevin</a>发布了PNChart 0.5版本，提供了一个更漂亮的Pie Chart界面。</p></li>
<li><p><a href="https://atom.io/">文本编辑器Atom开源</a>：GitHub将其开发的文本编辑器Atom开源。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS应用安全开发概述]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/08/ios-security-dev-overview/"/>
    <updated>2014-05-08T21:27:23+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/08/ios-security-dev-overview</id>
    <content type="html"><![CDATA[<p><img src="/images/security.jpeg"></p>

<p>【摘要】：iOS应用由于其直接运行在手机上，相比运行在服务器的后台服务，更有可能被黑客攻击。本文将从网络安全、本地文件和数据安全、源代码安全三个方面，阐述iOS应用在安全性上遇到的挑战。</p>

<h1>前言</h1>

<p>在传统互联网领域，安全已经是一个老生常谈的话题。在许多大公司里面，都设置有专门的安全部门，用于检测自己产品的安全性。但即便是这样，业界仍然时常暴出许多安全问题的新闻。就在不久前，乌云<a href="http://gd.people.com.cn/n/2014/0325/c123932-20854292.html">曝光了</a>携程网在支付过程中，为了调试方便，记录了用户的信用卡卡号和CVV码等信息，而调试接口可以被外网访问，这样造成黑客可能通过调试接口读取用户的信用卡信息。虽然最终没有造成实际上的用户损失，但是此次事件再一次给互联网公司敲响了安全的警钟。</p>

<p>除了国内，国外的互联网安全问题同样让人担忧。去年由于曝出<a href="http://tech.163.com/13/0722/09/94CKLASU000947EG.html">Apache Struts2的漏洞</a>，苹果公司多次重置开发者的密码，并且最终为了用户数据的安全，将整个开发者后台全部停止服务，花了2周多时间将后台有潜在问题的功能重写后，才重新开放服务。而4月份刚刚曝光的<a href="http://tech.ifeng.com/internet/detail_2014_04/09/35603734_0.shtml">OpenSSL的heart bleeding漏洞</a>，则让全球的三分之二的网站受到影响。</p>

<p>在移动互联网快速发展的今天，iOS应用由于直接运行在用户的手机上，相比运行在服务器的后台服务，更有可能被黑客攻击。本文接下来将从三个方面概述iOS移动应用在安全方面所面临的挑战以及应对措施。</p>

<h1>一、网络安全</h1>

<h2>安全地传输用户密码</h2>

<p>大部分的iOS应用都需要联网，通过和服务器端进行通讯，获得最新的信息并且将内容展现给用户。由于网络传输过程中有可能经过不安全的中间节点，所以我们应该对敏感数据加密，用于保证用户信息的安全。黑客可以在受害者的手机上设置网络通讯的代理服务器，从而截获所有的网络请求。即使是Https的加密通讯，黑客也可以通过<a href="http://zh.wikipedia.org/zh-cn/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">中间人攻击</a>（Man-in-the-middle attack，一种是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制）来截取通讯内容。</p>

<p>黑客可以在Mac下使用<a href="http://www.charlesproxy.com/">Charles</a>软件（如果在Windows下，可以使用<a href="http://www.telerik.com/fiddler">fiddler</a>软件）来将自己的电脑设置成代理服务器，从而截取应用的网络请求，分析目标应用在通讯协议上是否有安全问题。为了测试，我选取了在国内最大的两家租车公司（<a href="www.zuche.com/">神州租车</a>和<a href="www.1hai.cn">一嗨租车</a>）的iOS应用。</p>

<p>从下图可以看到，神州租车和一嗨租车在用户登录时，均采用明文的方式，将密码直接发送给服务器。其中一嗨租车不但采用明文方式发送密码，而且在发送时使用了Http Get的方式，而GET的URL数据一般都会保存在服务器的access log中，所以黑客一旦攻破服务器，只需要扫描acesss log，则可以轻易获得所有用户的明文密码。(注：在本文发表前，一嗨租车已经修改了登录协议，采用了POST的方式来登录，但仍然传递的是明文密码)</p>

<p>神州租车登录协议:</p>

<p><img src="/images/zuche-protocol.png"></p>

<p>一嗨租车登录协议:</p>

<p><img src="/images/1hai-protocol.png"></p>

<p>如果每一个移动移动都像以上两种应用那样，明文传输用户密码，那么我们可以想象这样一个场景，黑客在咖啡馆或机场等一些公共场所，将自己的电脑设置成该场所一样名字的免费Wifi，那么受害者只要不小心使用了该Wifi，则可能泄漏自己的明文密码。对于大多数普通人，都会使用一样的密码登录他的所有的帐号，这就意味着他的其他帐号：例如淘宝或网上银行帐号也有被盗的风险。</p>

<p>正确的做法应该是这样：事先生成一对用于加密的公私钥，客户端在登录时，使用公钥将用户的密码加密后，将密文传输到服务器。服务器使用私钥将密码解密，然后加盐(Salt：在密码学中，是指通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符)之后再多次求MD5，之后再和服务器原来存储的用同样方法处理过的密码匹配，如果一致，则登录成功。这样的做法，保证黑客即使截获了加密后的密文，由于没有私钥，也无法还原出原始的密码。而服务器即使被黑客攻陷，黑客除了暴力尝试，也无法从加盐和多次MD5后的密码中还原出原始的密码。这样就保证了用户密码的安全。</p>

<h2>防止通讯协议被轻易破解</h2>

<p>除了上面提到的明文传输密码的问题外，移动端应用还要面对黑客对于通讯协议的破解的威胁。在成功破解了通讯协议后，黑客可以模拟客户端登录，进而伪造一些用户行为，可能对用户数据造成危害。例如腾讯出品的消除游戏“天天爱消除”，在淘宝上就有很多售价仅为1元的代练服务，如果真正是人工代练，是不可能卖这么便宜的，只有可能是该游戏的通讯协议被破解，黑客制作出了代练的机器人程序。</p>

<p>通讯协议被破解除了对于移动端游戏有严重危害外，对于应用也有很大的危害。例如针对微信，黑客可以制作一些僵尸帐号，通过向微信公共帐号后台发送垃圾广告，达到赢利目的。而iPhone设备上的iMessage通讯协议据也被破解了，所以很多iPhone用户会收到来自iMessage的垃圾广告。</p>

<p>对于以上提到的问题，开发者可以选择类似 <a href="https://code.google.com/p/protobuf/protobuf">protobuf</a> (google提供的一个开源数据交换格式，其最大的特点是基于二进制，因此比传统的JSON格式要短小得多)之类的二进制通讯协议或者自己实现通讯协议，对于传输的内容进行一定程度的加密，以增加黑客破解协议的难度。下图是我截取的淘宝客户端的通讯数据，可以看到其中的值都不能直观地猜出内容，所以这对于通讯协议是有一定的保护作用。</p>

<p><img src="/images/taobao-protocol.png"></p>

<h2>验证应用内支付的凭证</h2>

<p>iOS应用内支付(IAP)是众多应用赢利的方式，通过先让用户免费试用或试完，然后提供应用内支付来为愿意付费的用户提供更强大的功能，这种模式特别适合不习惯一开始就掏钱的中国用户。但是，由于国内越狱用户的比例比较大，所以我们也需要注意应用内支付环节中的安全问题。</p>

<p>简单来说，越狱后的手机由于没有沙盒作为保护，黑客可以对系统进行任意地修改，所以在支付过程中，苹果返回的已付款成功的凭证可能是伪造的。客户端拿到付款凭证之后，还需要将凭证上传到自己的服务器上，进行二次验证，以保证凭证的真实性。</p>

<p>另外，我们发现越狱用户的手机上，很可能被黑客用中间人攻击技术来劫持支付凭证。这对于黑客有什么好处呢？因为苹果为了保护用户的隐私，支付凭证中并不包含任何用户的帐号信息，所以我们的应用和服务器无法知道这个凭证是谁买的，而只能知道这个凭证是真的还是假的。所以在验证凭证时，哪个帐号发起了验证请求，我们就默认这个凭证是该帐号拥有的。如果黑客将凭证截获，就可以伪装成真实用户来验证凭证或者转手出售获利。</p>

<p>打个比方，这就类似于很多商场的购物卡一样，由于是不记名的，黑客如果将你买的购物卡偷窃然后去刷卡购物，商场是无法简单地区分出来的。</p>

<p>所以，对于应用内支付，开发者除了需要仔细地验证购买凭证外，也需要告知用户在越狱手机上进行支付的风险。</p>

<h1>二、本地文件和数据安全</h1>

<h2>程序文件的安全</h2>

<p>iOS应用大部分的逻辑都是在编译后的二进制文件中，但是由于今年来混合式（Hybrid）编程方式的兴起，很多应用的部分功能也采用内嵌Web浏览器的方式来实现。例如腾讯QQ iOS客户端的内部，就有部分逻辑是用Web方式实现的。由于iOS安装文件其实就是一个zip包，所以我们可以通过解压，看到包内的内容。以下是我解开腾讯QQ客户端，看到的其qqapi.js文件的内容:</p>

<p>``` javascript</p>

<p>iOSQQApi = {</p>

<pre><code>// ...
app: {
    /**
     查询单个应用是否已安装
     @param {String} scheme 比如'mqq'
     @return {Boolean}
     */
    isAppInstalled: function(scheme) {
        return iOSQQApi._invokeClientMethod(
            'app', 'isInstalled', 
            {'scheme':scheme});
    },

    /**
     批量查询指定应用是否已安装
     @param {Array&lt;String&gt;} schemes 
            比如['mqq', 'mqqapi']
     @return {Array&lt;Boolean&gt;}
     */
    isAppInstalledBatch: function(schemes) {
        return iOSQQApi._invokeClientMethod(
            'app','batchIsInstalled', 
            {'schemes':schemes});
    }
},
// ...
</code></pre>

<p>}</p>

<p>```</p>

<p>可以看到，这些文件都有着完整清晰的注释。通过分析这些javascript文件，黑客可以比较轻松地知道其调用逻辑。在越狱手机上，还可以修改这些javascript代码，达到攻击的目的。</p>

<p>笔者也曾经尝试查看支付宝客户端中的彩票功能，通过分析，也可以找到其完整的、带着清晰注释的javascript代码。如下图所示：（注：支付宝现在已经对相应代码进行了加密）</p>

<p><img src="/images/alipay-source.png"></p>

<p>通过将javascript源码进行混淆和加密，可以防止黑客轻易地阅读和篡改相关的逻辑，也可以防止自己的Web端与Native端的通讯协议泄漏。</p>

<h2>本地数据安全</h2>

<p>iOS应用的数据在本地通常保存在本地文件或本地数据库中。如果对本地的数据不进行加密处理，很可能被黑客篡改。以下是一个名为 LepsWorld3 的游戏，打开它的本地文件，可以很容易地找到，它使用了一个名为 ItempLifes的变量保存生命数。如下图所示：</p>

<p><img src="/images/game-data.png"></p>

<p>于是我们就可以简单修改该值，达到修改游戏参数的目的。而在淘宝上，也可以找到许多以此挣钱的商家，如下图所示：</p>

<p><img src="/images/game-data-sell.png"></p>

<p>对于本地的重要数据，我们应该加密存储或者将其保存到 keychain 中，以保证其不被篡改。</p>

<h1>三、源代码安全</h1>

<p>通过file, class-dump, theos, otool等工具，黑客可以分析已经编译之后的二进制程序文件，不过相对于这些工具来说，IDA的威胁最大。</p>

<p><a href="https://www.hex-rays.com/products/ida/">IDA</a>是一个收费的反汇编工具，对于Objective-C代码，它可以常常可以反汇编到可以方便阅读的程度，这对于程序的安全性，也是一个很大的危害。因为通过阅读源码，黑客可以更加方便地分析出应用的通讯协议和数据加密方式。</p>

<p>下图分别示例了一段代码的原始内容，以及通过IDA反汇编之后的结果。可以看到，IDA几乎还原了原本的逻辑，而且可读性也非常高。</p>

<p>原始代码：</p>

<p>``` objc
if ([[VersionAgent sharedInstance] isUpgraded]) {</p>

<pre><code>UpdateMigrationAgent *agent = 
        [[UpdateMigrationAgent alloc] init];
[FileUtils clearCacheDirectory];
[[VersionAgent sharedInstance] saveAppVersion];
</code></pre>

<p>}</p>

<p>```</p>

<p>反汇编后：</p>

<p>```
v6 = <em>objc_msgSend(&amp;OBJC_CLASS</em>__VersionAgent,</p>

<pre><code>               "sharedInstance");
</code></pre>

<p>v7 = objc_retainAutoreleasedReturnValue(v6);
v41 = _objc_msgSend(v7, &ldquo;isUpgraded&rdquo;);
objc_release(v7);
if ( v41 )
{</p>

<pre><code>NSLog(CFSTR("app is upgraded"), v41);
_objc_msgSend(&amp;OBJC_CLASS___FileUtils, 
              "clearCacheDirectory");
v8 = _objc_msgSend(&amp;OBJC_CLASS___VersionAgent,
                   "sharedInstance");
v9 = objc_retainAutoreleasedReturnValue(v8);
_objc_msgSend(v9, "saveAppVersion");
objc_release(v9);
</code></pre>

<p>}
```</p>

<p>反汇编的代码被获得后，由于软件内部逻辑相比汇编代码来说可读性高了很多。黑客可以用来制作软件的注册机，也可以更加方便地破解网络通讯协议，从而制作出机器人（僵尸）帐号。最极端的情况下，黑客可以将反汇编的代码稍加修改，植入木马，然后重新打包发布在一些越狱渠道上，这将对用户产生巨大的危害。</p>

<p>对于IDA这类工具，我们的应对措施就比较少了。除了可以用一些宏来简单混淆类名外，我们也可以将关键的逻辑用纯C实现。例如微信的iOS端的通讯底层，就是用C实现的。这样的方式除了能保证通讯协议安全外，也可以在iOS和Android等多个平台使用同一套底层通讯代码，达到复用的目的。</p>

<h1>总结</h1>

<p>由于移动互联网的快速发展，人们的购物、理财等需求也在移动端出现，这使得移动应用的安全性越来越重要。由于部署在用户终端上，移动应用比服务器应用更容易被攻击，大家也需要在移动应用的网络通讯、本地文件和数据、源代码三方面做好防范，只有这样才能保证应用的安全。</p>

<h1>版权说明</h1>

<p>本文已发表在《程序员》杂志2014年5月刊上，链接为：<a href="http://www.csdn.net/article/2014-04-30/2819573-The-Secret-Of-App-Dev-Security">http://www.csdn.net/article/2014-04-30/2819573-The-Secret-Of-App-Dev-Security</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第10期]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/06/ios-weekly-10/"/>
    <updated>2014-05-06T21:48:24+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/06/ios-weekly-10</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/05/facebook-pop-opensource">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果发布 2014 年第二季度财报，Facebook将神奇动画引擎Pop开源，Objc.io中文翻译站建成，iOS 7.1.1 更新可能造成升级失败等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech2ipo.com/64670">《Facebook 发布应用内深度链接技术：AppLinks》</a>：Facebook 刚刚在 f8 开发者大会上正式发布了 AppLinks 技术。该链接技术允许开发者在任何内容中植入链接，在点击后将用户带到应用内的其他地方，或是另一款应用内、或另一款应用的商城下载页面。<a href="http://vimeo.com/93018959">这里</a>有 AppLinks 技术的介绍视频。</p></li>
<li><p><a href="http://blog.jetbrains.com/objc/2014/04/appcode-3-0-eap-opens-with-an-integrated-ui-designer-and-improved-project-settings/">《AppCode 3.0的改进》</a>：jetbrains公司在其官方博客上介绍了对于AppCode 3.0的改进，他们在EAP中集成了项目设置和UI编辑。使得AppCode对Xcode的依赖性更小。在此之前，iOS工程中的UI编辑必须在Xcode中进行。</p></li>
<li><p><a href="http://geek.csdn.net/news/detail/7534">《Facebook将神奇动画引擎Pop开源》</a>：Facebook 2月发布的新闻类应用Paper，因为其灵动的用户界面和交互，成为近来最令人眼前一亮的移动产品之一，而POP是Paper使用到的动效引擎。</p></li>
<li><p><a href="http://weibo.com/1708947107/B1grIt913?mod=weibotime">iOS 7.1.1 更新，但可能造成升级失败</a>：iOS7.1.1
进一步改进了 Touch ID 的指纹识别，修复了可能影响键盘响应能力的错误，修复了启用 VoiceOver后使用蓝牙键盘时出现的问题。笔者发现非常多朋友的iPhone通过OTA升级iOS 7.1.1失败了，需要连接itunes恢复。他们的手机均未越狱。当然，也有升级成功的，大家小心，升级前一定先备份好资料。</p></li>
<li><p><a href="http://tech.sina.com.cn/it/2014-04-24/05149341652.shtml">《苹果发布 2014 年第二季度财报，收入同比增长 5%，净利润同比增7%》</a>：苹果公司发布了2014财年第二财季业绩。报告显示，苹果公司第二财季营收为456.46亿美元，比去年同期的436.03亿美元增长5%；净利润为102.23亿美元，比去年同期的95.47亿美元增长7%。苹果公司第二财季营收和每股收益均超出华尔街分析师预期，推动其盘后股价大幅上涨逾7%。</p></li>
<li><p><a href="http://money.21cbh.com/2014/4-24/1MMDA2NTVfMTE0NzI1Mg.html">《Facebook第一季度财报：净利润同比增193%》</a>：4月24日Facebook发布了截至3月31日的2014财年第一季度未经审计财报。报告显示，Facebook第一季度营收为25.02亿美元，比去年同期的14.58亿美元增长72%；净利润为6.42亿美元，比去年同期的2.19亿美元增长193%。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://objccn.io/">Objc.io中文翻译站建成</a>：<a href="http://onevcat.com/">@onevcat</a>和<a href="http://weibo.com/fangyixiong?topnav=1&amp;wvr=5&amp;topsug=1">@方一雄</a>、<a href="http://weibo.com/nixzhu">@nixzhu</a>等几十个译者一起努力，完成了objc.io上的所有文章的翻译，这是一个objc.io的完整、准确、优雅的中文翻译版本，为中国 Objective-C 社区带来最佳实践和先进技术。整个过程花费了一个多月。这是值得每一个iOS开发者学习的资料。</p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-26-make-swipeable-table-view-cell-actions-without-going-nuts-scroll-views.md">《制作一个可以滑动操作的 Table View Cell》</a>：Apple 通过 iOS 7 的邮件（Mail）应用介绍了一种新的用户界面方案——向左滑动以显示一个有着多个操作的菜单。本教程将会向你展示如何制作一个这样的 Table View Cell，而不用因嵌套的 Scroll View 陷入困境。</p></li>
<li><p><a href="http://objcio.com/blog/2014/04/25/mastering-the-icloud-document-store/">《精通iCloud文档存储》</a>：即便已经推出了3年，iCloud 文档存储依然是一个充满神秘、误解和抱怨的话题。iCloud 同步经常被批评不可靠且速度慢。虽然在 iCloud 的早期有一些严重的 bug，开发者们还是不得不学习有关文件同步的课程。文件同步事关重大，为应用开发带来了新方向，一个经常被低估的方向，比如进行同步服务相关的合作时，对于处理文件异步更改的需要。
本文会介绍几个创建支持 iCloud 的应用时可能会遇到的一些绊脚石。</p></li>
<li><p><a href="http://www.v2ex.com/t/109496">《关于用 OS X 做网站服务器》</a>：V2EX的作者分享了关于用 OS X 做网站服务器的经验。</p></li>
<li><p><a href="http://ios-blog.co.uk/getting-started/xcode-5-tips-and-tricks/">《Xcode 5 – Tips and tricks》</a>：文章介绍了Xcode 5相关的常用快捷键。</p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-22-ui-activity-viewcontroller.md">《研究 UIActivityViewController》</a>：UIActivityViewController出现于 iOS 6，在应用里为分享和操作数据提供了一个统一的服务接口。作者详细介绍了UIActivityViewController的使用以及如何创建一个自定义 UIActivity。</p></li>
<li><p><a href="http://www.36kr.com/p/211441.html">《小细节大作为：提高iOS访问权限通过率有这几个办法》</a>：Brenden Mulligan是群组照片聚合应用Cluster的创始人之一，兼设计师。作为一名产品设计师和企业家，Brenden的作品包括 OneSheet和ArtistData等。在文章中，Brenden讲述了原生应用Cluster是如何提高iOS访问权限通过率的。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://itunes.apple.com/cn/app/touchcolor/id859727780?mt=8">TouchColor</a>：TouchColor是一个由<a href="http://tw.weibo.com/100mango">@方秋枋</a>开发的优雅简洁，功能完善的取色器。它提供照片取色，照相取色，实时取色三大功能，并且在AppStore上免费提供下载。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/facebook/pop">POP</a>：POP是Paper使用到的动效引擎。</p></li>
<li><p><a href="https://github.com/jerols/PopTut">PopTut</a>：一个使用POP做动效的示例工程。除了示例代码外，作者也提供了<a href="https://www.youtube.com/watch?v=ErJ4FnPa_Qk">视频教程</a>。</p></li>
<li><p><a href="http://wangzz.github.io/blog/2014/04/25/githubyou-xiu-xiang-mu-ios/">《github优秀开源项目大全-iOS》</a>：作者搜集了在github上的一些优秀的开源项目。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
