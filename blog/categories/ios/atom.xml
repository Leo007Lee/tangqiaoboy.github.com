<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2015-01-11T22:36:54+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解读2014之iOS篇：拥抱变化]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/07/ios-2014-summary/"/>
    <updated>2015-01-07T21:22:15+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/07/ios-2014-summary</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/interpretation-of-2014-ios-part-embrace-change">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h2>前言</h2>

<p>对于 iOS 技术领域，2014 年是变化巨大的一年。在硬件上，由于苹果发布了更大尺寸的 iPhone 6 和 iPhone 6 plus，使得 iOS 设备的屏幕适配工作也多了起来。这还不包括全新的 Apple Watch 带来的开发上的变化。在软件上，Swift 语言的推出惊呆了整个业界，从 Objective-C 切换成另一个全新语言的代价是巨大的，但我们也看到了它长远的好处以及苹果对此的决心。除了软硬件外，编程语言、中国区、开发社区在 2014 年也有着巨大变化，我们试着用几个关键词来勾勒出 iOS 技术领域在 2014 年所经历的变化。</p>

<h2>硬件</h2>

<p>苹果在 2014 年推出了 iPhone 6 和 iPhone 6 plus，iOS 设备也进入了大屏时代！虽然包括笔者在内的许多朋友都认为：“Plus 实在太大了”，但是从销售量看， iPhone 6 plus 在初期占据了 <a href="http://tech.163.com/14/1006/08/A7S1AHBN000915BE.html">6 成</a> 的销售量。我本人在实际使用 iPhone 6 plus 几周后，也很快适应了它的屏幕尺寸，现在反而不习惯使用了两年的 iPhone 4s 了。在开发上，iPhone 6 的推出使得 iOS 开发者也开始像 Android 开发者那样，为适配工作担忧。与 Android 开发者不同，iOS 开发在过去多年都是用 “绝对定位” 的方式来放置各种 UI 控件，使用 Autoresizing Mask 就可以轻松搞定 iPhone4 和 iPhone5 屏幕高度的差异问题。但现在不一样了，iOS 开发者需要学习使用 AutoLayout，通过各种 Constraint 来调整 UI 控件，但是很多界面是需要用代码来编写的，所以这方面的开发工作会比较辛苦，好在有 <a href="https://github.com/Masonry/Masonry">Masonry</a> 这一类的开源库来辅助我们做界面开发工作。</p>

<p>iPhone 6 plus 引入的特有的 3x 的图片问题使 UI 设计师的工作量也大大的增加了。另外，以前由于 Android 设备其实太过于分裂，无法对每种屏幕分辨率都做到精致地设计，所以设计师大多只是用 “凑合用” 的思想来实施 Android 应用的适配。这一点从 Android 大屏手机上的应用呈现就能看出来。而现在同样的方式不太可能被严格的苹果以及挑剔的 iPhone 用户所接受，设计师很可能需要为 iPhone 6 plus 做专门的大屏设计，才能获得用户的芳心。</p>

<p>Apple Watch 的推出让适配工作真正地进入了 Hard 模式。优秀的开发者需要在工程中做好代码地复用，才能让底层的逻辑能够同样运行在 Apple Watch 中。不过这方面的工作还只是猜想，我们得等到 Apple Watch 真正面世的时候，才能真正了解到相关的开发工作有多么不同。</p>

<h2>软件</h2>

<p>苹果在 2014 年的全球开发者大会（World Wide Developer Conference，简称 WWDC）上并没有发布任何新的硬件产品，但展示出其在软件上的各种功能改进和整合上的巨大努力。苹果推出了新的 OS X 10.10 操作系统 Yosemite，它吸收了从 iOS 7 开始的扁平化的设计风格，很多改进的细节都可以看到 iOS 系统对于 OS X 的影响。Yosemite 最吸引我的是 handoff 功能。handoff 功能将 Mac 电脑和 iPhone、iPad 的功能进行了深度整合，当你拥有这三个设备时，它们每一个都可以接打电话和收发短信，你在它们任何一个设备上编辑的文档，也可以实时同步到另一个设备上。handoff 并不是苹果的应用独有的功能，苹果将其相关的 API 都开放给了开发者，所以开发者也可以完全开发出支持 handoff 功能的应用。</p>

<p>相对于 Yosemite 带来的整合方面的改进，新版 iOS 8 的改进的重点则是开放。苹果开放了输入法接口，允许第三方提供输入法。苹果也开放了 Touch ID，允许第三方应用获得指纹信息。HomeKit 则为智能硬件开放了不少可以互操作的接口。另外，iOS 8 还新增了 4000 个新的 API，开放了大量底层 API 接口供应用调用。所以对于普通用户而言，iOS 8 新增的可见功能可能是有限的，但是其开放的大量 API 和新 SDK 释放出了巨大的想象空间，相信会产生更多有趣的应用。</p>

<p>对于一个硬件来说，相关的软件是非常重要的，但是苹果却将它的操作系统和 iWork 办公套件完全免费，这显示出苹果对于软件生态圈不同的理解。而微软至今最大的两大收入还是来自它的 Office 和 Windows 系列操作系统。在微软还在发愁他的新版 Wiindows 10 怎么卖出去时，苹果早已不玩这种 1.0 的商业模式游戏了。</p>

<h2>Swift</h2>

<p>苹果的 Objective-C 语言发明于与 C++ 同时期的上世纪 80 年代初，虽然苹果对其进行了很多次改进，但这终究像给应用打补丁一样，不是特别舒服。这次 Swift 的推出，苹果试图用全新的编程语言来提高 OS X 和 iOS 程序员的开发效率。单从语言特性上来看，Swift 吸收了众多现代编程语言的优秀特性，例如类型推断（Type inference）、范型（Generic）、闭包（Closure）、命名空间（namespace），元组（tuple）等，整体语法上也更加简洁。我们也了解到 Swift 是苹果从 4 年前就开始筹划中的事情，可见苹果在长远规划上对于 Swift 语言的重视，相信未来 Swift 会接替更多 Objective-C 原本的地位，所有 iOS 开发者都应该花时间学习这门全新的语言。</p>

<p>苹果这次推出 Swift 也吸引了大量的讨论，其中比较不正确的观点是认为 iOS 开发的门槛因此而降低了。从我和身边的同行对 Swift 的学习和讨论来看，Swift 并不是一门可以简单上手的语言。并且在未来一到两年内，iOS 开发必然会经历同时使用 Objective-C 和 Swift 的过渡阶段。对于 iOS 开发者，除了必须掌握以前的 Objective-C 语言的知识，还需要学习并不简单的 Swift，可见 iOS 开发的门槛不但没有降低，反而提高了不少。</p>

<h2>中国</h2>

<p>苹果是重视中国的，它在大中华区的销售贡献了约 15% 的全球营收。但是从某些方面看，苹果还是不够重视中国的。很多中国用户抱怨的问题，苹果都一直没有解决。我们来看看苹果对于中国区的用户和开发者，还有哪些需要改进的地方。</p>

<p>刚刚提到的 handoff 功能依赖于苹果的 iCloud，但是苹果的 iCloud 存取速度在中国却是非常糟糕的。笔者试图打开一个通过 iCloud 共享的约为 6M 的视频，但是等了 3 分钟才打开。与此同时，国内的各种网盘服务却能提供非常大的免费容量以及非常快的访问速度。</p>

<p>中国的垃圾短信和骚扰电话一直是非常严重的，而 iMessage 免费发送的特点给了垃圾短信发送提供了很好的平台。苹果到现在都没有推出相关的有效避免垃圾短信的办法，只提供了一个用于反馈垃圾短信的邮箱，整个反馈流程也非常繁琐，需要提供发送者邮件，内容，以及相关截图。笔者反馈了数 10 次之后，也没有得到过任何回应。对于骚扰电话，苹果只提供了事后将该电话号码加入黑名单的功能，这使得用户只能是接了骚扰电话后，才能做相应的手工处理。这些问题从技术上要解决没有任何难度，看看 Android 平台就可以看到这方面的问题被非常完美地解决了。但是苹果却不愿意做相关的努力，这只能说明它还不够重视中国用户。</p>

<p>苹果的 App Store 中国区也是比较混乱的，各种刷榜的应用充斥着排行榜的前几名。苹果在这方面应该是做了很多努力的，但是终究还是做得不够。从很多应用的评论中，我们都能看出刷榜的痕迹。由于这方面直接和收入相关，所以我相信苹果还是会尽力改进的。App Store 还有一个问题是支付不太方便，今年苹果和银联合作，不但推出 1 元的应用，而且允许用户使用银联卡来付费，极大地方便了用户购买应用。</p>

<h2>社区、会议和第三方服务</h2>

<p>国外的 iOS 开发社区今年依然发展红火，比较引人注目的是 <a href="http://www.objc.io/">objc.io</a> 。 objc.io 每一期的质量都非常高，所以由知名开发者王巍（onevcat）组织的翻译团队会将每一期文章都翻译成<a href="http://objccn.io/">中文</a>。国内的博客和社区发展相比国外还是比较慢，参与分享 iOS 技术的独立博客相比以往多了很多，但整体质量还有待提高。</p>

<p>移动开发也实实在在地成为了一个重要的技术领域，QCon 和 ArchSummit 每一届都会有专门的移动专题，可见这方面聚焦了开发者大量的关注。</p>

<p>2014 年国内外都涌现出了大量服务于移动开发者的第三方服务。这些第三方服务作为生态圈的一个重要组成部分，将会方便开发者聚焦核心功能，而不用担心基础设施的搭建。</p>

<h2>展望</h2>

<p>展望 2015 年，笔者认为：</p>

<ul>
<li>苹果的 iPhone 将会继续占据高端机市场，但千元左右的 Android 机将会占据其它所有的用户，最终 Android 的用户量将远远大于 iPhone 的用户量，但由于 iPhone 用户的优质属性（付费意愿高），所以各大应用将会在这两大平台都会投入足够的开发力量。如果有人能够比较好的解决代码在 iOS 和 Android 平台的复用性问题，将会很大程度上改变现在的开发模式。</li>
<li>Swift 语言将仍然处于发展阶段，Objective-C 依旧会是 iOS 程序开发的主要语言。更多的开发者将会使用混合开发的方式，同时使用 Objective-C 和 Swift 来开发应用。</li>
<li>国内 iOS 开发社区还会进一步发展，会出现更多的移动开发相关的开源基础设施或第三方服务。</li>
<li>苹果很可能会继续不那么重视中国区用户。iCloud 服务依然糟糕，iMessage 垃圾短信依然泛滥，由于害怕 “侵犯用户隐私 “，骚扰电话还是没有很好的解决办法。但苹果在大中华区的收入会继续增加。</li>
<li>由于 Objective-C 和 Swift 相比 Java 语言没有那么普及，Mac 电脑也没有 Windows 电脑普及，这造成 iOS 学习门槛较高。优秀的 iOS 开发者依然是稀缺资源，相比同等的 Android 开发者，iOS 开发者可以获得更多的收入。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第35期]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/31/ios-weekly-35/"/>
    <updated>2014-12-31T22:03:13+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/31/ios-weekly-35</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/12/developer-favorite-swift-skills">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：90后CEO的开源心得、iOS8 企业应用部署Bug、盘点开发者最喜爱的Swift技巧、iOS开发的一些奇巧淫技等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.cocoachina.com/programmer/20141224/10747.html">《90后CEO的开源心得：Github 2500 star是如何炼成的》</a>：如果你是一名 iOS 开发者同时还是 Github 的重度使用者，那么你多半见过这个项目：PNChart，一个提供带动画的图表控件。截止到目前为止，PNChart 在 Github上 的 star 数已经超过2500，是一个备受开发者喜爱的 iOS 第三方开源库。该开源库的作者周楷雯，在本文中分享了如何打造一个成功的iOS开源项目。</p></li>
<li><p><a href="http://www.36kr.com/p/218161.html">《苹果获反向AirPlay专利，在iPhone上同步播放Apple TV内容》</a>：苹果刚刚获得了美国专利与商标局授予的一项新专利，这项专利可以让内容在便携式设备上同步显示，即可以让 Apple TV 这样位置固定的设备上播放的内容，实时同步到 iPhone、iPad 等 iOS 设备上。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://thierry-xing.iteye.com/blog/2119241">《iOS8 企业应用部署Bug》</a>：使用iOS企业部署（In-House Distribution）方式进行应用升级时，在 iOS8 下无法成功，删除应用再重新安装也不行。如果你也遇到了这个问题，那么可以看看作者是如何解决的。需要说明的是，该Bug在 iOS 8.1.2 更新中得到了修复。</p></li>
<li><p><a href="http://www.csdn.net/article/2014-12-25/2823312-favorite-swift-tips-and-tricks">《盘点开发者最喜爱的Swift技巧》</a>：Swift 发布才半年左右，却已深得众多开发者的青睐，也有了许多学习资源、项目和开发工具。在本文中，来自objc.io、LinkedIn等各个公司的软件工程师及资深开发者总结了自己在接触 Swift 过程中最喜爱的贴士与技巧。</p></li>
<li><p><a href="http://www.jianshu.com/p/50b63a221f09">《iOS开发的一些奇巧淫技》</a>：作者分享了一些 iOS 开发中涉及的小技巧。</p></li>
<li><p><a href="http://blog.nswebfrog.com/2014/12/22/swift-script/#541841-tsina-1-77759-d0fc3b3b40d03e6b36d60be81253e42e">《Swift 脚本编写》</a>：作为苹果新一代的编程语言，Swift 不仅可以用来开发 iOS 应用，还可以用来编写脚本，来完成 OS X 下的一些自动化的工作。终于可以用我们熟悉的语言来写自动化脚本了，想想是不是就觉得心里有点小激动呢^_^。本文从一个Hello World脚本开始，介绍了如何用Swift完成脚本编写工作。</p></li>
<li><p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=645">《一步一步教你写classdump》</a>：最近刚读完《Mac OS X and iOS Internals》的前几章，也想练练手，写tweak，app也烦了，基于上述原因就试着写了这个demo。虽然这些功能都可以通过 otool 和 classdump 去实现，但也算是对 macho 文件格式的一种学习吧。</p></li>
<li><p><a href="https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques">《iOS-Core-Animation-Advanced-Techniques》</a>：一本不错的翻译图书，介绍了关于Core Animation的各方面的知识。</p></li>
<li><p><a href="https://github.com/ipader/SwiftGuide">《Swift语言指南》</a>：这份指南汇集了 Swift 语言主流学习资源，并以开发者的视角整理编排。</p></li>
<li><p><a href="http://imtx.me/archives/1917.html">《Swift 项目使用 CoreData 可能会碰到的 32 位系统问题》</a>：最近在项目中偶然发现了一个问题，那就是 Swift 的 CoreData 在 32 位系统下与 64 位系统下表现不一致的问题。简单的说：如果你的 CoreData 模型有一个声明为 Boolean 的 Attribute，并且在代码中使用 NSNumber 来包装（而不是Bool）的话，很可能会遇到这个问题。作者介绍了该问题的细节和解决办法。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/rsms/peertalk">peertalk</a>：peertalk 是一个支持 iOS 与 Mac 通过 USB 相互通讯的开源库。 Duet Display 基于此实现了将 Mac 界面呈现到 iOS 设备上。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第34期]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/21/ios-weekly-34/"/>
    <updated>2014-12-21T19:56:06+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/21/ios-weekly-34</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/12/ios-code-android-app">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：浅谈 iOS 版本号、UIScrollView 实践经验、设计优雅的移动游戏、如何把iOS代码编译为Android应用等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://tech.sina.com.cn/mobile/n/n/2014-12-12/doc-iavxeafr6871711.shtml">《iPhone 6/6 Plus中国销量曝光：单月销量650万》</a>：据iSuppli Corp.中国研究总监王阳爆料，iPhone 6和iPhone 6 Plus在国内受欢迎的情况大大超过预期，苹果在中国的单月销量在11月超过了650万台，全年在中国的销量将超过4000万台。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://vombat.tumblr.com/post/60530544401/date-parsing-performance-on-ios-nsdateformatter">《 Date parsing performance on iOS》</a>：文章介绍了一个关于格式化时间的”黑科技“，作者使用 sqlite 替换 NSDateFormatter，提高了16倍的转换效率。</p></li>
<li><p><a href="http://club.fir.im/topic/548c09a1f6de25850440afd7">《浅谈 iOS 版本号》</a>：FIR.im 一直在尽量兼容不同使用习惯的版本号形式, 但是在使用中我们发现好多开发者对怎么更好的用版本号来标示应用很陌生。这是篇基础文章，简单介绍 iOS 的版本号。</p></li>
<li><p><a href="http://tech.glowing.com/cn/practice-in-uiscrollview/">《UIScrollView 实践经验》</a>：UIScrollView（包括它的子类 UITableView 和 UICollectionView）是 iOS 开发中最常用也是最有意思的 UI 组件，大部分 App 的核心界面都是基于三者之一或三者的组合实现。UIScrollView 是 UIKit 中为数不多能响应滑动手势的 view，相比自己用 UIPanGestureRecognizer 实现一些基于滑动手势的效果，用 UIScrollView 的优势在于 bounce 和 decelerate 等特性可以让 App 的用户体验与 iOS 系统的用户体验保持一致。本文通过一些实例讲解 UIScrollView 的特性和实际使用中的经验。</p></li>
<li><p><a href="http://objccn.io/issue-18-1/">《设计优雅的移动游戏》</a>：设计手机游戏是一个有趣的主意，理论上，做智能手机或者平板电脑游戏与其他平台游戏设计没有根本的不同。手机游戏在传统系统属性上与其他类型以及平台极其相似，无论你想创造一个开心农场，使命召唤还是国际象棋。但实践中，想要创建一个成功的手机游戏完全是另一回事。有很多其他的顾虑，从市场饱和及难以被发现，到玩法定型及设备的尺寸因素等。由于这些原因，作为一个设计师来说创造一个优秀的手机游戏就像在玩“困难模式”。文章介绍了手机游戏的两个特征：游戏时长和交互方法，另外介绍了几种适用于移动平台的系统设计方法。本文译者：<a href="http://diwu.me">@唯木念</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-2/">《Metal》</a>：Metal 是针对 iPhone 和 iPad 中 GPU 编程的高度优化的框架。其名字来源是因为 Metal 是 iOS 平台中最底层的图形框架 (意指 &ldquo;最接近硬件&rdquo;)。该框架被设计用来实现两个目标: 3D 图形渲染和并行计算。这两者有很多共同点。它们都在数量庞大的数据上并行运行特殊的代码，并可以在 GPU 上执行。本文介绍了 Metal 的好处以及使用基础。本文译者：migrant。</p></li>
<li><p><a href="http://objccn.io/issue-18-3/">《Scene Kit》</a>：在 WWDC 2012，Apple 向 OS X 开发者们介绍了 Scene Kit，这个 Cocoa 下的 3D 渲染框架。在第一版通用 3D 渲染器发布后，一年内又陆续增加了像 shader (着色器) 修改器、节点约束、骨骼动画等几个强大的特性 (随 Mavericks 发布)。今年，Scene Kit 变的更加强大，支持了粒子效果、物理引擎、脚本事件以及多通道分层渲染等多种技术，而且，对于很多人来说更关键的是，它终于可以在 iOS 中使用了。本文介绍了Scene Kit的概要知识，以及如何使用它来写游戏。本文译者：<a href="http://blog.sunnyxx.com">孙源</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-4/">《游戏中的多点互联》</a>：多点互联是苹果的一个传输无关的网络框架，提供网络的发现、创建和通信功能。MPC 的关键用途在于创建临时网络中的点对点连接，而不需要考虑天气、无线、蓝牙等各种因素，只需要有个人网络就行。一旦创建之后，各个节点可以安全地共享消息、数据和文件资源。大部分的游戏都更适合用 GameKit 开发，它有很多直接使用 MPC 实现的游戏相关的封装。不过作为 MPC 的进阶手册，本文主要涉及 MPC 的各种使用技巧。本文译者：<a href="http://blog.callmewhy.com">汪海洋</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-5/">《虚拟音域 &ndash; 声音设计的艺术》</a>：由于声音占据我们日常生活的很大部分，所以声音在游戏开发中也越来越重要。然而，要实现完全身临其境的虚拟现实，最大的挑战之一就是设计逼真的声音环境。如果你身处一个虚拟森林中，但却听不到树叶的沙沙声，也听不到昆虫的鸣叫声，你就不会感觉到真实。在某些方面，音效设计是吃力不讨好的活计。你什么都正确的话，没人会注意到这些，但是一旦你做错了什么，人们百分之百会注意到。这是一项痛苦，细节导向，但又几乎被忽略的工作。但是，当你捕捉到一种美妙的声音体验或真实的声音环境时，你会感觉到一种乐趣，这种乐趣很大程度上弥补了工作辛苦、收获甚少的不足。本文介绍了音效各方面的知识，包括：记录声音、麦克风、数码音频软件、拟音、音频滤波器、混合音效等知识。本文译者：<a href="http://blog.sina.com.cn/u/1867019351">树叶</a></p></li>
<li><p><a href="http://madebymany.com/blog/continuous-integration-for-ios-development">《Continuous Integration for iOS Development》</a>：文章介绍了如何基于Xcode的Bot做持续集成。</p></li>
<li><p><a href="http://nshipster.com/nsundomanager/">《NSUndo​Manager》</a>：本文介绍了 NSUndoManager 的使用。NSUndoManager 可以用来做一些撤销操作。</p></li>
<li><p><a href="http://www.jianshu.com/p/6313025349a9">《视频特效制作》</a>：文章介绍了一些视频特效制作方法，包括给视频添加边框、给视频添加水印、给视频添加动画、做出3D效果、视频推进效果等技术细节。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://boolan.com/lecture/1000001076#0-tsina-1-39436-397232819ff9a47a7b7e80a40613cfe1">《如何把iOS代码编译为Android应用》</a>：OurCoders.com站长 <a href="http://www.weibo.com/tinyfool?from=feed&amp;loc=nickname">@tinyfool</a>介绍了他们通过将Objective-C底层移植到Android平台，最终把iOS代码编译为Android应用的过程。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/mutualmobile/MMWormhole">MMWormhole</a>：MMWormhole 是一个方便开发者在 iOS 应用与 iOS extensions 之间交换数据的开源框架。</p></li>
<li><p><a href="https://github.com/rickytan/RTImageAssets">RTImageAssets</a>：RTImageAssets 是一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 <code>Ctrl+Shift+A</code> 即可自动生成两张低清的补全空位。当然，如果你对图片质量要求不高的话，你也可以从 @2x 的图生成 @3x 版本。</p></li>
<li><p><a href="https://github.com/poolqf/PQFCustomLoaders">PQFCustomLoaders</a>：PQFCustomLoaders 提供了高质量的、定制化的加载进度条。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《iOS开发进阶》即将出版]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/07/about-ios-pro-book/"/>
    <updated>2014-12-07T19:05:52+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/07/about-ios-pro-book</id>
    <content type="html"><![CDATA[<p>关注我博客的人也许发现了，除了每周一期的InfoQ约稿的《iOS开发周报》，我已经很久没有写iOS方面的原创文章了。这主要的原因是：我把周末的时间都用来筹划一本iOS方面的书，这本书叫做《iOS开发进阶》。下面我就给大家介绍一下此书。</p>

<p><img src="https://raw.githubusercontent.com/tangqiaoboy/iOS-Pro/master/BookCover.jpg" alt="" /></p>

<h3>我的构思</h3>

<p>还记得几年前，我在学习iOS开发入门时，发现同行间的交流环境也比较差，自己提高的过程很慢。在出版物方面，我也一直苦于没有找到一本iOS开发进阶方面的图书。随着移动互联网的快速发展，移动开发的人才也慢慢增多，现在同行间的交流环境相比以前好了很多。但是在国内，仍然没有一本原创的iOS进阶方面的图书出现。因此，我萌生了写作的想法。</p>

<p>写作最开始首先是构思的过程，我回顾自己维护多年的iOS开发博客，从里面100多篇关于iOS开发的原创文章中，整理出来涉及iOS开发进阶提高的3个主要的方向：工具、实践、理论。</p>

<p>于是，我围绕着上述的三个方向，把以前的文章作为基础，再进一步完善相关内容，让各自零散的知识点能够衔接起来，成为一个完整的体系。整个写作的过程是痛并快乐着的，为了保证知识完整，最终书稿中有超过50%是新增加的内容。</p>

<p>从知识的难度上，工具、实践、理论这三大部分的难度逐步提高，以保证读者能慢慢适应。而三大部分内容其实各自独立，有经验的读者也可以按兴趣点或具体需求，跳跃性地阅读此书。</p>

<h3>定位</h3>

<p>《iOS开发进阶》定位于帮助那些iOS开发刚刚入门的同行快速提高自己的水平，适用于至少有3个月以上iOS开发经验的读者。不适合没有任何iOS开发基础的读者阅读。</p>

<p>对于iOS熟练开发者，此书也能补充其知识点的可能的盲区，使其相关知识体系更为完善。</p>

<h3>内容介绍</h3>

<p>《iOS开发进阶》分工具、实践、理论三大部分：</p>

<ul>
<li>第一部分介绍iOS开发的常用工具</li>
<li>第二部分介绍iOS开发中的一些常见的实践经验</li>
<li>第三部分介绍iOS开发中涉及的原理。</li>
</ul>


<p>如果把成为iOS开发高手比作武林小说中的高手修炼的话，工具、实践和理论的学习就分别对应兵器，招式和内功的修炼。此书希望通过这三方面的综合讲解，以全面提高开发者的技能水平。</p>

<p>好的工具可以使得开发效率成倍的增长。此书第一大部分介绍了iOS开发中的各种工具或服务，通过使用它们，可以极大地方便我们的日常开发和维护，提高开发效率。</p>

<p>一个入门之后的iOS开发者，需要的是更深入的实际开发经验的分享。此书第二部分选择了iOS开发几个常见的实际场景，进一步介绍各种iOS开发进阶的实战技巧。对于一些比较零散的知识技巧，作者也在实战小技巧集锦中进行了介绍。</p>

<p>如果把前两部分比作工具和招式的修炼的话，此书第三部分则是内功的修炼。在第三部分中，此书详细分析了iOS开发涉及的语言对象模型，从而能够帮助读者深入理解语言的各种特性和限制。</p>

<h3>出版时间</h3>

<p>《iOS开发进阶》计划在本月下旬出版，定价65元。但是你也知道，图书一般都是会打折出售的，我估计在京东上应该能够以8折左右的价格购买到它。</p>

<h3>一些评价</h3>

<p>我邀请了一些朋友审阅了《iOS开发进阶》初稿，他们的评价如下：</p>

<h4>OurCoders站长，资深iOS开发者 <a href="http://www.weibo.com/u/1400229064?topnav=1&amp;wvr=6&amp;topsug=1">tinyfool</a>:</h4>

<blockquote><p>2008年苹果发布第一代iOS SDK至今，已经有6个年头，整个移动开发的热潮也5、6年了，虽时有人说热潮将尽，但人才市场里iOS开发者仍旧非常短缺。特别短缺的是专业的优秀的iOS开发者，在各种工具无比先进的年代，一个优秀的开发者比十个一般的开发者都更有价值，也可以获得相应的回报。</p>

<p>我一直在说，每一个已经在行业里面的开发者，不应该满足于自己是一个可以干活的人，而应该有所追求，要变成行业的佼佼者，这不仅是因为我们都想有更高的收入，而且人本身就该有追求，特别是当你处在这个迅速变化，生机勃勃的行业中。</p>

<p>这本书的作者唐巧在我心中，本身就是我们这个行业中，非常优秀的开发者。但是更值得称赞的是，他提供了这么一本书，让我们也有机会变成更专业的，更优秀的开发者，善莫大焉。</p></blockquote>

<h4>objccn.io创始人、《Swifter》作者 王巍(<a href="http://www.weibo.com/u/2210132365?topnav=1&amp;wvr=6&amp;topsug=1">onevcat</a>)：</h4>

<blockquote><p>作为一本面向中高级 iOS 开发者的书籍，《iOS开发进阶》一书汇总了很多进阶级开发时所常用和必备的知识。阅读本书不但能帮你借助各类工具大幅提升开发效率，也能加深对 iOS 及 Objective-C 背后机制的理解。如果你想在 iOS 开发的道路上百尺竿头，更进一步的话，这本凝聚了作者多年开发实战经验的进阶级图书将是你不可错过的伙伴！</p></blockquote>

<h4>微信iOS客户端团队负责人 lylechen</h4>

<blockquote><p>唐巧是国内较早从事iOS开发的资深工程师，并在个人博客、InfoQ、公众号等持续更新技术文章，我们也曾邀请他给微信iOS团队分享相关经验。目前市面上缺乏书籍对Objective-C高级特性、Xcode插件等做全面剖析和整理，《iOS开发进阶》很好地填充了此处的空白，相信对广大iOS开发者会有很好的帮助。</p></blockquote>

<h4>网易新闻客户端技术负责人 王聪(<a href="http://www.weibo.com/u/1640364052?topnav=1&amp;wvr=6&amp;topsug=1">robaggio</a>)</h4>

<blockquote><p>本人有幸曾和作者共事，当时他还负责微博后台研发。4年后唐巧转为iOS开发，并成为国内资深专家，主持研发的App也深受市场好评，作者的工作经历本身就是一次完美的『iOS开发进阶』。如果你刚刚提交了第一款AppStore应用，那本书的第一部分定会让你惊叹原来有这么多高效的工具可以帮你；如果你已有一两年iOS开发经验，那你一定会对本书第二部分的各种实战技巧相见恨晚；本书最后部分的底层原理是你成为资深工程师的必备课程。推荐给所有想『进阶』自己的开发者！</p></blockquote>

<p>另外，<a href="http://book.douban.com/subject/25826578/">《MacTalk人生元编程》</a>的作者<a href="http://www.weibo.com/u/1406320502?topnav=1&amp;wvr=6&amp;topsug=1">池建强</a>为本书写了非常精彩的推荐序，光是序言的标题《人生如长跑，成长如进阶》就让我觉得既富有哲理，“进阶”二字又和书名相呼应。但我决定暂不把序言放到网上，给读者一些神秘感。</p>

<h3>一些感悟</h3>

<p>虽然已经有100多篇原创博文作为基础，但是整个写作过程我丝毫感受不到轻松。一方面是由于创业，自己的时间有限，写作断断续续。另一方面，由于自己在微博和微信上被不少同行关注，我自己也有很大的压力想把这本书写得尽量好一些。</p>

<p>最后我看着书稿，虽然觉得还可以写得更多一些，但是就像创业一样，任何事情都需要有一个阶段性成果。我相信当前的内容是足够“干货”的，我也能保证市面上没有第二本相似内容的图书，所以还是想尽快让读者看到这份作品。</p>

<p>希望本书能帮助大家进阶成为 iOS 大牛！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第33期]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/01/ios-weekly-33/"/>
    <updated>2014-12-01T21:31:30+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/01/ios-weekly-33</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/12/google-inbox-reuse-code">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Google Inbox 是如何跨平台重用代码的、iOS8.1.1系统被越狱、SizeClass 和AutoLayout教程等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/it/apple/2014-11-29/05179836762.shtml">《乔布斯去世后仍获141项专利》</a>：据《麻省理工技术评论》称，尽管苹果公司联合创始人史蒂夫·乔布斯过世已三年有余，但直到今天仍陆续有新的专利归于他名下。截至目前已被授予乔布斯的专利总数共有458项。</p></li>
<li><p><a href="http://tech.sina.com.cn/t/2014-11-27/doc-iavxeafr5326713.shtml">《iPhone 6在俄售价提高25%》</a>：近日16G版iPhone 6在俄罗斯官网上的售价提高了25%，从31990卢布提价至39990卢布(约5215元人民币)。此前，俄罗斯的iPhone 6售价是全欧洲最低，因此经常有特地去俄罗斯购买iPhone 6的游客。</p></li>
<li><p><a href="http://tech.sina.com.cn/t/2014-11-30/doc-icczmvun0757922.shtml">《iOS8.1.1系统被越狱》</a>：某团队正式对外发布了iOS 8.1.1完美越狱工具，支持 iOS 8.1.1 版本。</p></li>
<li><p><a href="http://coolshell.cn/articles/12136.html">《Google Inbox 是如何跨平台重用代码的？》</a>：开发一个移动应用在当下并不是一件容易的事情。如果想要获得最多的用户，你的应用通常需要覆盖 iOS, Android, 和 Web 三大平台。这就意味着同一个应用需要开发三个版本，使用 Objective-C 或者 Swift 开发 iOS 版本，使用 Java 开发 Android 版本，使用 JavaScript/CSS/HTML5 开发 Web 版本。工作量增大的同时也意味着有更多的 bug 需要修复。本文介绍了 Google 在发布 Google Inbox 时，使用 J2Objc 实现了70%的代码跨平台复用。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://limboy.me/ios/2014/11/28/facebook-app-headers.html">《读 Facebook App 头文件的一些收获》</a>：最近在看一些 App 架构相关的文章，也看了 Facebook 分享的两个不同时期的架构（2013 和 2014），于是就想一窥 Facebook App 的头文件，看看会不会有更多的收获，确实有，还不少。作者分享了从头文件中获取到的一些信息。</p></li>
<li><p><a href="http://www.jianshu.com/p/3d6b2341fd83">《SizeClass 和AutoLayout教程3》</a>：文章翻译自《iOS8 by tutorials》的第一章，以开发一个天气应用为例子，介绍了SizeClass 和AutoLayout相关知识。译者：@<a href="http://weibo.com/1438670852/profile?topnav=1&amp;wvr=6">叶孤城___</a>。</p></li>
<li><p><a href="http://www.jianshu.com/p/e72e957497b3">《SizeClasss和AutoLayout教程4》</a>：文章翻译自《iOS8 by tutorials》的第一章，介绍了如何在不同的 SizeClass 给同一个label设定不同的字体大小和样式。译者：@<a href="http://weibo.com/1438670852/profile?topnav=1&amp;wvr=6">叶孤城___</a>。</p></li>
<li><p><a href="http://www.jianshu.com/p/85148630ec9c">《如何做出炫酷的卡片动画1》</a>：作者介绍了有关卡片动画的研究和实现。</p></li>
<li><p><a href="http://chun.tips/blog/2014/11/19/zou-jin-watchkit-framework/">《走进 WatchKit Framework》</a>：作者整理了关于 WatchKit Framework API的知识点。</p></li>
<li><p><a href="http://chun.tips/blog/2014/11/28/core-data-ban-ben-qian-yi-jing-yan-zong-jie/">《Core Data 版本迁移经验总结》</a>：大家在学习和使用Core Data过程中，第一次进行版本迁移的经历一定是记忆犹新，至少我是这样的，XD。弄的不好，就会搞出一些由于迁移过程中数据模型出错导致的Crash。作者在本文中总结了一下Core Data版本迁移过程中的经验。</p></li>
<li><p><a href="http://www.raywenderlich.com/85080/beginning-alamofire-tutorial">《Beginning Alamofire Tutorial》</a>：Alamofire 是 AFNetworking 的作者 Mattt Thompson，用 Swift 实现的网络基础库。本文介绍了其基本的使用方法。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://www.imooc.com/view/242">《一起来做价值百万的Apple Watch App：分歧终端机》</a>：视频展示了如何使用WatchKit，如何通过MVC的绑定来处理用户事件，如何制作动画的功能。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/victorjiang/MobileDataSwitch">MobileDataSwitch</a>：MobileDataSwitch 使用 CoreTelephony 中的私有接口，切换移动网络开关。作者还添加了App Extensions支持，可以在下拉通知 Today 中增加快速设置开关。</p></li>
<li><p><a href="https://github.com/tapwork/HeapInspector-for-iOS">HeapInspector</a>：HeapInspector是一个用于检测应用中的内存泄漏的开源调试工具。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
