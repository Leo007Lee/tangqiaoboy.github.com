<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2012-03-18T22:34:00+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iPhone开发常问的十个问题(2012年3月版)]]></title>
    <link href="http://blog.devtang.com/blog/2012/03/15/10-most-common-questions-on-stackoverflow-201203/"/>
    <updated>2012-03-15T22:04:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/03/15/10-most-common-questions-on-stackoverflow-201203</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>今天去stackoverflow.com上看了一下iPhone标签下排名最高的10个问题，将它们整理出来，希望这些常见问题能帮到一些iPhone开发的初学者。本来想把答案也翻译过来的，后来发现答案资料通常都比较复杂，翻译起来太麻烦。所以大家还是看英文的答案吧，我只顺带用中文总结一下答案。</p>

<!-- more -->


<h3>问题一: <a href="http://stackoverflow.com/questions/1939/how-to-articles-for-iphone-development-and-objective-c">有哪些iPhone开发和Objective-C的入门资料</a></h3>

<p>这个确实是最常问的问题了。对于我个人来说，入门时所看的资料主要是《From C++ to Objective-c》和《iPhone开发基础教程》，另外，我也把stanford的iphone视频课程看完了，链接是：<a href="http://www.stanford.edu/class/cs193p/cgi-bin/index.php">http://www.stanford.edu/class/cs193p/cgi-bin/index.php</a></p>

<p>个人体会是边学边做，上手会比较快。编程这东西，不自己上手做做，没感觉。另外，如果入门之后想提高的话，我觉得还是需要把苹果每年的WWDC视频都下载下来看看，里面讲的东西还是非常有用的, 链接是: <a href="http://developer.apple.com/WWDC/">http://developer.apple.com/WWDC/</a></p>

<h3>问题二: <a href="http://stackoverflow.com/questions/113547/iphone-development-on-windows">如何在Windows中进行iPhone开发</a></h3>

<p>大家还是把Windows想太全能了。至少在开发这一块上，Windows对于程序员来说，还是相当不友好的。这一点在使用Mac系统后，差别一下子就体会到了。就比如说git，在Windows下使用就有很多问题。另外话说回来，Mac机也不是什么都好，在中国，Mac系统相关的国内软件相当少，Mac下的游戏也相对Windows少很多，如果你想用Mac机来娱乐的话，会比较受限制。</p>

<h3>问题三: <a href="http://stackoverflow.com/questions/392464/any-base64-library-on-iphone-sdk">有哪些基于iPhone的base64编码的库</a></h3>

<p>从这个问题的答案中，我选了一个我个人觉得比较好用的Base64编码库，放到我的Xcode Tool中了。地址是：<a href="https://github.com/tangqiaoboy/xcode_tool/tree/master/Encoding">https://github.com/tangqiaoboy/xcode_tool/tree/master/Encoding</a>。</p>

<h3>问题四: <a href="http://stackoverflow.com/questions/1083701/how-to-check-for-an-active-internet-connection-on-iphone-sdk">如何判断当前iPhone是否联网</a></h3>

<p>最佳的答案是用苹果提供的Reachability类。详细的使用方式大家自己看答案吧，写得很清楚。</p>

<h3>问题五: <a href="http://stackoverflow.com/questions/3889634/fast-and-lean-pdf-viewer-for-iphone-ipad-ios-tips-and-hints">如何做一个快速并且轻量级的PDF阅读器</a></h3>

<p>我暂时没这个需求，就没有详细看答案。</p>

<h3>问题六: <a href="http://stackoverflow.com/questions/2774343/how-do-i-associate-file-types-with-an-iphone-application">如何让我的app支持打开一种格式的文件</a></h3>

<p>在iPhone 3.2以上系统中，使用URL schemes即可完成这个需求。详细见答案。</p>

<h3>问题七: <a href="http://stackoverflow.com/questions/1126726/how-to-make-a-uitextfield-move-up-when-keyboard-is-present">当键盘出现的时候，如何让UITextField自动上移</a></h3>

<p>对于iPhone界面控件的操作应该算是开发中必备的能力。键盘出现的时候上移相关的控件算是常见的需求，但是从这么多人问这个问题就可以看出，还是有很多人对这些需求的实现方式有疑问。</p>

<p>对于这个问题，主要是通过增加对键盘出现和消失的相应的Notification，然后在键盘出现和消息的时候，通过设置相关控件的frame来实现。相关代码如下，来源自stackoverflow。</p>

<p>``` objc
-(void)textFieldDidBeginEditing:(UITextField *)sender
{</p>

<pre><code>if ([sender isEqual:_textField])
{
    //move the main view, so that the keyboard does not hide it.
    if  (self.view.frame.origin.y &gt;= 0)
    {
        [self setViewMovedUp:YES];
    }
}
</code></pre>

<p>}</p>

<p>//method to move the view up/down whenever the keyboard is shown/dismissed
-(void)setViewMovedUp:(BOOL)movedUp
{</p>

<pre><code>[UIView beginAnimations:nil context:NULL];
[UIView setAnimationDuration:0.5]; // if you want to slide up the view

CGRect rect = self.view.frame;
if (movedUp)
{
    // 1. move the view's origin up so that the text field that will be hidden come above the keyboard 
    // 2. increase the size of the view so that the area behind the keyboard is covered up.
    rect.origin.y -= kOFFSET_FOR_KEYBOARD;
    rect.size.height += kOFFSET_FOR_KEYBOARD;
}
else
{
    // revert back to the normal state.
    rect.origin.y += kOFFSET_FOR_KEYBOARD;
    rect.size.height -= kOFFSET_FOR_KEYBOARD;
}
self.view.frame = rect;

[UIView commitAnimations];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)keyboardWillShow:(NSNotification *)notif
{
  //keyboard will be shown now. depending for which textfield is active, move up or move down the view appropriately</p>

<p>  if ([_textField isFirstResponder] &amp;&amp; self.view.frame.origin.y >= 0)
  {</p>

<pre><code>  [self setViewMovedUp:YES];
</code></pre>

  }
  else if (![_textField isFirstResponder] &amp;&amp; self.view.frame.origin.y &lt; 0)
  {

<pre><code>  [self setViewMovedUp:NO];
</code></pre>

<p>  }
}</p></li>
<li><p>(void)viewWillAppear:(BOOL)animated
{
  // register for keyboard notifications
  [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:)</p>

<pre><code>                                           name:UIKeyboardWillShowNotification object:self.view.window]; 
</code></pre>

<p>}</p></li>
<li><p>(void)viewWillDisappear:(BOOL)animated
{
   // unregister for keyboard notifications while not visible.
  [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];
}
```</p></li>
</ul>


<h3>问题八: <a href="http://stackoverflow.com/questions/1282830/uiimagepickercontroller-uiimage-memory-and-more">有关UIImagePickerController, Image, Memory的问题和答案整理</a></h3>

<p>这个其实是一个相关问题的汇总贴。其中对于UIImage的操作示例挺有用处。做iPhone开发，总是会遇到一些图象处理相关的东西，能够从这儿积累一些相应的知识，到真正自己需要的时候帮助就大了。</p>

<h3>问题九: <a href="http://stackoverflow.com/questions/805547/how-to-sort-an-nsmutablearray-with-custom-objects-in-it">如何对包含自定义元素类型的NSMutableArray排序</a></h3>

<p>答案讨论了各种方法，下面是其中提到的最简单的方法：定义一个比较用的selector</p>

<p>``` objc
- (NSComparisonResult)compare:(Person *)otherObject {</p>

<pre><code>return [self.birthDate compare:otherObject.birthDate];
</code></pre>

<p>}</p>

<p>NSArray *sortedArray;
sortedArray = [drinkDetails sortedArrayUsingSelector:@selector(compare:)];
```</p>

<h3>问题十: <a href="http://stackoverflow.com/questions/360751/can-i-embed-a-custom-font-in-an-iphone-application">如何在iPhone中使用自定义字体</a></h3>

<p>答案讨论了在iOS3.2以前及以后的做法，现在都5.1了，估计支持3.2以前的app很少了吧。所以我把iOS3.2以后的办法附在下面。简单来说，就是iOS3.2苹果支持自定义字体，只需要在Info.plist文件中设置UIAppFonts相关的信息即可。步骤如下：</p>

<ol>
<li>将自定义字体加到你的工程资源文件中</li>
<li>在 info.plist 文件中增加一名为 UIAppFonts 的key</li>
<li>将这个key修改成array</li>
<li>将你用到的所有字体的名字，作为这个array的值，一项一项填进去（包括扩展名）</li>
<li>保存 info.plist</li>
<li>现在就可以在代码中直接用[UIFont fontWithName:@”CustomFontName” size:12]来取得你自定义的字体了。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode4使用技巧]]></title>
    <link href="http://blog.devtang.com/blog/2012/03/10/xcode4-tips/"/>
    <updated>2012-03-10T20:42:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/03/10/xcode4-tips</id>
    <content type="html"><![CDATA[<p>使用xcode4也有一段时间了，今天整理了一下xcode4的一些使用技巧，在这里分享给大家。</p>

<!-- more -->


<h3>设置作者</h3>

<p>这里所指的作者就是每个源文件头部注释中的“Created by xxx"中的作者名。
我很长一段时间不知道应该在哪里设置它。后来终于找到了。</p>

<p>原来这个作者名是来自”地址薄“这个程序中”我“的姓名。在sportlight中输入”地“即可找到这个程序。如下图所示：</p>

<p><img src="/images/xcode-set-author-name.jpg"></p>

<h3>设置公司（组织）</h3>

<p>这里所指的公司也是指源文件头部注释中的”Copyright (c) xxx"中的公司名字。这个相对好找一些。
点击工程，在右边的工具栏中就可以找到"Organization"这一项。</p>

<h3>模拟器</h3>

<p>iOS模拟器也算是xcode的一部分。在刚开始使用时，不知道如何把照片导入到模拟器中。后来在网上搜到了方法：
将照片拖到iOS模拟器中，iOS模拟器会用safari打开该图片，然后在safari中长按该图，就会弹出菜单，选择“保存到相册”即可。</p>

<p>另外，模拟器也有一些快捷键，我常用的是 cmd + 左/右 来调整Orientation。另外，如果是iPad模拟器，可以按cmd + 1使其变成100%的大小。还有cmd + s可以将模拟器截图。</p>

<h3>获得模拟器中的程序数据</h3>

<p>其实模拟器中的程序存储在：/yourHome/Library/Application Support/iPhone Simulator/5.0/Applications 目录下，你可以直接进去找。</p>

<p>另外，如果要删除所安装的程序，也可以直接将Applications目录下的文件夹删掉，这比在模拟器中删更方便。</p>

<h3>安装旧版本的模拟器</h3>

<p>在xcode中，只会带最新版的模拟器，虽然有些模拟器可以在设置里面下载，但是更老的版本就无法在xcode的设置页下载了。</p>

<p>这个问题的解决办法是把以前的xcode和对应的模拟器装上，然后将模拟器复制或链接到最新的xcode目录下，代码如下：</p>

<p><code>bash
cd /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs
sudo ln -s /Developer-3.2.5/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.0.sdk .
sudo ln -s /Developer-3.2.5/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.1.sdk .
</code></p>

<p>以前的xcode可以从<a href="http://tangqiaoboy.blog.163.com/blog/static/116114258201191323919494/">以下地址</a>下载到(需要开发者账号),建议大家每次安装新xcode的时候，把模拟器都备份一下，安装完再恢复回来，这样就不用这么每次折腾了。</p>

<h3>Behaviors</h3>

<p>Behaviors是设置页面里的一栏，通过cmd + 逗号可以调出设置页面看到。
在Behaviors里可以设置各种行为发生时，界面应该做何改变。</p>

<p>例如，如果我们要每次运行结束后，就关闭Console界面，可以在Behaviors下面的"Run completes"一栏的右边，选中"Hide debugger"一项即可（如下图红色标识所示)。</p>

<p>另外，我们也可以点击左下角的“+”来增加一些自定义的行为，例如我就增加了2个行为，分别用于把导航栏和工具栏同时隐藏和显示（如下图蓝色标识所示）。Behavior的扩展性很强，你甚至可以定义执行一些脚本，所以可以做的事情很多。</p>

<p><img src="/images/xcode-behaviors.jpg"></p>

<h3>快捷键</h3>

<p>如果能慢慢熟悉一些快捷键，对于提高工作效率是有很大帮助的。虽然设置页面有所有的快键键列表，但是估计没人能全部记住并且用上，我个人总结出来常用的快键键如下：</p>

<p>```
cmd + 1              切换成Project Navigator (cmd + 2~7 也可以做相应切换，不过不常用）
cmd + shift + 上     在.h和.m文件之间切换
cmd + enter          切换成 standard editor
cmd + opt + enter    切换成 assistant editor
cmd + shift + y      切换 Console View的显示或隐藏
cmd + 0              隐藏左边的导航(Navigator)区
cmd + opt + 0        隐藏右边的工具(Utility)区
ctrl  + 6            列出当前文件中所有的方法，可以输入关键词来过滤。这个相当赞，可以快速定位到想编辑的方法。</p>

<pre><code>                 我直接把这个快键盘改成了ctrl+o，这样按起来更顺手。
</code></pre>

<p>cmd + ctrl + 左/右   到上/下一次编辑的位置，在2个编辑位置跳转的时候很方便。
cmd + opt + j        跳转到文件过滤区
cmd + shift + f      在工程中查找
cmd + r              运行，如果选上直接kill掉上次进程的话，每次直接一按就可以重新运行了
cmd + b              编译工程
cmd + shift + k      清空编译好的文件
cmd + .              结束本次调试
ESC                  调出代码补全
cmd + 单击           查看该方法的实现
opt + 单击           查看该方法的文档
cmd + t              新建一个tab栏
cmd + shift + [      在tab栏之间切换
```</p>

<h3>Snippets</h3>

<p>代码片段(Snippets)是xcode4新增的功能。用于管理一些常用的代码段，在需要时通过代码补全自动生成出来，可以提高工作效率。</p>

<p>关于这个，可以参见我的另一篇文章：<a href="http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets/">http://blog.devtang.com/blog/2012/02/04/use-git-to-manage-code-snippets/</a></p>

<h3>下载xcode</h3>

<p>从Xcode4.3开始，苹果将Xcode的下载放到了Lion的mac app store中。郁闷的是，中国区连接app store下载的速度相当慢，在试了一些方法（例如设置hosts,设置dns）之后，我发现最好的办法如下：</p>

<p>用开发者账号登陆：<a href="https://developer.apple.com/downloads/index.action">https://developer.apple.com/downloads/index.action</a>，然后点击下载获得下载地址，然后将地址复制到mac版迅雷中，用迅雷下载，速度可以达到200K左右。</p>

<p>希望这些技巧能提高你的工作效率，祝玩得开心:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用GCD]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/22/use-gcd/"/>
    <updated>2012-02-22T20:44:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/22/use-gcd</id>
    <content type="html"><![CDATA[<h2>什么是GCD</h2>

<p>Grand Central Dispatch (GCD)是Apple开发的一个多核编程的解决方法。该方法在Mac OS X 10.6雪豹中首次推出，并随后被引入到了iOS4.0中。GCD是一个替代诸如NSThread, NSOperationQueue, NSInvocationOperation等技术的很高效和强大的技术，它看起来象就其它语言的闭包(Closure)一样，但苹果把它叫做blocks。</p>

<!--More-->


<h2>应用举例</h2>

<p>让我们来看一个编程场景。我们要在iphone上做一个下载网页的功能，该功能非常简单，就是在iphone上放置一个按钮，点击该按钮时，显示一个转动的圆圈，表示正在进行下载，下载完成之后，将内容加载到界面上的一个文本控件中。</p>

<h3>不用GCD前</h3>

<p>虽然功能简单，但是我们必须把下载过程放到后台线程中，否则会阻塞UI线程显示。所以，如果不用GCD, 我们需要写如下3个方法：</p>

<ul>
<li>someClick 方法是点击按钮后的代码，可以看到我们用NSInvocationOperation建了一个后台线程，并且放到NSOperationQueue中。后台线程执行download方法。</li>
<li>download 方法处理下载网页的逻辑。下载完成后用performSelectorOnMainThread执行download_completed 方法。</li>
<li>download_completed 进行clear up的工作，并把下载的内容显示到文本控件中。</li>
</ul>


<p>这3个方法的代码如下。可以看到，虽然 开始下载 -> 下载中 -> 下载完成 这3个步骤是整个功能的三步。但是它们却被切分成了3块。他们之间因为是3个方法，所以还需要传递数据参数。如果是复杂的应用，数据参数很可能就不象本例子中的NSString那么简单了，另外，下载可能放到Model的类中来做，而界面的控制放到View Controller层来做，这使得本来就分开的代码变得更加散落。代码的可读性大大降低。</p>

<p>``` objc
static NSOperationQueue * queue;</p>

<ul>
<li><p>(IBAction)someClick:(id)sender {
  self.indicator.hidden = NO;
  [self.indicator startAnimating];
  queue = [[NSOperationQueue alloc] init];
  NSInvocationOperation * op = [[[NSInvocationOperation alloc] initWithTarget:self selector:@selector(download) object:nil] autorelease];
  [queue addOperation:op];
}</p></li>
<li><p>(void)download {
  NSURL * url = [NSURL URLWithString:@"http://www.youdao.com"];
  NSError * error;
  NSString * data = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error];
  if (data != nil) {</p>

<pre><code>  [self performSelectorOnMainThread:@selector(download_completed:) withObject:data waitUntilDone:NO];
</code></pre>

  } else {

<pre><code>  NSLog(@"error when download:%@", error);
  [queue release];
</code></pre>

<p>  }
}</p></li>
<li><p>(void) download_completed:(NSString *) data {
  NSLog(@"call back");
  [self.indicator stopAnimating];
  self.indicator.hidden = YES;
  self.content.text = data;
  [queue release];
}
```</p></li>
</ul>


<h3>使用GCD后</h3>

<p>如果使用GCD，以上3个方法都可以放到一起，如下所示：</p>

<p>``` objc</p>

<pre><code>// 原代码块一
self.indicator.hidden = NO;
[self.indicator startAnimating];
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // 原代码块二
    NSURL * url = [NSURL URLWithString:@"http://www.youdao.com"];
    NSError * error;
    NSString * data = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error];
    if (data != nil) {
        // 原代码块三
        dispatch_async(dispatch_get_main_queue(), ^{
            [self.indicator stopAnimating];
            self.indicator.hidden = YES;
            self.content.text = data;
        });
    } else {
        NSLog(@"error when download:%@", error);
    }
});
</code></pre>

<p>```</p>

<p>首先我们可以看到，代码变短了。因为少了原来3个方法的定义，也少了相互之间需要传递的变量的封装。</p>

<p>另外，代码变清楚了，虽然是异步的代码，但是它们被GCD合理的整合在一起，逻辑非常清晰。如果应用上MVC模式，我们也可以将View Controller层的回调函数用GCD的方式传递给Modal层，这相比以前用@selector的方式，代码的逻辑关系会更加清楚。</p>

<h2>GCD的定义</h2>

<p>简单GCD的定义有点象函数指针，差别是用 ^ 替代了函数指针的 * 号，如下所示：</p>

<p>``` objc</p>

<pre><code> // 申明变量
 (void) (^loggerBlock)(void);
 // 定义
</code></pre>

<p> loggerBlock = ^{</p>

<pre><code>      NSLog(@"Hello world");
 };
 // 调用
 loggerBlock();
</code></pre>

<p>```</p>

<p>但是大多数时候，我们通常使用内联的方式来定义它，即将它的程序块写在调用的函数里面，例如这样：</p>

<p>``` objc</p>

<pre><code> dispatch_async(dispatch_get_global_queue(0, 0), ^{
      // something
 });
</code></pre>

<p>```</p>

<h2>系统提供的dispatch方法</h2>

<p>为了方便地使用GCD，苹果提供了一些方法方便我们将block放在主线程 或 后台线程执行，或者延后执行。使用的例子如下：</p>

<p>``` objc</p>

<pre><code> //  后台执行：
 dispatch_async(dispatch_get_global_queue(0, 0), ^{
      // something
 });
 // 主线程执行：
 dispatch_async(dispatch_get_main_queue(), ^{
      // something
 });
 // 一次性执行：
 static dispatch_once_t onceToken;
 dispatch_once(&amp;onceToken, ^{
     // code to be executed once
 });
 // 延迟2秒执行：
 double delayInSeconds = 2.0;
 dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
 dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
     // code to be executed on the main queue after delay
 });
</code></pre>

<p>```</p>

<p>另外，GCD还有一些高级用法，例如让后台2个线程并行执行，然后等2个线程都结束后，再汇总执行结果。这个可以用dispatch_group, dispatch_group_async 和 dispatch_group_notify来实现，示例如下：</p>

<p>``` objc</p>

<pre><code> dispatch_group_t group = dispatch_group_create();
 dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{
      // 并行执行的线程一
 });
 dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{
      // 并行执行的线程二
 });
 dispatch_group_notify(group, dispatch_get_global_queue(0,0), ^{
      // 汇总结果
 });
</code></pre>

<p>```</p>

<h2>后台运行</h2>

<p>GCD的另一个用处是可以让程序在后台较长久的运行。在没有使用GCD时，当app被按home键退出后，app仅有最多5秒钟的时候做一些保存或清理资源的工作。但是在使用GCD后，app最多有10分钟的时间在后台长久运行。这个时间可以用来做清理本地缓存，发送统计数据等工作。</p>

<h2>总结</h2>

<p>总体来说，GCD能够极大地方便开发者进行多线程编程。如果你的app不需要支持iOS4.0以下的系统，那么就应该尽量使用GCD来处理后台线程和UI线程的交互。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给iOS工程增加Daily Build]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/16/apply-daily-build-in-ios-project/"/>
    <updated>2012-02-16T19:27:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/16/apply-daily-build-in-ios-project</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>Daily Build是一件非常有意义的事情，也是敏捷开发中关于“持续集成”的一个实践。Daily Build对于开发来说有如下好处：</p>

<ul>
<li>保证了每次check in的代码可用，不会造成整个工程编译失败。</li>
<li>进度跟进。产品经理可以每天看到最新的开发进度，并且试用产品，调整一些细节。很多时候，一个新功能，你真正用了一下才能有体会好或不好，所以daily build也给产品经理更多时间来调理他的设计。</li>
<li>需求确认。产品经理可以确认开发的功能细节是他的预期。因为我们的开发比较紧凑，所以都没有传统的需求说明文档，所以daily build也给产品经理用于尽早确认开发的功能细节是他的预期，我就遇到一次产品经理发现开发出的一个功能细节和他的预期不一致，但是因为有daily build，使得我可以尽早做修改，把修改的代价减小了。</li>
<li>测试跟进。如果功能点是独立的话，测试同事完全可以根据daily build来进行一些早期的测试。越早的Bug反馈可以使得修改bug所需的时间越短。</li>
</ul>


<!--more-->


<h2>步骤</h2>

<h3>xcodebuild命令</h3>

<p>如何做daily build呢？其实Xcode就提供了命令行build的命令，这个命令是xcodebuild，用xcodebuild -usage
可以查看到所有的可用参数，如下所示：</p>

<p>``` bash
[tangqiao ~]$xcodebuild -usage
Usage: xcodebuild [-project <projectname>] [[-target <targetname>]...|-alltargets] [-configuration <configurationname>] [-arch <architecture>]... [-sdk [<sdkname>|<sdkpath>]] [<buildsetting>=<value>]... [<buildaction>]...</p>

<pre><code>   xcodebuild [-project &lt;projectname&gt;] -scheme &lt;schemeName&gt; [-configuration &lt;configurationname&gt;] [-arch &lt;architecture&gt;]... [-sdk [&lt;sdkname&gt;|&lt;sdkpath&gt;]] [&lt;buildsetting&gt;=&lt;value&gt;]... [&lt;buildaction&gt;]...
   xcodebuild -workspace &lt;workspacename&gt; -scheme &lt;schemeName&gt; [-configuration &lt;configurationname&gt;] [-arch &lt;architecture&gt;]... [-sdk [&lt;sdkname&gt;|&lt;sdkpath&gt;]] [&lt;buildsetting&gt;=&lt;value&gt;]... [&lt;buildaction&gt;]...
   xcodebuild -version [-sdk [&lt;sdkfullpath&gt;|&lt;sdkname&gt;] [&lt;infoitem&gt;] ]
   xcodebuild -list [[-project &lt;projectname&gt;]|[-workspace &lt;workspacename&gt;]]
   xcodebuild -showsdks
</code></pre>

<p>```</p>

<p>一般情况下的命令使用如下:</p>

<p><code>bash
xcodebuild -configuration Release -target "YourProduct"
</code></p>

<p>但在daily build中，用Release用为configuration其实不是特别好。因为Release的证书可能会被经常修改。我们可以基于Release的Configuation，建一个专门用于daily build的configuration。方法是：在工程详细页面中，选择Info一栏，在Configurations一栏的下方点击“+”号，然后选择"Duplicate Release Configuration", 新建名为"DailyBuild"的Configuration, 如下图所示：</p>

<p><img src="/images/daily_build_1.png"></p>

<p>之后就可以用如下命令来做daily build了</p>

<p><code>bash
xcodebuild -configuration DailyBuild -target "YourProduct"
</code></p>

<p>执行完命令后，会在当前工程下的 build/DailyBuild-iphoneos/目录下生成一个名为： YourProduct.app的文件。这个就是我们Build成功之后的程序文件。</p>

<h3>生成ipa文件</h3>

<p>接下来我们需要生成ipa文件，在生成ipa文件这件事情上，xcode似乎没有提供什么工具，不过这个没什么影响，因为ipa文件实际上就是一个zip文件，我们使用系统的zip命令来生成ipa文件即可。需要注意的是，ipa文件并不是简单地将编辑好的app文件打成zip文件，它需要将app文件放在一个名为Payload的文件夹下，然后将整个Payload目录打包成为.ipa文件，命令如下：</p>

<p><code>bash
cd $BUILD_PATH
mkdir -p ipa/Payload
cp -r ./DailyBuild-iphoneos/$PRODUCT_NAME ./ipa/Payload/
cd ipa
zip -r $FILE_NAME *
</code></p>

<h3>生成安装文件</h3>

<p>苹果允许用itms-services协议来直接在iphone/ipad上安装应用程序，我们可以直接生成该协议需要的相关文件，这样产品经理和测试同学都可以直接在设备上安装新版的应用了。相关的参考资料可以见：<a href="http://blog.encomiabile.it/2010/12/21/ios4-and-wireless-application-deploy/">这里</a>和 <a href="http://blog.s135.com/itms-services/">这里</a></p>

<p>具体来说，就是需要生成一个带 itms-services 协议的链接的html文件，以及一个 plist 文件。</p>

<p>生成html的示例代码如下：</p>

<p>``` bash
cat &lt;&lt; EOF > install.html
&lt;!DOCTYPE HTML>
<html>
  <head></p>

<pre><code>&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
&lt;title&gt;安装此软件&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;ul&gt;
  &lt;li&gt;安装此软件:&lt;a href="itms-services://?action=download-manifest&amp;url=http%3A%2F%2Fwww.yourdomain.com%2Fynote.plist"&gt;$FILE_NAME&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>  </body>
</html>
EOF
```</p>

<p>生成plist文件的代码如下，注意，需要将下面的涉及 www.yourdomain.com的地方换成你线上服务器的地址，将ProductName换成你的app安装后的名字。</p>

<p>``` bash
cat &lt;&lt; EOF > ynote.plist
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
   <key>items</key>
   <array></p>

<pre><code>   &lt;dict&gt;
       &lt;key&gt;assets&lt;/key&gt;
       &lt;array&gt;
           &lt;dict&gt;
               &lt;key&gt;kind&lt;/key&gt;
               &lt;string&gt;software-package&lt;/string&gt;
               &lt;key&gt;url&lt;/key&gt;
               &lt;string&gt;http://www.yourdomain.com/$FILE_NAME&lt;/string&gt;
           &lt;/dict&gt;
           &lt;dict&gt;
               &lt;key&gt;kind&lt;/key&gt;
               &lt;string&gt;display-image&lt;/string&gt;
               &lt;key&gt;needs-shine&lt;/key&gt;
               &lt;true/&gt;
               &lt;key&gt;url&lt;/key&gt;
               &lt;string&gt;http://www.yourdomain.com/icon.png&lt;/string&gt;
           &lt;/dict&gt;
       &lt;dict&gt;
               &lt;key&gt;kind&lt;/key&gt;
               &lt;string&gt;full-size-image&lt;/string&gt;
               &lt;key&gt;needs-shine&lt;/key&gt;
               &lt;true/&gt;
               &lt;key&gt;url&lt;/key&gt;
               &lt;string&gt;http://www.yourdomain.com/icon.png&lt;/string&gt;
           &lt;/dict&gt;
       &lt;/array&gt;&lt;key&gt;metadata&lt;/key&gt;
       &lt;dict&gt;
           &lt;key&gt;bundle-identifier&lt;/key&gt;
           &lt;string&gt;com.yourdomain.productname&lt;/string&gt;
           &lt;key&gt;bundle-version&lt;/key&gt;
           &lt;string&gt;1.0.0&lt;/string&gt;
           &lt;key&gt;kind&lt;/key&gt;
           &lt;string&gt;software&lt;/string&gt;
           &lt;key&gt;subtitle&lt;/key&gt;
           &lt;string&gt;ProductName&lt;/string&gt;
           &lt;key&gt;title&lt;/key&gt;
           &lt;string&gt;ProductName&lt;/string&gt;
       &lt;/dict&gt;
   &lt;/dict&gt;
</code></pre>

<p>   </array>
</dict>
</plist></p>

<p>EOF</p>

<p>```</p>

<h3>定时运行</h3>

<p>这一点非常简单，使用crontab -e命令即可。大家可以随意google一下crontab命令，可以找到很多相关文档。假如我们要每周1-5的早上9点钟执行daily build，则crontab的配置如下：</p>

<p><code>
0 9 * * * 1-5 /Users/tangqiao/dailybuild.sh &gt;&gt; /Users/tangqiao/dailybuild.log 2&gt;&amp;1
</code></p>

<h3>失败报警</h3>

<p>在daily build脚本运行失败时，最好能发报警邮件或者短信，以便能够尽早发现。发邮件可以用python的smtplib来写，示例如下：</p>

<p>``` python
import smtplib</p>

<p>sender = 'sender@devtang.com'
receivers = ['receiver@devtang.com']</p>

<p>message = """From: Alert <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x73;&#x65;&#x6e;&#100;&#x65;&#114;&#64;&#100;&#x65;&#118;&#x74;&#97;&#x6e;&#103;&#46;&#x63;&#x6f;&#x6d;">&#x73;&#x65;&#x6e;&#x64;&#x65;&#x72;&#64;&#x64;&#101;&#118;&#116;&#x61;&#110;&#x67;&#46;&#x63;&#x6f;&#109;</a>
To: Some one <a href="&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#58;&#x72;&#x65;&#99;&#101;&#105;&#118;&#x65;&#x72;&#x40;&#x64;&#101;&#x76;&#x74;&#x61;&#x6e;&#x67;&#46;&#99;&#x6f;&#x6d;">&#x72;&#101;&#x63;&#x65;&#x69;&#x76;&#x65;&#114;&#x40;&#100;&#101;&#x76;&#x74;&#x61;&#x6e;&#x67;&#x2e;&#x63;&#111;&#109;</a>
Subject: SMTP email sample</p>

<p>Hope you can get it.
"""</p>

<p>try:</p>

<pre><code>obj = smtplib.SMTP('server.mail.devtang.com')
obj.sendmail(sender, receivers, message)
print 'OK: send mail succeed'
</code></pre>

<p>except Exception:</p>

<pre><code>print 'Error: unable to send mail'
</code></pre>

<p>```</p>

<h3>上传</h3>

<p>daily build编译出来如果需要单独上传到另外一台web机器上，可以用ftp或者scp协议。如果web机器悲剧的是windows机器的话，可以在windows机器上开一个共享，然后用 mount -t smbfs来将这个共享mount到本地，相关的示例代码如下：
``` bash
mkdir upload
mount -t smbfs //$SMB_USERNAME:$SMB_PASSWORD@$SMB_TARGET ./upload
if [ "$?" -ne 0 ]; then</p>

<pre><code>echo "Failed to mount smb directory"
exit 1
</code></pre>

<p>fi
mkdir ./upload/$FOLDER
cp $FILE_NAME ./upload/$FOLDER/
if [ "$?" -eq 0 ]; then</p>

<pre><code>echo "[OK] $FILE_NAME is uploaded to $SMB_TARGET" 
</code></pre>

<p>else</p>

<pre><code>echo "[ERROR] $FILE_NAME is FAILED to  uploaded to $SMB_TARGET" 
</code></pre>

<p>fi
umount ./upload
```</p>

<h2>遇到的问题</h2>

<p>本来我写的自动化脚本在Mac OS X 10.6下运行得很好。但是升级到lion后，脚本在手动执行时很正常，但是在用crontab启动时就会出现找不到开发者证书的错误。在网上搜了很久也没有找到解决办法。最后我试了一下在“钥匙串访问”中把开发者证书从“登录”那栏拖动到“系统”那栏，居然就解决了，如下图所示：</p>

<p><img src="/images/dailybuild_issue.jpg"></p>

<p>另外我搜到2个类似的问题的解决方案，虽然对我这个没起作用，也一并放在这儿，或许对遇到类似问题的人有帮助：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/7635143/cannot-build-xcode-project-from-command-line-but-can-from-xcode">http://stackoverflow.com/questions/7635143/cannot-build-xcode-project-from-command-line-but-can-from-xcode</a></li>
<li><a href="http://shappy1978.iteye.com/blog/765842">http://shappy1978.iteye.com/blog/765842</a></li>
</ul>


<h2>总结</h2>

<p>将以上各点结合起来，就可以用bash写出一个daily build脚本了。每天这一切都会自动完成，心情相当好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给NSString增加Java风格的方法]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/14/nsstring-java-like-wrapper/"/>
    <updated>2012-02-14T17:17:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/14/nsstring-java-like-wrapper</id>
    <content type="html"><![CDATA[<p>我实在受不了NSString冗长的方法调用了，每次写之前都要查文档。特别是那个去掉前后多余的空格的方法，长得离谱。与之对应的别的语言，拿java来说，对应的方法名叫trim。拿python来说，对应的方法名叫strip。但是Objective-C呢？是下面这段：</p>

<p><code>objc
[self stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
</code></p>

<!--more-->


<p>其实我也明白Objective-C这种长函数名的好处，就是能很清楚地了解当前的方法是干什么的。但是一些常用的方法，简单的方法名同样能表达清楚意思，并且更容易记住。长方法名的最大的问题是，代码写到一半得查文档，直接把思路打断了，所以我上周末花了一天时间把Objective-C的NSString类给封装了一下，把相应的方法调用都换成与Java类似的了。这样我每次用的时候就不用写那么长又记不住的方法名了。</p>

<p>主要封装后的方法定义如下：</p>

<p><code>objc
@interface NSString(Wrapper)
- (unichar) charAt:(int)index;
- (int) compareTo:(NSString*) anotherString;
- (int) compareToIgnoreCase:(NSString*) str;
- (BOOL) contains:(NSString*) str;
- (BOOL) startsWith:(NSString*)prefix;
- (BOOL) endsWith:(NSString*)suffix;
- (BOOL) equals:(NSString*) anotherString;
- (BOOL) equalsIgnoreCase:(NSString*) anotherString;
- (int) indexOfChar:(unichar)ch;
- (int) indexOfChar:(unichar)ch fromIndex:(int)index;
- (int) indexOfString:(NSString*)str;
- (int) indexOfString:(NSString*)str fromIndex:(int)index;
- (int) lastIndexOfChar:(unichar)ch;
- (int) lastIndexOfChar:(unichar)ch fromIndex:(int)index;
- (int) lastIndexOfString:(NSString*)str;
- (int) lastIndexOfString:(NSString*)str fromIndex:(int)index;
- (NSString *) substringFromIndex:(int)beginIndex toIndex:(int)endIndex;
- (NSString *) toLowerCase;
- (NSString *) toUpperCase;
- (NSString *) trim;
- (NSString *) replaceAll:(NSString*)origin with:(NSString*)replacement;
- (NSArray *) split:(NSString*) separator;
@end
</code></p>

<p>看着方法体，一下子感觉轻松了好多，以后再也不必每次写的时候查文档了。代码放到github上了，你可以用如下命令获得代码或者直接访问网址<a href="https://github.com/tangqiaoboy/xcode_tool">https://github.com/tangqiaoboy/xcode_tool</a> ：</p>

<p><code>bash
git clone git@github.com:tangqiaoboy/xcode_tool.git
cd xcode_tool/NSStringWrappeer
</code></p>

<p>如果要把这个Wrapper加到现有工程中，只需要拷贝我的文件：NSStringWrapper.h和NSStringWrapper.m到你自己的工程中即可。在使用的时候注意我修改了一点，我将查找不存在的返回值设置成了-1，这样和java语言保持一致，如果你想用 NSNotFound作为查找不存在时的结果，请修改文件NSStringWrapper.m顶部的宏定义:JavaNotFound即可，如下所示：</p>

<p>``` objc
// 如果不喜欢，可以将-1改成 NSNotFound即可</p>

<h1>define JavaNotFound -1</h1>

<p>```</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
</feed>
