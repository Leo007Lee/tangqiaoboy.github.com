<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2012-08-26T21:26:21+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用脚本来简化iOS美术同学的工作]]></title>
    <link href="http://blog.devtang.com/blog/2012/08/26/use-script-to-power-up-ui-work/"/>
    <updated>2012-08-26T20:34:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/08/26/use-script-to-power-up-ui-work</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>我们知道，在iOS开发中，为了使我们的app能够同时支持iPhone的Retina屏幕和普通屏幕，美术同学需要对UI设计稿中的每个元素进行2次切图。苹果要求对图片元素的命名分别为 name.png 和 name@2x.png，带@2x的表示是Retina屏幕的贴图，不带@2x的同名文件为普通屏幕的贴图。</p>

<p>我在开发的时候发现很难要求美术同学按照开发的要求来对图片命名。她们通常对于切图的命名是例如 <em>登录按钮大.png</em> ，<em>登录按钮小.png</em>, <em>登录按钮按下大.png</em> <em>登录按钮按下小.png</em> 这样的形式。于是，对这些文件按照苹果的要求进行重命名就成了我这个码农的一个体力活。</p>

<!-- more -->


<h2>解决方案</h2>

<p>有什么方法能减少开发和美术的体力活呢？想到因为 name@2x.png 的图片是 name.png 图片的2整倍，所以，我们完全可以让美术只切@2x的大图，而我们使用脚本来生成小图。于是我写了下面这样的一个脚本，我只需要将所有的大图按照类似 name-1@2x.png , name-2@2x.png 方式命名，然后脚本就会自动帮我生成对应的名为 name-1.png 和 name-2.png的小图。</p>

<p>``` objc</p>

<h1>! /bin/bash</h1>

<h1>File name : convertImage.sh</h1>

<h1>Author: Tang Qiao</h1>

<h1></h1>

<h1>print usage</h1>

<p>usage() {</p>

<pre><code>cat &lt;&lt; EOF
Usage:
    convertImage.sh &lt;src directory&gt; &lt;dest directory&gt;
</code></pre>

<p>EOF
}</p>

<p>if [ $# -ne 2 ]; then</p>

<pre><code>usage
exit 1
</code></pre>

<p>fi</p>

<p>SRC_DIR=$1
DEST_DIR=$2</p>

<h1>check src dir</h1>

<p>if [ ! -d $SRC_DIR ]; then</p>

<pre><code>echo "src directory not exist: $SRC_DIR"
exit 1
</code></pre>

<p>fi</p>

<h1>check dest dir</h1>

<p>if [ ! -d $DEST_DIR ]; then</p>

<pre><code>mkdir -p $DEST_DIR
</code></pre>

<p>fi</p>

<p>for src_file in $SRC_DIR/<em>.</em> ; do</p>

<pre><code>echo "process file name: $src_file"
# 获得去掉文件名的纯路径
src_path=`dirname $src_file`
# 获得去掉路径的纯文件名
filename=`basename $src_file`
# 获得文件名字(不包括扩展名)
name=`echo "$filename" | cut -d'.' -f1`
# remove @2x in filename if there is
name=`echo "$name" | cut -d"@" -f1`
# 获得文件扩展名
extension=`echo "$filename" | cut -d'.' -f2`
dest_file="$DEST_DIR/${name}.${extension}"

convert $src_file -resize 50% $dest_file
</code></pre>

<p>done
```</p>

<p>脚本使用方法：将以上代码另存为 convertImage.sh，然后用以下方式调用此脚本，即可将源文件夹中所有以@2x结尾的图片文件转成一半大小的、去掉@2x的小图片。</p>

<p><code>bash
convertImage.sh 源文件夹 目标文件夹
</code></p>

<p>使用以上脚本后，美术只用切一半的图了。因为给我的切图少了，所以我可以更加方便地找到对应的切图了。另外，我也减少了一半对切图进行重命名的工作。</p>

<h2>Tips</h2>

<h3>imagemagick</h3>

<p>如果你运行以上脚本失败，请先用brew 或 port安装 imagemagick。imagemagick是一个相当强大的图象处理库。
<code>bash
brew install imagemagick
</code></p>

<h3>检查图片</h3>

<p>在使用该脚本一段时间后，我发现美术同学给我的大图的长宽常常不是偶数，这样造成缩小的图就不是原图的整倍数了。为了方便我检查美术给我的图片是否宽高都是偶数，我写了如下检查的脚本，这样就可以检查图片的宽高是否符合要求了。</p>

<p>``` bash</p>

<h1>! /bin/bash</h1>

<h1>File name : checkImageSize.sh</h1>

<h1>Author: Tang Qiao</h1>

<h1></h1>

<p>usage() {</p>

<pre><code>cat &lt;&lt;EOF
Usage:
    checkImageSize.sh &lt;directory&gt;
</code></pre>

<p>EOF
}</p>

<p>if [ $# -ne 1 ]; then</p>

<pre><code>usage
exit 1
</code></pre>

<p>fi</p>

<p>SRC_DIR=$1</p>

<h1>check src dir</h1>

<p>if [ ! -d $SRC_DIR ]; then</p>

<pre><code>echo "src directory not exist: $SRC_DIR"
exit 1
</code></pre>

<p>fi</p>

<p>for src_file in $SRC_DIR/*.png ; do</p>

<pre><code>echo "process file name: $src_file"
width=`identify -format "%[fx:w]" $src_file`
height=`identify -format "%[fx:h]" $src_file`
# check width
modValue=`awk -v a=$width 'BEGIN{printf "%d", a % 2}'`
if [ "$modValue" == "1" ]; then
   echo "[Error], the file $src_file width is $width" 
fi
# check height
modValue=`awk -v a=$height 'BEGIN{printf "%d", a % 2}'`
if [ "$modValue" == "1" ]; then
   echo "[Error], the file $src_file height is $height" 
fi
</code></pre>

<p>done
```</p>

<h3>问题</h3>

<p>我在使用以上方法时，发现由于imagemagick压缩比太高，生成的图片如果象素太小，它就会生成索引图片，而不知道何故，少量索引图片在iPhone 3GS上会显示出一条黑线在图片底部。对于这些图片，用photoshop将其模式改成RGB颜色即可。如下所示：</p>

<p><img src="/images/ui-script-tips.png" title="" ></p>

<p>用脚本代替体力活是一件很happy的事情，因为你可以用省下来的时间多做一些有意思的事情了。</p>

<p>Have fun !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C的新特性]]></title>
    <link href="http://blog.devtang.com/blog/2012/08/05/use-modern-objective-c/"/>
    <updated>2012-08-05T21:50:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/08/05/use-modern-objective-c</id>
    <content type="html"><![CDATA[<p>苹果在今年的WWDC2012大会上介绍了大量Objective-C的新特性，能够帮助iOS程序员更加高效地编写代码。在不久前更新的XCode4.4版本中，这些新特性已经可以使用了。让我们看看这些新特性有哪些：</p>

<!-- more -->


<h2>Object Literals</h2>

<p>这个是我认为最赞的一个改进。Object Literals允许你方便地定义数字、数组和字典对象。这个功能类似于java5提供的auto boxing功能。这虽然是一个语法糖，但我认为对提高写代码效率帮助很大。让我们先来看看以前定义数字、数组和字典对象的方法：</p>

<p>``` objc</p>

<pre><code>NSNumber * number = [NSNumber numberWithInt:1];
NSArray * array = [NSArray arrayWithObjects:@"one", @"two", nil];
NSDictionary * dict = [NSDictionary dictionaryWithObjectsAndKeys:@"value1", @"key1", @"value2", @"key2", nil];
</code></pre>

<p>```
是不是很恶心？现在以上代码可以简化成以下形式，注意到没有，不用再在参数的最后加恶心的nil了，字典的key和value也不再是倒着先写value,再写key了：</p>

<p>``` objc</p>

<pre><code>NSNumber * number = @1;
NSArray * array = @[@"one", @"two"];
NSDictionary * dict = @{@"key1":@"value1", @"key2":@"value2"};
</code></pre>

<p>```</p>

<p>更多的示例如下：</p>

<p>``` objc
  // 整数
  NSNumber <em>fortyTwo = @42;             // 等价于 [NSNumber numberWithInt:42]
  NSNumber </em>fortyTwoUnsigned = @42U;    // 等价于 [NSNumber numberWithUnsignedInt:42U]
  NSNumber <em>fortyTwoLong = @42L;        // 等价于 [NSNumber numberWithLong:42L]
  NSNumber </em>fortyTwoLongLong = @42LL;   // 等价于 [NSNumber numberWithLongLong:42LL]</p>

<p>  // 浮点数
  NSNumber <em>piFloat = @3.141592654F;    // 等价于 [NSNumber numberWithFloat:3.141592654F]
  NSNumber </em>piDouble = @3.1415926535;   // 等价于 [NSNumber numberWithDouble:3.1415926535]</p>

<p>  // 布尔值
  NSNumber <em>yesNumber = @YES;           // 等价于 [NSNumber numberWithBool:YES]
  NSNumber </em>noNumber = @NO;             // 等价于 [NSNumber numberWithBool:NO]</p>

<p>  // 空数组
  NSArray * array = @[];                // 等价于 [NSArray array]
  // 空的字典
  NSDictionary * dict = @{};            // 等价于 [NSDictionary dictionary]</p>

<p>```</p>

<p>怎么样？是不是简单多了？而且，为了方便你的旧代码迁移到新的写法，xcode专门还提供了转换工具，在xcode4.4中，选择 Edit -> Refactor -> Convert to Modern Objective-C Syntax即可。如下所示：
<img src="/images/modern-objc-convert-tool.png"></p>

<h2>局部的函数调用不用前向申明</h2>

<p>这虽然是一个挺小的改进，但是很贴心。假如我们在一个源文件中有2个函数：分别名为foo 和 bar，其中foo的定义在bar前面。那如果在foo函数内部直接调用bar，编译器会报警告说找不到函数bar。</p>

<p>而现在，我们可以随意地在源文件中放置函数bar的位置。编译器在找不到bar时，会再源码后面找，如果找到了bar，就不会报错了。</p>

<h2>带有类型的enum</h2>

<p>现在我们可以定义enum是无符号整数还是整数，这样编译器会更加智能的做类型检查。如下所示：</p>

<p>``` objc
typedef enum TableViewCellType : NSInteger {</p>

<pre><code>TableViewCellTypeQueue,
TableViewCellTypeNewFans,
TableViewCellTypeUserInfo,
TableViewCellTypeOrganization,
TableViewCellTypeFeedback,
TableViewCellTypeRateApp,
TableViewCellTypeRecommendation,
TableViewCellTypeLogout
</code></pre>

<p>}TableViewCellType;
```</p>

<h2>默认生成@synthesize代码</h2>

<p>以前写完一个诸如 @property (nonatomic, strong) NSString * username; 变量定义后，马上得转到 .m文件中去增加相应的 @synthesize username = _username; 代码。</p>

<p>现在，编辑器发现你没有写 @synthesize时，会自动帮你加上这一行。这同时在另一方面，起到了鼓励大家使用以下划线开头的变量名作为成员变量名的作用。</p>

<p>当然，为了向下兼容，如果你的程序里面已经有了 @property 变量对应的 @synthesize 代码时，编辑器就不会自动帮你增加这个代码了。</p>

<p>另外有2种特殊情况下，即使你没有写 @synthesize ，编辑器也不会自动帮你加上，这2种情况是：</p>

<ol>
<li>你同时提供了该property的setter 和 getter方法。</li>
<li>你的这个property是 readonly 的。</li>
</ol>


<h2>遍历元素</h2>

<p>你是如何遍历数组的元素的？通常我们有2种做法，一种是用 for in，另一种是用一个变量来循环数组下标。如下：</p>

<p>``` objc</p>

<pre><code>    NSArray * lines = ...
    for (NSString * line in lines) {
       // ...
    }
    for (int i = 0; i &lt; lines.count; ++i) {
        NSString * s = [lines objectAtIndex:i];
        ...
    }
</code></pre>

<p>```</p>

<p>如果是字典，遍历的代码就要稍微复杂一点了：
``` objc</p>

<pre><code>    NSDictionary * dict = …
    NSArray * keys = [dict allKeys];
    for (NSString * key in keys) {
        NSString * value = [dict objectForKey:key];

    }
</code></pre>

<p>```</p>

<p>现在，xcode对于iOS4.0以上的系统，支持用block来遍历元素了。用block来遍历字典可以简化代码的编写，建议大家都使用上这个新特性。</p>

<p>``` objc</p>

<pre><code>[lines enumerateObjectsUsingBlock:^(NSString * obj, NSUInteger idx, BOOL *stop) {

}];

[_urlArguments enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {

}];
</code></pre>

<p>```</p>

<h2>Subscripting Methods</h2>

<p>这个新特性在WWDC2012的视频中提到了，但是在XCode4.4中没有实现。也是一个很体贴的语法糖，它允许你用中括号来代替原本的方法来获取和设置数组元素。</p>

<p>简单来说，以前的 [array objectAtIndex:idx] 和 [array replaceObjectAtIndex:idx withObject:obj]，可以直接写作 array[idx] 和 array[idx] = obj了。其实这个特性在很多高级语言中都实现了，只是Objective-C生于80年代，一直没改进这个。</p>

<p>这个改进同样对NSDictionary有效。甚至，你也可以给你自己的类提供中括号操作符对应的方法。具体做法是实现如下两个方法：</p>

<p><code>objc
- (id)objectAtIndexedSubscript:(NSUInterger)idx;
- (void)setObject:(id)value atIndexedSubscript:(NSUInteger)idx;
</code></p>

<p>期等XCode4.5中能够使用上这个特性。</p>

<h2>Tips</h2>

<p>上面提到了不用写 @synthesize 了，那原本写的那么多 @synthesize 怎么办呢？作为有代码洁癖的我很想把它们删掉，但怎么删呢？一个文件一个文件打开，然后行一行删掉吗？放心，苹果已经帮我们想了解决方案。在WWDC2012 Session 400 Developer Tools Kickoff 中，苹果介绍了具体做法。步骤如下：</p>

<ol>
<li>首先使用区域查找，因为一般项目都会依赖第三方的开源库，我们可不想更改别人的库，所以我们只查找我们库中的文件，如下图所示：</li>
</ol>


<p><img src="/images/modern-objc-remove-synthesize-1.png"></p>

<ol>
<li>接着我们用正则匹配，找到以 @synthesize开头，后面接着是 var = _var; 格式的行。插入正则表达式很简单，直接点击查找输入框左边的放大镜，选择“insert pattern"，苹果就会把常见的正则表达式都列出来，你直接选择就可以了，非常方便。如下图所示：</li>
</ol>


<p><img src="/images/modern-objc-insert-pattern.png"></p>

<p>在插入好合适的正则表达式后，我们按回车，就可以搜索到结果。</p>

<p><img src="/images/modern-objc-search-result.png"></p>

<ol>
<li>我们点击搜索界面的preview按钮，查看替换效果，可以看到，对于我们测试代码，XCode生成的预览图已经正确地当对应代码删掉了。然后我们就可以点击替换，去掉所有的 @synthesize 代码了。</li>
</ol>


<p><img src="/images/modern-objc-replace-review.png"></p>

<p>在下载完XCode4.4后，我就把我们的工程代码都转换成了新特性的语法。在转换后，我发现原本25000行的代码少了将近1000行。心里还是很开心的，因为又可以少写一些体力活类型的代码了。</p>

<p>还是那句话，希望这些新特性能够让大家玩得开心。</p>

<h3>参考资料</h3>

<ul>
<li>LLVM官方网站比较全面地介绍了 Object Literal： <a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html">http://clang.llvm.org/docs/ObjectiveCLiterals.html</a></li>
<li>WWDC2012 Session 400 Developer Tools Kickoff</li>
<li>WWDC2012 Session 405 Modern Objective-C</li>
<li>WWDC2012 Session 413 Migrating to Modern Objective-C</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[封装同步的UIActionSheet]]></title>
    <link href="http://blog.devtang.com/blog/2012/06/24/enhance-uiactionsheet/"/>
    <updated>2012-06-24T21:51:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/06/24/enhance-uiactionsheet</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>做iOS开发的同学想必都用过UIActionSheet。UIActionSheet可以弹出一个选择列表，让用户选择列表中的某一项操作。使用UIActionSheet非常简单，以下是一个简单的示例代码：</p>

<p>``` objc
- (void)someButtonClicked {</p>

<pre><code>UIActionSheet * sheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:@"ddd" destructiveButtonTitle:@"aaa" otherButtonTitles:@"bbb", @"ccc", @"ddd", nil];
sheet.destructiveButtonIndex = 1;
[sheet showInView:self.view];
</code></pre>

<p>}</p>

<ul>
<li>(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
  int result = buttonIndex;
  NSLog(@"result = %d", result);
}</li>
</ul>


<p>```</p>

<p>但我个人在使用时，感觉UIActionSheet有以下2个问题：</p>

<!-- more -->


<ol>
<li><p>UIActionSheet是一个异步的调用，需要设置delegate来获得用户选择的结果。这么小粒度的选择界面，把调用显示和回调方法分开写在2个方法中，使得原本简单的逻辑复杂了。虽然也不会复杂到哪儿去，但是每次调用UIActionSheet就需要另外写一个delegate回调方法，让我觉得这是一个过度的设计。如果UIActionSheet在弹出界面时，是一个同步调用，在调用完 showInView方法后，就能获得用户的点击结果，那该多方便。</p></li>
<li><p>UIActionSheet默认的init方法比较恶心。cancel Button其实默认是在最底部的，但是在init方法中是放在第一个参数。destructive默认是列表的第一个。如果你需要的界面不是将destructive button放在第一个，就需要再指定一次destructiveButtonIndex，而这个index的下标，是忽略cancel button来数的，虽说也不是很麻烦，但是心里感觉比较恶心。</p></li>
</ol>


<h2>改造UIActionSheet</h2>

<p>基于上面2个原因，我想把UIActionSheet改造成一个同步的调用。这样，在我调用它的 showInView方法后，我希望它直接同步地返回用户的选择项，而不是通过一个Delegate方法来回调我。另外，我也不希望init方法有那么多麻烦的参数，我只希望init的时候，指定一个数组能够设置每个button的title就行了。</p>

<p>于是我写了一个 SynchronizedUIActionSheet 类，这个类将 UIActionSheet简单封装了一下，利用 CFRunLoopRun 和 CFRunLoopStop 方法来将UIActionSheet改造成同步的调用。整个代码如下所示：</p>

<p>SynchronizedUIActionSheet.h 文件：</p>

<p>``` objc
// SynchronizedUIActionSheet.h</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface SynchronizedUIActionSheet : NSObject<UIActionSheetDelegate></p>

<p>@property (nonatomic, strong) NSArray * titles;
@property (nonatomic, assign) NSInteger destructiveButtonIndex;
@property (nonatomic, assign) NSInteger cancelButtonIndex;</p>

<ul>
<li><p>(id)initWithTitles:(NSArray *)titles;</p></li>
<li><p>(NSInteger)showInView:(UIView *)view;</p></li>
</ul>


<p>@end
```</p>

<p>SynchronizedUIActionSheet.m 文件：</p>

<p>``` objc</p>

<h1>import "SynchronizedUIActionSheet.h"</h1>

<p>@implementation SynchronizedUIActionSheet {</p>

<pre><code>UIActionSheet * _actionSheet;
NSInteger _selectedIndex;
</code></pre>

<p>}</p>

<p>@synthesize titles = <em>titles;
@synthesize destructiveButtonIndex = </em>destructiveButtonIndex;
@synthesize cancelButtonIndex = _cancelButtonIndex;</p>

<ul>
<li><p>(id)initWithTitles:(NSArray *)titles {
  self = [super init];
  if (self) {</p>

<pre><code>  _titles = titles;
  _destructiveButtonIndex = 0;
  _cancelButtonIndex = titles.count - 1;
</code></pre>

<p>  }
  return self;
}</p></li>
<li><p>(void)setTitles:(NSArray *)titles {
  <em>titles = titles;
  </em>cancelButtonIndex = titles.count - 1;  <br/>
}</p></li>
<li><p>(NSInteger)showInView:(UIView *)view {
  <em>actionSheet = [[UIActionSheet alloc] init];
  for (NSString * title in </em>titles) {</p>

<pre><code>  [_actionSheet addButtonWithTitle:title];
</code></pre>

  }
  if (_destructiveButtonIndex != -1) {

<pre><code>  _actionSheet.destructiveButtonIndex = _destructiveButtonIndex;
</code></pre>

  }
  if (_cancelButtonIndex != -1) {

<pre><code>  _actionSheet.cancelButtonIndex = _cancelButtonIndex;
</code></pre>

<p>  }
  [<em>actionSheet showInView:view];
  CFRunLoopRun();
  return </em>selectedIndex;
}</p></li>
<li><p>(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
  <em>selectedIndex = buttonIndex;
  </em>actionSheet = nil;
  CFRunLoopStop(CFRunLoopGetCurrent());
}</p></li>
</ul>


<p>@end</p>

<p>```</p>

<p>在改造后，调用ActionSheet的示例代码如下，是不是感觉逻辑清爽了一些？</p>

<p>``` objc
- (IBAction)testButtonPressed:(id)sender {</p>

<pre><code>SynchronizedUIActionSheet * synActionSheet = [[SynchronizedUIActionSheet alloc] init];
synActionSheet.titles = [NSArray arrayWithObjects:@"aaa", @"bbb", @"ccc", @"ddd", nil];
synActionSheet.destructiveButtonIndex = 1;
NSUInteger result = [synActionSheet showInView:self.view];
NSLog(@"result = %d", result);
</code></pre>

<p>}</p>

<p>```</p>

<h2>总结</h2>

<p>利用NSRunLoop来将原本的异步方法改成同步，可以使我们在某些情形下，方便地将异步方法变成同步方法来执行。</p>

<p>例如以前我们在做有道云笔记iPad版的时候，采用的图片多选控件需要用户允许我们获得地理位置信息，如果用户没有选择允许，那个这个图片多选控件就会执行失败。为了不让这个控件挂掉，我们想在用户禁止访问地理位置时，不使用该控件，而使用系统自带的图片单选的UIImagePickerController 控件来选择图片。对于这个需求，我们明显就希望将获得地理位置信息这个系统确认框做成同步的，使得我们可以根据用户的选择再决定用哪种图片选择方式。最终，我们也用类似上面的方法，用NSRunLoop来使我们的异步方法调用暂停在某一行，直到获得用户的反馈后，再往下执行，示例代码如下：</p>

<p>``` objc
- (id)someCheck {</p>

<pre><code>BOOL isOver = NO;
// do the async check method, after the method return, set isOver to YES
while (!isOver) {
    [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
}
return value;
</code></pre>

<p>}
```</p>

<p>以上Demo代码我放到github上了,地址是<a href="https://github.com/tangqiaoboy/SynchronizedUIActionSheetDemo">这里</a>，请随意取用。祝端午节快乐。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要使用SBJSON(json-framework)]]></title>
    <link href="http://blog.devtang.com/blog/2012/05/05/do-not-use-sbjson/"/>
    <updated>2012-05-05T09:35:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/05/05/do-not-use-sbjson</id>
    <content type="html"><![CDATA[<p>不知道为什么，在iOS开发中，有很多人使用 <a href="https://github.com/stig/json-framework">SBJSON</a> （又被称作json-framework)来做JSON解析库。我想这是因为SBJSON是最早在iOS上出现的JSON解析库。但是随着iOS开发的流行，越来越多优秀的JSON解析库也涌现出来, SBJSON和它们相比，性能上有很大的差距。</p>

<!-- more -->


<p>现在iOS行业内主要流行的JSON解析库有：
<a href="http://developer.apple.com/library/ios/#documentation/Foundation/Reference/NSJSONSerialization_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40010946">NSJSONSerialization</a>、
<a href="http://samsoff.es/posts/parsing-json-with-the-iphones-private-json-framework">Apple JSON</a>、
<a href="http://github.com/schwa/TouchJSON">TouchJSON</a>、
<a href="http://github.com/stig/json-framework">SBJSON</a>、
<a href="http://github.com/gabriel/yajl-objc">YAJL</a>、
<a href="http://github.com/johnezang/JSONKit">JSONKit</a></p>

<p>行业内许多同行都对这些库进行过benchmark测试。我在网上搜到的测试文章包括：</p>

<ul>
<li><a href="https://github.com/samsoffes/json-benchmarks">https://github.com/samsoffes/json-benchmarks</a></li>
<li><a href="http://blog.csdn.net/arthurchenjs/article/details/7009995">http://blog.csdn.net/arthurchenjs/article/details/7009995</a></li>
<li><a href="http://blog.csdn.net/ccat/article/details/7207871">http://blog.csdn.net/ccat/article/details/7207871</a></li>
<li><a href="http://omegadelta.net/2011/11/04/json-framework-now-sbjson-is-evil/">http://omegadelta.net/2011/11/04/json-framework-now-sbjson-is-evil/</a></li>
<li><a href="http://stackoverflow.com/questions/2256625/comparison-of-json-parser-for-objective-c-json-framework-yajl-touchjson-etc">http://stackoverflow.com/questions/2256625/comparison-of-json-parser-for-objective-c-json-framework-yajl-touchjson-etc</a></li>
</ul>


<p>下图是我从<a href="http://my.csdn.net/ArthurChenJS">ArthurChenJS</a>的<a href="http://blog.csdn.net/arthurchenjs/article/details/7009995">博客文章</a>中截取的一张benchmark测试结果图(横条越短，解析速度越快)：</p>

<p><img src="/images/json_benchmark.gif"></p>

<p>从这些文章中可以看到，SBJSON在多数测试中都处于倒数的第一或倒数第二的位置。所以说，SBJSON实际上在性能这一点上讲，确实是非常“SB”的，实在不值得大家留念。赶快把你的JSON解析库换成其它的吧！</p>

<p>那么应该换成哪个呢？
如果你的app只支持iOS 5.0以上系统，那么直接用苹果官方提供的JSON库：<a href="http://developer.apple.com/library/ios/#documentation/Foundation/Reference/NSJSONSerialization_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40010946">NSJSONSerialization</a>
库即可。
如果你的app要支持iOS 5.0以下的系统，那么我个人推荐JSONKit，不过JSONKit本身做了很多内存上的优化，所以不支持ARC，你在使用时可以对其加上 -fno-objc-arc 的编译标志即可，设置这个编译标志的详细步骤可以见<a href="http://stackoverflow.com/questions/6308425/ios-5-best-practice-release-retain">这篇文章</a>。</p>

<p>JSONKit的使用也非常方便，在使用上只需要把SBJSON的JSONValue方法换成objectFromJSONData，JSONRepresentation方法换成JSONString即可。附上一段使用示例：</p>

<p>``` objc</p>

<h1>import "JSONKit.h"</h1>

<p>NSString <em>path = [[NSBundle mainBundle] pathForResource:@"data" ofType:@"json"];
NSData </em>content = [NSData dataWithContentsOfFile:path];
NSDictionary <em>kitData = [content objectFromJSONData];
NSString </em>kitString = [kitData JSONString];
```</p>

<p>祝大家玩得开心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在iOS开发中使用FMDB]]></title>
    <link href="http://blog.devtang.com/blog/2012/04/22/use-fmdb/"/>
    <updated>2012-04-22T14:11:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/04/22/use-fmdb</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>SQLite (<a href="http://www.sqlite.org/docs.html">http://www.sqlite.org/docs.html</a>) 是一个轻量级的关系数据库。iOS SDK很早就支持了SQLite，在使用时，只需要加入 libsqlite3.dylib 依赖以及引入 sqlite3.h 头文件即可。但是，原生的SQLite API在使用上相当不友好，在使用时，非常不便。于是，开源社区中就出现了一系列将SQLite API进行封装的库，而FMDB (<a href="https://github.com/ccgus/fmdb">https://github.com/ccgus/fmdb</a>) 则是开源社区中的优秀者。</p>

<!-- more -->


<p>FMDB在使用上相当方便。以下是一个简单的例子：</p>

<p>``` objc
NSString<em> docsdir = [NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask, YES) lastObject];NSString</em> dbpath = [docsdir stringByAppendingPathComponent:@"user.sqlite"];
FMDatabase<em> db = [FMDatabase databaseWithPath:dbpath];[db open];FMResultSet </em>rs = [db executeQuery:@"select * from people"];
while ([rs next]) {    NSLog(@"%@ %@",        [rs stringForColumn:@"firstname"],</p>

<pre><code>    [rs stringForColumn:@"lastname"]);}[db close];
</code></pre>

<p>```</p>

<p>可以看到，使用FMDB后的数据库代码清晰明了，比原生的API优雅多了。另外，FMDB同时兼容ARC和非ARC工程，会自动根据工程配置来调整相关的内存管理代码。</p>

<h2>使用说明</h2>

<p>该使用说明主要翻译自fmdb的github项目说明文档: <a href="https://github.com/ccgus/fmdb">https://github.com/ccgus/fmdb</a></p>

<h3>引入相关文件</h3>

<p>首先将FMDB从github上clone下来，然后将以下文件copy到你的工程中：</p>

<p><code>
FMDatabase.h
FMDatabase.m
FMDatabaseAdditions.h
FMDatabaseAdditions.m
FMDatabasePool.h
FMDatabasePool.m
FMDatabaseQueue.h
FMDatabaseQueue.m
FMResultSet.h
FMResultSet.m
</code></p>

<h3>建立数据库</h3>

<p>建立数据库只需要如下一行即可,当该文件不存在时，fmdb会自己创建一个。如果你传入的参数是空串：@"" ，则fmdb会在临时文件目录下创建这个数据库，如果你传入的参数是 NULL，则它会建立一个在内存中的数据库。</p>

<p><code>objc
FMDatabase *db = [FMDatabase databaseWithPath:@"/tmp/tmp.db"];
</code></p>

<h3>打开数据库</h3>

<p>使用如下语句，如果打开失败，可能是权限不足或者资源不足。通常打开完操作操作后，需要调用close方法来关闭数据库。</p>

<p>``` objc
if (![db open]) {</p>

<pre><code>// error 
return;
</code></pre>

<p>}
// some operation
// ...</p>

<p>[db close];
```</p>

<h3>执行更新操作</h3>

<p>除了Select操作之外，其它的都是更新操作。更新操作使用如下方法，如果有错误，可以用error参数中获得。</p>

<p><code>objc
-[FMDatabase executeUpdate:error:withArgumentsInArray:orVAList:]
</code></p>

<h3>执行查询操作</h3>

<p>查询操作示例如下。注意：即使操作结果只有一行，也需要先调用FMResultSet的next方法。</p>

<p>``` objc
FMResultSet *s = [db executeQuery:@"SELECT * FROM myTable"];
while ([s next]) {</p>

<pre><code>//retrieve values for each record
</code></pre>

<p>}</p>

<p>FMResultSet <em>s = [db executeQuery:@"SELECT COUNT(</em>) FROM myTable"];
if ([s next]) {</p>

<pre><code>int totalCount = [s intForColumnIndex:0];
</code></pre>

<p>}</p>

<p>```</p>

<p>FMDB提供如下多个方法来获取不同类型的数据：</p>

<p><code>objc
intForColumn:
longForColumn:
longLongIntForColumn:
boolForColumn:
doubleForColumn:
stringForColumn:
dateForColumn:
dataForColumn:
dataNoCopyForColumn:
UTF8StringForColumnIndex:
objectForColumn:
</code></p>

<p>通常情况下，你并不需要关闭FMResultSet，因为相关的数据库关闭时，FMResultSet也会被自动关闭。</p>

<h3>数据参数</h3>

<p>通常情况下，你可以按照标准的SQL语句，用?表示执行语句的参数，如：</p>

<p><code>
INSERT INTO myTable VALUES (?, ?, ?)
</code></p>

<p>然后，可以我们可以调用executeUpdate方法来将?所指代的具体参数传入，通常是用变长参数来传递进去的，如下：</p>

<p><code>
NSString *sql = @"insert into User (name, password) values (?, ?)";
[db executeUpdate:sql, user.name, user.password];
</code></p>

<p>这里需要注意的是，参数必须是NSObject的子类，所以象int,double,bool这种基本类型，需要封装成对应的包装类才行，如下所示：</p>

<p><code>
// 错误，42不能作为参数
[db executeUpdate:@"INSERT INTO myTable VALUES (?)", 42];
// 正确，将42封装成 NSNumber 类
[db executeUpdate:@"INSERT INTO myTable VALUES (?)", [NSNumber numberWithInt:42]];
</code></p>

<h3>线程安全</h3>

<p>如果我们的app需要多线程操作数据库，那么就需要使用FMDatabaseQueue来保证线程安全了。
切记不能在多个线程中共同一个FMDatabase对象并且在多个线程中同时使用，这个类本身不是线程安全的，这样使用会造成数据混乱等问题。</p>

<p>使用FMDatabaseQueue很简单，首先用一个数据库文件地址来初使化FMDatabaseQueue，然后就可以将一个闭包(block)传入inDatabase方法中。
在闭包中操作数据库，而不直接参与FMDatabase的管理。</p>

<p>``` objc
// 创建，最好放在一个单例的类中
FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];</p>

<p>// 使用
[queue inDatabase:<sup>(FMDatabase</sup> *db) {</p>

<pre><code>[db executeUpdate:@"INSERT INTO myTable VALUES (?)", [NSNumber numberWithInt:1]];
[db executeUpdate:@"INSERT INTO myTable VALUES (?)", [NSNumber numberWithInt:2]];
[db executeUpdate:@"INSERT INTO myTable VALUES (?)", [NSNumber numberWithInt:3]];

FMResultSet *rs = [db executeQuery:@"select * from foo"];
while ([rs next]) {
    // …
}
</code></pre>

<p>}];</p>

<p>// 如果要支持事务
[queue inTransaction:<sup>(FMDatabase</sup> <em>db, BOOL </em>rollback) {</p>

<pre><code>[db executeUpdate:@"INSERT INTO myTable VALUES (?)", [NSNumber numberWithInt:1]];
[db executeUpdate:@"INSERT INTO myTable VALUES (?)", [NSNumber numberWithInt:2]];
[db executeUpdate:@"INSERT INTO myTable VALUES (?)", [NSNumber numberWithInt:3]];

if (whoopsSomethingWrongHappened) {
    *rollback = YES;
    return;
}
// etc…
[db executeUpdate:@"INSERT INTO myTable VALUES (?)", [NSNumber numberWithInt:4]];
</code></pre>

<p>}];</p>

<p>```</p>

<h2>工具</h2>

<p>为了查看Sqlite中的数据，一个好的图形化界面的数据库管理程序是必不可少的。mysql有phpMyAdmin，那么sqlite呢？</p>

<p>我主要使用的是Firefox的一个名为SQLite Manager的插件，安装此插件后，可以直接打开后缀名为sqlite的数据库文件。SQLite Manager提供一个图形化的界面来执行数据查询或更改操作。如下图所示：</p>

<p><img src="/images/sqlite_manager.jpg"></p>

<h2>总结</h2>

<p>FMDB将SQLite API进行了很友好的封装，使用上非常方便，对于那些使用纯Sqlite API来进行数据库操作的app，可以考虑将其迁移到基于FMDB上，这对于以后数据库相关功能的开发维护，可以提高不少效率。</p>

<p>我在学习fmdb的时候做了一个小工程用于练习，我把它放到github上了。感兴趣的可以自行下载：<a href="https://github.com/tangqiaoboy/FmdbSample">https://github.com/tangqiaoboy/FmdbSample</a></p>

<p>祝大家玩得开心。</p>
]]></content>
  </entry>
  
</feed>
