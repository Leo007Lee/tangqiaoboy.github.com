<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2015-01-18T10:29:20+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第36期]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/18/ios-weekly-36/"/>
    <updated>2015-01-18T10:25:45+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/18/ios-weekly-36</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：中国超越美国成最大iPhone消费市场、一个iOS开发工程师的职业规划思考、Functional Swift Conference等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://money.163.com/15/0111/14/AFMEA0VN002526O3.html">《瑞士银行：中国超越美国成最大iPhone消费市场》</a>：瑞士银行统计报告显示，在过去一个季度，苹果向消费者出售了6930万支iPhone。其中，中国区的销量占到总销量的35%，超过美国区24%的占比。瑞士银行的分析师Steven Milunovich提到，“数据显示，iPhone在中国区的销量出现显著增长，在过去这个季度iPhone中国区的销量占到总销量的35%，而这一数 据在去年同期只是22%”。</p></li>
<li><p><a href="http://www.infoq.com/cn/articles/interpretation-of-2014-ios-part-embrace-change">《解读2014之iOS篇：拥抱变化》</a>：对于 iOS 技术领域，2014 年是变化巨大的一年。除了软硬件外，编程语言、中国区、开发社区在 2014 年也有着巨大变化，文章试着用几个关键词来勾勒出 iOS 技术领域在 2014 年所经历的变化。</p></li>
<li><p><a href="http://www.cocoachina.com/appstore/20150109/10887.html">《苹果调整多个国家App Store应用售价》</a>：苹果最近通过邮件告知开发者，即将调整加拿大、俄罗斯以及欧洲一些国家App Store中软件售价。</p></li>
<li><p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=684">《奔向三张，不破不立：一个iOS开发工程师的职业规划思考》</a>：本文作者是《iOS应用逆向工程：分析与实战》的作者。他从自己的经历为例，分享了他自己对于iOS开发工程师的职业规划思考。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://limboy.me/ios/2014/12/31/learning-ios.html">《自学 iOS 开发的一些经验》</a>：不知不觉作为 iOS 开发也有两年多的时间了，记得当初看到 OC 的语法时，愣是被吓了回去，隔了好久才重新耐下心去啃一啃。啃了一阵，觉得大概有了点概念，看到 Cocoa 那么多的 Class，又懵了，怎么才能调用系统的相机？怎么保存信息？怎么做一个像 Twitter 个人页那样的页面？总之就是不知道该从哪切入。现在回想起来，其实路一直都在，而且有很多条，当初如果有人能够指出一条还不错的道，或许就能走得不那么艰难。于是就有了这篇文章，希望对后人能有所帮助吧。</p></li>
<li><p><a href="http://imtx.me/archives/1916.html">《Swift 小技巧（一）：如何正确地定义一个类变量（和类常量）》</a>：Swift 语言对于无论是静态语言过来还是动态语言过来的开发者来说，都有点点不适应，很多问题的解决思路不能用已经习以为常的方法去做。比如一个很常用的：如何定义类变量（和类常量）？本文介绍了作者对此问题的思考。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://2014.funswiftconf.com/">Functional Swift Conference</a>：这是在美国布鲁克林举办的一个关于Swift函数式编程的会议视频。共有6位演讲者介绍了他们对于Swift函数式编程的感悟和心得。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://pan.baidu.com/s/1gd1noSr">Log Guru</a>：Log Guru是一个收集Log的小工具, 可以在 Mac 上查看 iOS 设备的实时系统日志. 现在可以直接高亮显示在 FIR.im 上安装 app 失败的原因。后续会增加各种进程过滤、高亮某进程、只看 Error level 等功能。与此类似的工具还有：<a href="http://lemonjar.com/iosconsole/">iOS Console</a>。</p></li>
<li><p><a href="http://swiftdoc.org/">SwiftDoc</a>：SwiftDoc是一个在线的Swift帮助文档。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/onevcat/VVBlurPresentation">VVBlurPresentation</a>：VVBlurPresentation是一个很简单易用的在原来view conntroller基础上做模糊，然后present新的view controller的小项目。作者是<a href="http://www.weibo.com/onevcat?from=feed&amp;loc=nickname">onevcat</a>。</p></li>
<li><p><a href="https://github.com/ipader/SwiftGuide/blob/master/Featured.md">《Swift开源项目精选》</a>：该作者将 2014 年 Swift 开源项目做了一个筛选和汇总。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对《iOS开发进阶》一书的解释]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/18/explain-ios-pro-book/"/>
    <updated>2015-01-18T10:17:21+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/18/explain-ios-pro-book</id>
    <content type="html"><![CDATA[<p>《iOS开发进阶》虽然仅仅在<a href="http://product.china-pub.com/3770871">互动出版社</a>可以买到，还没有在京东和亚马逊上架，但是在 v2ex 上已经引起了一些讨论和误解，见 <a href="http://v2ex.com/t/161929?p=1">此贴</a>。所以我想在这里，对本书的内容和定位做一些解释。</p>

<h2>定位</h2>

<p>《iOS开发进阶》定位于帮助那些iOS开发刚刚入门的同行快速提高自己的水平，适用于至少有3个月以上iOS开发经验的读者。不适合没有任何iOS开发基础的读者阅读。对于iOS熟练开发者，本书也能补充其知识点的可能的盲区，使其相关知识体系更为完善。</p>

<p>我可能需要强调一下，对于iOS熟练开发者（工作时间大于1年），本书也<font color=blue>只能做到补充其可能的盲区的作用</font>。或者有一些比较牛的朋友，本书也可能<font color=red>补不了什么盲区</font>。</p>

<p>我自认为其中 “CoreText排版引擎章节”以及第三章的底层原理部分是适合这部分iOS熟练开发者的。但不排除很多熟练开发者对底层原理已经很了解了，同时对CoreText不感兴趣。</p>

<p>所以希望iOS熟练开发者能够在买书前翻阅一下<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>。</p>

<h2>内容</h2>

<p>本书中的所有内容都是我的原创，但是有部分在博客上公开过，我自己数了一下，一共有9个章节在我的博客上可以看到完整的内容，另外11个章节在我的博客上只能看到部分内容或完全看不到内容。但是很有可能，随着图书的慢慢发售，我将其它未公开的电子版内容放到网上。</p>

<p>经常看我的博客的朋友，可能会有些失望或者觉得不值。所以希望大家在买书前翻阅一下<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>，以避免买了后悔。</p>

<h2>书名</h2>

<p>有人抱怨说《iOS开发进阶》这个书名太过于有欺骗性，应该叫《iOS开发备忘录》。对此我不太认同，《iOS开发进阶》很好地排除了那些iOS初学者，从书名上他们就会放弃看本书，而如果叫《iOS开发备忘录》就不一定了。另外，任何一个读者都应该看过目录再买书的吧？我不认为本书的书名会有那么大的欺骗性。</p>

<h2>质量</h2>

<p>一些人批评本书的内容质量比国外的 objc.io 和 <a href="raywenderlich.com/">RW</a> 的书差多了。对此我想说，您批评得对，我还需要努力！但是这不代表本书就没有价值吧？例如CoreText章节，我现在在国内外的图书中，仍然没有看到有谁把这个从浅入深讲完整的呀。第一部分对工具的介绍虽然技术含量低，但也没有谁完整整理过。与其自叹和国外有差距，不如自己实际来努力一下，改善一下国内的知识分享环境，不是更好么？</p>

<h2>最后</h2>

<ul>
<li>我写本书不指望能挣多少钱，实际上它也不能给我带来多少收入。但我真心希望这本书能够帮助到大家。现在看来，本书最合适的读者仍然是刚刚入门3个月的开发者。</li>
<li>请所有购买此书的朋友购买前先看目录：<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>。一本书不可能适合所有水平的读者，请自己决定。</li>
</ul>


<p>愿大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解读2014之iOS篇：拥抱变化]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/07/ios-2014-summary/"/>
    <updated>2015-01-07T21:22:15+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/07/ios-2014-summary</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/interpretation-of-2014-ios-part-embrace-change">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h2>前言</h2>

<p>对于 iOS 技术领域，2014 年是变化巨大的一年。在硬件上，由于苹果发布了更大尺寸的 iPhone 6 和 iPhone 6 plus，使得 iOS 设备的屏幕适配工作也多了起来。这还不包括全新的 Apple Watch 带来的开发上的变化。在软件上，Swift 语言的推出惊呆了整个业界，从 Objective-C 切换成另一个全新语言的代价是巨大的，但我们也看到了它长远的好处以及苹果对此的决心。除了软硬件外，编程语言、中国区、开发社区在 2014 年也有着巨大变化，我们试着用几个关键词来勾勒出 iOS 技术领域在 2014 年所经历的变化。</p>

<h2>硬件</h2>

<p>苹果在 2014 年推出了 iPhone 6 和 iPhone 6 plus，iOS 设备也进入了大屏时代！虽然包括笔者在内的许多朋友都认为：“Plus 实在太大了”，但是从销售量看， iPhone 6 plus 在初期占据了 <a href="http://tech.163.com/14/1006/08/A7S1AHBN000915BE.html">6 成</a> 的销售量。我本人在实际使用 iPhone 6 plus 几周后，也很快适应了它的屏幕尺寸，现在反而不习惯使用了两年的 iPhone 4s 了。在开发上，iPhone 6 的推出使得 iOS 开发者也开始像 Android 开发者那样，为适配工作担忧。与 Android 开发者不同，iOS 开发在过去多年都是用 “绝对定位” 的方式来放置各种 UI 控件，使用 Autoresizing Mask 就可以轻松搞定 iPhone4 和 iPhone5 屏幕高度的差异问题。但现在不一样了，iOS 开发者需要学习使用 AutoLayout，通过各种 Constraint 来调整 UI 控件，但是很多界面是需要用代码来编写的，所以这方面的开发工作会比较辛苦，好在有 <a href="https://github.com/Masonry/Masonry">Masonry</a> 这一类的开源库来辅助我们做界面开发工作。</p>

<p>iPhone 6 plus 引入的特有的 3x 的图片问题使 UI 设计师的工作量也大大的增加了。另外，以前由于 Android 设备其实太过于分裂，无法对每种屏幕分辨率都做到精致地设计，所以设计师大多只是用 “凑合用” 的思想来实施 Android 应用的适配。这一点从 Android 大屏手机上的应用呈现就能看出来。而现在同样的方式不太可能被严格的苹果以及挑剔的 iPhone 用户所接受，设计师很可能需要为 iPhone 6 plus 做专门的大屏设计，才能获得用户的芳心。</p>

<p>Apple Watch 的推出让适配工作真正地进入了 Hard 模式。优秀的开发者需要在工程中做好代码地复用，才能让底层的逻辑能够同样运行在 Apple Watch 中。不过这方面的工作还只是猜想，我们得等到 Apple Watch 真正面世的时候，才能真正了解到相关的开发工作有多么不同。</p>

<h2>软件</h2>

<p>苹果在 2014 年的全球开发者大会（World Wide Developer Conference，简称 WWDC）上并没有发布任何新的硬件产品，但展示出其在软件上的各种功能改进和整合上的巨大努力。苹果推出了新的 OS X 10.10 操作系统 Yosemite，它吸收了从 iOS 7 开始的扁平化的设计风格，很多改进的细节都可以看到 iOS 系统对于 OS X 的影响。Yosemite 最吸引我的是 handoff 功能。handoff 功能将 Mac 电脑和 iPhone、iPad 的功能进行了深度整合，当你拥有这三个设备时，它们每一个都可以接打电话和收发短信，你在它们任何一个设备上编辑的文档，也可以实时同步到另一个设备上。handoff 并不是苹果的应用独有的功能，苹果将其相关的 API 都开放给了开发者，所以开发者也可以完全开发出支持 handoff 功能的应用。</p>

<p>相对于 Yosemite 带来的整合方面的改进，新版 iOS 8 的改进的重点则是开放。苹果开放了输入法接口，允许第三方提供输入法。苹果也开放了 Touch ID，允许第三方应用获得指纹信息。HomeKit 则为智能硬件开放了不少可以互操作的接口。另外，iOS 8 还新增了 4000 个新的 API，开放了大量底层 API 接口供应用调用。所以对于普通用户而言，iOS 8 新增的可见功能可能是有限的，但是其开放的大量 API 和新 SDK 释放出了巨大的想象空间，相信会产生更多有趣的应用。</p>

<p>对于一个硬件来说，相关的软件是非常重要的，但是苹果却将它的操作系统和 iWork 办公套件完全免费，这显示出苹果对于软件生态圈不同的理解。而微软至今最大的两大收入还是来自它的 Office 和 Windows 系列操作系统。在微软还在发愁他的新版 Wiindows 10 怎么卖出去时，苹果早已不玩这种 1.0 的商业模式游戏了。</p>

<h2>Swift</h2>

<p>苹果的 Objective-C 语言发明于与 C++ 同时期的上世纪 80 年代初，虽然苹果对其进行了很多次改进，但这终究像给应用打补丁一样，不是特别舒服。这次 Swift 的推出，苹果试图用全新的编程语言来提高 OS X 和 iOS 程序员的开发效率。单从语言特性上来看，Swift 吸收了众多现代编程语言的优秀特性，例如类型推断（Type inference）、范型（Generic）、闭包（Closure）、命名空间（namespace），元组（tuple）等，整体语法上也更加简洁。我们也了解到 Swift 是苹果从 4 年前就开始筹划中的事情，可见苹果在长远规划上对于 Swift 语言的重视，相信未来 Swift 会接替更多 Objective-C 原本的地位，所有 iOS 开发者都应该花时间学习这门全新的语言。</p>

<p>苹果这次推出 Swift 也吸引了大量的讨论，其中比较不正确的观点是认为 iOS 开发的门槛因此而降低了。从我和身边的同行对 Swift 的学习和讨论来看，Swift 并不是一门可以简单上手的语言。并且在未来一到两年内，iOS 开发必然会经历同时使用 Objective-C 和 Swift 的过渡阶段。对于 iOS 开发者，除了必须掌握以前的 Objective-C 语言的知识，还需要学习并不简单的 Swift，可见 iOS 开发的门槛不但没有降低，反而提高了不少。</p>

<h2>中国</h2>

<p>苹果是重视中国的，它在大中华区的销售贡献了约 15% 的全球营收。但是从某些方面看，苹果还是不够重视中国的。很多中国用户抱怨的问题，苹果都一直没有解决。我们来看看苹果对于中国区的用户和开发者，还有哪些需要改进的地方。</p>

<p>刚刚提到的 handoff 功能依赖于苹果的 iCloud，但是苹果的 iCloud 存取速度在中国却是非常糟糕的。笔者试图打开一个通过 iCloud 共享的约为 6M 的视频，但是等了 3 分钟才打开。与此同时，国内的各种网盘服务却能提供非常大的免费容量以及非常快的访问速度。</p>

<p>中国的垃圾短信和骚扰电话一直是非常严重的，而 iMessage 免费发送的特点给了垃圾短信发送提供了很好的平台。苹果到现在都没有推出相关的有效避免垃圾短信的办法，只提供了一个用于反馈垃圾短信的邮箱，整个反馈流程也非常繁琐，需要提供发送者邮件，内容，以及相关截图。笔者反馈了数 10 次之后，也没有得到过任何回应。对于骚扰电话，苹果只提供了事后将该电话号码加入黑名单的功能，这使得用户只能是接了骚扰电话后，才能做相应的手工处理。这些问题从技术上要解决没有任何难度，看看 Android 平台就可以看到这方面的问题被非常完美地解决了。但是苹果却不愿意做相关的努力，这只能说明它还不够重视中国用户。</p>

<p>苹果的 App Store 中国区也是比较混乱的，各种刷榜的应用充斥着排行榜的前几名。苹果在这方面应该是做了很多努力的，但是终究还是做得不够。从很多应用的评论中，我们都能看出刷榜的痕迹。由于这方面直接和收入相关，所以我相信苹果还是会尽力改进的。App Store 还有一个问题是支付不太方便，今年苹果和银联合作，不但推出 1 元的应用，而且允许用户使用银联卡来付费，极大地方便了用户购买应用。</p>

<h2>社区、会议和第三方服务</h2>

<p>国外的 iOS 开发社区今年依然发展红火，比较引人注目的是 <a href="http://www.objc.io/">objc.io</a> 。 objc.io 每一期的质量都非常高，所以由知名开发者王巍（onevcat）组织的翻译团队会将每一期文章都翻译成<a href="http://objccn.io/">中文</a>。国内的博客和社区发展相比国外还是比较慢，参与分享 iOS 技术的独立博客相比以往多了很多，但整体质量还有待提高。</p>

<p>移动开发也实实在在地成为了一个重要的技术领域，QCon 和 ArchSummit 每一届都会有专门的移动专题，可见这方面聚焦了开发者大量的关注。</p>

<p>2014 年国内外都涌现出了大量服务于移动开发者的第三方服务。这些第三方服务作为生态圈的一个重要组成部分，将会方便开发者聚焦核心功能，而不用担心基础设施的搭建。</p>

<h2>展望</h2>

<p>展望 2015 年，笔者认为：</p>

<ul>
<li>苹果的 iPhone 将会继续占据高端机市场，但千元左右的 Android 机将会占据其它所有的用户，最终 Android 的用户量将远远大于 iPhone 的用户量，但由于 iPhone 用户的优质属性（付费意愿高），所以各大应用将会在这两大平台都会投入足够的开发力量。如果有人能够比较好的解决代码在 iOS 和 Android 平台的复用性问题，将会很大程度上改变现在的开发模式。</li>
<li>Swift 语言将仍然处于发展阶段，Objective-C 依旧会是 iOS 程序开发的主要语言。更多的开发者将会使用混合开发的方式，同时使用 Objective-C 和 Swift 来开发应用。</li>
<li>国内 iOS 开发社区还会进一步发展，会出现更多的移动开发相关的开源基础设施或第三方服务。</li>
<li>苹果很可能会继续不那么重视中国区用户。iCloud 服务依然糟糕，iMessage 垃圾短信依然泛滥，由于害怕 “侵犯用户隐私 “，骚扰电话还是没有很好的解决办法。但苹果在大中华区的收入会继续增加。</li>
<li>由于 Objective-C 和 Swift 相比 Java 语言没有那么普及，Mac 电脑也没有 Windows 电脑普及，这造成 iOS 学习门槛较高。优秀的 iOS 开发者依然是稀缺资源，相比同等的 Android 开发者，iOS 开发者可以获得更多的收入。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第35期]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/31/ios-weekly-35/"/>
    <updated>2014-12-31T22:03:13+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/31/ios-weekly-35</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/12/developer-favorite-swift-skills">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：90后CEO的开源心得、iOS8 企业应用部署Bug、盘点开发者最喜爱的Swift技巧、iOS开发的一些奇巧淫技等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.cocoachina.com/programmer/20141224/10747.html">《90后CEO的开源心得：Github 2500 star是如何炼成的》</a>：如果你是一名 iOS 开发者同时还是 Github 的重度使用者，那么你多半见过这个项目：PNChart，一个提供带动画的图表控件。截止到目前为止，PNChart 在 Github上 的 star 数已经超过2500，是一个备受开发者喜爱的 iOS 第三方开源库。该开源库的作者周楷雯，在本文中分享了如何打造一个成功的iOS开源项目。</p></li>
<li><p><a href="http://www.36kr.com/p/218161.html">《苹果获反向AirPlay专利，在iPhone上同步播放Apple TV内容》</a>：苹果刚刚获得了美国专利与商标局授予的一项新专利，这项专利可以让内容在便携式设备上同步显示，即可以让 Apple TV 这样位置固定的设备上播放的内容，实时同步到 iPhone、iPad 等 iOS 设备上。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://thierry-xing.iteye.com/blog/2119241">《iOS8 企业应用部署Bug》</a>：使用iOS企业部署（In-House Distribution）方式进行应用升级时，在 iOS8 下无法成功，删除应用再重新安装也不行。如果你也遇到了这个问题，那么可以看看作者是如何解决的。需要说明的是，该Bug在 iOS 8.1.2 更新中得到了修复。</p></li>
<li><p><a href="http://www.csdn.net/article/2014-12-25/2823312-favorite-swift-tips-and-tricks">《盘点开发者最喜爱的Swift技巧》</a>：Swift 发布才半年左右，却已深得众多开发者的青睐，也有了许多学习资源、项目和开发工具。在本文中，来自objc.io、LinkedIn等各个公司的软件工程师及资深开发者总结了自己在接触 Swift 过程中最喜爱的贴士与技巧。</p></li>
<li><p><a href="http://www.jianshu.com/p/50b63a221f09">《iOS开发的一些奇巧淫技》</a>：作者分享了一些 iOS 开发中涉及的小技巧。</p></li>
<li><p><a href="http://blog.nswebfrog.com/2014/12/22/swift-script/#541841-tsina-1-77759-d0fc3b3b40d03e6b36d60be81253e42e">《Swift 脚本编写》</a>：作为苹果新一代的编程语言，Swift 不仅可以用来开发 iOS 应用，还可以用来编写脚本，来完成 OS X 下的一些自动化的工作。终于可以用我们熟悉的语言来写自动化脚本了，想想是不是就觉得心里有点小激动呢^_^。本文从一个Hello World脚本开始，介绍了如何用Swift完成脚本编写工作。</p></li>
<li><p><a href="http://bbs.iosre.com/forum.php?mod=viewthread&amp;tid=645">《一步一步教你写classdump》</a>：最近刚读完《Mac OS X and iOS Internals》的前几章，也想练练手，写tweak，app也烦了，基于上述原因就试着写了这个demo。虽然这些功能都可以通过 otool 和 classdump 去实现，但也算是对 macho 文件格式的一种学习吧。</p></li>
<li><p><a href="https://github.com/AttackOnDobby/iOS-Core-Animation-Advanced-Techniques">《iOS-Core-Animation-Advanced-Techniques》</a>：一本不错的翻译图书，介绍了关于Core Animation的各方面的知识。</p></li>
<li><p><a href="https://github.com/ipader/SwiftGuide">《Swift语言指南》</a>：这份指南汇集了 Swift 语言主流学习资源，并以开发者的视角整理编排。</p></li>
<li><p><a href="http://imtx.me/archives/1917.html">《Swift 项目使用 CoreData 可能会碰到的 32 位系统问题》</a>：最近在项目中偶然发现了一个问题，那就是 Swift 的 CoreData 在 32 位系统下与 64 位系统下表现不一致的问题。简单的说：如果你的 CoreData 模型有一个声明为 Boolean 的 Attribute，并且在代码中使用 NSNumber 来包装（而不是Bool）的话，很可能会遇到这个问题。作者介绍了该问题的细节和解决办法。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/rsms/peertalk">peertalk</a>：peertalk 是一个支持 iOS 与 Mac 通过 USB 相互通讯的开源库。 Duet Display 基于此实现了将 Mac 界面呈现到 iOS 设备上。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第34期]]></title>
    <link href="http://blog.devtang.com/blog/2014/12/21/ios-weekly-34/"/>
    <updated>2014-12-21T19:56:06+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/12/21/ios-weekly-34</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/12/ios-code-android-app">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：浅谈 iOS 版本号、UIScrollView 实践经验、设计优雅的移动游戏、如何把iOS代码编译为Android应用等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://tech.sina.com.cn/mobile/n/n/2014-12-12/doc-iavxeafr6871711.shtml">《iPhone 6/6 Plus中国销量曝光：单月销量650万》</a>：据iSuppli Corp.中国研究总监王阳爆料，iPhone 6和iPhone 6 Plus在国内受欢迎的情况大大超过预期，苹果在中国的单月销量在11月超过了650万台，全年在中国的销量将超过4000万台。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://vombat.tumblr.com/post/60530544401/date-parsing-performance-on-ios-nsdateformatter">《 Date parsing performance on iOS》</a>：文章介绍了一个关于格式化时间的”黑科技“，作者使用 sqlite 替换 NSDateFormatter，提高了16倍的转换效率。</p></li>
<li><p><a href="http://club.fir.im/topic/548c09a1f6de25850440afd7">《浅谈 iOS 版本号》</a>：FIR.im 一直在尽量兼容不同使用习惯的版本号形式, 但是在使用中我们发现好多开发者对怎么更好的用版本号来标示应用很陌生。这是篇基础文章，简单介绍 iOS 的版本号。</p></li>
<li><p><a href="http://tech.glowing.com/cn/practice-in-uiscrollview/">《UIScrollView 实践经验》</a>：UIScrollView（包括它的子类 UITableView 和 UICollectionView）是 iOS 开发中最常用也是最有意思的 UI 组件，大部分 App 的核心界面都是基于三者之一或三者的组合实现。UIScrollView 是 UIKit 中为数不多能响应滑动手势的 view，相比自己用 UIPanGestureRecognizer 实现一些基于滑动手势的效果，用 UIScrollView 的优势在于 bounce 和 decelerate 等特性可以让 App 的用户体验与 iOS 系统的用户体验保持一致。本文通过一些实例讲解 UIScrollView 的特性和实际使用中的经验。</p></li>
<li><p><a href="http://objccn.io/issue-18-1/">《设计优雅的移动游戏》</a>：设计手机游戏是一个有趣的主意，理论上，做智能手机或者平板电脑游戏与其他平台游戏设计没有根本的不同。手机游戏在传统系统属性上与其他类型以及平台极其相似，无论你想创造一个开心农场，使命召唤还是国际象棋。但实践中，想要创建一个成功的手机游戏完全是另一回事。有很多其他的顾虑，从市场饱和及难以被发现，到玩法定型及设备的尺寸因素等。由于这些原因，作为一个设计师来说创造一个优秀的手机游戏就像在玩“困难模式”。文章介绍了手机游戏的两个特征：游戏时长和交互方法，另外介绍了几种适用于移动平台的系统设计方法。本文译者：<a href="http://diwu.me">@唯木念</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-2/">《Metal》</a>：Metal 是针对 iPhone 和 iPad 中 GPU 编程的高度优化的框架。其名字来源是因为 Metal 是 iOS 平台中最底层的图形框架 (意指 &ldquo;最接近硬件&rdquo;)。该框架被设计用来实现两个目标: 3D 图形渲染和并行计算。这两者有很多共同点。它们都在数量庞大的数据上并行运行特殊的代码，并可以在 GPU 上执行。本文介绍了 Metal 的好处以及使用基础。本文译者：migrant。</p></li>
<li><p><a href="http://objccn.io/issue-18-3/">《Scene Kit》</a>：在 WWDC 2012，Apple 向 OS X 开发者们介绍了 Scene Kit，这个 Cocoa 下的 3D 渲染框架。在第一版通用 3D 渲染器发布后，一年内又陆续增加了像 shader (着色器) 修改器、节点约束、骨骼动画等几个强大的特性 (随 Mavericks 发布)。今年，Scene Kit 变的更加强大，支持了粒子效果、物理引擎、脚本事件以及多通道分层渲染等多种技术，而且，对于很多人来说更关键的是，它终于可以在 iOS 中使用了。本文介绍了Scene Kit的概要知识，以及如何使用它来写游戏。本文译者：<a href="http://blog.sunnyxx.com">孙源</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-4/">《游戏中的多点互联》</a>：多点互联是苹果的一个传输无关的网络框架，提供网络的发现、创建和通信功能。MPC 的关键用途在于创建临时网络中的点对点连接，而不需要考虑天气、无线、蓝牙等各种因素，只需要有个人网络就行。一旦创建之后，各个节点可以安全地共享消息、数据和文件资源。大部分的游戏都更适合用 GameKit 开发，它有很多直接使用 MPC 实现的游戏相关的封装。不过作为 MPC 的进阶手册，本文主要涉及 MPC 的各种使用技巧。本文译者：<a href="http://blog.callmewhy.com">汪海洋</a>。</p></li>
<li><p><a href="http://objccn.io/issue-18-5/">《虚拟音域 &ndash; 声音设计的艺术》</a>：由于声音占据我们日常生活的很大部分，所以声音在游戏开发中也越来越重要。然而，要实现完全身临其境的虚拟现实，最大的挑战之一就是设计逼真的声音环境。如果你身处一个虚拟森林中，但却听不到树叶的沙沙声，也听不到昆虫的鸣叫声，你就不会感觉到真实。在某些方面，音效设计是吃力不讨好的活计。你什么都正确的话，没人会注意到这些，但是一旦你做错了什么，人们百分之百会注意到。这是一项痛苦，细节导向，但又几乎被忽略的工作。但是，当你捕捉到一种美妙的声音体验或真实的声音环境时，你会感觉到一种乐趣，这种乐趣很大程度上弥补了工作辛苦、收获甚少的不足。本文介绍了音效各方面的知识，包括：记录声音、麦克风、数码音频软件、拟音、音频滤波器、混合音效等知识。本文译者：<a href="http://blog.sina.com.cn/u/1867019351">树叶</a></p></li>
<li><p><a href="http://madebymany.com/blog/continuous-integration-for-ios-development">《Continuous Integration for iOS Development》</a>：文章介绍了如何基于Xcode的Bot做持续集成。</p></li>
<li><p><a href="http://nshipster.com/nsundomanager/">《NSUndo​Manager》</a>：本文介绍了 NSUndoManager 的使用。NSUndoManager 可以用来做一些撤销操作。</p></li>
<li><p><a href="http://www.jianshu.com/p/6313025349a9">《视频特效制作》</a>：文章介绍了一些视频特效制作方法，包括给视频添加边框、给视频添加水印、给视频添加动画、做出3D效果、视频推进效果等技术细节。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://boolan.com/lecture/1000001076#0-tsina-1-39436-397232819ff9a47a7b7e80a40613cfe1">《如何把iOS代码编译为Android应用》</a>：OurCoders.com站长 <a href="http://www.weibo.com/tinyfool?from=feed&amp;loc=nickname">@tinyfool</a>介绍了他们通过将Objective-C底层移植到Android平台，最终把iOS代码编译为Android应用的过程。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/mutualmobile/MMWormhole">MMWormhole</a>：MMWormhole 是一个方便开发者在 iOS 应用与 iOS extensions 之间交换数据的开源框架。</p></li>
<li><p><a href="https://github.com/rickytan/RTImageAssets">RTImageAssets</a>：RTImageAssets 是一个 Xcode 插件，用来生成 @3x 的图片资源对应的 @2x 和 @1x 版本，只要拖拽高清图到 @3x 的位置上，然后按 <code>Ctrl+Shift+A</code> 即可自动生成两张低清的补全空位。当然，如果你对图片质量要求不高的话，你也可以从 @2x 的图生成 @3x 版本。</p></li>
<li><p><a href="https://github.com/poolqf/PQFCustomLoaders">PQFCustomLoaders</a>：PQFCustomLoaders 提供了高质量的、定制化的加载进度条。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
