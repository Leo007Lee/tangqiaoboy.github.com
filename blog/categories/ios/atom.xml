<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-02-27T17:41:22+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第1期]]></title>
    <link href="http://blog.devtang.com/blog/2014/02/27/ios-weekly-1/"/>
    <updated>2014-02-27T17:23:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/02/27/ios-weekly-1</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/02/apple-ssl-bug">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2014-02-22/08379183001.shtml">《苹果收购iOS测试平台TestFlight的开发商》</a>，苹果公司确认收购知名iOS测试平台TestFlight的开发商Burstly。与此同时，TestFlight表示将停止提供Android平台产品，不再面向新用户销售Android版测试软件开发包(SDK)，而当前用户仍可以继续使用。</p></li>
<li><p><a href="http://coolshell.cn/articles/11112.html">《由苹果的低级Bug想到的》</a>: 2月22日苹果修复了SSL连接验证的一个bug，该bug会引起中间人攻击。文章作者详细分析了Bug产生的潜在原因和一些思考，包括代码风格、测试、以及goto语句的使用。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/02/11/baidu-interview/">《百度面试》</a>：作者在文章中分享了百度移动云可穿戴部门iOS开发职位的面试经历，其中多个技术问题值得大家深入学习。</p></li>
<li><p><a href="http://blog.rpplusplus.me/blog/2014/02/11/facebook-paper-used-3rd/">《Facebook Paper使用的第三方库》</a>：作者在文章中分享了facebook paper使用的第三方库。该列表中的第三方库对广大iOS开发者来说，具有很好的参考意义。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.xcodev.com/archives/iphone-baseband-intro/">《初识iPhone基带通讯》</a>：基带（Baseband）是手机的通讯模块，它负责移动网络的调制与解调工作，它与手机核心通讯功能息息相关。作者在文章中介绍了，如何在越狱的iPhone中，用基带进行通讯。</p></li>
<li><p><a href="http://sjpsega.com/blog/2014/02/11/yi--ios-7-best-practices-part-1/">《[译]iOS7最佳实践：一个天气App案例(一)》</a>和<a href="http://sjpsega.com/blog/2014/02/15/yi--ios-7-best-practices-part-2/">《[译]iOS7最佳实践：一个天气App案例(二)》</a>：在这篇来自raywenderlich的教程中，作者详细介绍了如何使用依赖管理工具Cocoapods、纯代码布局、响应式编程框架ReactiveCocoa以及OpenWeatherMap完成一个天气应用，具有很高的学习价值。</p></li>
<li><p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/19642621">《基于脚本实现动态库注入》</a>：作者分享了她在越狱手机上，基于脚本向某个应用动态注入动态库的想法和实践。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/">《Xcode5 Plugins 开发简介》</a>：作者在文章中介绍了如何给Xcode5开发插件。最后作为示例，开发了一个简单的插件，记录Xcode开发中Building的时间。</p></li>
<li><p><a href="http://onevcat.com/2014/02/ios-test-with-kiwi/">《TDD的iOS开发初步以及Kiwi使用入门》</a>：测试驱动开发(Test Driven Development，简称为TDD)是保证代码质量的一种程序开发方法。作者介绍了在iOS开发中使用TDD及Kiwi的方法。</p></li>
<li><p><a href="http://iosinit.com/?p=787">《objc.io系列文章中文翻译汇总》</a>：objc.io是国外的一个iOS教程网站，它每一期的教程会有一个主题，在这个主题下会有6篇左右的文章（有时由浅入深，有时侧重点不同），实属iOS学习中的精品资源。因此，每一期objc.io文章出来的时候，都会有一些热心的读者将文章翻译成中文。作者将网上的翻译汇总在文章中，方便大家阅读。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://itunes.apple.com/cn/app/crash-manager/id806327079?mt=8">Crash Manager</a>：Crash Manager是Crashlytics的非官方iPhone客户端，而且在AppStore上免费。InfoQ也曾撰文介绍过Crashlytics的使用：<a href="http://www.infoq.com/cn/articles/crashlytics-crash-statistics-tools">《统计Crash的工具Crashlytics》</a>。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/DyCI/dyci-main">DyCI</a> ：DyCI是一个动态注入工具，用于向iOS应用中注入代码而不用重新启动应用。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa - iOS开发的新框架]]></title>
    <link href="http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction/"/>
    <updated>2014-02-11T18:47:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction</id>
    <content type="html"><![CDATA[<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/reactivecocoa-ios-new-develop-framework">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h2>什么是ReactiveCocoa</h2>

<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>（其简称为RAC）是由<a href="https://github.com/blog/1107-reactivecocoa-for-a-better-world">Github</a> 开源的一个应用于iOS和OS X开发的新框架。RAC具有函数式编程和响应式编程的特性。它主要吸取了.Net的 <a href="http://msdn.microsoft.com/en-us/data/gg577609">Reactive Extensions</a>的设计和实现。</p>

<h2>ReactiveCocoa试图解决什么问题</h2>

<p>经过一段时间的研究，我认为ReactiveCocoa试图解决以下3个问题：</p>

<ol>
<li>传统iOS开发过程中，状态以及状态之间依赖过多的问题</li>
<li>传统MVC架构的问题：Controller比较复杂，可测试性差</li>
<li>提供统一的消息传递机制</li>
</ol>


<!-- more -->


<h3>传统iOS开发过程中，状态以及状态之间依赖过多的问题</h3>

<p>我们在开发iOS应用时，一个界面元素的状态很可能受多个其它界面元素或后台状态的影响。</p>

<p>例如，在用户帐户的登录界面，通常会有2个输入框（分别输入帐号和密码）和一个登录按钮。如果我们要加入一个限制条件：当用户输入完帐号和密码，并且登录的网络请求还未发出时，确定按钮才可以点击。通常情况下，我们需要监听这两个输入框的状态变化以及登录的网络请求状态，然后修改另一个控件的<code>enabled</code>状态。</p>

<p>传统的写法如下（该示例代码修改自<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa官网</a> ） ：</p>

<p>``` objc</p>

<p>static void *ObservationContext = &ObservationContext;</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];</p>

<p>  [LoginManager.sharedManager addObserver:self</p>

<pre><code>                           forKeyPath:@"loggingIn"
                              options:NSKeyValueObservingOptionInitial
                              context:&amp;ObservationContext];
</code></pre>

  [self.usernameTextField addTarget:self action:@selector(updateLogInButton)

<pre><code>               forControlEvents:UIControlEventEditingChanged];
</code></pre>

  [self.passwordTextField addTarget:self action:@selector(updateLogInButton)

<pre><code>               forControlEvents:UIControlEventEditingChanged];
</code></pre>

<p>}</p></li>
<li><p>(void)updateLogInButton {
  BOOL textFieldsNonEmpty = self.usernameTextField.text.length > 0 &amp;&amp; self.passwordTextField.text.length > 0;
  BOOL readyToLogIn = !LoginManager.sharedManager.isLoggingIn &amp;&amp; !self.loggedIn;
  self.logInButton.enabled = textFieldsNonEmpty &amp;&amp; readyToLogIn;
}</p></li>
<li><p>(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object</p>

<pre><code>                  change:(NSDictionary *)change context:(void *)context {
</code></pre>

  if (context == ObservationContext) {

<pre><code>  [self updateLogInButton];
</code></pre>

  } else {

<pre><code>  [super observeValueForKeyPath:keyPath ofObject:object
                         change:change context:context];
</code></pre>

<p>  }
}</p></li>
</ul>


<p>```</p>

<p>RAC通过引入信号（Signal）的概念，来代替传统iOS开发中对于控件状态变化检查的代理（delegate）模式或target-action模式。因为RAC的信号是可以组合（combine）的，所以可以轻松地构造出另一个新的信号出来，然后将按钮的<code>enabled</code>状态与新的信号绑定。如下所示：</p>

<p>``` objc</p>

<p>RAC(self.logInButton, enabled) = [RACSignal</p>

<pre><code>combineLatest:@[
    self.usernameTextField.rac_textSignal,
    self.passwordTextField.rac_textSignal,
    RACObserve(LoginManager.sharedManager, loggingIn),
    RACObserve(self, loggedIn)
] reduce:^(NSString *username, NSString *password, NSNumber *loggingIn, NSNumber *loggedIn) {
    return @(username.length &gt; 0 &amp;&amp; password.length &gt; 0 &amp;&amp; !loggingIn.boolValue &amp;&amp; !loggedIn.boolValue);
}];
</code></pre>

<p>```</p>

<p>可以看到，在引入RAC之后，以前散落在<code>action-target</code>或KVO的回调函数中的判断逻辑被统一到了一起，从而使得登录按钮的<code>enabled</code>状态被更加清晰地表达了出来。</p>

<p>除了组合（combine）之外，RAC的信号还支持链式（chaining）和过滤（filter)，以方便将信号进行进一步处理。</p>

<h3>试图解决MVC框架的问题</h3>

<p>对于传统的<a href="http://zh.wikipedia.org/zh-cn/MVC">Model-View-Controller</a>的框架，Controller很容易变得比较庞大和复杂。由于Controller承担了Model和View之间的桥梁作用，所以Controller常常与对应的View和Model的耦合度非常高，这同时也造成对其做单元测试非常不容易，对iOS工程的单元测试大多都只在一些工具类或与界面无关的逻辑类中进行。</p>

<p>RAC的信号机制很容易将某一个Model变量的变化与界面关联，所以非常容易应用<a href="http://en.wikipedia.org/wiki/Model_View_ViewModel">Model-View-ViewModel</a> 框架。通过引入ViewModel层，然后用RAC将ViewModel与View关联，View层的变化可以直接响应ViewModel层的变化，这使得Controller变得更加简单，由于View不再与Model绑定，也增加了View的可重用性。</p>

<p>因为引入了ViewModel层，所以单元测试可以在ViewModel层进行，iOS工程的可测试性也大大增强了。InfoQ也曾撰文介绍过MVVM：<a href="http://www.infoq.com/cn/articles/mvvm-revelation/">《MVVM启示录》</a> 。</p>

<h3>统一消息传递机制</h3>

<p>iOS开发中有着各种消息传递机制，包括KVO、Notification、delegation、block以及target-action方式。各种消息传递机制使得开发者在做具体选择时感到困惑，例如在objc.io上就有<a href="http://www.objc.io/issue-7/communication-patterns.html">专门撰文</a>（<a href="http://beyondvincent.com/blog/2013/12/14/124-communication-patterns/">破船的翻译</a> ），介绍各种消息传递机制之间的差异性。</p>

<p>RAC将传统的UI控件事件进行了封装，使得以上各种消息传递机制都可以用RAC来完成。示例代码如下：</p>

<p>``` objc</p>

<p>// KVO
[RACObserve(self, username) subscribeNext:<sup>(id</sup> x) {</p>

<pre><code>NSLog(@"成员变量 username 被修改成了：%@", x);
</code></pre>

<p>}];</p>

<p>// target-action
self.button.rac_command = [[RACCommand alloc] initWithSignalBlock:<sup>RACSignal</sup> *(id input) {</p>

<pre><code>NSLog(@"按钮被点击");
return [RACSignal empty];
</code></pre>

<p>}];</p>

<p>// Notification
[[[NSNotificationCenter defaultCenter]</p>

<pre><code>rac_addObserverForName:UIKeyboardDidChangeFrameNotification         
                object:nil] 
subscribeNext:^(id x) {
    NSLog(@"键盘Frame改变");
}
</code></pre>

<p>];</p>

<p>// Delegate
[[self rac_signalForSelector:@selector(viewWillAppear:)] subscribeNext:<sup>(id</sup> x) {</p>

<pre><code>debugLog(@"viewWillAppear方法被调用 %@", x);
</code></pre>

<p>}];</p>

<p>```</p>

<p>RAC的<code>RACSignal</code> 类也提供了<code>createSignal</code>方法来让用户创建自定义的信号，如下代码创建了一个下载指定网站内容的信号。</p>

<p>``` objc</p>

<p>-(RACSignal *)urlResults {</p>

<pre><code>return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {
    NSError *error;
    NSString *result = [NSString stringWithContentsOfURL:[NSURL URLWithString:@"http://www.devtang.com"]
                                                encoding:NSUTF8StringEncoding
                                                   error:&amp;error];
    NSLog(@"download");
    if (!result) {
        [subscriber sendError:error];
    } else {
        [subscriber sendNext:result];
        [subscriber sendCompleted];
    }
    return [RACDisposable disposableWithBlock:^{
        NSLog(@"clean up");
    }];
}];
</code></pre>

<p>}</p>

<p>```</p>

<h2>如何使用ReactiveCocoa</h2>

<p>ReactiveCocoa可以在iOS和OS X的应用开发中使用，对于iOS开发者，可以将<a href="https://github.com/ReactiveCocoa/ReactiveCocoa.git">RAC源码</a>下载编译后，使用编译好的<code>libReactiveCocoa-iOS.a</code>文件。</p>

<p>开发者也可以用<a href="http://cocoapods.org/">CocoaPods</a>来设置目标工程对ReactiveCocoa的依赖，只需要编辑Podfile文件，增加如下内容即可：</p>

<p>```
pod 'ReactiveCocoa'</p>

<p>```</p>

<h2>ReactiveCocoa的特点</h2>

<p>RAC在应用中大量使用了block，由于Objective-C语言的内存管理是基于<a href="http://zh.wikipedia.org/zh-cn/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0">引用计数</a> 的，为了避免循环引用问题，在block中如果要引用self，需要使用<code>@weakify(self)</code>和<code>@strongify(self)</code>来避免强引用。另外，在使用时应该注意block的嵌套层数，不恰当的滥用多层嵌套block可能给程序的可维护性带来灾难。</p>

<p>RAC的编程方式和传统的MVC方式差异巨大，所以需要较长的学习时间。并且，业界内对于RAC并没有广泛应用，这造成可供参考的项目和教程比较欠缺。
另外，RAC项目本身也还在快速演进当中，1.x版本和2.x版本API改动了许多，3.0版本也正在快速开发中，对它的使用也需要考虑后期的升级维护问题。</p>

<p>作为一个iOS开发领域的新开源框架，ReactiveCocoa带来了函数式编程和响应式编程的思想，值得大家关注并且学习。</p>

<h2>一些学习资源</h2>

<h3>博客&amp;教程</h3>

<ul>
<li><a href="http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/">http://spin.atomicobject.com/2014/02/03/objective-c-delegate-pattern/</a></li>
<li><a href="http://blog.bignerdranch.com/4549-data-driven-ios-development-reactivecocoa/">http://blog.bignerdranch.com/4549-data-driven-ios-development-reactivecocoa/</a></li>
<li><a href="http://en.wikipedia.org/wiki/Functional_reactive_programming">http://en.wikipedia.org/wiki/Functional_reactive_programming</a></li>
<li><a href="http://www.teehanlax.com/blog/reactivecocoa/">http://www.teehanlax.com/blog/reactivecocoa/</a></li>
<li><a href="http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/">http://www.teehanlax.com/blog/getting-started-with-reactivecocoa/</a></li>
<li><a href="http://nshipster.com/reactivecocoa/">http://nshipster.com/reactivecocoa/</a></li>
<li><a href="http://cocoasamurai.blogspot.com/2013/03/basic-mvvm-with-reactivecocoa.html">http://cocoasamurai.blogspot.com/2013/03/basic-mvvm-with-reactivecocoa.html</a></li>
<li><a href="http://iiiyu.com/2013/09/11/learning-ios-notes-twenty-eight/">http://iiiyu.com/2013/09/11/learning-ios-notes-twenty-eight/</a></li>
<li><a href="https://speakerdeck.com/andrewsardone/reactivecocoa-at-mobidevday-2013">https://speakerdeck.com/andrewsardone/reactivecocoa-at-mobidevday-2013</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/hh848246.aspx">http://msdn.microsoft.com/en-us/library/hh848246.aspx</a></li>
<li><a href="http://www.itiger.me/?p=38">http://www.itiger.me/?p=38</a></li>
<li><a href="http://blog.leezhong.com/ios/2013/12/27/reactivecocoa-2.html">http://blog.leezhong.com/ios/2013/12/27/reactivecocoa-2.html</a></li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md">https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md</a></li>
<li><a href="http://www.haskell.org/haskellwiki/Functional_Reactive_Programming">http://www.haskell.org/haskellwiki/Functional_Reactive_Programming</a></li>
<li><a href="http://blog.zhaojie.me/2009/09/functional-reactive-programming-for-csharp.html">http://blog.zhaojie.me/2009/09/functional-reactive-programming-for-csharp.html</a></li>
</ul>


<h3>代码</h3>

<ul>
<li><a href="https://github.com/Machx/MVVM-IOS-Example">https://github.com/Machx/MVVM-IOS-Example</a></li>
<li><a href="https://github.com/ReactiveCocoa/RACiOSDemo">https://github.com/ReactiveCocoa/RACiOSDemo</a></li>
</ul>


<h3>书籍</h3>

<ul>
<li><a href="https://leanpub.com/iosfrp">https://leanpub.com/iosfrp</a></li>
</ul>


<h3>视频</h3>

<ul>
<li><a href="http://vimeo.com/65637501">http://vimeo.com/65637501</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非换行空格在CoreText排版上的问题]]></title>
    <link href="http://blog.devtang.com/blog/2014/01/23/the-issue-of-non-breaking-space-in-coretext/"/>
    <updated>2014-01-23T17:36:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/01/23/the-issue-of-non-breaking-space-in-coretext</id>
    <content type="html"><![CDATA[<p>分享一个在使用Core Text时遇到的问题。</p>

<h2>问题描述</h2>

<p>我们的猿题库界面因为有图片、公式需要混排，所以用的是Core Text实现的排版。</p>

<p>在使用中，发现一些英文题目的换行方式不对，
我们设置的是按单词换行，但是总是有些题目的换行并不是按单词的，造成显示上比较错乱，如下图所示。图中unchangeable, study, falls 三个单词都被生生截断了，造成阅读上的不适。</p>

<!-- more -->


<p><img src="/images/non-breaking-space-1.png"></p>

<h2>解决方案</h2>

<p>经过我们的分析，我们最终发现这是由于题目内容中有<a href="http://en.wikipedia.org/wiki/Non-breaking_space">非换行空格</a>（<code>non-breaking-space</code>）造成的。根据<a href="(http://en.wikipedia.org/wiki/Non-breaking_space">wikipedia</a>)上的介绍，该字符的ASCII码为160，主要做用如下：</p>

<blockquote><p>Text-processing software typically assumes that an automatic line break may be inserted anywhere a space character occurs; a non-breaking space prevents this from happening (provided the software recognizes the character). For example, if the text "100 km" will not quite fit at the end of a line, the software may insert a line break between "100" and "km". To avoid this undesirable behaviour, the editor may choose to use a non-breaking space between "100" and "km". This guarantees that the text "100 km" will not be broken: if it does not fit at the end of a line it is moved in its entirety to the next line.</p></blockquote>

<p>于是我们大概知道整个原因了：编辑在后台录入题目时，是在网页做的富文本编辑器里面，里面的空格输入的是 <code>&amp;nbsp;</code>，然后这个空格转存到数据库中会转成 非换行空格（<code>non-breaking-space</code>），也就是ASCII为160的空格。最后传到iPhone这边，用Core Text排版时，Core Text认为遇到这个空白符不应该换行，于是就一直不换行，直到显示不了了才强制换行，就造成了单词被截断。</p>

<p>解决办法是在客户端上用以下代码将这种空格替换成普通的空格，普通的空格ASCII码为32。（附：<a href="http://www.weste.net/tools/ASCII.asp">ASCII码表</a>）：</p>

<p>``` objc</p>

<p>// 因为显示效果原因，从直观上看不出2个空格在编码上的差异，不过代码复制到Xcode中能看出来。
NSString *content = ...
content = [content stringByReplacingOccurrencesOfString:@" " withString:@" "];</p>

<p>```</p>

<p>最终改好的效果如下所示：</p>

<p><img src="/images/non-breaking-space-2.png"></p>

<h2>其它</h2>

<p>感谢 <a href="http://weibo.com/onevcat">@onevcat</a> 提供信息，让我找到问题的根源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode Debugger中的Icon符号的意义]]></title>
    <link href="http://blog.devtang.com/blog/2013/12/22/the-secret-of-xcode-debugger-icon/"/>
    <updated>2013-12-22T19:23:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/12/22/the-secret-of-xcode-debugger-icon</id>
    <content type="html"><![CDATA[<p>你注意到了吗？在Xcode中，当你点击查看调用栈的时候，调用栈的每个方法前面都有一个Icon，而且还有好几种不同的样子，如下图所示，你知道它们代表什么意思吗？</p>

<p><img src="/images/debugger-icon.png"></p>

<!-- more -->


<p>其实它们代表的意义如下：</p>

<ul>
<li>Person icon is User</li>
<li>Mug icon is AppKit (or UIKit)</li>
<li>Briefcase icon is Frameworks</li>
<li>Gear icon is System</li>
<li>Morse code icon is Foundation</li>
<li>Spider web looking icon is Web</li>
</ul>


<p>另外，Debuger中的图标（如下图所示）也是有意义：</p>

<p><img src="/images/debugger-icon2.jpg"></p>

<p>具体意义如下：</p>

<ul>
<li>L = Local variable</li>
<li>A = Argument</li>
<li>S = Static variable</li>
<li>V = global Variable</li>
<li>R = register</li>
<li>i = Instance variable</li>
<li>E = Expression</li>
</ul>


<p>或许你觉得以上内容没什么实用价值，那再分享一个实用的。</p>

<p>在XCode5中，点击一个小眼睛图标，就直接预览UIImage的内容，如下图所示：</p>

<p><img src="/images/debugger-preview-image.png"></p>

<p>这个有用吧，祝大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发工具-网络封包分析工具Charles]]></title>
    <link href="http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/"/>
    <updated>2013-12-11T14:03:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr</id>
    <content type="html"><![CDATA[<p><img src="/images/charles-logo.png"></p>

<h2>简介</h2>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<p><a href="http://www.charlesproxy.com/">Charles</a>是在Mac下常用的截取网络封包的工具，在做iOS开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Charles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<p>Charles是收费软件，可以免费试用30天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过30分钟，并且启动时将会有10秒种的延时。</p>

<p>因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为Charles强制关闭而遇到影响。</p>

<p>Charles主要的功能包括：</p>

<ol>
<li>支持SSL代理。可以截取分析<a href="http://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A5%97%E6%8E%A5%E5%B1%82">SSL</a>的请求。</li>
<li>支持流量控制。可以模拟慢速网络以及等待时间（latency）较长的请求。</li>
<li>支持AJAX调试。可以自动将json或xml数据格式化，方便查看。</li>
<li>支持AMF调试。可以将Flash Remoting 或 Flex Remoting信息格式化，方便查看。</li>
<li>支持重发网络请求，方便后端调试。</li>
<li>支持修改网络请求参数。</li>
<li>支持网络请求的截获并动态修改。</li>
<li>检查HTML，CSS和RSS内容是否符合<a href="http://validator.w3.org/">W3C标准</a>。</li>
</ol>


<!-- more -->


<h2>安装Charles</h2>

<p>去Charles的官方网站（<a href="http://www.charlesproxy.com">http://www.charlesproxy.com</a>）下载最新版的Charles安装包，是一个dmg后缀的文件。打开后将Charles拖到Application目录 下即完成安装。</p>

<h2>安装SSL证书</h2>

<p>如果你需要截取分析SSL协议相关的内容。那么需要安装Charles的CA证书。具体步骤如下：</p>

<ol>
<li>去 <a href="http://www.charlesproxy.com/ssl.zip">http://www.charlesproxy.com/ssl.zip</a> 下载CA证书文件。</li>
<li>解压该zip文件后，双击其中的.crt文件，这时候在弹出的菜单中选择“总是信任”，如下所示：<img src="/images/charles-ca-1.png"></li>
<li>从钥匙串访问中即可看到添加成功的证书。如下所示：
<img src="/images/charles-ca-2.png"></li>
</ol>


<h2>将Charles设置成系统代理</h2>

<p>之前提到，Charles是通过将自己设置成代理服务器来完成封包截取的，所以使用Charles的第一步是将其设置成系统的代理服务器。</p>

<p>启动Charles后，第一次Charles会请求你给它设置系统代理的权限。你可以输入登录密码授予Charles该权限。你也可以忽略该请求，然后在需要将Charles设置成系统代理时，选择菜单中的 "Proxy" -> "Mac OS X Proxy"来将Charles设置成系统代理。如下所示：</p>

<p><img src="/images/charles-set-system-proxy.png"></p>

<p>之后，你就可以看到源源不断的网络请求出现在Charles的界面中。</p>

<h2>Charles主界面介绍</h2>

<p><img src="/images/charles-home.jpg"></p>

<p>Charles主要提供2种查看封包的视图，分别名为“Structure”和"Sequence"。</p>

<ol>
<li>Structure视图将网络请求按访问的域名分类。</li>
<li>Sequence视图将网络请求按访问的时间排序。</li>
</ol>


<p>大家可以根据具体的需要在这两种视图之前来回切换。</p>

<p>对于某一个具体的网络请求，你可以查看其详细的请求内容和响应内容。如果响应内容是JSON格式的，那么Charles可以自动帮你将JSON内容格式化，方便你查看。</p>

<h2>过滤网络请求</h2>

<p>通常情况下，我们需要对网络请求进行过滤，只监控向指定目录服务器上发送的请求。对于这种需求，我们有2种办法。</p>

<ol>
<li><p>在主界面的中部的Filter栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：http://yuantiku.com，那么只需要在Filter栏中填入yuantiku即可。</p></li>
<li><p>在Charles的菜单栏选择"Proxy"->"Recording Settings"，然后选择Include栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。如下图所示：</p></li>
</ol>


<p><img src="/images/charles-filter-setting.jpg"></p>

<p>通常情况下，我们使用方法1做一些临时性的封包过滤，使用方法2做一些经常性的封包过滤。</p>

<h2>截取iPhone上的网络封包</h2>

<p>Charles通常用来截取本地上的网络封包，但是当我们需要时，我们也可以用来截取其它设备上的网络请求。下面我就以iPhone为例，讲解如何进行相应操作。</p>

<h4>Charles上的设置</h4>

<p>要截取iPhone上的网络请求，我们首先需要将Charles的代理功能打开。在Charles的菜单栏上选择“Proxy”->"Proxy Settings"，填入代理端口8888，并且勾上"Enable transparent HTTP proxying" 就完成了在Charles上的设置。如下图所示:</p>

<p><img src="/images/charles-proxy-setting.jpg"></p>

<h4>iPhone上的设置</h4>

<p>首先我们需要获取Charles运行所在电脑的IP地址，打开Terminal，输入<code>ifconfig en0</code>, 即可获得该电脑的IP，如下图所示：</p>

<p><img src="/images/charles-ifconfig.jpg"></p>

<p>在iPhone的 “设置”->“无线局域网“中，可以看到当前连接的wifi名，通过点击右边的详情键，可以看到当前连接上的wifi的详细信息，包括IP地址，子网掩码等信息。在其最底部有“HTTP代理”一项，我们将其切换成手动，然后填上Charles运行所在的电脑的IP，以及端口号8888，如下图所示：</p>

<p><img src="/images/charles-iphone-setting.jpg"></p>

<p>设置好之后，我们打开iPhone上的任意需要网络通讯的程序，就可以看到Charles弹出iPhone请求连接的确认菜单（如下图所示），点击“Allow”即可完成设置。</p>

<p><img src="/images/charles-proxy-confirm.jpg"></p>

<h2>截取SSL信息</h2>

<p>Charles默认并不截取SSL的信息，如果你想对截取某个网站上的所有SSL网络请求，可以在该请求上右击，选择SSL proxy，如下图所示：</p>

<p><img src="/images/charles-ssl-add-host.jpg"></p>

<p>这样，对于该Host的所有SSL请求可以被截取到了。</p>

<h2>模拟慢速网络</h2>

<p>在做iPhone开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles对此需求提供了很好的支持。</p>

<p>在Charles的菜单上，选择"Proxy"->"Throttle Setting"项，在之后弹出的对话框中，我们可以勾选上“Enable Throttling”，并且可以设置Throttle Preset的类型。如下图所示：</p>

<p><img src="/images/charles-throttle-setting.jpg"></p>

<p>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的"Only for selected hosts"项，然后在对话框的下半部分设置中增加指定的hosts项即可。</p>

<h2>修改网络请求内容</h2>

<p>有些时候为了调试服务器的接口，我们需要反复尝试不同参数的网络请求。Charles可以方便地提供网络请求的修改和重发功能。只需要在以往的网络请求上点击右键，选择“Edit”，即可创建一个可编辑的网络请求。如下所示：</p>

<p><img src="/images/charles-edit.jpg"></p>

<p>我们可以修改该请求的任何信息，包括url地址，端口，参数等，之后点击“Execute”即可发送该修改后的网络请求（如下图所示）。Charles支持我们多次修改和发送该请求，这对于我们和服务器端调试接口非常方便。</p>

<p><img src="/images/charles-execute-request.jpg"></p>

<h2>总结</h2>

<p>通过Charles软件，我们可以很方便地在日常开发中，截取和调试网络请求内容，分析封包协议以及模拟慢速网络。用好Charles可以极大的方便我们对于带有网络请求的App的开发和调试。</p>

<p>参考链接：</p>

<ol>
<li><a href="http://www.charlesproxy.com/overview/about-charles/">Charles主要的功能列表</a></li>
<li><a href="http://www.charlesproxy.com/">Charles官网</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
