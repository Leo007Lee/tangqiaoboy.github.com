<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-03-21T23:16:53+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈weak对象、对象缓存以及Tagged Pointer]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/21/weak_object_lifecycle_and_tagged_pointer/"/>
    <updated>2014-03-21T21:09:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/21/weak_object_lifecycle_and_tagged_pointer</id>
    <content type="html"><![CDATA[<p>这是一次和 <a href="http://onevcat.com/">@onevcat</a> 的技术讨论总结。技术点比较散，但是还都比较有意思。涉及的技术细节包括：</p>

<ol>
<li>weak对象什么时候释放</li>
<li>系统对象的缓存</li>
<li><code>Tagged Pointer</code>对象</li>
</ol>


<h3>讨论一：关于weak对象什么时候释放</h3>

<p>讨论源于一位叫 @caoping 的同学在iOS开发的<a href="iosdev.slack.com">slack群</a>上的提问：</p>

<p><blockquote><p></p></p><p><p>问一个问题，__weak NSArray *arr = [NSArray new];这么声明一个弱引用变量，常理来说arr应该为nil,但实际不是这样的。我发现所有不可变类型这么使用，都是有值的，包括NSString,NSArray,NSDictionary,是否和存储的内存区域有关？</p></p><p><p></p></blockquote></p>

<p>对于这个问题，我也实验了一下，如下代码，确实能够正常输出100：</p>

<p>``` objc
__weak NSNumber *number = [NSNumber numberWithInt:100];
NSLog(@"number = %@", number);</p>

<p>```</p>

<p>对于这个问题，<a href="http://onevcat.com/">@onevcat</a> 提供了一个来自stackoverflow上的合理的<a href="http://stackoverflow.com/questions/15266367/why-isnt-my-weak-reference-cleared-right-after-the-strong-ones-are-gone">解答</a>：</p>

<p>从汇编代码中看，以上代码在创建<code>number</code>变量时，是通过<code>objc_loadWeak</code>方法进行的。而根据 <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-loadweak">Clang的官方文档</a>，<code>objc_loadWeak</code>方法会<code>retain</code>并<code>autorelease</code>这个对象。所以给一个weak对象赋值，它并不会马上释放，而是会放到<code>autorelease pool</code>中，与<code>autorelease pool</code>一起释放。</p>

<p>如下是<code>objc_loadWeak</code>的代码示例：</p>

<p><code>objc
id objc_loadWeak(id *object) {
  return objc_autorelease(objc_loadWeakRetained(object));
}
</code></p>

<p>为了验证这个回答，我们又做了一个有趣的例子来验证，如下所示：</p>

<p>``` objc
__weak NSNumber *number;
@autoreleasepool {</p>

<pre><code>number = [NSNumber numberWithInt:100];
</code></pre>

<p>}
NSLog(@"number = %@", number);
```</p>

<p>在上面这个例子中，果然如我们所料，<code>number</code>变成在NSLog时，变成了nil。</p>

<h3>讨论二：关于NSNumber对象的缓存</h3>

<p>我们在做以上实验时，发现一个有趣的现象，如果你把100变成了10，则<code>number</code>变成在NSLog时，就能够输出值来，不再是nil了。如下是测试代码：</p>

<p>``` objc
__weak NSNumber *number;
@autoreleasepool {</p>

<pre><code>number = [NSNumber numberWithInt:10];
</code></pre>

<p>}
NSLog(@"number = %@", number);
```</p>

<p>经过 onevcat 的实验，从-1 ～ 12都是可以输出的，而其它值却会变成nil。于是我们猜测是系统对这些常见值的对象做了缓存，于是我们写了如下代码来验证。</p>

<p>结果果然是这样，多次创建值为10的<code>NSNumber</code>对象，其地址都是<font color=red>一样的</font>。而多次创建值为100的<code>NSNumber</code>对象，每次创建获得的对象地址都是<font color=red>不一样的</font>。</p>

<p>``` objc
NSNumber <em>number = [NSNumber numberWithInt:10];
NSNumber </em>another = [NSNumber numberWithInt:10];
NSLog(@"%p %p", number, another);</p>

<p>number = [NSNumber numberWithInt:100];
another = [NSNumber numberWithInt:100];
NSLog(@"%p %p", number, another);
```</p>

<h3>讨论三：64位系统与Tagged Pointer对象</h3>

<p>讨论本来已经结束了，结果我在写这篇博客的时候，手贱又测试了一下，发现在64位的模拟器下，无论是怎么样，所有的<code>NSNumber</code>对象地址都是一样的！</p>

<p>这个时候我突然想起WWDC中介绍的64位系统引放的<code>Tagged Pointer</code>，恍然大悟。</p>

<p>在WWDC2013的《Session 404 Advanced in Objective-C》视频中，苹果介绍了<code>Tagged Pointer</code>。<code>Tagged Pointer</code>的存在主要是为了节省内存。我们知道，对象的指针大小一般是与机器字长有关，在32位系统中，一个指针的大小是32位（4字节），而在64位系统中，一个指针的大小将是64位（8字节）。</p>

<p>在64位系统中，如果我们真正使用一个指针来存储<code>NSNumber</code>实例，那么我们首先需要一个8字节的指针，另外需要一块内存存储<code>NSNumber</code>实例，这通常又是8字节。这样的内存开销是比较大的。苹果对于<code>NSNumber</code>和<code>NSDate</code>对象，改成了用<code>Tagged Pointer</code>来存储。</p>

<p><code>Tagged Pointer</code>主要有以下3个特点：</p>

<ol>
<li><code>Tagged Pointer</code>专门用来存储小的对象，例如<code>NSNumber</code>和<code>NSDate</code></li>
<li><code>Tagged Pointer</code>指针的值不再是地址了，而是真正的值。所以，实际上它不再是一个对象了，它只是一个披着对象皮的普通变量而已！所以，它的内存并不存储在堆中，也不需要malloc和free。</li>
<li>在内存读取上有着3倍的效率（以前是寻址->发消息->获取值，现在直接获取值），创建时比以前快106倍。</li>
</ol>


<p> 相关英文文档截图如下：</p>

<p> <img src="/images/tagged_pointer_1.jpg"></p>

<p>但<code>Tagged Pointer</code>的引入也带来了问题，即<code>Tagged Pointer</code>因为并不是真正的对象，而是一个伪对象，所以你如果完全把它当成对象来使，可能会让它露马脚。比如我在<a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/">《Objective-C对象模型及应用》</a>一文中就写道，所有对象都有 isa 指针，而<code>Tagged Pointer</code>其实是没有的，因为它不是真正的对象。</p>

<p>所以你直接访问<code>Tagged Pointer</code>的isa成员的话，在编译时将会有如下警告：</p>

<p> <img src="/images/tagged_pointer_2.jpg"></p>

<p>应该换成相应的方法调用，如 <code>isKindOfClass</code> 和 <code>object_getClass</code>，如下图所示：</p>

<p> <img src="/images/tagged_pointer_3.jpg"></p>

<p>至此，所有疑问都已经解决，开心～</p>

<h2>One More Thing</h2>

<p>我建了一个神秘的QQ群，里面汇聚了大量国内iOS原创技术博客作者和iOS开源项目作者，欢迎和我们一样有写作爱好或开源爱好的朋友加入一起讨论。加入方式请私信联系 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 并提供博客和开源项目地址。</p>

<p>如果你没有原创的技术博客，也没有开源代码，但是知道提问的艺术，iOS开发已经入门至少半年了，会用google、stackoverflow和github解决基本问题，但是遇到一些更复杂的问题时没有地方找人讨论，那么欢迎你申请加入我创建的slack群组。本次讨论也是由slack群组里的@caoping同学的提问引起的。</p>

<p><a href="iosdev.slack.com">iOS开发的slack群组</a>经过2个月试运营，现在已经聚集了300个有经验的iOS开发者，现在开始接受申请加入，申请地址是（需翻墙）： <a href="https://docs.google.com/forms/d/1eWH_jjDIIV5kpSV0BUPBAIboHEj0ZrgBrZHWsdJqkDU/viewform">https://docs.google.com/forms/d/1eWH_jjDIIV5kpSV0BUPBAIboHEj0ZrgBrZHWsdJqkDU/viewform</a> 。如果你不会翻墙，不会用google和stackoverflow以及github，那么我劝你还是别加入了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第4期]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/21/ios-weekly-4/"/>
    <updated>2014-03-21T20:23:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/21/ios-weekly-4</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/03/lldb-debug-command">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>本周iOS移动开发周报，带来一系列iOS开发教程以及2个开源项目。这期中的2个开源项目都比较值得关注，一个是VVebo写的GIF解决方案，另一个是用OC实现的QQ自动回复机器人。后者的作者是图书<a href="http://item.jd.com/11389860.html">《iOS应用逆向工程》</a>的作者，这本书也是一本不错的安全方面的入门图书，一并推荐给大家。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://wufawei.com/2014/03/symbolicating-ios-crash-logs/">《分析iOS Crash文件：符号化iOS Crash文件的3种方法》</a>：文章介绍了拿到用户的<code>.crash</code>文件之后，如何符合化（Symbolicating）crash文件的3种方法。它们分别是：使用Xcode、使用命令行工具symbolicatecrash，以及使用命令行工具atos。这些方法可以帮助开发者尽快找到应用crash的原因。</p></li>
<li><p><a href="http://objcio.com/blog/2014/03/10/custom-controls/">《自定义控件》</a>：本文翻译自objc.io的《Custom Controls》，讨论了一些自定义视图和控件的诀窍和技巧。文章先对UIKit已经提供的控件做了一个概览，介绍一些渲染技巧，随后深入到视图和它们的所有者之间的通信策略，并简略探讨了辅助功能、本地化和测试。</p></li>
<li><p><a href="http://nshipster.cn/dictionary-services/">《关于字典的介绍》</a>：文章介绍了OS X和iOS里面系统提供的字典服务以及调用方法。其中OS X中介绍的是使用私有API的方法，而iOS中介绍的是使用公开的<code>UIReferenceLibraryViewController</code>的方法。</p></li>
<li><p><a href="http://stuartkhall.com/posts/android-development-tips-for-ios-devs">《Android Development Tips For iOS Devs》</a>：写给iOS开发者看的Android开发技巧，适合有iOS开发背景的朋友学习Android开发。</p></li>
<li><p><a href="http://iosinit.com/?p=1022">《iOS 7之UICollectionView与UIKit Dynamics》</a>：<code>UIKit Dynamics</code> 是 iOS 7 中基于物理动画引擎的一个新功能–它被特别设计使其能很好地与 <code>CollectionView</code> 配合工作。本文介绍了如何将这两个特性结合在一起。文章翻译自objc.io第5期。</p></li>
<li><p><a href="http://www.starfelix.com/blog/2014/03/17/lldbdiao-shi-ming-ling-chu-tan/">《LLDB调试命令初探》</a>：LLDB是LLVM下的调试器，Xcode从4.0开始编译器开始改用LLVM，相应的调试器也从gdb改为LLDB。而从 Xcode5.0开始所有工程也被自动设置为使用LLDB。本文从初学者的角度讲解了在日常的开发中如何使用LLDB以及LLDB常用的命令。</p></li>
<li><p><a href="http://beyondvincent.com/blog/2014/03/19/18-tips-for-working-effectively-with-interface-builder/">《提高Interface Builder高效工作的8个技巧》</a>：文章介绍了Xcode的界面编辑器Interface Builder的8个使用技巧，可以提高工作效率。</p></li>
<li><p><a href="http://imtx.me/archives/1885.html">《自由地控制 Xcode Open Quickly 打开方式》</a>：文章介绍了Xcode Open Quickly使用的一则技巧，可以方便地控制打开方式。</p></li>
<li><p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/21469769">《static和被裁的符号表》</a>：作者念茜这次从安全防御角度出发，讲解利用static关键字裁掉函数符号，以便不让攻击者理清自己程序的敏感业务逻辑，提高应用的逆向门槛。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p>微博客户端 <a href="http://weibo.com/appsupport">VVebo</a> 的作者开源了他自己为VVebo写的GIF解决方案 <a href="https://github.com/johnil/VVeboImageView">VVeboImageView</a>， 占用内存很小。</p></li>
<li><p><a href="https://github.com/iosre/Skua">《iOS客户端自动回复机器人源码》</a>：作者实现了一个QQ的自动回复机器人。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第3期]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/14/ios-weekly-3/"/>
    <updated>2014-03-14T15:10:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/14/ios-weekly-3</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/03/apple-ios71-xcode51">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本周移动开发周报带来如下内容：苹果发布iOS7.1相关内容，ReactiveCocoa和Origami相关的教程，一些来自于Facebook的开源项目。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/it/apple/2014-03-11/01399228853.shtml">《苹果发布iOS 7.1更新》</a>：苹果在3月11日正式发布了iOS 7.1更新，支持连接车载系统CarPlay。iOS 7.1 对用户界面进一步做了改进，同时改进了Touch ID指纹识别的能力，并针对iPhone 4做了优化。也此同时，苹果也同步放出了支持iOS 7.1的集成编译环境Xcode 5.1正式版，开发者可以从<a href="http://developer.apple.com/">苹果开发者中心</a>下载新版本的Xcode。</p></li>
<li><p><a href="http://www.polarb.com/publishers/results/poll_sets/2042">《iOS 7.1 vs iOS 7》</a>：文章对比了iOS 7.1相对于iOS 7所做的细节上的调整，这些调整结果也支持用户打分。从打分结果上看，大部分的调整得到了用户的肯定。</p></li>
<li><p><a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">《3月的TIOBE编程语言排行榜》</a>：三月的TIOBE编程语言排行榜，Objective-C和C++继续拉开差距，稳坐第三的位置。而在半年前，二者还是几乎一样的Rating值，可见移动开发在继续升温。</p></li>
<li><p>升级到Xcode 5.1和iOS 7遇到的各种开发问题及解决办法汇总：</p>

<ul>
<li><a href="http://weibo.com/2157980617/AAwK4kpE8?mod=weibotime">《iOS 企业证书部署无效的问题》</a></li>
<li><a href="http://weibo.com/1658814735/AAvyB25js">《clipsToBounds 属性默认值变了》</a></li>
<li><a href="http://weibo.com/2157980617/AAv3IwVrH?mod=weibotime">《第三方库不支持64位造成编译错误》</a></li>
</ul>
</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://www.raywenderlich.com/62699/reactivecocoa-tutorial-pt1">《ReactiveCocoa Tutorial – The Definitive Introduction》</a>: RayWenderlich网站放出了从零开始学ReactiveCocoa系列教程第一课。讲得很基本很实用，适合想学ReactiveCocoa的同学作为入门教材。</p></li>
<li><p><a href="http://imkevin.me/post/78301132929/nginx-spdy-ios">《让 Nginx SPDY 和 iOS 交朋友》</a>：<a href="http://zh.wikipedia.org/wiki/SPDY">SPDY</a>是Google开发的基于传输控制协议（TCP）的应用层协议，目前已经被用于Google Chrome浏览器中来访问Google的SSL加密服务。SPDY协议类似于HTTP，但旨在缩短网页的加载时间和提高安全性。SPDY协议通过压缩、多路复用和优先级来缩短加载时间。作者在文章中分享了如何在iOS应用中使用SPDY协议的经验。</p></li>
<li><p><a href="http://blog.xcodev.com/archives/access-iphone-simcard-contacts-via-baseband/">《利用iPhone基带读写SIM卡联系人》</a> 和 <a href="http://blog.xcodev.com/archives/send-sms-via-iphone-baseband/">《利用iPhone基带发送短信息》</a>：文章简要介绍了一下SIM卡的一些常识，AT指令中中文字符的相关处理，以及如何读写SIM卡中的联系人数据，最终实现了利用iPhone基带发送短信息的功能。不过由于苹果沙盒(sandbox)的限制，该相关知识只能在越狱手机上应用。</p></li>
<li><p><a href="http://vimeo.com/88468610">《The 4 Minute Guide to Quartz Composer
》</a>和<a href="http://vimeo.com/85578380">《Prototyping with Facebook Origami》</a>：两篇介绍Facebook免费提供的基于Quartz Composer的交互设计工具Origami的视频教程（需要翻墙）。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li>手工写<code>.gitignore</code>文件常常费时费力还容易出错，<a href="http://www.gitignore.io/">http://www.gitignore.io/</a> 是一个<code>.gitignore</code>的生成网站，iOS工程的<code>.gitignore</code>生成地址是这个： <a href="http://www.gitignore.io/api/xcode,objective-c">http://www.gitignore.io/api/xcode,objective-c</a></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/facebook/Shimmer">Shimmer</a>: Facebook 开源了他旗下应用 Paper 的加载效果，它使用了WWDC 2009中介绍的<code>-[CALayer mask]</code>的技术方案。</p></li>
<li><p><a href="https://github.com/facebook/chisel">chisel</a>：Facebook开源了LLDB的增强工具chisel，其中的许多命令对于调试界面非常有帮助。</p></li>
<li><p><a href="https://github.com/facebook/KVOController">KVOController</a>: Facebook开源了Key-Value Observing工具KVOController。KVO是一个在iOS应用程序开发中，用于模块间通讯的技术技术，常常用于保证界面对于模型数据变化的实时响应。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第2期]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/07/ios-weekly-2/"/>
    <updated>2014-03-07T21:44:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/07/ios-weekly-2</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/03/apple-store-gray-chain">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://daily.zhihu.com/story/3350426">《利用苹果商店规则漏洞的灰色地下产业链》</a>：作者在文章中介绍了一些投机分子，利用苹果商店在汇率上的漏洞，借助汇率和实际汇率的差价来倒卖商品。据文中介绍，一款不错的手游产品，每月的账面销售额为700万元，但可能真正到账的只有550万元，其余的150万元中约有50万元的黑卡耗损，而剩余的100万则被这些汇率倒卖者攫取。</p></li>
<li><p><a href="http://www.guomii.com/posts/37790">《Apple即将推出CarPlay功能》</a>：Apple宣布几大顶级汽车制造商即将推出CarPlay。据苹果介绍，CarPlay是一种更智能、更安全且更有意思的在车中使用iPhone的方式。</p></li>
<li><p><a href="http://djt.qq.com/mobile/article/1073">《2013移动行业分析》</a> 腾讯移动分析发布了2013年移动行业数据分析报告，报告介绍了iOS的用户比例和版本分布。根据文中的统计，国内移动终端iOS市场份额为24.7%。另外不同于国外的情况是，国内iOS5的用户比例仍然高达12%。</p></li>
<li><p><a href="http://images.apple.com/iphone/business/docs/iOS_Security_Feb14.pdf">《iOS Security》</a>：苹果发布官方的安全方面的文档，介绍了iOS系统从硬件，文件系统到网络等各方面的安全细节。</p></li>
<li><p><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html">《WhatsApp 架构设计》</a>: 作者在文章中分享了最近被Facebook收购的WhatsApp的架构，包括它使用到的前后端技术框架以及硬件，文章中也分享了一些提高服务器并发连接数和可扩展性的经验。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.csdn.net/wzzvictory/article/details/20067595">《CocoaPods详解之----制作篇》</a>：作者详细介绍了CocoaPods依赖库的创建过程，这对于开源项目作者来说很有帮助。</p></li>
<li><p><a href="http://blog.jobbole.com/61101/">《通过实现一个TableView来理解iOS UI编程》</a>：作者通过实现一遍TableView来理解UIKit的一些技术细节，包括几何布局框架、UI的层次架构、子类化UIScrollView、Cell的重用、响应和处理事件和可扩展性等技术细节。</p></li>
<li><p><a href="http://www.yidianzixun.com/article/news_eaf23f7ff41d4862ecbf0d10441cf5f5?s=1">《iOS 开发者应该知道的 ARM 结构》</a>：到目前为止，所有的 iOS 设备都使用 ARM 结构处理器。作者在文章中介绍了ARM处理器的各种特点，包括条件执行、Thumb 指令集、内存对齐和除法等技术细节。</p></li>
<li><p><a href="http://segmentfault.com/a/1190000000390012">《iOS 开发：绘制像素到屏幕》</a>：像素是如何绘制到屏幕上面的？把数据输出到屏幕的方法有很多，通过调用很多不同的framework和不同的函数。作者在文章中介绍了这个过程背后的东西，这能够帮助大家在遇到性能问题时调试解决问题。</p></li>
<li><p><a href="http://iosinit.com/?p=854">《玩转字符串》</a> 和 <a href="http://iosinit.com/?p=880">《字符串渲染》</a>: 作者翻译了objc.io第九期关于字符串的系列文章。《玩转字符串》中介绍了字符串的比较、搜索、排序以及格式化等功能。《字符串渲染》中介绍了字符串在UILabel、UITextField以及Core Text中的渲染细节。</p></li>
<li><p><a href="http://iosdevelopertips.com/general/object-encoding-and-decoding-with-nssecurecoding.html">《Object Encoding and Decoding with NSSecureCoding Protocol》</a>：作者在文章中介绍了如何使用NSSecureCoding来序列化和反序列化对象。文章最后，作者提供了一个名为<a href="https://github.com/nicklockwood/AutoCoding">AutoCoding</a>的开源项目来帮助大家实现相关的功能。</p></li>
<li><p><a href="https://developer.apple.com/design/">《苹果最新的设计指南》</a>: 苹果发布了其最新的设计指南，试图帮助开发者更好地学习iOS7风格的应用和游戏设计。新版指南提供了大量的视频和文档，内容涵盖应用和游戏开发的各个方面。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="http://koofrank.com/blog/2014/02/28/my-first-article/">《四个iOS开发的小工具》</a>：作者在文章中介绍了4个有助于iOS开发的小工具。不过笔者并不同意文章后半部分的关于Blocks内联的内容。</p></li>
<li><p>著名的Xcode插件：<a href="https://github.com/supermarin/Alcatraz">Alcatraz</a> 完成了对Xcode 5的适配，大家可以用它方便地管理XCode的相关第三方插件。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p>QFish分享了一个小项目：<a href="https://github.com/qfish/xproj">xproj</a>，可以帮iOS开发者批量地为工程文件添加编译参数 <code>-fno-objc-arc</code> 或 <code>-fobjc-arc</code>。</p></li>
<li><p><a href="https://github.com/GeekZooStudio/ECMobile_iOS">ECMobile 3.0.0</a>发布，完全基于 BeeFramework 0.5.0 开发，它可以作为使用BeeFramework的参考项目。</p></li>
<li><p><a href="http://weibo.com/ranwj">移动开发小冉</a>写了一个类似虾米音乐的iOS App首页左右滑动效果的示例程序，代码质量很高，项目地址在<a href="https://github.com/nonstriater/NTSlidingViewController">这里</a>。</p></li>
<li><p><a href="https://github.com/5sw/SWParallaxScrollView">SWParallaxScrollView</a>：SWParallaxScrollView是一个具有多个层次的可滑动视图，可以实现不同层之间不同的滑动速度。该技术常常用来做应用初次启动时的介绍。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Alcatraz来管理Xcode插件]]></title>
    <link href="http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/"/>
    <updated>2014-03-05T22:36:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins</id>
    <content type="html"><![CDATA[<p><img src="/images/Alcatraz-logo.jpg"></p>

<h2>简介</h2>

<p>Alcatraz是一个帮你管理Xcode插件、模版以及颜色配置的工具。它可以直接集成到Xcode的图形界面中，让你感觉就像在使用Xcode自带的功能一样。</p>

<h2>安装和删除</h2>

<p>使用如下的命令行来安装Alcatraz：</p>

<p>``` bash
mkdir -p ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins;
curl -L http://git.io/lOQWeA | tar xvz -C ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins</p>

<p>```</p>

<p>如果你不想使用Alcatraz了，可以使用如下命令来删除：</p>

<p><code>bash
rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin
rm -rf ~/Library/Application\ Support/Alcatraz
</code></p>

<h2>使用</h2>

<p>安装成功后重启Xcode，就可以在Xcode的顶部菜单中找到Alcatraz，如下所示：</p>

<p><img src="http://alcatraz.io/images/menu@2x.png" alt="" /></p>

<p>点击“Package Manager”，即可启动插件列表页面，如下所示：</p>

<p><img src="http://alcatraz.io/images/screenshot@2x.png" alt="" /></p>

<p>之后你可以在右上角搜索插件，对于想安装的插件，点击其左边的图标，即可下载安装，如下所示，我正在安装<code>KImageNamed</code>插件：</p>

<p><img src="/images/alcatraz-install.jpg"></p>

<p>安装完成后，再次点击插件左边的图标，可以将该插件删除。</p>

<h2>插件路径</h2>

<p>Xcode所有的插件都安装在目录<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code>下，你也可以手工切换到这个目录来删除插件。</p>

<h2>关于Xcode的插件机制</h2>

<p>Alcatraz当前只支持OSX 10.9 and Xcode 5。不要抱怨了，这其实主要是因为苹果并没有开放插件机制，每次升级Alcatraz都都要重新适配。如果你看Alcatraz的Commit Log，你就会发现，Alcatraz花了几个月时间，才适配到Xcode 5，这对于插件开发者来说，是比较难受的。</p>

<p>所以作为一款开源并且免费的插件，只支持最新版的Xcode可以让开源作者节省大量精力。我也希望苹果能早日开放Xcode的插件机制标准，方便广大的插件开发者构建强大的第三方增强工具。</p>

<h2>推荐的插件</h2>

<p>我个人比较喜欢XCode的vim插件XVim，微博里大家推荐过的还有KImageNamed插件，Alcatraz里面应该好用的插件很多，我还没有时间试用。</p>

<p>这儿有一些朋友整理的插件列表：<a href="http://www.cocoachina.com/applenews/devnews/2013/0918/7022.html">《那些不能错过的Xcode插件》</a></p>

<p>如要你发现好用的插件，欢迎在留言处回复告诉我，我可以推荐给大家。谢谢～</p>

<h2>插件开发</h2>

<p>如果你觉得自己很牛逼，想尝试开发插件，这儿有一些教程：</p>

<ul>
<li><a href="http://studentdeng.github.io/blog/2014/02/21/xcode-plugin-fun/">《Xcode5 Plugins 开发简介》</a></li>
<li><a href="http://onevcat.com/2013/02/xcode-plugin/">《Xcode 4 插件制作入门》</a></li>
<li><a href="http://joeyio.com/ios/2013/07/25/write_xcode4_plugin_of_your_own/">《写个自己的Xcode4插件》</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
