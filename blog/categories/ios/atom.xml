<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2015-03-01T20:02:49+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第39期]]></title>
    <link href="http://blog.devtang.com/blog/2015/03/01/ios-weekly-39/"/>
    <updated>2015-03-01T13:46:28+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/03/01/ios-weekly-39</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，文章地址是<a href="http://www.infoq.com/cn/news/2015/02/core-image-introduction">这里</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期 iOS 移动开发周报带来如下内容：Core Image 介绍、写 iOS SDK 注意事项、利用 CocoaLumberjack 搭建自己的 Log 系统、KSHObjcUML 等。</p>

<h2>新闻</h2>

<ol>
<li><a href="http://www.williamlong.info/archives/4142.html">《Google 宣布淘汰 SPDY》</a>：Google 宣布计划淘汰该公司在 2009 年推出的 SPDY 协议，SPDY 原本定位为替代 HTTP 协议的新协议，Google 原本打算以它来加速 HTTP 的传输速度并推动成为标准，不过现在决定将支持 HTTP/2，并逐渐淘汰 SPDY，预计 2016 年就会完全从 Chrome 中移除对 SPDY 协议的支持。</li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://objccn.io/issue-21-6/">《Core Image 介绍》</a>：这篇文章为初学者介绍了 Core Image，一个 OS X 和 iOS 的图像处理框架。</p></li>
<li><p><a href="http://limboy.me/ios/2015/02/07/builder-pattern.html">《Builder Pattern 在 Objective-C 中的使用》</a>：作者从一个真实场景出发，介绍了结合 block 使用工厂模式的实践方式。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2015/01/31/write-sdk-tips/">《写 iOS SDK 注意事项》</a>：我发现即使是像腾讯、小米这样的大厂提供的 SDK，在质量和规范上也有很多问题，文本分享了写 iOS SDK 注意事项。</p></li>
<li><p><a href="http://imtx.me/archives/1926.html">《CoreData 与 ReactiveCocoa 混用时要注意的线程问题》</a>：作者从一个 Crash 出发，分享了查找和修复问题的整个过程。</p></li>
<li><p><a href="http://www.jianshu.com/p/5adb536fd32b">《iOS 开发如何快速成长 ?》</a>：作者分享了自己的一些心得，包括：做有难度的项目、尽量少抱大腿、多读源码、多读国外的 iOS 开发网站和 blog、要孜孜不倦的学习。</p></li>
<li><p><a href="http://www.jianshu.com/p/f888db82fc27">《久违的的 LLDB 篇一，让 lldb 提升你的效率》</a>：作者分享了一些 LLDB 使用小技巧。</p></li>
<li><p><a href="http://nonomori.farbox.com/post/li-yong-cocoalumberjack-da-jian-zi-ji-de-log-xi-tong">《利用 CocoaLumberjack 搭建自己的 Log 系统》</a>：CocoaLumberjack 最早是由 Robbie Hanson 开发的日志库，可以在 iOS 和 MacOSX 开发上使用。其简单，快读，强大又不失灵活。本文介绍了利用 CocoaLumberjack 搭建自己的 Log 系统的过程。</p></li>
<li><p><a href="https://mikeash.com/pyblog/friday-qa-2015-02-20-lets-build-synchronized.html">《Let&rsquo;s Build @synchronized》</a>：本文讲解了 synchronized 关键字的内部实现原理。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><a href="http://realm.io/news/andy-matuschak-controlling-complexity/">《Controlling Complexity in Swift》</a>：本视频的作者来自 <a href="https://twitter.com/andy_matuschak">Andy Matuschak</a>，他曾在苹果 UIKit 组工作，在本视频中，他分享了用 Swift 来控制复杂度的经验。</li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/kimsungwhee/KSHObjcUML">KSHObjcUML</a>：KSHObjcUML 是一个 Objective-C 类引用关系图的 Xcode 插件。作者是：<a href="http://weibo.com/u/2289288323">@kimsungwhee</a>。</p></li>
<li><p><a href="https://itunes.apple.com/app/id961651406">Xliffie</a>：Xliffie 是 <a href="http://weibo.com/lexrus">@ 汤圣罡</a> 推荐的一个本地化必备工具，它对 Xcode 生成的 Xliff 文件支持较好。</p></li>
</ol>


<p> <hr />
广告：亚马逊上正在销售我的《iOS开发进阶》签名版，输入优惠码<code>JXBEGSGKUV</code>，可在结帐时减7元，点击查看：<a href="http://www.amazon.cn/b?node=1474130071">购买链接</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第38期]]></title>
    <link href="http://blog.devtang.com/blog/2015/02/05/ios-weekly-38/"/>
    <updated>2015-02-05T21:36:03+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/02/05/ios-weekly-38</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，文章地址是<a href="http://www.infoq.com/cn/news/2015/02/facebook-react-native">这里</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期 iOS 移动开发周报带来如下内容：Facebook 推出 React Native、Swift 小技巧、RunLoop 主题的分享、使用蒲公英来做 iOS 测试应用的分发等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://tech.sina.com.cn/mobile/n/apple/2015-01-25/10049980631.shtml">《分析师称 14 年四季度 iPhone 销量达 7300 万台》</a>：1 月 25 日上午消息，凯基证券分析师郭明池称，2014 年四季度 iPhone 销量达 7300 万台，iPad 销量达 2140 万台；并预计 2015 年一季度 iPhone 销量为 6160 万台，iPad 销量为 1010 万台。</p></li>
<li><p><a href="http://tech.sina.com.cn/i/2015-01-23/doc-iavxeafs0339155.shtml">《2014 年 iOS 应用开发者收入超好莱坞美国票房》</a>：市场研究公司 Asymco 分析师霍拉斯·德迪乌 (Horace Dediu) 本周发布研究报告称，iOS 应用经济的规模已经超过了好莱坞电影在美国的票房。2014 年全年，开发者通过苹果获得的收入为 100 亿美元。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://objccn.io/issue-20/">《objc 中国 Issue 20：访谈》</a>：
objc 中国 Issue 20 完成了三位传奇开发者的访谈，很有意思。从天才少年 Andy Matuschak ，到两次创业的 Loren Brichter，以及俄国妹子 Natasha Murashev，篇篇精彩。希望通过了解他们的经历，你会有所收获。</p></li>
<li><p><a href="http://www.jianshu.com/p/5d4789db4310">《Swift 怎样更优雅地处理网络返回数据》</a>：我们在 iOS 开发中进行网络请求的时候，一般是获取到服务器返回的 data 后，再根据我们的需要转换成 JSON，图像等信息。但如果你的应用中存在各种类型的返回数据，那么你可能就要在各个网络请求的中进行重复的处理了。本文介绍了如何使用 Swift 中的泛型和 extension 让你的数据解析工作更优雅。</p></li>
<li><p><a href="http://arstechnica.com/apple/2014/10/os-x-10-10/22/">《OS X 10.10 Yosemite: The Ars Technica Review》</a>：由 <a href="http://www.weibo.com/tualatrix?from=feed&amp;loc=avatar">图拉鼎</a> 推荐：这篇从 CPU 指令集、编译器来剖析 Swift 的文章，对其的设计越来越肯定了。简单的说，Swift 是一门使用 High Level 语言的语法及特性，同时仍有 Low Level 效能的一门语言。</p></li>
<li><p><a href="http://imtx.me/archives/1921.html">《Swift 小技巧（三）：如何用 Swift 思维设计网络请求》</a>：近来在用 Swift 开发 App 的过程中，最大的心得就是：我开始渐渐用「Swift 思维」来思考了。回顾刚开始我用 Swift 时，只是套用它的语法而已，脑子里依然是 Objective-C 思维。这段时间，随着对 Swift 基本特性的掌握，我开始有意识地学习并尝试一些 Swift 才有的特性，此谓「Swift 思维」。Swift 有很多专有（Objective-C 没有的）的模式，今天我就从一个很简单的例子讲起，那就是：如何用 Swift 思维设计网络请求。</p></li>
<li><p><a href="http://imtx.me/archives/1924.html">《wift 小技巧（五）：正确地启用 Logging 机制》</a>：文章介绍了如何在 Swift 项目里正确地设置 Logging 。</p></li>
<li><p><a href="http://nshipster.cn/the-death-of-cocoa/">《The Death of Cocoa》</a>：Cocoa 实际就是 Objective-C 的标准库，包含了许多用语言编写程序最需要的一些框架，例如 Foundation、AppKit 和 Core Data。即使 Swift 才开始被使用几个月，Cocoa 已经开始失去它原有的光芒了。在语言方面，我们都见到了 Swift 是终结 Objective-C 的开始，但是作为基本库的 Cocoa 呢？(这已经不是苹果第一次把它的标准库淘汰了，记得 Carbon 么)？如果我们用 Swift 基本库重新建立一套 Foundation 会怎么样？让我们来看看一些 Cocoa 做过的具体的例子，并看看一个新的 Swift 基本库在哪些地方可以提高。</p></li>
<li><p><a href="http://nshipster.cn/core-location-in-ios-8/">《Core Location in i​OS 8》</a>：自从 iPhone 存在以来，位置服务就一直处于非常重要的位置。Core Location API 也在 iPhone OS SDK 最初的公开版本里就存在了。iOS 8 ，Core Location 被改动了不少，不管是允许开发者做之前并不被允许的开发，还是帮助维护用户隐私。更特别的是，iOS 8 给 Core Location 带来了三个主要的改进：更分化的权限，室内定位以及访问监控。本文对此改进做了详细的介绍。</p></li>
<li><p><a href="http://beyondvincent.com/2015/01/20/2015-01-20-Apple-Watch/">《Apple Watch: WatchKit 应用程序要点》</a>：本文介绍了在开发 Apple Watch 应用程序时需要注意的要点。包括 WatchKit 应用程序和 WatchKit 扩展，以及 WatchKit 应用程序的生命周期。此系列的文章还有：<a href="http://beyondvincent.com/2015/01/20/2015-01-20-watchkit-framework-taking-apps-pocket/">《WatchKit 框架: 将应用程序从裤兜里取出来》</a>。</p></li>
</ol>


<h2>视频</h2>

<ol>
<li><p><a href="http://v.youku.com/v_show/id_XODgxODkzODI0.html">《RunLoop 主题的分享 by 孙源 @sunnyxx》</a>：来自百度的孙源组织了一次关于 Objective-C RunLoop 的技术分享。</p></li>
<li><p><a href="https://www.youtube.com/watch?v=KVZ-P-ZI6W4&amp;app=desktop">《React.js Conf 2015 Keynote &ndash; Introducing React Native》</a>：这是 Facebook 出品的 react.js 的视频介绍。Facebook 打算用它来统一移动端的编程语言，react.js 把界面全部用 native 控件实现，js 只作为后端逻辑层。Facebook 也打算开源该框架，如果这个框架成功，将改变整个业界的移动开发效率，因为 iOS 和 android 代码可以大部分复用。注：视频来自 youtube。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="http://blog.devtang.com/blog/2015/01/22/pgy-usage-guide/">《使用蒲公英来做 iOS 测试应用的分发》</a>： “蒲公英” 是一个应用的免费分发服务，它帮助开发者能够方便地做 iOS 应用的测试分发工作。本文介绍了蒲公英的基本使用方法。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><a href="https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift">Developing iOS 8 Apps with Swift</a>：《Developing iOS 8 Apps with Swift》是 Stanford 公开课，本项目是其中文字幕翻译。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈 React Native]]></title>
    <link href="http://blog.devtang.com/blog/2015/02/01/talk-about-react-native/"/>
    <updated>2015-02-01T16:27:43+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/02/01/talk-about-react-native</id>
    <content type="html"><![CDATA[<p><img src="/images/react-js.jpg"></p>

<h2>前言</h2>

<p>几天前，Facebook 在 React.js Conf 2015 大会上推出了 React Native（<a href="https://www.youtube.com/watch?v=7rDsRXj9-cU">视频链接</a>）。我发了一条微博(<a href="http://www.weibo.com/1708947107/C1WHHwqZv?from=page_1005051708947107_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1422782358309">地址</a>），结果引来了 100 多次转发。为什么 React Native 会引来如此多的关注呢？我在这里谈谈我对 React Native 的理解。</p>

<p>一个新框架的出现总是为了解决现有的一些问题，那么对于现在的移动开发者来说，到底有哪些问题 React Native 能涉及呢？</p>

<h3>人才稀缺的问题</h3>

<p>首先的问题是：移动开发人才的稀缺。看看那些培训班出来的人吧，经过 3 个月的培训就可以拿到 8K 甚至上万的工作。在北京稍微有点工作经验的 iOS 开发，就要求 2 万一个月的工资。这说明当前移动互联网和创业的火热，已经让业界没有足够的开发人才了，所以大家都用涨工资来抢人才。而由于跨平台的框架（例如 PhoneGap，RubyMotion）都还是不太靠谱，所以对于稍微大一些的公司，都会选择针对 iOS 和 Android 平台分别做不同的定制开发。而 JavaScript 显然是一个群众基础更广的语言，这将使得相关人才更容易获得，同时由于后面提到的代码复用问题得到解决，也能节省一部分开发人员。</p>

<h3>代码复用的问题</h3>

<p>React Native 虽然强调自己不是 “Write once, run anywhere" 的框架，但是它至少能像 Google 的 <a href="https://github.com/google/j2objc">j2objc</a> 那样，在 Model 层实现复用。那些底层的、与界面无关的逻辑，相信 React Native 也可以实现复用。这样，虽然 UI 层的工作还是需要做 iOS 和 Android 两个平台，但如果抽象得好，Logic 和 Model 层的复用不但可以让代码复用，更可能实现底层的逻辑的单元测试。这样移动端的代码质量将更加可靠。</p>

<p>其实 React Native 宣传的 &ldquo;Learning once, write anywhere&rdquo; 本身也是一种复用的思想。大家厌烦了各种各样的编程语言，如果有一种语言真的能够统一移动开发领域，对于所有人都是好事。</p>

<h3>UI 排版的问题</h3>

<p>我自己一直不喜欢苹果新推出的 AutoLayout 那套解决方案，其实 HTML 和 CSS 在界面布局和呈现上深耕多年，Android 也是借鉴的 HTML 的那套方案，苹果完全可以也走这套方案的。但是苹果选择发明了一个 Constraint 的东西来实现排版。在企业的开发中，其实大家很少使用 Xib 的，而手写 Constraint 其实是非常痛苦的。所以出现了 <a href="https://github.com/Masonry/Masonry">Masonry</a> 一类的开源框架来解决这类同行的痛苦。</p>

<p>我一直在寻找使用类似 HTML + CSS 的排版，但是使用原生控件渲染的框架。其实之前 <a href="https://github.com/gavinkwoe/BeeFramework">BeeFramework</a> 就做了这方面的事情。所以我还专门代表 InfoQ 对他进行过采访。BeeFramework 虽然开源多年，而且有 2000 多的 star 数，但是受限于它自身的影响力以及框架的复杂性，一直没有很大的成功。至少我不知道有什么大的公司采用。</p>

<p>这次 Facebook 的 React Native 做的事情相比 <a href="https://github.com/gavinkwoe/BeeFramework">BeeFramework</a> 更加激进。它不但采用了类似 HTML + CSS 的排版，还把语言也换成了 JavaScript，这下子改变可以称作巨大了。但是 Facebook 有它作为全球互联网企业的光环，相信会有不少开发者跟进采用 React Native。</p>

<p>不过也说回来，Facebook 开源的也不一定都好，比如 <a href="https://github.com/facebookarchive/three20">three20</a> 就被 Facebook 放弃了，但是不可否认 <a href="https://github.com/facebookarchive/three20">three20</a> 作为一个框架，在那个时期的特定价值。所以 React Native 即使没有成功，它也将人们关注的焦点放在了移动开发的效率上了。很可能会有越来越多相关的框架因此涌现出来。</p>

<h3>MVVM</h3>

<p>MVVM 在 Web 开发领域相当火热，而 iOS 领域的 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> 虽然很火，但是还是非常小众。纠其原因，一方面是 ReactiveCocoa 带来的编程习惯上的改变实在太大，ReactiveCocoa 和 MVVM 的学习成本还是很高。另一方面是 ReactiveCocoa 在代码可读性、可维护性和协作上不太友好。</p>

<p>而 Web 开发领域对 MVVM 编程模式的接受程度就大不相同了，在 Web 开发中有相当多的被广泛使用的 MVVM 的框架，例如 <a href="http://en.wikipedia.org/wiki/AngularJS">AngularJS</a>。相信 React Native 会推动 MVVM 应用在移动端的开发。</p>

<h3>动态更新</h3>

<p>终于说到最 &ldquo;鸡冻人心&rdquo; 的部分了。你受够了每次发新版本都要审核一个星期吗？苹果的审核团队在效率上的低下，使得我们这一群狠不得每天迭代更新一版的敏捷开发团队被迫每 2 周或 1 个月更新一次版本。很多团队上一个版本还没审核结束，下一个版本就做好了。</p>

<p>React Native 的语言是基于 JavaScript，这必然会使得代码可以从服务器端动态更新成为可能。到时候，每天更新不再是梦想。当然，代码的安全性将更一步受到挑战，如何有效保护核心代码的安全将是一个难题。</p>

<h2>总结</h2>

<p>不管怎么样，这确确实实是一个移动互联网的时代，我相信随着几年的发展，移动互联网的开发生态也会积累出越来越多宝贵的框架，以支撑出更加伟大的 App 出现。作为一个移动开发者，我很高兴能够成为这个时代的主角，用移动开发技术改变人们的生活。</p>

<p>愿大家珍惜这样的机会，玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写iOS SDK注意事项]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/31/write-sdk-tips/"/>
    <updated>2015-01-31T21:44:33+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/31/write-sdk-tips</id>
    <content type="html"><![CDATA[<p>我发现即使是像腾讯、小米这样的大厂提供的 SDK，在质量和规范上也有很多问题，而且包括我以及我身边的很多朋友都被恶心到了，所以我就把这些注意事项总结出来，希望大家不要犯同样的错误。</p>

<h3>注意事项一：所有类名都应该加前缀</h3>

<p>说明：没有前缀的类名有冲突的风险。</p>

<p>Bad Case：微信分享的 SDK，文件名：<code>WXApiObject.h</code>，代码如下，其中<code>BaseReq</code>类和<code>BaseResp</code>类都没有加前缀。</p>

<p>```
@interface BaseReq : NSObject</p>

<p>/<strong> 请求类型 */
@property (nonatomic, assign) int type;
/</strong> 由用户微信号和 AppID 组成的唯一标识，发送请求时第三方程序必须填写，用于校验微信用户是否换号登录 <em>/
@property (nonatomic, retain) NSString</em> openID;</p>

<p>@end</p>

<h1>pragma mark &ndash; BaseResp</h1>

<p>/<em>! @brief 该类为微信终端 SDK 所有响应类的基类
 *
 </em>/
@interface BaseResp : NSObject
/<strong> 错误码 */
@property (nonatomic, assign) int errCode;
/</strong> 错误提示字符串 <em>/
@property (nonatomic, retain) NSString </em>errStr;
/<em>* 响应类型 </em>/
@property (nonatomic, assign) int type;</p>

<p>@end
```</p>

<h3>注意事项二：所有 category 方法加前缀</h3>

<p>说明：category 方法如果不加前缀，有冲突的风险。</p>

<p>Bad Case：腾讯分享的 SDK，它为 NSArray 增加了一个 JSONArray 的 category，造成我们本身的同名 category 被覆盖。另外他们为 NSArray 增加的其它 category 和著名的 Cordova 开源库冲突，造成 Cordova 无法使用。</p>

<h3>注意事项三：不要将第三方库打包进 SDK</h3>

<p>说明：尽量不要将第三方库打包进 SDK，如果要打包，最好也要将该第三方库重命名，以避免冲突。</p>

<p>Bad Case：小米的推送 SDK，直接在 SDK 静态库里面编进去一个第三方依赖库，而且这个库还是 ASIHttpRequest。ASIHttp 当前已经处于无人维护状态，很多 Bug 都是大家自己在修复（例如网易就自己维护了一个 ASIHttpRequest 的分支）。在 SDK 中依赖这种库还是比较麻烦的。</p>

<h3>注意事项四：做基本的检查和测试</h3>

<p>说明：SDK 对外公布前应该进行基本的编译检查，不应该有编译器警告存在。</p>

<p>Bad Case：腾讯分享的 SDK。它的 <code>CGIParamsWrap.o</code> 和  <code>TencentOAuth.o</code> 文件里面的方法名冲突了，如下所示：</p>

<blockquote><p>ld: warning: instance method &lsquo;deleteAPIRequestBySeq:&rsquo; in category from /Users/tangqiao/work/iphone/solar-ios/lib_common/TencentOpenApi/TencentOpenAPI.framework/TencentOpenAPI(CGIParamsWrap.o) overrides method from class in /Users/tangqiao/work/iphone/solar-ios/lib_common/TencentOpenApi/TencentOpenAPI.framework/TencentOpenAPI(TencentOAuth.o)</p></blockquote>

<h3>注意事项五：文档完整并且正确</h3>

<p>说明：这就不用解释了吧？</p>

<p>Bad Case: 微信官方的微信支付的示例代码，里面有各种错误，代码都无法编译成功。如下所示的是其中一个错误：</p>

<p><img src="/images/weixin-pay-error.jpg"></p>

<p>于是还有人专门帮微信另外制作了一个非官方的说明文档，地址在这里：<a href="https://github.com/gbammc/WechatPayDemo">https://github.com/gbammc/WechatPayDemo</a></p>

<h3>注意事项六：支持最新的 CPU 版本</h3>

<p>说明：去年苹果的一次 Bug，造成上传应用必须支持 arm64 的 CPU 版本，结果众多应用因为依赖的 SDK 不支持 arm64 而无法更新。当然，这次 Bug 出来之后，各 SDK 厂商都紧急做了更新。但是我觉得这种事情如果要做得专业，就应该一开始就紧跟技术更新，及时更新，而不是被迫更新。</p>

<h2>总结</h2>

<p>以上 6 点是我认为写一个 SDK 的最最基本的要求，希望被点名批评的同学能尽快改正哟～</p>

<p>如果大家在使用其它 SDK 时也发现了类似的问题，欢迎在文章下面留言。希望通过这种方式给开发相关 SDK 的同学一些压力，让他们好好改一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第37期]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/31/ios-weekly-37/"/>
    <updated>2015-01-31T09:34:58+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/31/ios-weekly-37</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，地址是<a href="http://www.infoq.com/cn/news/2015/01/ios-v-advanced-technology-road">这里</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>本期 iOS 移动开发周报带来如下内容：iOS大V的技术进阶之路、ARC 对 self 的内存管理、Method Swizzling 和 AOP 实践、使用 iMovie 和 Keynote 制作 App Preview等。</p>

<h2>新闻</h2>

<ol>
<li><p><a href="http://www.cocoachina.com/programmer/20150115/10930.html">《唐巧访谈： iOS大V的技术进阶之路》</a>：文章来自于 CocoaChina 的访谈，采访对象是唐巧，他的新书<a href="https://github.com/tangqiaoboy/iOS-Pro">《iOS开发进阶》</a>已经和大家见面.采访中唐巧表达了他对于技术学习、建设技术影响力等方面的经验和看法。</p></li>
<li><p><a href="http://wangling.me/2015/01/moke-2014.html#fn-1?utm_source=qdan.me#/">《Moke 2014 以及 1 元应用效应》</a>：Moke 作者分享了他的应用在 2014 年的销售额以及他对于 1 元应用的看法。</p></li>
<li><p><a href="http://www.cocoachina.com/programmer/20150121/10966.html">《王巍访谈：关于 Swift 学习和 AppleWatch 开发的一些建议》</a>：文章来自于 CocoaChina 的访谈，采访对象是王巍，微博 ID“onevcat”，圈儿内人称喵神，知名 iOS/Unity 开发者，现居日本，就职于 LINE。喵神是 <a href="http://objccn.io/">objc 中国</a>项目发起人，开源过广受开发者喜爱的 Xcode 插件 VVDocumenter，主创或参与开发《姬骑士和最后的百龙战争》、《英雄 Slash》、《冒险谜题王国》以及《小熊推金币》等多款游戏，个人应用代表有《番茄工作法》(Pomodoro Do) 和《云端记账》(Our Money)。</p></li>
<li><p><a href="http://iiiyu.com/2015/01/20/2014-oh-my-star-app-annual-summary/">《2014 年 Oh My Star 总结》</a>：Oh My Star 是一款由国人 <a href="http://weibo.com/n/Sumi-iYu">@Sumi-iYu</a> 开发的管理 Github 上 star 项目的工具。笔者使用过，对于 star 功能的重度用户来说，非常好用。本文分享了作者在开发该软件的过程以及收货。</p></li>
</ol>


<h2>教程</h2>

<ol>
<li><p><a href="http://blog.sunnyxx.com/2015/01/17/self-in-arc/">《ARC 对 self 的内存管理》</a>：文章从 YTKNetwork 的几行代码出发，讨论了 LLVM 编译器在传递 self 参数时，对 self 的引用计数的特殊处理。</p></li>
<li><p><a href="http://blog.nswebfrog.com/2015/01/08/autolayout-trick/">《AutoLayout 布局技巧－等宽子视图》</a>：所谓等宽子视图，也就是对一个有 n 个子视图的父视图来说，无论父视图的宽度怎么变化，所有子视图的宽度是相等的。文章介绍了这一类排版需求的 AutoLayout 布局技巧。</p></li>
<li><p><a href="http://tech.glowing.com/cn/objective-c-runtime/">《Objective-C Runtime》</a>：Objective-C 是一个动态语言，这意味着它不仅需要一个编译器，也需要一个运行时系统来动态得创建类和对象、进行消息传递和转发。理解 Objective-C 的 Runtime 机制可以帮我们更好的了解这个语言，适当的时候还能对语言进行扩展，从系统层面解决项目中的一些设计或技术问题。本文讲解了 Runtime 的核心 &ndash; 消息传递 （Messaging）。</p></li>
<li><p><a href="http://tech.glowing.com/cn/method-swizzling-aop/">《Method Swizzling 和 AOP 实践》</a>：利用 Objective-C 的 Runtime 特性，我们可以给语言做扩展，帮助解决项目开发中的一些设计和技术问题。这一篇，我们来探索一些利用 Objective-C Runtime 的黑色技巧。这些技巧中最具争议的或许就是 Method Swizzling 。文本介绍了利用 Method Swizzling，结合 AOP 来做一些打 Log 的工作。利用 objective-C Runtime 特性和 Aspect Oriented Programming ，我们可以把琐碎事务的逻辑从主逻辑中分离出来，作为单独的模块。它是对面向对象编程模式的一个补充。</p></li>
<li><p><a href="http://weibo.com/p/1001603800875490492754">《CocoaPods 最佳实践探讨》</a>：作者在文章中表达了对目前常见的 CocoaPods 使用方法的意见。希望大家根据自己的经验，一起讨论出一份真正的 “最佳实践”。</p></li>
<li><p><a href="http://www.jianshu.com/p/358106d653cf">《使用 iMovie 和 Keynote 制作 App Preview》</a>：App Preview 就是一段 15-30 秒的短视频，用来展示你的应用的特性、用户界面、交互方式等内容。在 App Store 你的应用的详细信息页面里，放在原来的截图之前。体验上会比截图更有冲击力，也能够表现更多的东西。茫茫的 App 海洋之中，如何脱颖而出，卖相至关重要。本文作者分享了他使用 iMovie 和 Keynote 制作 App Preview 的经验，并且提供了相关的效果视频和 Keynote 源文件。</p></li>
<li><p><a href="http://blog.callmewhy.com/2015/01/20/wtf-in-old-code/">《要你命三千：老代码中的那些坑》</a>: 最近在给以前的老项目维护，说起来工作很简单，一个字：改 Bug。这看起来平淡无常的工作，实际上凶险无比，藏坑无数。时至今日，感觉整个人都得到了升华。在睡觉前抽空写篇博客，和各位分享一下踩坑经历，一起品味其中的种种酸苦辣 (没甜)。</p></li>
<li><p><a href="http://natashatherobot.com/unit-testing-swift-dependency-injection/">《Unit Testing in Swift: Dependency Injection》</a>：文章介绍了在 Swift 实现的单元测试中实现依赖注入，不过实际写起来还是比较麻烦。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://ship.io">ship.io</a>：ship.io 是一个持续集成服务。现在所有套餐免费，支持 Xcode 6.1.1。</p></li>
<li><p><a href="https://crowdin.com/">Crowdin</a>: Crowdin 是一个多语言翻译服务。可以便于开发者将应用改成支持多语言。类似的服务还有：<a href="https://www.transifex.com/">Transifex</a>。</p></li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/dasdom/BreakOutToRefresh">BreakOutToRefresh</a>：BreakOutToRefresh 是一个有趣的项目，它利用 SpriteKit 在下拉刷新过程中做了一个打砖块游戏。</p></li>
<li><p><a href="https://github.com/Ramotion/animated-tab-bar">RAMAnimatedTabBarController</a>：RAMAnimatedTabBarController 是一个让 TabBar 上的元素能够显示动画效果的开源库。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
