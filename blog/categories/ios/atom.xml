<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-06-29T13:49:29+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[那些好用的iOS开发工具]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/29/ios-dev-tools/"/>
    <updated>2014-06-29T13:12:01+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/29/ios-dev-tools</id>
    <content type="html"><![CDATA[<p><img src="/images/ColorSync-Utility-icon.png"></p>

<h2>版权说明</h2>

<p>本文首发于《程序员》杂志2014年6月刊，未经允许，请勿转载。</p>

<h2>前言</h2>

<p>从苹果发明iPhone起，AppStore上的一个又一个类似flappy bird的一夜暴富的故事刺激着大量开发者加入移动开发大军。随着这些开发者出现的，还有大量方便iOS开发者的各种工具。这些工具作为整个应用开发生态链的重要一环，极大地方便了广大应用开发者，节省了应用开发的时间。</p>

<p>本文将从应用工具、命令行工具、插件工具3个方面，介绍这些优秀的应用。</p>

<h2>图形应用工具</h2>

<h3>Charles</h3>

<p><img src="/images/charles-logo.png"></p>

<p>Charles（<a href="http://www.charlesproxy.com">http://www.charlesproxy.com</a>）是在Mac下常用的截取网络封包的工具，在做iOS开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Charles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<p>Charles详细的使用说明，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/">《iOS开发工具-网络封包分析工具Charles》</a></p>

<h3>界面调试</h3>

<p>PonyDebugger（<a href="https://github.com/square/PonyDebugger">https://github.com/square/PonyDebugger</a>）、Reveal（<a href="http://revealapp.com/">http://revealapp.com/</a>）、Spark Inspector（<a href="http://sparkinspector.com/">http://sparkinspector.com/</a>）是三个常用的界面调试工具，可以在程序运行时动态调试iOS应用界面。PonyDebugger是免费并且开源的，后两者是收费的，不过功能更加强大。</p>

<p>对于动态或复杂的交互界面，手写UI的是不可避免的，而Reveal一类的工具可以方便我们查看控件的相应属性是否正常，并且可以在程序运行时，动态地修改界面元素。这样就不用反复地修改代码并且重启程序了。</p>

<h3>xScope</h3>

<p>xScope（<a href="http://xscopeapp.com/">http://xscopeapp.com/</a>）是一类与界面开发相关的工具集。对于iOS开发，比较好用的功能包括它的放大镜取色工具、标尺工具等。其中放大镜取色工具可以将取到的多个色集收集起来，方便后续使用，并且支持直接粘贴成相关的程序颜色代码。</p>

<p>xScope是收费软件，对于未付费版本，其功能有一些限制。</p>

<h3>ImageOptim</h3>

<p>ImageOptim（<a href="http://imageoptim.com/">http://imageoptim.com/</a>）是一个图象压缩的免费工具。iOS工程默认使用的是 pngcrush 命令来压缩图片，不过其压缩比率其实不高。对于应用中图片资源比较多的读者，可以尝试使用 ImageOptim 来达到最大的图片压缩效果。</p>

<p>如果你从未尝试过ImageOptim一类的图片压缩工具，那么第一次给IPA文件瘦身的效果应该是比较惊人的。我个人的经验是，初次使用时ImageOptim能减少至少10%的应用图片资源占用。</p>

<p>ImageOptim的实现原理是使用各种开源的图像压缩工具，然后取效果最好的那一个。它尝试的工具包括：PNGOUT, Zopfli, Pngcrush, AdvPNG, extended OptiPNG, JpegOptim, jpegrescan, jpegtran 和 Gifsicle。</p>

<p>安装方式是从其官方网站（<a href="http://imageoptim.com/">http://imageoptim.com/</a>）上下载程序文件，拖动到“应用程序”目录即可。下图是本篇文章所有的配图，可以看到使用ImageOptim达到了29.5%的体积缩小。</p>

<p><img src="/images/tool-imageoptim.jpg"></p>

<h3>马克鳗</h3>

<p>马克鳗（<a href="http://www.getmarkman.com/">http://www.getmarkman.com/</a>）是国人开发的一款免费标注工具，可以方便地在美术输出的设计稿上标注相应界面元素的大小，颜色，边距，说明等。</p>

<h2>命令行工具</h2>

<h2>CocoaPods</h2>

<p><img src="/images/xcode-cmd-cocoapods.png"></p>

<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具或者是中央代码仓库。比如Java的maven，Nodejs的npm等。而CocoaPods（<a href="http://cocoapods.org/">http://cocoapods.org/</a>）是为iOS程序提供依赖管理的工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>

<p>在我开发猿题库客户端时，其使用了24个第三方开源库。在没有使用CocoaPods以前，我需要:</p>

<ol>
<li>把这些第三方开源库的源代码文件复制到项目中，或者设置成git的submodule。</li>
<li>对于这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如通常情况下，一个网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics, zlib。</li>
<li>对于某些开源库，我还需要设置<code>-licucore</code>或者 <code>-fno-objc-arc</code>等编译参数</li>
<li>管理这些依赖包的更新。</li>
</ol>


<p>这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行<code>pod install</code>。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>

<p>使用CocoaPods还需要注意以下几点：</p>

<ol>
<li>需要使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</li>
<li>每次更改了Podfile文件，你需要重新执行一次<code>pod update</code>命令。</li>
<li>当你执行<code>pod install</code>之后，除了Podfile外，CocoaPods还会生成一个名为<code>Podfile.lock</code>的文件，你应该把这个文件加入到版本管理中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行<code>pod install</code> 不会更改版本，要<code>pod update</code>才会改<code>Podfile.lock</code>了。这样的好处是：当多人协作的时候，可以保证所有人的第三库环境是完全一样的。</li>
</ol>


<p>详细的使用说明，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">《用CocoaPods做iOS程序的依赖管理》</a></p>

<h2>nomad</h2>

<p>nomad（<a href="http://nomad-cli.com/">http://nomad-cli.com/</a>）是一个方便你操作苹果开发者中心（Apple Developer Center）的命令行工具，可以做的事情包括方便地添加测试设备，更新证书文件，增加App id，验证IAP的凭证等。</p>

<p>安装方式：</p>

<p><code>
gem install nomad-cli
</code></p>

<p>安装完后，首先执行<code>ios login</code>，你的Developer账号密码会被它存储到Keychain中，之后就可以用命令行来完成各种后台操作了，例如：</p>

<p>添加测试设备：</p>

<p><code>
ios devices:add "TangQiaos iPhone"=&lt;Device Identifier&gt;
</code></p>

<p>更新证书文件:</p>

<p><code>
ios profiles:devices:add TangQiao_Profile "TangQiaos iPhone"=&lt;Device Identifier&gt;
</code></p>

<p>nomad还有很多功能，建议大家阅读其官方网站的文档进一步学习。</p>

<h2>xctool</h2>

<p>xctool（<a href="https://github.com/facebook/xctool">https://github.com/facebook/xctool</a>）是facebook开源的一个iOS编译和测试的工具。使用它而不是用Xcode的UI界面是因为它是一个纯命令行工具。比如：我们可以使用xctool在命令生下进行编译和单元测试，然后将测试结果集成到Jenkins中，这样就实现了自动化的持续集成。虽然苹果也在OSX Server上推出了自己的自动化集成工具BOT，但其配置和使用上现在仍然不太方便。</p>

<p>安装xctool可以使用brew命令：</p>

<p><code>
brew install xctool
</code></p>

<p>使用xctool编译项目可以使用如下命令：</p>

<p><code>
path/to/xctool.sh \
  -project YourProject.xcodeproj \
  -scheme YourScheme \
  build
</code></p>

<p>使用xctool执行单元测试，可以使用如下命令：</p>

<p><code>
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  test
</code></p>

<p>xctool还有很多功能，建议大家阅读xctool官方网站的文档进一步了解更多的功能。</p>

<h2>appledoc</h2>

<p>appledoc（<a href="https://github.com/tomaz/appledoc">https://github.com/tomaz/appledoc</a>）是一个从源码中抽取文档的工具。</p>

<p>对于开发者来说，文档最好和源码在一起，这样更新起来更加方便和顺手。象Java一类的语言本身就自带javadoc命令，可以从源码中抽取文档。而appledoc就是一个类似javadoc的命令行程序，可以从iOS工程的源代码中抽取相应的注释，生成帮助文档。</p>

<p>相对于其它的文档生成工具，appledoc的优点是：</p>

<ul>
<li>它默认生成的文档风格和苹果的官方文档是一致的。</li>
<li>appledoc就是用objective-c写的，必要的时候调试和改动也比较方便。</li>
<li>它可以生成docset，并且集成到xcode中。集成之后，在相应的API调用处，按住option再单击就可以调出相关的帮助文档。</li>
<li>它没有特殊的注释要求，兼容性高。</li>
</ul>


<p>安装appledoc可以直接使用brew命令：</p>

<p><code>
brew install appledoc
</code></p>

<p>使用时切换到iOS工程目录下，执行以下操作即可，appledoc会扫描当前路径下的所有文件，然后生成好文档放到doc目录下。你也可以用appledoc —help查看所有可用的参数。</p>

<p><code>
appledoc -o &lt;output_path&gt; \
--project-name &lt;project_name&gt; \
--project-company &lt;project_company&gt; .
</code></p>

<p>详细的使用介绍，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2012/02/01/use-appledoc-to-generate-xcode-doc/">《使用Objective-C的文档生成工具:appledoc》</a></p>

<h2>Xcode插件</h2>

<p>Xcode是iOS的集成开发环境，虽然苹果一直在不断改进Xcode，但程序员总是有各种新奇的想法和需求，当Xcode无法满足他们时，于是他们就会通过插件的方式来为Xcode增加新的功能。本节将会给大家介绍一些常用的Xcode增强插件。</p>

<p>Xcode所有的插件都安装在目录<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code>下，每个插件为一个子目录，你也可以手工切换到这个目录来增加或删除插件。</p>

<h3>Alcatraz</h3>

<p><img src="/images/tool-alcatraz-logo.jpg"></p>

<p>Alcatraz（<a href="http://alcatraz.io/">http://alcatraz.io/</a>）是管理Xcode所有插件的插件，它可以直接集成到Xcode的图形界面中，让你感觉就像在使用Xcode自带的功能一样。Alcatraz不但可以管理Xcode的插件，它另外还提供了管理Xcode工程模版以及颜色配置的功能。</p>

<p>使用如下的命令行来安装Alcatraz：</p>

<p>```
mkdir -p ~/Library/Application\ Support/\
Developer/Shared/Xcode/Plug-ins;
curl -L <a href="http://git.io/lOQWeA">http://git.io/lOQWeA</a> |\
 tar xvz -C ~/Library/Application\ Support/\
 Developer/Shared/Xcode/Plug-ins</p>

<p>```</p>

<p>安装成功后重启Xcode，就可以在Xcode的顶部菜单中的"Window"&ndash;>“Package Manager”中找到Alcatraz。点击“Package Manager”，即可启动插件列表页面。你可以在右上角搜索插件，对于想安装的插件，点击其左边的图标，即可下载安装，如下所示，我正在安装KImageNamed插件：</p>

<p><img src="/images/alcatraz-install.jpg"></p>

<p>安装完成后，再次点击插件左边的图标，可以将该插件删除。</p>

<p>以下所有介绍的插件均可用该方法来安装或删掉，就不另行介绍了。</p>

<p>Alcatraz详细的使用介绍，欢迎阅读我的文章：<a href="http://blog.devtang.com/blog/2014/03/05/use-alcatraz-to-manage-xcode-plugins/">《使用Alcatraz来管理Xcode插件》</a></p>

<h3>KSImageNamed</h3>

<p>KSImageNamed（<a href="https://github.com/ksuther/KSImageNamed-Xcode">https://github.com/ksuther/KSImageNamed-Xcode</a>）是一个帮助你输入[UIImage imageNamed:]中的资源名的插件。当你输入<code>[UIImage imageNamed:]</code>时，会自动的弹出上下文菜单，供你选择你需要输入的图片资源名字，另外在选择图片资源时，还可以在左侧预览该资源。如下图所示：</p>

<p><img src="/images/xcode-plugin-nsimage.jpg"></p>

<h3>XVim</h3>

<p>XVim（<a href="https://github.com/JugglerShu/XVim">https://github.com/JugglerShu/XVim</a>）是一个Xcode的vim插件，可以在Xcode的编辑窗口中开启vim模式。</p>

<p>vim模式最大的好处是可以全键盘操作，可以方便地移动光标以及复制、粘贴代码。XVim对于Xcode的分栏模式也有很好的支持，与vim自带的分栏模式一样，可以用快捷键<code>ctrl + w</code>来切换当前编辑的分栏。</p>

<h3>FuzzyAutocompletePlugin</h3>

<p>FuzzyAutocompletePlugin (<a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin">https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin</a>) 允许使用模糊的方式来进行代码自动补全。</p>

<p>举个例子，如果我们要重载 <code>viewDidAppear:</code>方法，那么我们必须依次建入view、did、appear 才能得到相应的补全信息，使用FuzzyAutocompletePlugin之后，我们可以建入vda (view、did、appear 三个单词的首字母)，或任意符合viewDidAppear整个单词出现顺序的子串(例如 vdapp, adear等)，即可匹配到该方法。</p>

<p><img src="https://raw.githubusercontent.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/master/demo.gif" alt="" /></p>

<h3>XToDo</h3>

<p>XToDo（<a href="https://github.com/trawor/XToDo">https://github.com/trawor/XToDo</a>）是一个查找项目中所有的带有 <code>TODO</code>, <code>FIXME</code>, <code>???</code>, <code>!!!</code> 标记的注释。</p>

<p>通常我们在项目开发中，由于种种原因，一些事情需要以后处理，这个时候为了防止遗忘，加上<code>TODO</code>或<code>FIXME</code>注释是非常有必要的，但是上线或提交代码前要寻找这些未解决的事项却稍显麻烦。XToDo可以提供一个汇总的界面，集中显示所有的未完成的<code>TODO</code>和<code>FIXME</code>标记。</p>

<h3>BBUDebuggerTuckAway</h3>

<p>BBUDebuggerTuckAway（<a href="https://github.com/neonichu/BBUDebuggerTuckAway">https://github.com/neonichu/BBUDebuggerTuckAway</a>）是一个非常小的工具，可以在你编辑代码的时候自动隐藏底部的调试窗口。因为通常情况下，调试的时候是加断点或监控变量变化，或者在Console窗口用<code>po</code>来输出一些调试信息。如果开始编辑代码了，说明已经调试结束了，这个时候隐藏调试窗口，可以给编辑界面更多空间，方便我们修改代码。</p>

<h3>SCXcodeSwitchExpander</h3>

<p>SCXcodeSwitchExpander（<a href="https://github.com/stefanceriu/SCXcodeSwitchExpander">https://github.com/stefanceriu/SCXcodeSwitchExpander</a>）帮助你迅速地在<code>switch</code>语句中填充枚举类型的每种可能的取值。</p>

<p>例如，当你输入<code>switch</code>，然后键入一个<code>NSTableViewAnimationOptions</code>类时，该插件会将其可能的取值补全在每一个<code>case</code>之后，如下图所示：</p>

<p><img src="/images/xcode-plugin-switch.jpg"></p>

<h3>deriveddata-exterminator</h3>

<p>deriveddata-exterminator（<a href="https://github.com/kattrali/deriveddata-exterminator">https://github.com/kattrali/deriveddata-exterminator</a>）是一个清除Xcode缓存目录的插件。</p>

<p>有些时候Xcode会出各种奇怪的问题，最常见的是在某些复杂操作下（例如同一个项目，来回切换到各种分支版本），会造成Xcode显示一些编译的错误或警告，但是最终却又可以编译通过。新手遇到这种问题常常束手无策，而熟悉Xcode的人就知道，通常清除Xcode缓存就可以解决这类问题。该插件在Xcode菜单上增加了一个清除缓存按钮，可以一键方便地清楚缓存内容。</p>

<h3>VVDocumenter</h3>

<p>VVDocumenter（<a href="https://github.com/onevcat/VVDocumenter-Xcode">https://github.com/onevcat/VVDocumenter-Xcode</a>）是一个自动生成代码注释的工具，可以方便地将函数的参数名和返回值提取出来，这样结合上一节介绍的<code>appledoc</code>命令，就可以方便地将帮助文档输出。</p>

<p><img src="/images/xcode-plugin-vvdocument.png"></p>

<h3>ClangFormat</h3>

<p>ClangFormat（<a href="https://github.com/travisjeffery/ClangFormat-Xcode">https://github.com/travisjeffery/ClangFormat-Xcode</a>）是一个自动调整代码风格（Code Style）的工具。Xcode本身的代码缩进自动调整功能比较弱，特别是对于JSON格式，常常产生非常丑陋的默认缩进效果。ClangFormat-Xcode可以更好地对代码进行重新排版，并且内置了各种排版风格，也支持自定义风格。</p>

<h3>ColorSense</h3>

<p>ColorSense（<a href="https://github.com/omz/ColorSense-for-Xcode">https://github.com/omz/ColorSense-for-Xcode</a>）是一个<code>UIColor</code>颜色输入辅助工具，可以帮助你在编写<code>UIColor</code>代码时，实时预览相应的颜色，如下图所示：</p>

<p><img src="/images/xcode-plugin-color.png"></p>

<h3>XcodeBoost</h3>

<p>XcodeBoost（<a href="https://github.com/fortinmike/XcodeBoost">https://github.com/fortinmike/XcodeBoost</a>）包含多个辅助修改代码的小功能，比如：</p>

<ul>
<li>可以在.m文件中复制方法实现，然后将该方法的定义粘贴到对应的.h文件中</li>
<li>可以在某一个源文件中直接输入正则表达式查找</li>
<li>可以复制粘贴代码时不启用Xcode的自动缩进功能（Xcode的自动缩进经常出问题，造成已经调整好的代码缩进，因为粘贴时被Xcode调整坏了）</li>
</ul>


<h2>小结</h2>

<p>本文分图形应用工具，命令行工具，Xcode插件三个部分，介绍了iOS开发中好用的工具。其中涉及的图形工具部分是收费的，而命令行工具和Xcode插件工具全部是免费并且开源的工具，笔者在此也感谢广大的开源软件作者，是他们让整个软件生态圈更加美好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第15期]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/24/ios-weekly-15/"/>
    <updated>2014-06-24T12:58:31+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/24/ios-weekly-15</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/06/ios8-osx10.10-extension">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Swift 和 C# 的语法比较，一个CoreText排版性能问题，谈谈 iOS 8 和 OS X 10.10 的 Extension等。</p>

<h2>教程</h2>

<ol>
<li><p><a href="http://swift.sh/topic/125/swift-c/">《Swift 和 C# 的语法比较》</a>：适合有C#开发经验的朋友快速了解Swift语言。</p></li>
<li><p><a href="https://leverich.github.io/swiftislikescala/">《Swift 和 Scala 的语法比较》</a>：适合有 Scala 开发经验的朋友快速了解Swift语言。</p></li>
<li><p><a href="http://studentdeng.github.io/blog/2014/06/13/auto-layout/">《AutoLayout 相关概念介绍和动画demo》</a>：文章从传统布局的问题入手，介绍了AutoLayout 相关概念，最后提供了一个示例的Demo程序。</p></li>
<li><p><a href="http://blog.cnbang.net/tech/2268/">《一个CoreText排版性能问题》</a>：伊书的阅读器是用CoreText排版的，在中文字体的选择上，自带的字体中只有黑体，后来发现日文字体Hiragino也是可以用于中文，而且显示效果比黑体好很多，于是选用了这个字体。但在CoreText排版中遇到个问题，用Hiragino字体排版速度非常慢，几乎是默认黑体的100倍。作者分享了整个问题查找和最后解决的过程。</p></li>
<li><p><a href="http://imtx.me/archives/1898.html">《谈谈 iOS 8 和 OS X 10.10 的 Extension》</a>：作者介绍了 WWDC 14 的视频之《Creating Extensions for iOS and OS X》中介绍的Extensions技术，解释了为何 Extensions 这么重要。</p></li>
<li><p><a href="http://objccn.io/issue-13/">《objc第13期：架构》</a>：本期objc.io的中文翻译带来了5篇高质量的关于iOS程序架构方面的文章，分别是：<a href="http://objccn.io/issue-13-1/">《MVVM 介绍》</a>、<a href="http://objccn.io/issue-13-2/">《避免滥用单例》</a>、 <a href="http://objccn.io/issue-13-3/">《iOS 中的行为》</a>、<a href="http://objccn.io/issue-13-4/">《子类》</a>、 <a href="http://objccn.io/issue-13-5/">《使用 VIPER 构建 iOS 应用》</a>。</p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-06-22-quartz-composer-and-origami-tutorial-button-animation.md">《用 Quartz Composer 和 Origami 制作一个简单的按钮动画》</a>: 文章由 <a href="http://weibo.com/nixzhu">@nixzhu</a> 翻译。阅读本文，然后照着做一遍。只需20分钟，你就能了解 QC 和 Origami 是什么，能做什么，以及怎么做。</p></li>
<li><p><a href="http://blog.sunnyxx.com/2014/03/06/rac_1_macros/">《Reactive Cocoa详解》</a>：Reactive Cocoa是一个函数响应式编程思想在Objective-C语言下的实现。本文将从几个方面详细介绍Reactive Cocoa。</p></li>
<li><p><a href="http://nshipster.cn/cocoapods/">《Cocoa​Pods》</a>：在Objective-C的情况下，CocoaPods提供了一个绝佳的整合合作开发的工具，并且在快速发展的开发社区中起到了一个集结点的作用。在本文中，我们将通过讨论CocoaPods的过去，现在以及将来，一起庆祝0.33版本（具有里程碑意义）的发布。</p></li>
<li><p><a href="http://geeklu.com/2014/05/facebook-pop-usage/">《Facebook Pop 使用指南》</a>：Facebook Pop其实是基于CADisplayLink(Mac平台上使用的CVDisplayLink)实现的独立于Core Animation之外的动画方案。作者在文章中主要介绍了Facebook Pop的使用。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><p><a href="https://github.com/iosxtools/WWDC2014">WWDC2014字幕下载工具</a>：一个 OSX App，方便下载WWDC2014的视频。</p></li>
<li><p><a href="http://octavianlogigan.com/1360/how-to-export-notes-from-ibooks/">《如何导出iBooks中的笔记》</a>：文章介绍了从iBook导出笔记的技巧。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第14期]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/10/ios-weekly-14/"/>
    <updated>2014-06-10T20:36:23+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/10/ios-weekly-14</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/06/ios-mobile-weekly">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：苹果发布Swift编程语言以及Swift编程语言相关学习资料。</p>

<h2>教程</h2>

<ol>
<li><p><a href="https://itunes.apple.com/gb/book/swift-programming-language/id881256329?mt=11">《The Swift Programming Language》</a>：这是苹果官方出版的Swift学习教材，可以免费下载到iBooks中阅读。其中文版翻译项目也在 Github 上火热进行中，地址在<a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese">这里</a>。</p></li>
<li><p><a href="http://www.raywenderlich.com/73967/swift-cheat-sheet-and-quick-reference">《Swift Cheat Sheet and Quick Reference》</a>：出自raywenderlich的一份Swift快速参考手册，现在还比较简单，但它正快速更新中。</p></li>
<li><p><a href="http://www.raywenderlich.com/73997/swift-language-highlights">《Swift Language Highlights: An Objective-C Developer’s Perspective》</a>：文章比较了Swift和Objective-C语言的差异性。</p></li>
<li><p><a href="http://blog.txx.im/blog/2014/06/07/wwdc14-session-402/">《WWDC14 Session 402 》学习笔记</a>：<a href="http://weibo.com/rpplusplus">@糖炒小虾_txx</a>完成了三篇关于Swift的学习笔记，主要内容均来自WWDC14 Session 402的视频。</p></li>
<li><p><a href="http://www.splasmata.com/?p=2798">《Swift 和Objective-C性能测试》</a>：苹果在WWDC视频中只是简单提到Swift在排序和加密算法上比Objective-C快。本文对两者的性能进行了更复杂的测试，文章中做的测试结果如下：循环100万次，Objective-C比Swift快 29倍；变量增加1， Objective-C比Swift快 46倍。还有一些其它比较，大家可以自己看原文，所以真相是：Swift其实不一定比OC快。</p></li>
<li><p><a href="http://onevcat.com/2014/06/walk-in-swift/">《行走于 Swift 的世界中》</a>：笔者和周围朋友讨论swift的技术细节，大家都觉得swift比想像中要复杂，onevcat的本文讲述了不少swift的细节。从中你会看到，swift真的不简单。</p></li>
<li><p><a href="http://code.csdn.net/news/2820075">《Swift编程语言资料大合集》</a>：来自CSDN整理的Swift学习合集资料。</p></li>
<li><p><a href="http://weekly.manong.io/issues/33?ref=swift">《Swift 特刊》</a>：来自码农周刊的Swift学习合集资料。</p></li>
</ol>


<h2>工具</h2>

<p><a href="http://www.iwangke.me/2014/06/07/wwdc-2014-download-script/">下载脚本</a>：该脚本是WWDC 2014 PDF 及session 视频下载脚本。</p>

<h2>开源项目</h2>

<ol>
<li><p><a href="https://developer.apple.com/wwdc/resources/sample-code/">WWDC的示例代码</a>：比起GitHub上的开源项目，官方的代码更有参考价值。比如Session 406的代码Lister就用一个Swift实现的包含OSX和iOS的Productivity App，还演示了各种Cocoa新功能。</p></li>
<li><p><a href="https://github.com/fullstackio/FlappySwift">FlappySwift</a>：FlappySwift用swift重写的一个开源Flappy Bird游戏。</p></li>
<li><p><a href="https://github.com/YANGReal/JokeClient-Swift">JokeClient-Swift</a>：JokeClient-Swift是<a href="http://weibo.com/208083608">@YANGReal</a>用swift写了一个开源的糗事百科的客户端，主要涉及网络请求，图片加载、缓存、自定义UITableViewCell、delegate以及closure，内容接口基于糗事百科API。</p></li>
<li><p><a href="https://github.com/austinzheng/swift-2048">swift-2048</a>：一个用Swift实现的2048游戏。</p></li>
<li><p><a href="https://github.com/croath/UIImageView-BetterFace-Swift">UIImageView-BetterFace-Swift</a>：UIImageView-BetterFace-Swift是一个根据目标图象中头像的位置进行智能图片裁剪的开源库，该地址是其更新的Swift版本。</p></li>
<li><p><a href="https://github.com/onevcat/Easy-Cal-Swift">Easy-Cal-Swift</a>：swift是类型安全（type safe) 的语言。但是，由于它有类型推断（type inference）能力，所以当能推断出类型时，你不必非要写对应的类型。对于 字面量（literal value），整数会被推断成Int，浮点数会被推断成Double类型。但是，它并没有定义整数和浮点之间的加法，本项目实现了一个常用的运算符重载，这样就可以支持整数和浮点数做加法了。</p></li>
<li><p><a href="https://github.com/amitburst/HackerNews">HackerNews</a>：用Swift实现的HackerNews客户端。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS移动开发周报-第13期]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/01/ios-weekly-13/"/>
    <updated>2014-06-01T17:27:22+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/01/ios-weekly-13</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/05/facebook-pop">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>欢迎国内的iOS同行或技术作者向我提交周报线索，线索可以是新闻、教程、开发工具或开源项目，将相关文章的简介和链接在微博上发布并 <a href="http://weibo.com/tangqiaoboy">@唐巧_boy</a> 即可。</p>

<p>【摘要】：本期iOS移动开发周报带来如下内容：Facebook Pop 使用指南，用CocoaPods做iOS程序的依赖管理，在 iOS 上捕捉签名，加密你的SQLite等。</p>

<h2>教程</h2>

<ol>
<li><p> <a href="http://geeklu.com/2014/05/facebook-pop-usage/">《Facebook Pop 使用指南》</a>：Facebook Pop其实是基于CADisplayLink(Mac平台上使用的CVDisplayLink)实现的独立于Core Animation之外的动画方案。文章主要介绍了Facebook Pop如何使用。</p></li>
<li><p><a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">《用CocoaPods做iOS程序的依赖管理》</a>：文章除了介绍了CocoaPods的基本功能外，还增加了如何设置国内spec镜像、使用私有pod、podfile.lock、如何创建spec文件等内容。</p></li>
<li><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-05-27-capture-a-signature-on-ios.md">《在 iOS 上捕捉签名》</a>：文章介绍了如何绘制像 Paper 应用那样的真正平滑的曲线，包括如何使用二次贝塞尔曲线使签名平滑，以及基于触摸速度，使签名宽度可变，从而创建出更加自然的笔画。</p></li>
<li><p><a href="http://blog.t-xx.me/blog/2014/05/28/hack-weibo-sdk/">《解決WeiboSDK Bundleid 綁定問題》</a>：@糖炒小虾_txx 利用IDA分析和 method_swizzling 破解了微博SDK的bundle d綁定，这样就可以绕开weibo sdk 的sso 和bundle id綁定的要求，这算是Objective-C黑魔法的一次有效实践。</p></li>
<li><p> <a href="http://wangzz.github.io/blog/2014/05/19/jia-mi-ni-de-sqlite/">《加密你的SQLite》</a>：SQLite是一个轻量的、跨平台的、开源的数据库引擎，它的在读写效率、消耗总量、延迟时间和整体简单性上具有的优越性，使其成为移动平台数据库的最佳解决方案。然而免费版的SQLite有一个致命缺点：不支持加密。这就导致存储在SQLite中的数据可以被任何人用任何文本编辑器查看到。本文讨论了各种对SQLite的加密方法。</p></li>
<li><p> <a href="http://security.ios-wiki.com/issue-3-4/">《Reveal：分析iOS UI的利器》</a>：Reveal能够在运行时调试和修改iOS应用程序。它能连接到应用程序，并允许开发者编辑各种用户界面参数，这反过来会立即反应在程序的UI上。就像用chrome调试HTML页面一样，在不需要重写代码、重新构建和重新部署应用程序的情况下就能够调试和修改iOS用户界面。文章简要介绍了Reveal的功能和几种加载方法。</p></li>
<li><p> <a href="http://blog.codingcoder.com/ios-games-by-tutorials-chapter8%EF%BC%8Dpart1/">《Sprite Kit 物理引擎初体验 Part 1》</a>：Sprite Kit 内建了一个强大的并且非常容易使用的物理引擎，你可以很容易的使用这个内置的物理引擎来模拟真实世界中的移动。文章介绍了Sprite Kit的基本使用。</p></li>
</ol>


<h2>工具</h2>

<ol>
<li><a href="https://itunes.apple.com/cn/app/podlife/id725023109?l=en&amp;mt=8">Podlife</a>：Podlife是一个免费的iOS应用，可以在手机上搜寻各种 CocoaPods，并得到更新提醒。</li>
</ol>


<h2>开源项目</h2>

<ol>
<li><p><a href="https://github.com/schneiderandre/popping">popping</a>：popping是一个POP 使用实例工程。</p></li>
<li><p><a href="https://github.com/venmo/synx">synx</a>：synx可以自动帮你整理项目里的文件，按 group 重新放置。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[专访《iOS测试指南》作者羋峮]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/01/interview-on-miqun/"/>
    <updated>2014-06-01T17:07:31+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/01/interview-on-miqun</id>
    <content type="html"><![CDATA[<h3>版权说明</h3>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/news/2014/04/interview-ios-test-guide-author">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<h3>前言</h3>

<p>在 2014年<a href="http://www.qconbeijing.com/">QCon北京</a>大会上，羋峮进行了他的新书<a href="http://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/product-description/B00JPVNFKM">《iOS测试指南》</a>的签售会。在大会中，我代表InfoQ与羋峮进行了一次专访，羋峮分享了他在iOS平台做自动化测试的一些经验。</p>

<p>羋峮有着多年的测试经验，先后在高德、豆瓣以及豌豆夹从事过测试相关的工作。他在豆瓣工作时，实现并且开源了iOS的自动化测试工具<a href="https://github.com/douban/ynm3k">ynm3k</a>，并且刚刚完成了系统介绍iOS自动化测试的新书《iOS测试指南》。</p>

<p>InfoQ：羋峮你好，我想请你先介绍一下你的测试工作经历。</p>

<blockquote><p>羋峮：我是03年毕业的，修了三年地铁以后就转行做软件测试工作了。到现在，做测试有七到八年的时间，我是从豆瓣开始做的移动测试相关的工作，当时移动测试也正好赶上一个起步的阶段，所以还有一点小小的心得。</p></blockquote>

<p>InfoQ：我想问的第一个主题是关于自动化测试和持续集成的方面的问题。就我所了解的情况，现在大部分的互联网公司关于移动端的测试的工具都还处于比较初级的阶段，很多公司也没有真正应用上那个自动化测试。我昨天跟阿里的iOS Leader聊，他们没有用到移动端自动化测试，我之前在网易工作，他们也没有做移动端自动化测试，你觉得是什么原因造成移动端自动化测试还没有流行起来，没有大规模的应用？</p>

<blockquote><p>羋峮：测试的投入产出比，尤其是自动化测试的投入产出比一直都没有一个非常简单有效的说明方法。当投入产出比的说不清楚的时候，可能很多人选择观望。tinyfool在给我写这本书的书序的时候，他也做了一个小调查，基本上就是不测试，或者简单测试的占很大的比重，比较细致的测试非常少。测试做的非常少主要有这么几方面的原因：</p>

<p>1、移动端是一个新生事物，总结出来的方法还没有被普遍的认可。移动端承接了更多UI展现方面的工作，其中有很多的和人交互的东西。不但功能复杂，并且还没有唯一的标准。测试的注意力很容易不分散，并且效果非常的不明显。</p>

<p>2、移动端现在更多的是市场行为，需要有产品的占领地盘。还没有到精雕细琢的时代。所以，测试在这个时候明显不如产品或者设计师有话语权。并且现在需要的是“有”，还没有到“精”的程度。</p>

<p>3、国内测试界相对比较浮躁，更多的不是从技术角度去解决问题。所以导致测试需要关注点过于分散，没有真正的定义好自己的工作职责和范围。什么事情都需要关注，最后就是什么事情都没有关注好。</p>

<p>我比较幸运，当时去了豆瓣。豆瓣当时明确的定义了QA的工作职责——推荐新技术或者开发新工具，让开发工程师更好的测试。并且设计师在测试阶段也会投入很大的精力去review设计稿中各种交互方面的不足。</p></blockquote>

<p>InfoQ：你在豆瓣开始尝试iOS的自动化测试，那我想知道你在这个过程中取得哪些成果？</p>

<blockquote><p>羋峮：刚去豆瓣接手工作的时候自己思维还是有局限性的，只是把自己工作定位在去实现一些基于界面操作的自动化的东西，这个其实现在看来可能它是一个切入点，但是可能并不是一个非常好的切入点，其实还有很多工作要做，由于当时自己思维局限所以就做了。</p>

<p>另外一方面，就是因为只想到这一点，所以就是精力比较集中,更容易出一些成果。2011年年底的时候开始做这些工作，自己先后找了有五款自动化测试工具调研。调研的方法是先写一些demo的东西，然后再看看工具的源代码。搞清楚工作的架构和底层原理。最后发现，当时的工具都有一些这样那样的问题。然后自己就开始幻想写一个适合自己的这个自动化工具。</p>

<p>当iOS5发布以后，苹果的对于UI Automation进行了一个改进，增加了<code>performTaskWithPathArgumentsTimeout</code>接口。通过该接口可以实现UI Automation和外部程序的简单通信。基于这个改进，自己拉了在豆瓣的一个开发的同事，两个人就用一个半月的时间写了一个自动化测试工具。也是因为有了performTaskWithPathArgumentsTimeout接口的发布，所以淘宝也当时利用那个接口写了另外一种实现的iOS的测试工具。</p>

<p>在完成ynm3k的开发以后，使用它为豆瓣FM和豆瓣电影写了一些自动化测试用例。效果还可以。</p></blockquote>

<p>InfoQ：淘宝那个开源了吗？</p>

<blockquote><p>羋峮：淘宝那个开源了，叫 <a href="http://code.taobao.org/p/athrun/src/">athrun</a> ，我那个也开源了叫 <a href="https://github.com/douban/ynm3k">ynm3k</a>，当时是12年7月份，那个ADC的专门都有分享，在网上应该也都有链接 <a href="http://adc.taobao.com/carnival/video/147_0">Athrun instrument driver</a>和<a href="http://adc.taobao.com/carnival/video/148_0">豆瓣iOS自动化测试实践和经验</a> 。</p></blockquote>

<p>InfoQ：当时你们花一个半月开发这个自动化测试工具是用20%的工作时间，还是完全的工作时间来做这个事情？因为我觉得你在开发这段时间内肯定也有普通的正常的测试任务要完成，你们公司是怎么平衡这件事情的？</p>

<blockquote><p>羋峮：我们应该是业余时间完成的这个框架。主要就是晚上，或者是快下班的时候，自己挤出来一些时间做这个事情。</p></blockquote>

<p>InfoQ：跟同事的配合也是在那段时间来进行的？</p>

<blockquote><p>羋峮：当时就是我俩分工相对来说很明确，一方面需要有更好的遍历控件和定位控件的方法，是由我来现实的；另一方面，需要引入一个JavaScript语言的单元测试框架。这部分由我豆瓣的同事<a href="http://weibo.com/p/1005051689931124">@SeanLionheart</a>完成，他在正式发布的时候已经去美国上学。</p>

<p>我们两个之间的配合非常顺畅，因为各自的部分是完全解耦的，互补不影响。在交流的时候，还能相互给出自己的想法和意见。</p></blockquote>

<p>InfoQ：你们做这件事情，豆瓣有从文化上，或者从其他方面对你们这件事情有鼓励或者激励吗？我想知道，是否这个公司的文化对于促进了你们做这件事情？</p>

<blockquote><p>羋峮：这个肯定是促进的。首先这个想法是我在一次周会上提出来的。提出来以后，当时我的Leader 解彦博老师就特别鼓励我们去做这件事情，并且大家都很感兴趣，当时的整个测试团队都给我们提供意见或者交流过想法。</p>

<p>第二，在豆瓣的骨子里，就有很多工程师去愿意去用自己的业余时间去写一些小工具来改进效率，或者是提高效率，或者改进流程，这个在豆瓣都是很流行。自己写的工具，在豆瓣内部得到了广泛的应用，对工程师来说这是很高的荣誉。</p></blockquote>

<p>InfoQ：当你产品在快速迭代的时候，它的整个页面的组织，界面逻辑都会在快速变化，这个时候自动化测试是否是在这种场景下不太适合？自动化测试是怎么解决产品快速迭代的问题呢？</p>

<blockquote><p>羋峮：无法适应变化一直是自动化测试的软肋。首先，有一些变化需要测试做兼容，这个兼容可能需要测试框架本身来支持，也可能需要自动化测试脚本通过一些更加层次化的方法来兼容。举一个例子来说，一个登录按钮，从 NavigationBar上移到了可能在中间页面的一个 LoginButton 上面，所以这种情况下是应该去兼容的，因为它只是位置发生了变化，它大的业务逻辑没有发生变化，这种是需要测试框架去兼容的。如果是更大一点的变化，需要测试脚本一定量的维护。
其次，测试脚本一定要不断的维护。有很多自动化测试最终失败是因为期间放弃过自动化测试脚本的维护。自动化测试脚本不但需要维护，还需要有很好的代码结构。相关测试脚本的代码结构可以参看一些PageObject的思想，也可以看看cucumber等BDD工具，都会帮助你最小改动的维护自动化测试脚本。
当然，自动化测试接入工程的时机等因素也很重要。这些都没有固定的模式，需要结合自己团队的特点来开展。自动化测试和持续集成是一对好基友。自动化测试执行和结果展示都需要持续集成的帮助。有了持续集成，自动化测试才会被更多的人认可，可才会有更多的人加入到自动化测试的维护中来。
最后，可能需要更新一下对自动化测试的认识。自动化测试不会降低成本，自动化测试不会主动发现bug。自动化测试可以更标准更快速的重复回归一些功能测试。所以，对自动化测试有一个更加客观的认识，才会帮助你在具体的工程项目中更好的开展自动化测试实践。</p></blockquote>

<p>InfoQ：刚才你提到你在豆瓣开源的ynm3k这个开源测试工具，然后你同时也提到淘宝也开源的athrun，你有没有比较过你们两者之间工具各自有什么特点？</p>

<blockquote><p>羋峮：首先两款工具都同时用到了一个接口，接口的名字是：performTaskWithPathArgumentsTimeout，这个接口可以去运行一个本地的命令行程序。这个接口提供了UI Automation和命令行工具的一个交互的可能。</p>

<p>我用那个接口用的非常轻量，需要把运行完的测试结果通过那个接口写文件写出来，写成标准的XML以后，通过 Jenkins 或者是 Hudson 这些持续集成的工具，把它展现在持续集成工具的页面里头。</p>

<p>我只是写了文件，淘宝的 athrun 做了一个进程之间的通信，所以他那个工具解决的问题是：用户可以不用JavaScript来写UI Automation的东西。athrun自己定义了通信协议，并且通过performTaskWithPathArgumentsTimeout接口来完成和UI Automation的通信。用户可以使用Java语言来做UI Automation的自动化测试。</p>

<p>同样类似的国外也有，就像eBay的<a href="http://ios-driver.github.io/ios-driver/">ios-driver</a>，还有就是最近特别火的 <a href="http://appium.io/">appium</a>，原理上都是通过那个接口实现了两个进程间的通信来驱动UI Automation来完成自动化测试的。appium在驱动UI Automation的基础上还兼容了WebDriver的Json Wire protocl协议。使用者可以使用Java、Python、Ruby等语言直接调用WebDriver的API来完成iOS的自动化测试。WebDriver对很多Web端的测试工程师来说都很熟悉。由于appium兼容了Json Wire protocl协议，使用者还可以使用Gird来并发的测试。当然，appium也支持Android的一些自动化测试。</p>

<p>在《iOS测试指南》书中，大概也进行了一个分类，ynm3k属于扩展型的，扩展型的工具只是提供了一些JavaScript的开发库，用户只需要import进来，可能就会有更简化的写法和更强大的功能，然后但是对本身的UI Automation的，就基本上没有改变。</p>

<p>但是通过苹果提供<code>performTaskWithPathArgumentsTimeout</code>接口进行进程间通信的这种自动化测试工具，我在书里面把它归类为驱动型的测试工具。使用驱动型的测试工具，用户可以有更多种语言的选择，并且可以拥有动态的调试功能。但是驱动型的测试工具，无法在instruments的图形界面下运行，也就失去了，运行自动化测试的时候同时检查内存泄露，统计网络流量等功能。所以，工具对比下来只有适合不适合的说法，并没有绝对意义上的好与坏。</p></blockquote>

<p>InfoQ：刚才也都是提到你的UI测试的书本，我希望你简单介绍一下这本书适合哪些读者，有没有什么你觉得特别值得推荐的书里面的内容可以分享给大家？</p>

<blockquote><p>羋峮：我书里前两章写的很短，就说了一些基本的概念；第三章说的是单元测试的一些实践，并且完成一个简单的app的单元测试。</p>

<p>第四章就简要的介绍一下Automation的基础知识，很多自动化测试工具都是基于UI Automation来做的。不管是用哪个工具，从底层了解一些UI Automation的API，都是有帮助。</p>

<p>第五章写的是iOS端的Web测试的一个方案，介绍了两种工具，其中也提到了Appium，我也更推荐使用Appium来做自动化测试；然后第六章介绍了持续集成方面的事情，就是三到六章应该都是一个综合解决方案中的各个部分的技能的分散介绍。然后第七章介绍了一下，除了功能测试，手机端还需要去做哪些类型的测试，或者借助工具，我们应该怎么样简单的去确认，或者是去更精确的衡量；第八章是基于第三、四、五、六章然后做了一个最后的一个汇总介绍。因为书写的比较慢，在书稿还没有完全完成的时候，苹果就发布了XCode5和OS X 10.9。在这一次更新以后，苹果本身也提供了一个持续集成的解决方案。在XCode5中还升级了单元测试框架。所以这一系列的变化就有了第九章的内容。</p>

<p>书的内容本身是想给刚入门iOS测试的工程师来看的。最早写书的主要目的也是，为了汇总一些资料。因为相关iOS测试的资料实在是太少并且太分散了。但是当书写完以后，才发现原来用到了3-4种变成语言。所以，现在看来可能还需要读者有一定的编程功底。所以本书的最适合读者是有编码能力或者测试经验的人需要了解移动端测试的这样一个人群。</p></blockquote>

<p>InfoQ：你刚才讲到你的工具是开源的，然后你花了业余时间在这个上面，然后你的这本书是你的一个人通过业余时间写作完成的作品，我就想知道你开源和写作大概花费了你多少的业余时间，业余时间里面你是如何安排这些事情的？</p>

<blockquote><p>羋峮：做开源的时候还好了，只需要挤出来一定的时间把框架搭完了，慢慢的可以用零散的工作去实现个别功能，或者优化个别功能。写书的话，整个过程中，其实还是需要一些大块的时间去投入，因为自己语文水平比较差，有的时候明白一件事，可能还要去想一想怎么能写明白。对于我而言，往往需要大块的时间去写书，需要写一个小时以后感觉才能进入状态，进入状态之后写作效率还算OK。一般一次写作的时间会在4个小时以上。我自己估了一下，如果一页的内容，代码和截图占到一半以上的话那一页的时间，大概是1.5个小时，如果是这一页内容是纯文字的话，那一页的时间大概是两个半小时。所以整个大概写了四百个小时左右。</p></blockquote>

<p>InfoQ：这确实是一个很大的工作量。感谢你为大家带来的开源工具和作品，谢谢你！</p>
]]></content>
  </entry>
  
</feed>
