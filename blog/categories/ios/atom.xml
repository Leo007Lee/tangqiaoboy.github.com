<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2013-12-22T19:49:54+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XCode Debugger中的Icon符号的意义]]></title>
    <link href="http://blog.devtang.com/blog/2013/12/22/the-secret-of-xcode-debugger-icon/"/>
    <updated>2013-12-22T19:23:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/12/22/the-secret-of-xcode-debugger-icon</id>
    <content type="html"><![CDATA[<p>你注意到了吗？在Xcode中，当你点击查看调用栈的时候，调用栈的每个方法前面都有一个Icon，而且还有好几种不同的样子，如下图所示，你知道它们代表什么意思吗？</p>

<p><img src="/images/debugger-icon.png"></p>

<!-- more -->


<p>其实它们代表的意义如下：</p>

<ul>
<li>Person icon is User</li>
<li>Mug icon is AppKit (or UIKit)</li>
<li>Briefcase icon is Frameworks</li>
<li>Gear icon is System</li>
<li>Morse code icon is Foundation</li>
<li>Spider web looking icon is Web</li>
</ul>


<p>另外，Debuger中的图标（如下图所示）也是有意义：</p>

<p><img src="/images/debugger-icon2.jpg"></p>

<p>具体意义如下：</p>

<ul>
<li>L = Local variable</li>
<li>A = Argument</li>
<li>S = Static variable</li>
<li>V = global Variable</li>
<li>R = register</li>
<li>i = Instance variable</li>
<li>E = Expression</li>
</ul>


<p>或许你觉得以上内容没什么实用价值，那再分享一个实用的。</p>

<p>在XCode5中，点击一个小眼镜图标，就直接预览UIImage的内容，如下图所示：</p>

<p><img src="/images/debugger-preview-image.png"></p>

<p>这个有用吧，祝大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发工具-网络封包分析工具Charles]]></title>
    <link href="http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/"/>
    <updated>2013-12-11T14:03:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr</id>
    <content type="html"><![CDATA[<p><img src="/images/charles-logo.png"></p>

<h2>简介</h2>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/network-packet-analysis-tool-charles">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<p><a href="http://www.charlesproxy.com/">Charles</a>是在Mac下常用的截取网络封包的工具，在做iOS开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。Charles通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<p>Charles是收费软件，可以免费试用30天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过30分钟，并且启动时将会有10秒种的延时。</p>

<p>因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为Charles强制关闭而遇到影响。</p>

<p>Charles主要的功能包括：</p>

<ol>
<li>支持SSL代理。可以截取分析<a href="http://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A5%97%E6%8E%A5%E5%B1%82">SSL</a>的请求。</li>
<li>支持流量控制。可以模拟慢速网络以及等待时间（latency）较长的请求。</li>
<li>支持AJAX调试。可以自动将json或xml数据格式化，方便查看。</li>
<li>支持AMF调试。可以将Flash Remoting 或 Flex Remoting信息格式化，方便查看。</li>
<li>支持重发网络请求，方便后端调试。</li>
<li>支持修改网络请求参数。</li>
<li>支持网络请求的截获并动态修改。</li>
<li>检查HTML，CSS和RSS内容是否符合<a href="http://validator.w3.org/">W3C标准</a>。</li>
</ol>


<!-- more -->


<h2>安装Charles</h2>

<p>去Charles的官方网站（<a href="http://www.charlesproxy.com">http://www.charlesproxy.com</a>）下载最新版的Charles安装包，是一个dmg后缀的文件。打开后将Charles拖到Application目录 下即完成安装。</p>

<h2>安装SSL证书</h2>

<p>如果你需要截取分析SSL协议相关的内容。那么需要安装Charles的CA证书。具体步骤如下：</p>

<ol>
<li>去 <a href="http://www.charlesproxy.com/ssl.zip">http://www.charlesproxy.com/ssl.zip</a> 下载CA证书文件。</li>
<li>解压该zip文件后，双击其中的.crt文件，这时候在弹出的菜单中选择“总是信任”，如下所示：<img src="/images/charles-ca-1.png"></li>
<li>从钥匙串访问中即可看到添加成功的证书。如下所示：
<img src="/images/charles-ca-2.png"></li>
</ol>


<h2>将Charles设置成系统代理</h2>

<p>之前提到，Charles是通过将自己设置成代理服务器来完成封包截取的，所以使用Charles的第一步是将其设置成系统的代理服务器。</p>

<p>启动Charles后，第一次Charles会请求你给它设置系统代理的权限。你可以输入登录密码授予Charles该权限。你也可以忽略该请求，然后在需要将Charles设置成系统代理时，选择菜单中的 "Proxy" -> "Mac OS X Proxy"来将Charles设置成系统代理。如下所示：</p>

<p><img src="/images/charles-set-system-proxy.png"></p>

<p>之后，你就可以看到源源不断的网络请求出现在Charles的界面中。</p>

<h2>Charles主界面介绍</h2>

<p><img src="/images/charles-home.jpg"></p>

<p>Charles主要提供2种查看封包的视图，分别名为“Structure”和"Sequence"。</p>

<ol>
<li>Structure视图将网络请求按访问的域名分类。</li>
<li>Sequence视图将网络请求按访问的时间排序。</li>
</ol>


<p>大家可以根据具体的需要在这两种视图之前来回切换。</p>

<p>对于某一个具体的网络请求，你可以查看其详细的请求内容和响应内容。如果响应内容是JSON格式的，那么Charles可以自动帮你将JSON内容格式化，方便你查看。</p>

<h2>过滤网络请求</h2>

<p>通常情况下，我们需要对网络请求进行过滤，只监控向指定目录服务器上发送的请求。对于这种需求，我们有2种办法。</p>

<ol>
<li><p>在主界面的中部的Filter栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：http://yuantiku.com，那么只需要在Filter栏中填入yuantiku即可。</p></li>
<li><p>在Charles的菜单栏选择"Proxy"->"Recording Settings"，然后选择Include栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。如下图所示：</p></li>
</ol>


<p><img src="/images/charles-filter-setting.jpg"></p>

<p>通常情况下，我们使用方法1做一些临时性的封包过滤，使用方法2做一些经常性的封包过滤。</p>

<h2>截取iPhone上的网络封包</h2>

<p>Charles通常用来截取本地上的网络封包，但是当我们需要时，我们也可以用来截取其它设备上的网络请求。下面我就以iPhone为例，讲解如何进行相应操作。</p>

<h4>Charles上的设置</h4>

<p>要截取iPhone上的网络请求，我们首先需要将Charles的代理功能打开。在Charles的菜单栏上选择“Proxy”->"Proxy Settings"，填入代理端口8888，并且勾上"Enable transparent HTTP proxying" 就完成了在Charles上的设置。如下图所示:</p>

<p><img src="/images/charles-proxy-setting.jpg"></p>

<h4>iPhone上的设置</h4>

<p>首先我们需要获取Charles运行所在电脑的IP地址，打开Terminal，输入<code>ifconfig en0</code>, 即可获得该电脑的IP，如下图所示：</p>

<p><img src="/images/charles-ifconfig.jpg"></p>

<p>在iPhone的 “设置”->“无线局域网“中，可以看到当前连接的wifi名，通过点击右边的详情键，可以看到当前连接上的wifi的详细信息，包括IP地址，子网掩码等信息。在其最底部有“HTTP代理”一项，我们将其切换成手动，然后填上Charles运行所在的电脑的IP，以及端口号8888，如下图所示：</p>

<p><img src="/images/charles-iphone-setting.jpg"></p>

<p>设置好之后，我们打开iPhone上的任意需要网络通讯的程序，就可以看到Charles弹出iPhone请求连接的确认菜单（如下图所示），点击“Allow”即可完成设置。</p>

<p><img src="/images/charles-proxy-confirm.jpg"></p>

<h2>截取SSL信息</h2>

<p>Charles默认并不截取SSL的信息，如果你想对截取某个网站上的所有SSL网络请求，可以在该请求上右击，选择SSL proxy，如下图所示：</p>

<p><img src="/images/charles-ssl-add-host.jpg"></p>

<p>这样，对于该Host的所有SSL请求可以被截取到了。</p>

<h2>模拟慢速网络</h2>

<p>在做iPhone开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles对此需求提供了很好的支持。</p>

<p>在Charles的菜单上，选择"Proxy"->"Throttle Setting"项，在之后弹出的对话框中，我们可以勾选上“Enable Throttling”，并且可以设置Throttle Preset的类型。如下图所示：</p>

<p><img src="/images/charles-throttle-setting.jpg"></p>

<p>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的"Only for selected hosts"项，然后在对话框的下半部分设置中增加指定的hosts项即可。</p>

<h2>修改网络请求内容</h2>

<p>有些时候为了调试服务器的接口，我们需要反复尝试不同参数的网络请求。Charles可以方便地提供网络请求的修改和重发功能。只需要在以往的网络请求上点击右键，选择“Edit”，即可创建一个可编辑的网络请求。如下所示：</p>

<p><img src="/images/charles-edit.jpg"></p>

<p>我们可以修改该请求的任何信息，包括url地址，端口，参数等，之后点击“Execute”即可发送该修改后的网络请求（如下图所示）。Charles支持我们多次修改和发送该请求，这对于我们和服务器端调试接口非常方便。</p>

<p><img src="/images/charles-execute-request.jpg"></p>

<h2>总结</h2>

<p>通过Charles软件，我们可以很方便地在日常开发中，截取和调试网络请求内容，分析封包协议以及模拟慢速网络。用好Charles可以极大的方便我们对于带有网络请求的App的开发和调试。</p>

<p>参考链接：</p>

<ol>
<li><a href="http://www.charlesproxy.com/overview/about-charles/">Charles主要的功能列表</a></li>
<li><a href="http://www.charlesproxy.com/">Charles官网</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Flurry来统计和分析用户行为]]></title>
    <link href="http://blog.devtang.com/blog/2013/11/14/use-flurry-to-analyse-data/"/>
    <updated>2013-11-14T13:51:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/11/14/use-flurry-to-analyse-data</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p><img src="/images/flurry-logo.png"></p>

<p>本文为InfoQ中文站特供稿件，首发地址为：<a href="http://www.infoq.com/cn/articles/use-flurry-to-statistics-and-analysis-user-behavior">文章链接</a>。如需转载，请与InfoQ中文站联系。</p>

<p><a href="http://www.flurry.com/">Flurry</a>是一家专门为移动应用提供数据统计和分析的公司。他们的数据统计分析SDK支持的平台包括iPhone, iPad, Android, Windows Phone, Java ME和BlackBerry。使用Flurry服务的公司包括eBay、Yahoo、Hulu和Skype等超过11万家公司，涉及的应用超过36万个。</p>

<p>利用Flurry提供的分析平台，我们可以很容易地自动统计出应用的使用情况，例如：</p>

<ol>
<li>每天（每周或每月）登录用户数，应用使用次数</li>
<li>每天（每周或每月）新用户数，活跃用户数</li>
<li>用户的所在地、年龄、性别的分布情况</li>
</ol>


<p>Flurry也可以自动统计出移动设备的分类情况，例如：</p>

<ol>
<li>使用3G，Wifi的会话比例</li>
<li>使用iOS系统各版本(例如iOS6.0, iOS7.0等)的比例</li>
<li>使用iOS各种设备（例如iPhone4, iPhone5等)的比例</li>
</ol>


<p>除了上面介绍的自动统计项目，Flurry SDK也提供了统计用的相关API，便于我们针对自己产品的特点，做针对性的统计。例如统计应用中某个按钮的按下次数，或者网络请求的平均响应时间等。</p>

<!-- more -->


<h2>Flurry的基本使用</h2>

<h3>注册和下载对应SDK</h3>

<p>使用Flurry前，需要先到官方网站<a href="http://www.flurry.com/">http://www.flurry.com/</a>注册账号。然后登录到Flurry后台，依次选择 <code>"Applications" -&gt; “Add a New Application"</code> ，增加一个需要统计分析的应用。如下图所示：</p>

<p><img src="/images/flurry-create-app-1.png"></p>

<p>然后，在接下来的界面之后根据你的应用类型，选择iPhone或iPad应用。如下图所示：</p>

<p><img src="/images/flurry-create-app-2.png"></p>

<p>接着，填入应用的名字和分类（名字仅用作在Flurry后台和自己的其它应用区分，不需要和应用的真实名字相同），之后点击"Create App"，如下所示：</p>

<p><img src="/images/flurry-create-app-3.png"></p>

<p>到此，我们就成功在后台创建了一个新的应用统计和分析项目。点击下图中的"Download"，可以下载需要集成在应用中的SDK。而下图中的提示2中的Key：<code>X28BBKTNZ9H3VYTBDBG3</code>则是我们在集成时用于标识自己应用的ID。</p>

<p><img src="/images/flurry-create-app-4.png"></p>

<h3>集成SDK</h3>

<p>我们将下载后的SDK解压，可以看到文件列表如下。列表中对我们最重要的文件是Flurry目录下的<code>flurry.h</code>文件和<code>libFlurry_4.3.0.a</code>文件。这2个文件需要复制到Xcode的工程中去。</p>

<p>而<code>ProjectApiKey.txt</code>文件中记录了我们之前创建的应用ID，在在代码中调用SDK初使化时需要使用。</p>

<p><img src="/images/flurry-sdk-files.png"></p>

<p>接着我们打开Xcode工程，将之前下载解压的Flurry目录拖动添加到工程中，同时在工程的.pch文件中加上 <code>#import "Flurry.h"</code>，如下图所示：</p>

<p><img src="/images/flurry-setup-in-xcode.png"></p>

<p>接着我们在<code>Link Binary With Libraries</code>中加入如下2个依赖的framework:</p>

<ul>
<li>Security.framework</li>
<li>SystemConfiguration.framework。</li>
</ul>


<p><img src="/images/flurry-link-library.png"></p>

<p>接着我们打开 <code>AppDelegate.m</code>，在<code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</code>方法中，加入代码<code>[Flurry startSession:@"X28BBKTNZ9H3VYTBDBG3"];</code>，如下图所示：</p>

<p><img src="/images/flurry-set-api-key.png"></p>

<p>这样，就完成了Flurry最简单的集成。通过以上短短几步，Flurry就可以帮我们完成应用的基本使用数据的统计和分析。</p>

<h3>自定义统计项</h3>

<p>Flurry提供了<code>logEvent</code>函数，用于实现自定义的统计项。默认情况下，该函数接受一个参数，用于表示当前统计项的名字。</p>

<p>例如我们的界面中有2个按钮，我们想统计它们各自被用户的点击次数，则可以如下代码实现。在该代码中，我们定义了2个自定义的统计项，名字分别为<code>First Button Pressed</code>和<code>Second Button Pressed</code>。</p>

<p>``` objc
- (IBAction)firstButtonPressed:(id)sender {</p>

<pre><code>[Flurry logEvent:@"First Button Pressed"];
</code></pre>

<p>}</p>

<ul>
<li>(IBAction)secondButtonPressed:(id)sender {
  [Flurry logEvent:@"Second Button Pressed"];
}</li>
</ul>


<p>```</p>

<p><code>logEvent</code>函数也支持添加各种参数，用于做更加精细的统计，例如，我们想在统计用户在同一个页面，点击时不同按钮的次数分布，看哪些按钮更加常用，则统计代码可以如下实现：</p>

<p>``` objc
- (IBAction)firstButtonPressed:(id)sender {</p>

<pre><code>[Flurry logEvent:@"Button Pressed"
  withParameters:@{@"target": @"first"}];
</code></pre>

<p>}</p>

<ul>
<li>(IBAction)secondButtonPressed:(id)sender {
  [Flurry logEvent:@"Button Pressed"

<pre><code>withParameters:@{@"target": @"second"}];
</code></pre>

<p>}
```</p></li>
</ul>


<p><code>logEvent</code>函数也支持统计时间，常常用来统计某个复杂的网络操作的耗时或者用户对于某些界面的响应时间。例如，我们想统计用户停留在某个提示界面的时间，则可以用如下代码完成：</p>

<p>``` objc
//
//  FirstViewController.m
//  FlurryUsageSample
//
//  Created by TangQiao on 13-10-25.
//  Copyright (c) 2013年 TangQiao. All rights reserved.
//</p>

<h1>import "FirstViewController.h"</h1>

<h1>define FLURRY_EVENT_KEY @"First View Controller"</h1>

<p>@implementation FirstViewController</p>

<ul>
<li><p>(void)viewWillAppear:(BOOL)animated {
  [super viewWillAppear:animated];
  // 开始统计时间
  [Flurry logEvent:FLURRY_EVENT_KEY timed:YES];
}</p></li>
<li><p>(void)viewWillDisappear:(BOOL)animated {
  [super viewWillDisappear:animated];
  // 结束统计时间
  [Flurry endTimedEvent:FLURRY_EVENT_KEY withParameters:nil];
}</p></li>
</ul>


<p>@end</p>

<p>```</p>

<h3>查看统计结果</h3>

<p>完成上面的自定义统计的代码后，待应用发布后，我们就可以从后台的<code>Events</code>栏中看到相应的统计结果了。如下图所示：</p>

<p><img src="/images/flurry-view-events.png"></p>

<h3>统计Crashlog</h3>

<p>Flurry从4.2.3开始，支持应用的Crashlog统计。只需要在<code>AppDelegate.m</code>文件中，在调用<code>startSession</code>方法之前，调用<code>setCrashReportingEnabled:YES</code>即可：</p>

<p><code>
[Flurry setCrashReportingEnabled:YES];
[Flurry startSession:@"YOUR_API_KEY"];
</code></p>

<p>这里注意，<font color='red'>一定要在startSession之前调用setCrashReportingEnabled，否则将无法记录Crashlog信息！切记！！</font></p>

<p>之后你就可以从后台管理界面的<code>Errors</code>项中，获得应用的Crashlog信息。</p>

<h2>和其它统计分析平台的对比</h2>

<p>和著名的统计工具<a href="http://www.google.com/analytics/">Google Analytics</a>相比，Flurry的优点是：</p>

<ol>
<li>Flurry专门针对移动端做了许多优化，例如统计流量就小很多。</li>
<li>Flurry没有被墙的问题。</li>
</ol>


<p>Flurry缺点是:</p>

<ol>
<li>Google Analytics的统计功能相对更强大一些。</li>
<li>Google Analytics可以和网页版的统计数据做整合。</li>
</ol>


<p>和国内的分析平台<a href="http://www.umeng.com/">友盟</a>相比，Flurry的优点是：</p>

<ol>
<li>使用Flurry的应用相对更多。根据Flurry和友盟的官方数据，有超过36万应用使用Flurry<sup><a href="http://www.flurry.com/big-data.html">1</a> </sup>，有超过18万应用使用友盟<sup><a href="http://www.umeng.com/analytics">2</a></sup>。</li>
<li>Flurry是国外的公司，保持独立和专注，数据安全性更高；友盟现在已经<a href="http://tech.163.com/13/0426/16/8TDB6H1N00094MOK.html">被阿里收购</a>，当用户的应用涉及领域和阿里有类似或重合的时候，那么该统计数据有潜在的安全性问题。</li>
</ol>


<p>Flurry的缺点是：</p>

<ol>
<li>友盟因为是中国公司，所以对国内开发者非常友善，相关的文档或界面都是中文的。而Flurry并不提供中文的后台管理界面或相关文档。</li>
<li>Flurry的服务器在国外，在响应速度上应该相对比友盟慢一些。但在测试中，Flurry服务器都保证了500ms左右的响应时间，还是比较好的。</li>
</ol>


<h2>总结</h2>

<p>本文介绍了Flurry的基本功能以及如何做自定义的统计，最后与业界其它同类工具做了对比。我也将相关示例代码整理到github上，地址是：<a href="https://github.com/tangqiaoboy/FlurryUsageSample">https://github.com/tangqiaoboy/FlurryUsageSample</a>，愿本文能帮助你更加方便地做应用的统计和分析工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[猿题库iOS客户端的技术细节（三）：基于CoreText的排版引擎]]></title>
    <link href="http://blog.devtang.com/blog/2013/10/21/the-tech-detail-of-ape-client-3/"/>
    <updated>2013-10-21T16:15:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/10/21/the-tech-detail-of-ape-client-3</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本人今年主要在负责猿题库iOS客户端的开发，本文旨在通过分享猿题库iOS客户端开发过程中的技术细节，达到总结和交流的目的。</p>

<p>这是本技术分享系列文章的第三篇。本文涉及的技术细节是：基于CoreText的排版引擎。</p>

<!-- more -->


<h2>CoreText概述</h2>

<p>因为猿题库的做题和解析界面需要复杂的排版，所以我们基于CoreText实现了自己的富文本排版引擎。我们的排版引擎对公式、图片和链接有着良好支持，并且支持各种字体效果混排。对于内容中的图片，支持点击查看大图功能，对于内容中的链接，支持点击操作。</p>

<p>下图是我们应用的一个截图，可以看到公式，图片与文字混排良好。</p>

<p><img src="/images/ape-coretext-1.png"></p>

<p>对于富文本排版，除了可以用CoreText实现外，还可以用UIWebView实现。我以前写过一篇介绍如何用UIWebView进行复杂内容显示和交互的文章<a href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/">《关于UIWebView和PhoneGap的总结》</a>，里面介绍了使用UIWebView如何处理参数传递，同步与异步等问题，感兴趣的同学也可以翻看。</p>

<p>基于CoreText来实现和基于UIWebView来实现相比，前者有以下好处：</p>

<ol>
<li>CoreText占用的内存更少，UIWebView占用的内存更多。</li>
<li>CoreText在渲染界面前就可以精确地获得显示内容的高度（只要有了CTFrame即可），而UIWebView只有渲染出内容后，才能获得内容的高度（而且还需要用javascript代码来获取）</li>
<li>CoreText的CTFrame可以在后台线程渲染，UIWebView的内容只能在主线程（UI线程）渲染。</li>
<li>基于CoreText可以做更好的原生交互效果，交互效果可以更细腻。而UIWebView的交互效果都是用javascript来实现的，在交互效果上会有一些卡顿存在。例如，在UIWebView下，一个简单的按钮按下效果，都无法做到原生按钮的即时和细腻的按下效果。</li>
</ol>


<p>当然基于CoreText的方案也有一些劣势：</p>

<ol>
<li>CoreText渲染出来的内容不能像UIWebView那样方便地支持内容的复制。</li>
<li>基于CoreText来排版，需要自己处理图片排版相关的逻辑，也需要自己处理链接点击操作的支持。</li>
</ol>


<p>我们最初的猿题库行测第一版采用了基于UIWebView来实现，但是做出来发现一些小的交互细节无法做到精致。所以后来的第二版我们就全部转成用CoreText实现，虽然实现成本上增加了不少，但是应用的交互效果好多了。</p>

<p>使用CoreText也为我们后来的iPad版提供了技术积累，因为iPad版的页面排版更加复杂，用UIWebView是完全无法完成相应的交互和排版需求的。</p>

<p>关于如何基于CoreText来做一个排版引擎，我主要参考的是这篇教程：<a href="http://www.raywenderlich.com/4147/core-text-tutorial-for-ios-making-a-magazine-app">《Core Text Tutorial for iOS: Making a Magazine App》</a> 以及<a href="https://github.com/jverkoey/nimbus">Nimbus</a> 中的<a href="https://github.com/jverkoey/nimbus/blob/master/src/attributedlabel/src/NIAttributedLabel.m">NIAttributeLabel.m</a> 的实现，在这里我就不重复教程中的内容了，我主要讲一些实现细节。</p>

<h2>实现细节</h2>

<h3>服务端接口</h3>

<p>我们在后台实现了一个基于<a href="http://baike.baidu.com/view/168792.htm">UBB</a> 的富文本编译器。使用UBB的原因是：</p>

<ol>
<li>UBB相对于HTML来说，虽然功能较简单，但是能完全满足我们对于富文本排版的需求。</li>
<li>做一个UBB的语法解析器比较简单，便于我们将UBB渲染到各个平台上。</li>
</ol>


<p>为了简化iOS端的实现，我们将UBB的语法解析在服务器端完成。服务器端提供了接口，可以直接获得将UBB解析成类似HTML的<a href="http://baike.baidu.com/subview/14806/8904138.htm?fromId=14806&amp;from=rdtself">文件对象模型(DOM)</a> 的树型数据结构。有了这个树型数据结构，iOS端渲染就简单多了，无非就是递归遍历树型节点，将相关的内容转换成 NSAttributeString即可，之后将NSAttrubiteString转成CoreText的CTFrame即可用于界面的绘制。</p>

<h3>支持图文混排</h3>

<p>支持图文混排在教程：<a href="http://www.raywenderlich.com/4147/core-text-tutorial-for-ios-making-a-magazine-app">《Core Text Tutorial for iOS: Making a Magazine App》</a> 中有介绍，我们在解析DOM树遇到图片节点时，则将该内容转成一个空格，随后设置该空格在绘制时，需要我们自己指定宽高相关信息，而宽高信息在图片节点中都有提供。这样，CoreText引擎在绘制时，就会把相关的图片位置留空，之后我们将图片异步下来下来后，使用CoreGraph相关的API将图片再画在界面上，就实现了图文混排功能。</p>

<p>下面的相关的示例代码：</p>

<p>``` objc
/<em> Callbacks </em>/
static void deallocCallback( void* ref ){</p>

<pre><code>[(id)ref release];
</code></pre>

<p>}
static CGFloat ascentCallback( void *ref ){</p>

<pre><code>CGFloat height = [(NSString*)[(NSDictionary*)ref objectForKey:@"height"] floatValue];
return height/2 + [FrameParserConfig sharedInstance].baselineFromMid;
</code></pre>

<p>}
static CGFloat descentCallback( void *ref ){</p>

<pre><code>CGFloat height = [(NSString*)[(NSDictionary*)ref objectForKey:@"height"] floatValue];
return height/2 - [FrameParserConfig sharedInstance].baselineFromMid;
</code></pre>

<p>}
static CGFloat widthCallback( void* ref ){</p>

<pre><code>return [(NSString*)[(NSDictionary*)ref objectForKey:@"width"] floatValue];
</code></pre>

<p>}</p>

<ul>
<li>(void)appendDelegateData:(NSDictionary <em>)delegateData ToString:(NSMutableAttributedString</em>)contentString {
  //render empty space for drawing the image in the text //1
  CTRunDelegateCallbacks callbacks;
  callbacks.version = kCTRunDelegateCurrentVersion;
  callbacks.getAscent = ascentCallback;
  callbacks.getDescent = descentCallback;
  callbacks.getWidth = widthCallback;
  callbacks.dealloc = deallocCallback;
  CTRunDelegateRef delegate = CTRunDelegateCreate(&amp;callbacks, delegateData);
  [delegateData retain];
  // Character to use as recommended by kCTRunDelegateAttributeName documentation.
  // use " " will lead to wrong width in CTFramesetterSuggestFrameSizeWithConstraints
  unichar objectReplacementChar = 0xFFFC;
  NSString * objectReplacementString = [NSString stringWithCharacters:&amp;objectReplacementChar length:1];
  NSDictionary * attributes = [self getAttributesWithStyleArray:nil];
  //try to apply linespacing attributes to this placeholder
  NSMutableAttributedString * space = [[NSMutableAttributedString alloc] initWithString:objectReplacementString attributes:attributes];
  CFAttributedStringSetAttribute((CFMutableAttributedStringRef)space, CFRangeMake(0, 1), kCTRunDelegateAttributeName, delegate);
  CFRelease(delegate);
  [contentString appendAttributedString:space];
  [space release];</li>
</ul>


<p>}</p>

<p>```</p>

<p>这里需要注意的是，用来代替图片的占位符使用空格会带来排版上的异常，具体原因未知，我们猜测是CoreText的bug，参考<a href="https://github.com/jverkoey/nimbus">Nimbus</a> 的实现后，我们使用 <code>0xFFFC</code>作为占位符，就没有遇到问题了。</p>

<h3>支持链接</h3>

<p>支持链接点击的主要实现的方式是：</p>

<ol>
<li>在解析DOM树的时候，记录下链接串在整个富文本中的位置信息（包括offset和length)。</li>
<li>在CoreText渲染到的view上，监听用户操作事件，使用 <code>CTLineGetStringIndexForPosition</code>函数来获得用户点击的位置对应 <code>NSAttributedString</code> 字符串上的位置信息（index)
3.判断第2步得到的index是否在第一步记录的各个链接的区间范围内，如果在范围内，则表示用户点击了某一个链接。</li>
</ol>


<p>这段逻辑的关键代码如下：</p>

<p>``` objc
// test touch point is on link or not
+ (LinkData <em>)touchLinkInView:(UIView </em>)view atPoint:(CGPoint)point data:(CTTableViewCellData *)data {</p>

<pre><code>CTFrameRef textFrame = data.ctFrame;
CFArrayRef lines = CTFrameGetLines(textFrame);
if (!lines) return nil;
CFIndex count = CFArrayGetCount(lines);
LinkData *foundLink = nil;

CGPoint origins[count];
CTFrameGetLineOrigins(textFrame, CFRangeMake(0,0), origins);

// CoreText context coordinates are the opposite to UIKit so we flip the bounds
CGAffineTransform transform =  CGAffineTransformScale(CGAffineTransformMakeTranslation(0, view.bounds.size.height), 1.f, -1.f);

for (int i = 0; i &lt; count; i++) {
    CGPoint linePoint = origins[i];
    CTLineRef line = CFArrayGetValueAtIndex(lines, i);
    CGRect flippedRect = [self getLineBounds:line point:linePoint];
    CGRect rect = CGRectApplyAffineTransform(flippedRect, transform);

    if (CGRectContainsPoint(rect, point)) {
        CGPoint relativePoint = CGPointMake(point.x-CGRectGetMinX(rect),
                                            point.y-CGRectGetMinY(rect));
        CFIndex idx = CTLineGetStringIndexForPosition(line, relativePoint);
        foundLink = [self linkAtIndex:idx linkArray:data.linkArray];
        return foundLink;
    }
}
return nil;
</code></pre>

<p>}</p>

<p>```</p>

<h3>基于CoreText的内容省略</h3>

<p>我们在使用CoreText时，还遇到一个具体排版上的问题。正常情况下，在生成CTFrame之后，只需要调用：<code>CTFrameDraw(self.data.ctFrame, context);</code>即可完成界面的绘制。但是产品提出了一个需求，对于某些界面，当显示不下的时候，需要将多余内容用<code>...</code>来表示。这让我们的绘制逻辑需要特别处理，以下是具体的实现：</p>

<p>``` objc</p>

<p>static NSString* const kEllipsesCharacter = @"\u2026";
CGPathRef path = CTFrameGetPath(<em>data.ctFrame);
CGRect rect = CGPathGetBoundingBox(path);
CFArrayRef lines = CTFrameGetLines(</em>data.ctFrame);
CFIndex lineCount = CFArrayGetCount(lines);
NSInteger numberOfLines = MIN(_numberOfLines, lineCount);</p>

<p>CGPoint lineOrigins[numberOfLines];
CTFrameGetLineOrigins(<em>data.ctFrame, CFRangeMake(0, numberOfLines), lineOrigins);
NSAttributedString *attributedString = </em>data.attributedString;</p>

<p>for (CFIndex lineIndex = 0; lineIndex &lt; numberOfLines; lineIndex++) {</p>

<pre><code>CGPoint lineOrigin = lineOrigins[lineIndex];
lineOrigin.y =  self.frame.size.height + (lineOrigin.y - rect.size.height);
CGContextSetTextPosition(context, lineOrigin.x, lineOrigin.y);
CTLineRef line = CFArrayGetValueAtIndex(lines, lineIndex);

BOOL shouldDrawLine = YES;

if (lineIndex == numberOfLines - 1) {
    CFRange lastLineRange = CTLineGetStringRange(line);
    if (lastLineRange.location + lastLineRange.length &lt; (CFIndex)attributedString.length) {
        CTLineTruncationType truncationType = kCTLineTruncationEnd;
        NSUInteger truncationAttributePosition = lastLineRange.location + lastLineRange.length - 1;

        NSDictionary *tokenAttributes = [attributedString attributesAtIndex:truncationAttributePosition
                                                             effectiveRange:NULL];
        NSAttributedString *tokenString = [[NSAttributedString alloc] initWithString:kEllipsesCharacter
                                                                          attributes:tokenAttributes];
        CTLineRef truncationToken = CTLineCreateWithAttributedString((__bridge CFAttributedStringRef)tokenString);

        NSMutableAttributedString *truncationString = [[attributedString attributedSubstringFromRange:NSMakeRange(lastLineRange.location, lastLineRange.length)] mutableCopy];
        if (lastLineRange.length &gt; 0) {
            // Remove any whitespace at the end of the line.
            unichar lastCharacter = [[truncationString string] characterAtIndex:lastLineRange.length - 1];
            if ([[NSCharacterSet whitespaceAndNewlineCharacterSet] characterIsMember:lastCharacter]) {
                [truncationString deleteCharactersInRange:NSMakeRange(lastLineRange.length - 1, 1)];
            }
        }
        [truncationString appendAttributedString:tokenString];

        CTLineRef truncationLine = CTLineCreateWithAttributedString((__bridge CFAttributedStringRef)truncationString);
        CTLineRef truncatedLine = CTLineCreateTruncatedLine(truncationLine, self.size.width, truncationType, truncationToken);
        if (!truncatedLine) {
            // If the line is not as wide as the truncationToken, truncatedLine is NULL
            truncatedLine = CFRetain(truncationToken);
        }
        CFRelease(truncationLine);
        CFRelease(truncationToken);

        CTLineDraw(truncatedLine, context);
        CFRelease(truncatedLine);

        shouldDrawLine = NO;
    }
}

if (shouldDrawLine) {
    CTLineDraw(line, context);
}
</code></pre>

<p>}</p>

<p>```</p>

<h2>后记</h2>

<p>以上源码很多都参考了<a href="https://github.com/jverkoey/nimbus">Nimbus</a>的实现，在此再一次表达一下对开源社区的感谢。</p>

<p>在大约2年前，CoreText还是一个新玩意。那时候微博的界面都还是用控件组合得到的。慢慢的，大家都开始接受CoreText，很多应用都广泛地将CoreText应用于自己的界面中，做出来了更加复杂的排版、交互效果。在iOS7之后，苹果推出了更加易于使用的TextKit，使得富文本排版更加容易，相信以后的iOS应用界面会更加美观，交互更加绚丽。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[猿题库iOS客户端的技术细节（二）：答题卡扫描算法]]></title>
    <link href="http://blog.devtang.com/blog/2013/10/19/the-tech-detail-of-ape-client-2/"/>
    <updated>2013-10-19T11:10:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/10/19/the-tech-detail-of-ape-client-2</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>本人今年主要在负责猿题库iOS客户端的开发，本文旨在通过分享猿题库iOS客户端开发过程中的技术细节，达到总结和交流的目的。</p>

<p>这是本技术分享系列文章的第二篇。本文涉及的技术细节是：答题卡扫描算法。</p>

<!-- more -->


<h3>问题描述</h3>

<p>我们在调研用户需求的时候，发现有些用户很喜欢我们的猿题库产品，因为我们会根据用户对当前课程的知识点掌握情况，智能地给他出题。但是部分用户还是习惯在纸上做题，所以我们提供了试卷打印功能。</p>

<p>但是，用户如果在纸上答题，无法方便地将答案上传到我们的服务器上。如果我们没有了用户做题数据，就无法根据他的成绩，做针对性的推荐和分析。所以，我们想到一种办法：<strong>用户像传统考试那样，将答题结果填涂在答题卡上，然后我们提供一种用手机摄像头采集填涂结果的答题卡扫描算法，方便用户上传答题数据。</strong></p>

<p><img src="/images/ape-card-1.jpg"></p>

<p>上图是一个我们试验用的答题卡，通过手机摄像头获取，从中可以看到，该答题卡有以下问题：</p>

<ol>
<li>由于手机摄像头无法完全正对答题卡，拍照角度有偏曲，答题卡在拍照后并不是完全的矩形。</li>
<li>用户填涂区域可能并不饱满和完整。</li>
<li>答题纸边缘可能有用户的草稿或其它干扰识别的信息。</li>
</ol>


<h3>技术解决方案</h3>

<p>我们尝试了多种识别方案，最终采用的方案如下：</p>

<ol>
<li>图象预处理，压缩图像大小，转彩色图像为灰度图像</li>
<li>识别答题卡区域</li>
<li>图象纠偏</li>
<li>答案区域识别</li>
</ol>


<p>该方案及相关算法细节我们还在申请专利，由于专利还在申请过程中，所以我们这次仅展示上述主要步骤的示例图片。等专利完全申请结束后，我会在此将算法细节公开。</p>

<p>上述主要步骤的示例图如下：</p>

<h4>原始图</h4>

<p><img src="/images/ape-card-1.jpg"></p>

<h4>识别答题卡区域</h4>

<p><img src="/images/ape-card-2.jpg"></p>

<h4>图象纠偏</h4>

<p><img src="/images/ape-card-3.jpg"></p>

<h4>答案区域识别</h4>

<p>答案已标注在图片每个题号的右边位置：</p>

<p><img src="/images/ape-card-4.jpg"></p>

<h3>算法质量</h3>

<h4>算法正确率和召回率</h4>

<p>我们用收集来的1000套样本数据对算法进行评测，最终结果是：扫描题目准确率达到99.67%，召回率达到99.14%。主要识别失败的样本是：页面严重扭曲弯折的答题卡。我们也在一直改进算法，希望能够给用户提供更加精准的扫描结果。</p>

<h4>算法执行时间</h4>

<p>我们觉得让用户直接对着答题卡用拍摄的方式动态识别，比先拍一张照片再识别的方式更加方便。所以我们对答题卡识别算法的执行时间进行了一系列优化，最终保证每次识别时间小于0.1秒，这样的识别时间非常快，基本上用户把手机摄像头对准答题卡，扫描结果就出来了。</p>

<h2>算法的调试和移植</h2>

<p>由于我们整个技术团队都使用Mac电脑进行开发，所以我们对于算法的调试都是在Mac平台上完成的，我使用了开源的图象处理库OpenCV，在搭建OpenCV环境时遇到一些问题，最终完成环境搭建后，我将相关的经验总结在博文<a href="http://blog.devtang.com/blog/2012/10/27/use-opencv-in-ios/">《在MacOS和iOS系统中使用OpenCV》</a>中。</p>

<p>由于算法需要同时应用在iOS和Android平台，所以我主要用C++语言实现算法。Xcode可以很好地支持Objective-C语言和C++语言混编，只需要将相关的源文件扩展名从.m改为.mm即可。而Android平台所采用的Java语言，也支持通过<a href="http://en.wikipedia.org/wiki/Java_Native_Interface">JNI</a>的方式来调用C++的代码。这样就可以方便地将识别算法移植到手机中了。</p>

<h2>总结</h2>

<p>本文介绍了猿题库iOS客户端采用的答题卡扫描算法的大致步骤，以及算法的质量和移植方案。</p>
]]></content>
  </entry>
  
</feed>
