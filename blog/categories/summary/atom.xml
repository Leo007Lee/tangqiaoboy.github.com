<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: summary | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/summary/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2013-12-22T19:49:54+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[写在创业一周年]]></title>
    <link href="http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note/"/>
    <updated>2013-06-17T20:56:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note</id>
    <content type="html"><![CDATA[<p><img src="/images/startup-anniversary.jpg"></p>

<h2>前言</h2>

<p>大约在去年这个时候，我离开网易有道，开始了自己的创业不归路。一年过去了，总是在忙碌，在最忙的时候，我连博客都没有时间更新了。但是这一年的经历对我的成长重大，还是挺值得写下来的，在此将我的故事分享给那些一同走在创业路上的朋友。</p>

<!-- more -->


<h2>当初的选择</h2>

<p>这次的创业其实并不算是真正意义上的创业，因为我并不是创业合伙人，也没有股权，对于公司的发展，我更多是执行者，很少有参与讨论的机会。但与此同时，我的薪水并没有大幅度减少，期权所画出的大饼也确实有些吸引力，另外，我可以独立负责iOS开发，对我来说是一个不小的挑战，作为一个早期加入的核心员工，我可以享受到公司成长带来的好处，也可以和公司一起成长，承担更多责任，学习和体会创业的过程。</p>

<p>所以，如果我这次创业失败，对我的影响相当小，我不用担心交不起房租，更不用担心找不到工作。不管创业成功与否，我都将收获在iOS开发领域快速的成长，也可以感受和学习创业公司的工作方式。现在一年过去了，创业发展顺利，我还可以进一步感受和思考公司规模扩大所带来的各种问题，以及一起参与解决这些问题。</p>

<p>某种程度上说，这符合我对于第一次创业的期望方式：有挑战，有收获，风险小，潜在收益也不错。因为我工作才3年，在各方面还很嫩，选择加入一个创业团队比直接自己当创业合伙人要安全得多。</p>

<h2>技术成长</h2>

<p>由于我不是合伙人，所以我可以继续专注于iOS开发，不用管市场，运营以及产品的事情。以前在前公司，我只是负责某iOS产品的UI部分，我甚至都没有机会了解将App发布到AppStore的过程。在这次创业中，整个iOS端的开发都是由我一人负责，我学习和接触了很多以前没有机会了解的东西。</p>

<p>在项目开发中学习是最好的学习方式，这次创业我也不止做了一个App，每做一个App，我就会尝试一些新的技术方案和挑战。</p>

<ul>
<li>在做粉笔网客户端时，我尝试了完全使用ARC，也尝试用UIWebView写了很多javascript。</li>
<li>在做猿题库行测时，我尝试了使用AVFoundation来自定义扫描界面，尝试用<a href="http://blog.devtang.com/blog/2012/10/27/use-opencv-in-ios/">OpenCV</a>来实现答题卡识别算法，尝试用CoreText做部分界面的渲染。</li>
<li>在做猿题库申论时，我尝试用<a href="http://blog.devtang.com/blog/2012/12/15/do-not-use-storyboard/">Storyboard</a>和<a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">cocoapod</a>来做包管理。</li>
<li>在做猿题库司法考试时，考虑到团队可能扩大，我尝试用全手写界面的方式来开发。并且用<a href="http://blog.devtang.com/blog/2013/05/08/git-submodule-issues/">Git Submodule</a>来管理猿题库公用模块。</li>
<li>在即将上线的猿题库新课程中，我尝试了结合多target编译和Submodule来管理多个猿题库之间的差别，力求将新课程的开发成本减少到只需一些配置文件即可。</li>
</ul>


<p>如果不是因为创业，我可能都无法决定使用这些技术方案，更别说负责整个iOS端了。</p>

<h2>眼界变宽</h2>

<p>以前在网易，公司里有很多做iOS开发的同事，偶尔有一些技术交流，现在创业只有我一个人做iOS开发，我最担心的是我自己由于交流太少而眼界变窄。于是我想只有通过网络和同行进行更多的交流了。于是我就建了一个QQ群，然后把以前的同事都拉到群里面，但是大家还是交流还是比较少，我想了想，主要是因为这些同事都不太喜欢交流和分享，强行把他们拉到QQ群里面，并不能促使他们交流，于是我就开始在网上寻找一些喜欢交流的同行，邀请他们加到群里面一起聊技术。这样慢慢地，群里面就有自发的讨论出现了。</p>

<p>有一段时间，我发现讨论的内容还挺有价值的，于是就觉得QQ群不能将讨论内容沉淀下来太可惜了，当时正好微信公共账号比较火，我就想试试把有价值的内容通过微信公共账号发出去。刚开始很难，原因一方面是整理信息的成本很高，写成微信很花时间。另一方面，我也没有那么多时间来写微信。不过我坚持了一段时间后，渐渐发现有一些牛人会被吸引到我们的QQ群里面，这样就行成了一个良性循环。QQ群不断有牛人加入贡献高质量的讨论，讨论内容通过微信发出去后，又吸引更多牛人要求加入。由于申请加入的人太多，我提高了申请加群的要求，因为群里人数一旦过多，就会影响平时的工作了。所以现在QQ群的人数基本稳定了。群里面的人员组成主要分以下几类：</p>

<ol>
<li>比较大的IT公司的iOS开发者，包括腾讯、百度、新浪、搜狐、网易、阿里、人人等</li>
<li>比较小的IT公司的iOS开发者，包括豆瓣、美团、知乎、拓词、花瓣、Clover、流利说等</li>
<li>自由职业者或自己在创业中的iOS开发者</li>
<li>海外的iOS开发者</li>
</ol>


<p>如果说有什么特点，就是他们都是喜欢分享的人，大部分人都维护着自己的原创博客，这保证了群里面讨论内容的活跃。同时他们都还很忙，这保证了群里面不会很水，有问题讨论问题，没问题的时候就很安静。这是我非常喜欢的。因为这样的讨论组一方面保证了讨论的即时性，另一方面又不至于太吵而干扰平时的工作。</p>

<p>如果不是因为创业，我可能也不会被迫组建并维护这么一个高质量的QQ群，进而也不会有这么好的交流圈子了。</p>

<p>我的微信公众账号是iOSDevTips, 现在关注人数有3000人。6月6日，微信公共账号同时得到了<a href="http://hutu.me/">@Fenng</a>和<a href="http://macshuo.com/">@池建强</a>在各自的微信公共账号上的<a href="http://macshuo.com/?p=529">推荐</a>，关注人数也暴涨。很高兴自己最终坚持下来了。如果你是iOS开发者，欢迎关注我的微信公共账号，只发干货。用微信扫描下面的二维码即可关注：</p>

<p><img src="/images/weixin-qr.jpg"></p>

<h2>工作上的反思和改进</h2>

<p>虽然我在创业中专注于iOS开发，但是我还是会参与一些产品讨论，也会负责面试招人，也会反思现有工作方式的各种问题。这种反思的过程持续地在每一天进行。这种反思和改进包括如下几个方面。</p>

<h3>执行力变强</h3>

<p>似乎什么事情都可以归结到对资源和时间的合理分配和控制。对于创业公司来说，对于产品开发进度的控制是尤其重要的，我们很高兴地看到，我们的创业团队在过去的一年，不但保证了所有开发项目不延期，并且还保证了很快的开发进度。在过去一年，我们花4个月完成了粉笔网的开发，3个月完成了猿题库行测的开发，2个月完成了猿题库司法考试的开发，7天完成了猿题库申论的开发，这些项目的开发进度和我们之前计划的完全一样，没有任何延期。在软件开发领域，项目延期对于很多公司来说从来都是常态，我们通过团队的努力以及一些合理的进度管理方法来让按期交付变成了常态。</p>

<p>首先说说团队的努力，团队的努力主要在于团队每个人都努力工作，提高效率。就我个人来说，我会更加关注自己每天花在写代码上面的时间和沟通的时间，以及工作间隙刷微博的时间。我有些时候状态好，可以一连写好几个小时代码，有些时候状态不好，写一会儿代码就会分神干别的，这个时候我会把所有干扰工作的QQ,邮箱都关掉，然后戴上耳机，给自己设置一个45分钟的番茄钟（不知道这个是什么的，可以搜一下番茄工作法），然后每个番茄钟到了再休息一下，一般连续做过3个番茄钟之后，精力就又容易集中了，之后就不用设置番茄钟又可以连续写上好几个小时。当然，适当活动也是必要的，我有时候会注意每一个小时动一下，公司里面也有哑铃可以举几个。另外，我还安装了<a href="https://www.rescuetime.com/">rescue time软件</a> ，可以方便自己回顾每天的工作效率变化情况。</p>

<p>然后说说我们的进度管理方法，我们使用scrum来进行进度管理，但是根据我们创业团队的情况，我们做了不少改变，我们对于scrum的主要改变是：</p>

<ol>
<li>scrum中每个sprint的周期变为1周。下面会展开阐述理由。</li>
<li>scrum会议中的回顾会议和计划会议一起开。主要是为了减少会议的次数。</li>
</ol>


<p>1周的sprint相比传统的2周或4周sprint最大的优点是，可以对进度有较强的控制，因为迭代周期减小为一周，所以可以更早地发现开发中可以出现的问题，进而进行微调。微调的粒度变小，就保证了整体进度的可控。我们对开发进度的微调包括：</p>

<ol>
<li>通过每周的sprint，尽早发现开发进度上的风险，合理加班或者减少部分需求开发。</li>
<li>通过每周的sprint，尽早地将产品功能的改变融入到新的sprint中，使得产品能够尽快应对来自市场需求或产品需求的变化。</li>
</ol>


<p>1周的sprint也有一定的缺点，首先是它的时间非常紧，除去开回顾会议和计划会议的时间，通常只剩下4天半。4天半时间通常会排满开发进度，常常会造成留给测试同事的时间比较少。对于要上线的sprint，sprint结束日那天的上线工作也会占据不少时间，因为上线通常会涉及很多系统运维相关的操作。另一个缺点是，它无法安排一些长期并且重要的事情，例如技术分享和讨论，新技术调研等。</p>

<p>但整体说来，对于创业公司来说，活下去才是最重要的，1周的sprint可以带来产品按时交付的巨大优势。所以我们直到现在还是坚持1周的sprint。或许以后公司大了，时间不是最最紧迫的资源时，我们可能会考虑2周的sprint。</p>

<h3>对scrum有了更深认识</h3>

<p>scrum很容易被误解，也容易被错误地实践。</p>

<p>对于高压型的Leader, scrum很容易成为他压榨程序员的工具，因为程序员通常在估计工作量时很乐观，但是执行时就会出现各种问题，scrum将任务拆分到每天做什么的时候，很容易造成程序员为了完成当天的工作而加班。如果管理者在回顾会议不能很好的处理这个问题，程序员就会认为这是一种管理者控制进度的工具，然后在以后的计划会议中故意将时间估长。</p>

<p>对于温和的Leader, scrum中的sprint很可能成为一句空话，每个sprint都会出现完不成的情况，每次当然都会有合理的理由：例如功能开发量估计不足，需求没有讨论清楚，遇到的技术难点等等。当大家对于sprint的按时完成没有压力的时候，scrum本身就成了一个可有可无的东西了。</p>

<p>执行了一年多scrum，我感觉scrum最核心的思想就是强调团队的自我反思和进步，而这一点要求scrum团队成员有较强的能力和素质。所以很多公司没有把scrum执行好，就是简单地执行了scrum中的各种流程和方法，而忽视了其中最重要的基础：团队成员的能力。如果团队成员本身能力不行，也不能为整个团队着想，为公司着想，搞scrum就是一句空话。只有大家真正相互欣赏，相互理解和配合，团队的作用才能发挥起来。我们通过一年多对scrum的实践和改进，最终形成了我们自己的团队工作方式和团队文化，这一点是非常棒的。</p>

<p>如果不是因为创业，我可能至今还以为scrum只是管理者为了压榨程序员的劳动力而建立的工具，也无法体会到scrum的好处。</p>

<h3>更注意沟通效率</h3>

<p>上面也说过，时间是创业公司最大的敌人。而对于我来说，除了写代码的时间外，最大的时间开销就是沟通了。我们想了很多办法来提高沟通的效率。比如重要的信息，我们都会记录在wiki上，比如每次scrum的回顾会议的总结，我们就会放到wiki上，服务器端的接口信息，我们也会整理到wiki上。wiki对于新来的同事特别有用，因为他可以通过wiki了解到整个团队工作的历史，进而方便他熟悉和融入团队。对于一些相互依赖的接口信息，放到wiki上也省去了我们为了弄清楚接口而打断别人的工作，提高了大家的工作效率。</p>

<p>为了提高沟通效率，我们也把所有能省去的会议都省去了，我们没有产品评审会议，没有美术评审会议，我们也不会评审测试用例，以上这些会议，如果我们觉得有必要进行沟通的，就私下沟通，一切从简。</p>

<p>我们尽量减少打断别人工作的行为，如果我觉得有一件事情需要让所有人知道，我就会发一封邮件出来，如果该事情值得记录下来，我可能会同时把内容整理到wiki上。如果我在开发上的一些任务依赖后台相应的功能，我就会给相关人员报一个Bug，让他抽时间处理这个Bug即可。小的产品文案的改动也是以报Bug的形式来沟通。如果有些事情急需要让大家知道，比如服务器正在重启，测试和开发暂时不可连接服务器，我们就会在QQ群里面说一声。只有当我的工作被严重block的时候，例如需要服务器同事的确认才能进一步开发，例如需要产品的确认才能进一步开发的时候，我才会去打断别人的工作当面询问。尽量保证别人的工作可以不被打断，其实也是提高了大家工作的效率。</p>

<p>回想起以前在大公司，所有的沟通大多是在QQ一类的聊天工具中完成，打字交流，效率极低。开组会的时候，很多人无所事事，玩手机开小差，效率低下。创业让我感受到了效率至上的工作态度，让自己每天的工作高效是非常快乐的事情。由于我们不鼓励加班，所以我们自然也享受到了高效工作的回报：自己有更多时间做自己的事情。我每天都比同屋的另一个在美团工作的朋友下班早，晚上下班回到家，有时候我会看看书，有时候看看电影，有时候也会研究一些新的技术，创业的生活不再变得苦逼了。</p>

<p>如果不是因为创业，我根本无法体会到创业带来的高效地工作环境，每天自己的时间都在做具体的事情上，而不是大量的沟通上。</p>

<h2>总结</h2>

<p>如果不是因为创业，我无法在iOS开发上负责更多事情并且快速成长，无法扩大眼界认识很多iOS同行并和他们组建高质量讨论圈子，无法成功地连续一年执行scrum并且保证所有项目不延期，也无法享受高效工作不加班的生活。有这么多收获，创业本身能不能成功反倒不是最重要的事情了，每天能够开心，认真，充实地工作本身就是一种享受。</p>

<p>身边有不少朋友都在创业，有失败的，也有发展顺利的，和他们聊天常常会谈到，创业是一条不归路，因为创业的过程就象是打开了潘多拉的盒子，你见识到了外面世界的精彩，就再也不能忍受在大公司的平庸生活了。愿所有在创业路上奔跑的人们，找到属于自己的精彩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2013/01/01/2012-summary/"/>
    <updated>2013-01-01T14:31:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2013/01/01/2012-summary</id>
    <content type="html"><![CDATA[<p>和<a href="http://blog.devtang.com/blog/2012/01/01/2011-summary/">去年</a>一样，记录一下今年的成长和收获。</p>

<!-- more -->


<h2>主要工作</h2>

<p>自己这一年主要的工作是：</p>

<ul>
<li>2012年1-4月份，有道云笔记iOS端开发</li>
<li>2012年4-9月份，粉笔网iPhone端开发</li>
<li>2012年11月份-2013年1月，猿题库-公务员考试行测、猿题库-公务员考试申论iPhone端的开发</li>
</ul>


<h3>有道云笔记开发</h3>

<!--
1月26日，结婚。从2004年1月26日我和她相识，再到今年的同一天结婚。8年过去了，我和她因为相伴，过得快乐和充实。在承诺“执子之手，与之携老”的誓言后，我们也学会了相互诉说，相互迁就和相互照顾。
-->


<p>1-4月份，我继续开发了有道云笔记iOS端的新功能。做得最费劲的功能是和<a href="http://weibo.com/perfectworks">perfectworks</a>一起做iPad版的图文混排编缉器。本来想iOS的UIWebView是基于webkit内核的，把PC版的编辑器代码移植一下就行了。可真正做的时候，遇到很多问题。</p>

<p>首先是我们发现UIWebView有一些平台特有的javascript兼容性Bug。当时苹果官方的用Safari直接连接模拟器进行调试的工具还没有推出，我们只能用<a href="http://phonegap.github.com/weinre/">weinre</a>这个第三方工具来调试js，但是weinre有时候会出Bug，这个时候就只能用Alert来把调试信息打出来了，真是比IE6还苦。</p>

<p>然后是在iOS平台上，native端调js是同步的，但js调native调是异步的。所以原有的js代码需要做很多重构。关于这里面的技术细节，我总结在<a href="http://blog.devtang.com/blog/2012/03/24/talk-about-uiwebview-and-phonegap/">这里</a>。</p>

<p>最后是联调，因为js和ios两边同时开发，我们需要大量的联调工作。所以我每天抱着笔记本跑到前端组和perfectworks坐到一起。另外，我们还相互之间互相暴露了git的地址，然后相互pull各自调试代码，待各自都调试完成了，再把代码rebase整理一下，push到服务器上。最后，我们将这种实践整理成文<a href="http://blog.devtang.com/blog/2012/02/29/collaboration-with-git/">《用Git进行协同开发》</a>。</p>

<p>另外，在2-3月份，我还和c4pt0r一起，通过有道的个人项目时间，开发了有道云笔记的Mac版。不过这个版本由于是非正式项目，所以应该还有很多需要完善的Feature。最终c4pt0r将其取名为<a href="https://github.com/c4pt0r/notever/wiki/NotEver">NotEver</a>，发布到了github上。</p>

<h3>粉笔网开发</h3>

<p>在粉笔网我花了3个多月时间，独立完成了粉笔网iPhone客户端开发工作。整个代码量除去第三方库，有3万多行。那段时间非常辛苦，每周6天，每天11个小时，最终产品如期上线。在产品上线后，我写了<a href="http://blog.devtang.com/blog/2012/09/15/talk-about-my-startup-exp/">一篇博客</a>来专门讲述这中间的感悟。那篇文章发出后，在微博上得到了大量的转发，最终引起了CSDN的<a href="http://weibo.com/cmdnclub">炫姐姐</a>的关注。在她的邀请下，我们进行了一次技术和项目管理的<a href="http://blog.devtang.com/blog/2012/10/15/scrum-and-architecture-in-fenbi/">分享</a>。</p>

<h3>猿题库开发</h3>

<p>猿题库算是我们创业的第二个产品尝试。这是一个收费产品，同样开发时间很紧张，最终我们延续了粉笔网之前快速开发的经验，用3个月时间再次推出了一个全平台（Web,iOS,Android)产品。</p>

<p>这次在猿题库中，我还花时间调研并实现了扫描答题卡算法。也算是对我多年搞ACM的积累的一点算法的使用，否则都快忘完了。扫描答题卡使用了OpenCV库和ZXing库，所以我撰写了相关的经验文章发表在博客上。</p>

<p>猿题库在春节后上线。希望它能给我们一个惊喜。</p>

<h2>创业</h2>

<p>5月12日，我离职加入了由前网易同事创立的一家创业公司：<a href="http://fenbi.com/">粉笔网</a>。离职前纠结了相当长时间，主要是有道是一家非常棒的公司，在有道的工作非常开心，而且我们的产品有道云笔记一直在国内占据着云笔记类用户量第一的位置。不过最终我还是选择了离职，主要的原因是：</p>

<ol>
<li>想接受更大的挑战。在粉笔网我会独立负责整个iOS端的开发工作，会辛苦很多，但是成长也会快很多。</li>
<li>想有更大的潜在经济回报。在大公司拿死工资总还是无法摆脱财务自由，创业虽然成功率很低，但至少有希望，并且希望把握在自己手中。</li>
<li>想和大家一起打造一个小而精的技术团队。</li>
</ol>


<p>现在回过头来看，创业确实比较辛苦，但我也确实成长了很多。并且由于我们团队成员大多已经结婚，所以我们努力打造着一个不加班的创业公司文化。我们从9月份产品上线后，就一直坚持正常的上下班时间。</p>

<p>但是另一方面，我们的工作并不轻松。我们每周一个Scrum，每天的工作量很大，所以我们会尽量高效地沟通，做好自己的时间管理。这里面Scrum和番茄钟帮了我很大的忙。我现在每天除去沟通的时间，常常能花4-5小时专注地写代码，而这在以前，常常只有3小时左右。</p>

<p>有一些朋友很关心我，问我：“如果创业失败了怎么办？”。其实失败了能怎么样呢？失败无非就是损失掉了短期的利益。但长远来看，我比以前更加专业了，我们团队更加牛逼了，不管我们是继续另一份创业或者去大公司找工作，我相信都有这个实力。</p>

<h2>技术成长</h2>

<p>这一年专心于iOS开发的积累，已经能够非常熟练地进行iOS日常的开发。</p>

<p>另外在这一年，我注意在工作的时候记下一些总结，然后在周末有空的时候，就会花时间把这些整理成文章。回顾2012年，我一共写了36篇博客文章，平均每月3篇。写博客有助于我梳理自己的知识，同时也结交了不少iOS开发的同行。</p>

<h2>个人Milestone</h2>

<ul>
<li>2012-5-10 离职创业</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈我的创业感受]]></title>
    <link href="http://blog.devtang.com/blog/2012/09/15/talk-about-my-startup-exp/"/>
    <updated>2012-09-15T13:50:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/09/15/talk-about-my-startup-exp</id>
    <content type="html"><![CDATA[<p>5个程序员，3个多月时间，30多万行代码，1000个bug，只为打造卓越产品。</p>

<h2>开发历程</h2>

<p>先简单介绍一下产品。我们的产品叫“<a href="http://fenbi.com">粉笔网</a>”，这是一个新颖的学习社区。我们公司的创始人是前网易高管<a href="http://baike.baidu.com/view/2264197.htm">李勇</a>。我们团队从4月份开始筹备，5月份开始工作，整个开发历经3个多月，其中网站于8月28号顺利上线，<a href="http://itunes.apple.com/cn/app/fen-bi-wang/id551540593">iPhone客户端</a>和<a href="http://cdn.fen.bi/sc/app/fenbi.apk">Android客户端</a>于9月8日顺利通过审核上线。</p>

<!-- more -->


<p>对于互联网行业的功能开发，项目延期是很常见的，但是我们的程序员虽然只有5个人（后台2人，Web前端1人，iPhone端1人，Android端1人），但整个项目（包括Web网站，iPhone端和Android端）都顺利地在3个多月完成了开发和上线。我觉得这里面主要得益于团队成员之前默契的配合，以及用scrum让我们的整个工作安全紧张有序，但是又不慌乱。</p>

<p>在这三个多月里，我们制定了紧张的时间安排。我们一开始就知道任务很重，所以，我们定制了合理的加班计划。简单来说，就是6乘11，即工作6天，每天11个小时（早上10点到晚上9点），每个月的最后一个周末，我们可以双休。在工作时间上，我们每周的工作时间是66个小时，比正常的每周40个小时的工作时间，多了50%，这基本上达到我们的精力极限了。</p>

<p>但加班并不是我们期望的长期的工作方式，所以在8月28号产品正式上线后，我们即恢复了早10晚7的正常每天8小时的工作时间。</p>

<p>以下是我们整个项目的进展图，我们每周一个sprint，每3周一个Milestone，需求在中间经历过一些变动，但都是在对项目进度的影响在可控的范围内。</p>

<p><img src="/images/fenbi_dev.png"></p>

<h2>代码总结</h2>

<p>回顾我们团队这3个多月的代码贡献，可以用惊人来形容。除去第三方的开源库依赖，后台写了将近10万行代码，前端8万行代码，iPhone端7万行，android端7万行。一共30多万行代码。</p>

<p>以下是用<a href="http://gitstats.sourceforge.net/">gitstat软件</a>统计出来的代码增长图，首先是web前端和后台，它们在一个项目里面：
<img src="/images/fenbi_web_commit_log.jpeg"></p>

<p>然后是iPhone端：
<img src="/images/fenbi_iphone_commit_log.jpeg"></p>

<h2>创业感受</h2>

<p>我在经历了2年大公司实习，2年半大公司工作后，现在在这样一个创业期的小公司工作。我感觉到最明显的差别是工作效率上的。我们的团队很小，所以我们的交流沟通很多时候都只需要扭头喊一嗓子就行了，对于一些架构设计的讨论，很多时候都是在饭桌上以及午饭后晒太阳时进行的。我们没有各种设计评审会议，接受合理的需求变动和改进，最大限度地保证产品按期完成而不是延期。</p>

<p>在8月28号Web版(<a href="http://fenbi.com">http://fenbi.com</a>)上线后，我们保持了每周一个迭代更新的速度。每周一个scrum相当刺激，除去开scrum meeting和上线的时间，留给我们的开发和测试改bug的时间只有4天左右。大家每天都非常有活力地工作，但是，我们却保证了严格的code review制度，所有提交都会汇集到gerrit上进行code review，通过之后再由gerrit自动merge到工作分支上。</p>

<p>很多人说，创业公司每个人都是多面手，但我们的团队更强调每个人都能精通一方面，成为某一方面的专家。所以，我们会抽时间去一起阅读redis代码，读amazon关于dynamo的论文。我们希望我们的技术成长能够跟上公司的成长速度，在各方面都积累。只有这样，当有一天，由于用户大量增长带来服务器访问压力时，我们能够从容地提出解决方案，不至于象京东那样搞个活动就把系统搞挂了。</p>

<p>我们也把大公司的好习惯带进了创业公司，比如我们强调wiki的撰写。wiki相比文档来说要敏捷很多，我们只写别人需要看的和重要的信息。比如我们对于系统的所有接口设计，代码规范，美术设计流程，上线流程，部署方案，每次scrum的总结等。这样一个新人进来之后，他很容易从wiki上找到他需要的信息而不是靠我们口口相传。又比如我们会做code review和持续集成测试，客户端会做daily build，这些都是非常规范的。</p>

<h2>总结</h2>

<p>回想这几个月的经历，感觉最大的收获是能够和一帮志趣相投的人一起快乐的工作。我想，创业的风险是相当大的，如果我们最后成功了，我们将摆脱基本的财务压力，追求更高的理想，但即使这个创业项目最终失败了，我相信我们的团队也能够凝聚起来，迎接下一份挑战。</p>

<h2>题外话--招聘</h2>

<p>嗯，是的，这部分就是一个广告。我们希望有更多的产品、技术同事加入我们。</p>

<h3>我们能提供的</h3>

<p>由于有风险投资，我们的创业一点也不苦逼。我们的工作地点远离码农离散地中关村和五道口，座落在高富帅云集的CBD朝外SOHO，我最大的体会是即使是上下班高峰期，这里的10号线也常常也很宽松，不会象五道口那样使劲挤还挤不上去。我们的技术配27寸的iMac（也可选择21.5的iMac加双显），我们有食品间提供免费的可乐、加多宝，茶叶，水果。我们也有每周一次的羽毛球俱乐部。中午吃完饭觉得困，我们有4个沙发加一个躺椅可供休息。</p>

<p>我们的公司才刚刚成立不到半年，产品上线后反馈很好，我们也不缺资金。这个时候加入我们，你可以得到不输于一线互联网公司的待遇，加上一个在回报上无限可能的期权。我们的初始技术团队都有过多年大公司的工作经验，所以在这里你可以学到大公司的好的一面（包括规范的scrum开发，code review，wiki, 代码规范和追求代码质量），又可以享受创业公司的灵活（几乎没有会议，高效地沟通）。</p>

<h3>我们的要求</h3>

<p>由于我们整个团队有极强的代码洁癖和编码热情，我们也希望找到符合团队气质的人。我们不希望招那种把编程仅仅当做一份工作的人，因为我们认为，兴趣是最好的老师，对编程没有兴趣的人，是不可能把工作做到卓越的。</p>

<p>所以，如果你和我们一样，对编程这件事情上抱有热情的话，希望你能邮件联系我们的Tech Leader郭常圳: gcz(at)fenbi.com 。如果你能附上一段你放在github上的开源代码，会让我们更加充分了解你，当然如果没有也没关系。我们相信，社区代码是价值，商业代码也是价值。</p>

<p>我个人主要负责粉笔网iPhone端的开发，我非常希望能够找到一个iOS开发的同事能够相互交流和学习。我不期望你是一个iOS大牛，甚至你现在完全不会iOS开发也没关系，但是希望我们能够一起成长为iOS开发的专家。</p>

<p>另外，我们对于Linux系统管理都不太懂，特别希望能找到一个系统管理高手加入我们团队，我们乐意向你学习。同时，如果你对学习开发有兴趣，那就太好不过了，我们的目标是DevOps。</p>

<p>我们也欢迎实习生申请加入，但要求每周至少全职实习4天。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[象写程序一样写博客：搭建基于github的博客]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/"/>
    <updated>2012-02-10T19:55:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github</id>
    <content type="html"><![CDATA[<p>github真是无所不能。其<a href="http://pages.github.com/">Pages功能</a>支持上传html，并且在页面中显示。于是有好事者做了一个基于github的博客管理工具：<a href="http://octopress.org/">octopress</a>，基本原理是用git来管理你的文章，然后最终发布到github上成为一个独立博客站点。由于github支持CNAME域名指向，所以如果有独立域名的话，可以基于这些做出一个专业的博客站点出来。</p>

<p>本博客就是完全基于此搭建起来的，在使用了2个月之后，我将原系统根据中国人的需求做了一些配置，去掉了GFW会挡住的google font api，以及替换掉了速度超慢的国外的评论系统，也加上了分享到国内的微博的功能。现在把这些都总结出来，希望大家都可以方便地搭建基于github的博客来。</p>

<!--more-->


<h2>安装</h2>

<p>首先说说怎么安装相应的工具。其实这些内容在 <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> 上都有，我只是把它大概翻译了一下。</p>

<h3>安装rvm和ruby</h3>

<p>参考文档：<a href="http://octopress.org/docs/setup/rvm/">http://octopress.org/docs/setup/rvm/</a>，主要3步：</p>

<p>首先安装：
<code>
bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code>
然后设置classpath:
```
echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile
source ~/.bash_profile</p>

<h1>If using Zsh do this instead</h1>

<p>echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' >> ~/.zshrc
source ~/.zshrc
<code>
最后安装ruby:
</code>
rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
```</p>

<h3>安装Octopress</h3>

<p>首先从github上将源码clone下来：
<code>
git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
ruby --version  # Should report Ruby 1.9.2
</code></p>

<p>然后安装依赖:
<code>
gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code>
最后安装Octopress
<code>
rake install
</code></p>

<h3>配置</h3>

<p>安装好之后可以简单配置一下：</p>

<ul>
<li>主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。
注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。</li>
<li>修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。</li>
</ul>


<h2>设置github账号</h2>

<p>基于github的博客当然需要先注册github账号，Github的账号注册地址是：<a href="https://github.com/signup/free">https://github.com/signup/free</a> 。申请好github账号后，建一个名为 username.github.com 的代码仓库。这里注意username必须是和你的账号名一致。</p>

<h2>写博客方法</h2>

<p>然后就可以写博客啦～ 写博客主要是用以下几个命令，<a href="http://octopress.org/docs/blogging/">这里</a>有详细介绍：</p>

<ul>
<li>rake new_post['article name'] 生成博文框架，然后修改生成的文件即可</li>
<li>rake generate 生成静态文件</li>
<li>rake watch 检测文件变化，实时生成新内容</li>
<li>rake preview 在本机4000端口生成访问内容</li>
<li>rake deploy 发布文件</li>
</ul>


<p>博文是采用markdown语法，另外增加了一些扩充的插件，markdown的介绍文章网上可以搜到很多，比如<a href="http://daringfireball.net/projects/markdown/">这个</a>。</p>

<h2>高级配置</h2>

<p>我主要介绍一下如何配置评论和分享到微博功能。步骤如下：</p>

<ul>
<li>在_config.yml中增加一项： weibo_share: true</li>
<li>修改 source/_includes/post/sharing.html ，增加：
```
   // 下面的大括号是全角的，如果复制，请自行改成半角
  ｛% if site.weibo_share %｝

<pre><code>  ｛% include post/weibo.html %｝
</code></pre>

<p>  ｛% endif %｝
```</p></li>
<li>增加文件：source/_includes/post/weibo.html</li>
<li>访问 <a href="http://www.jiathis.com/">http://www.jiathis.com/</a> ，获取分享的代码</li>
<li>访问 <a href="http://uyan.cc/">http://uyan.cc/</a> ，获得评论的代码</li>
<li>将上面2步的代码都加入到weibo.html中即可</li>
</ul>


<h2>Tips</h2>

<h4>从wordpress迁移到github</h4>

<p>这儿有一篇文章介绍了如何做迁移：
<a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></p>

<h4>图片</h4>

<p>如果要在文章中上传图片，直接copy到 /source/images目录下即可。在文章中可以直接引用。也可以选一些大的图床站点，例如flickr之类的放在那边。</p>

<h4>域名</h4>

<p>如果你象我一样有自己的域名，可以将域名指向这个博客，具体步骤是：</p>

<ul>
<li>在域名管理中，建立一个CNAME指向，将你的域名指向 yourname.github.com</li>
<li>建一个名为CNAME的文件在source目录下，然后将自己的域名输入进去。</li>
<li>将内容push到github后，第一次生效大概等1小时，之后你就可以用自己的域名访问了。</li>
</ul>


<h4>参考</h4>

<p>这儿还有一些参考的文章：</p>

<ul>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">http://www.yangzhiping.com/tech/octopress.html</a></li>
<li><a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我们必须自学]]></title>
    <link href="http://blog.devtang.com/blog/2012/01/20/we-must-self-learning/"/>
    <updated>2012-01-20T23:53:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/01/20/we-must-self-learning</id>
    <content type="html"><![CDATA[<p>前两天看到一个文章，题名为<a href="http://www.aqee.net/all-programmers-are-self-taught/">《所有的程序员都是自学成才》</a>。当时没有什么特别的想法，只是觉得自己也确实是基本上靠自学来掌握新的知识的。但是今天在公车上没事好好想了一想，想明白了，原来对于程序员来说，只能自学才能成才。</p>

<!--more-->


<p>这个道理似乎有点奇怪，因为我们从小都是由老师教授新知识的。我自己也实验过，掌握同样的高中课本上的知识，自己自学的速度通常比老师讲授的速度要慢一倍的时间。即一个知识点，如果你自己要看2小时的书才能理解的话，有好的老师给你讲解的话，只需要一个小时就够了。所以，我一直希望在学习各种东西的时候都能去听一些课程，因为我认为这样节省了我学习的时间。</p>

<p>但是这个道理在程序员这一行行不通，为什么这么说呢？原因有2点：</p>

<ol>
<li>计算机编程相关的知识更新速度很快。同时，国内的IT类资料的翻译质量相当差，原创的优秀书籍也很少。所以，我们通常需要靠阅读英文才能掌握最新的资料。</li>
<li>计算机编程知识需要较多的专业知识积累和实践。</li>
</ol>


<p>如果一个培训机构有一个老师，他强到能够通过自己做一些项目来积累很多专业知识和实践，并且不断地从国外资料上学习最新的技术。那么这个人在企业里面会比在国内的培训机构更有施展自己能力的空间。国内的培训机构因为受众面的原因，基本上还是培养那种没有自学能力，只能做低级技术活的代码民工，所以对老师的技术要求不会那么高，自然也不会给出很诱人的薪水。但是企业就不一样了，企业需要不停地利用新技术来增强自己的产品竞争力，所以对于IT企业来说，产品的竞争就是人才的竞争，所以给优秀的人能够开出很高的薪水。</p>

<p>所以，我们不能期望从IT类培训机构中学习到最新的技术，一切只能通过我们自学。当然，自学之后在同行之间相互交流，对于我们的技术成长也是很有用的。</p>

<p>所以，各位同行，别想有人能够教你，一切还是靠自己吧。</p>
]]></content>
  </entry>
  
</feed>
