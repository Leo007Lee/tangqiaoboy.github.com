<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: summary | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/summary/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2015-02-01T13:05:46+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[对《iOS开发进阶》一书的解释]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/18/explain-ios-pro-book/"/>
    <updated>2015-01-18T10:17:21+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/18/explain-ios-pro-book</id>
    <content type="html"><![CDATA[<p>《iOS开发进阶》虽然仅仅在<a href="http://product.china-pub.com/3770871">互动出版社</a>可以买到，还没有在京东和亚马逊上架，但是在 v2ex 上已经引起了一些讨论和误解，见 <a href="http://v2ex.com/t/161929?p=1">此贴</a>。所以我想在这里，对本书的内容和定位做一些解释。</p>

<h2>定位</h2>

<p>《iOS开发进阶》定位于帮助那些iOS开发刚刚入门的同行快速提高自己的水平，适用于至少有3个月以上iOS开发经验的读者。不适合没有任何iOS开发基础的读者阅读。对于iOS熟练开发者，本书也能补充其知识点的可能的盲区，使其相关知识体系更为完善。</p>

<p>我可能需要强调一下，对于iOS熟练开发者（工作时间大于1年），本书也<font color=blue>只能做到补充其可能的盲区的作用</font>。或者有一些比较牛的朋友，本书也可能<font color=red>补不了什么盲区</font>。</p>

<p>我自认为其中 “CoreText排版引擎章节”以及第三章的底层原理部分是适合这部分iOS熟练开发者的。但不排除很多熟练开发者对底层原理已经很了解了，同时对CoreText不感兴趣。</p>

<p>所以希望iOS熟练开发者能够在买书前翻阅一下<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>。</p>

<h2>内容</h2>

<p>本书中的所有内容都是我的原创，但是有部分在博客上公开过，我自己数了一下，一共有9个章节在我的博客上可以看到完整的内容，另外11个章节在我的博客上只能看到部分内容或完全看不到内容。但是很有可能，随着图书的慢慢发售，我将其它未公开的电子版内容放到网上。</p>

<p>经常看我的博客的朋友，可能会有些失望或者觉得不值。所以希望大家在买书前翻阅一下<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>，以避免买了后悔。</p>

<h2>书名</h2>

<p>有人抱怨说《iOS开发进阶》这个书名太过于有欺骗性，应该叫《iOS开发备忘录》。对此我不太认同，《iOS开发进阶》很好地排除了那些iOS初学者，从书名上他们就会放弃看本书，而如果叫《iOS开发备忘录》就不一定了。另外，任何一个读者都应该看过目录再买书的吧？我不认为本书的书名会有那么大的欺骗性。</p>

<h2>质量</h2>

<p>一些人批评本书的内容质量比国外的 objc.io 和 <a href="raywenderlich.com/">RW</a> 的书差多了。对此我想说，您批评得对，我还需要努力！但是这不代表本书就没有价值吧？例如CoreText章节，我现在在国内外的图书中，仍然没有看到有谁把这个从浅入深讲完整的呀。第一部分对工具的介绍虽然技术含量低，但也没有谁完整整理过。与其自叹和国外有差距，不如自己实际来努力一下，改善一下国内的知识分享环境，不是更好么？</p>

<h2>最后</h2>

<ul>
<li>我写本书不指望能挣多少钱，实际上它也不能给我带来多少收入。但我真心希望这本书能够帮助到大家。现在看来，本书最合适的读者仍然是刚刚入门3个月的开发者。</li>
<li>请所有购买此书的朋友购买前先看目录：<a href="https://github.com/tangqiaoboy/iOS-Pro/blob/master/TableOfContents.md">本书目录</a>。一本书不可能适合所有水平的读者，请自己决定。</li>
</ul>


<p>愿大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我是如何完成《iOS开发进阶》的编写的？]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/11/how-to-finish-ios-pro-book/"/>
    <updated>2015-01-11T20:01:11+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/11/how-to-finish-ios-pro-book</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p><a href="https://github.com/tangqiaoboy/iOS-Pro">《iOS 开发进阶》</a> 终于出版了，在架构师峰会的签售会上，首批 100 本图书在签售的两天很快就卖光了，前几天首先在<a href="http://product.china-pub.com/3770871">互动出版社</a>上架的首批图书也在一天内卖缺货了，能得到读者这么热烈地支持，我还是很惊喜。<a href="http://segmentfault.com/blog/devlevelup">技术人攻略</a> 的创始人张兰说：“你应该写一篇总结”。我自己也想好好的整理一下这个出版的过程，给大家分享一下此书的写作过程。</p>

<p><img src="/images/ios-pro-book-launch.jpg"></p>

<h2>选择出版社</h2>

<p>去年年底，电子工业出版社博文视点的张春雨老师在微博上私信我，问我愿不愿意写一本 iOS 方面的技术书籍。其实在这之前已经有将近 5 个出版社的老师联系过我，但是我都因为创业太忙没有答应。后来有一次差点答应过的一个出版社老师，但因为她坚持要我提供 Word 版本的书稿以及一些沟通上的问题，我最终在签合同前终止了合作。</p>

<p>张老师是足够开明大度的，在写作时间和内容上给了我足够的自由度，前期几乎没有干涉过文稿内容和写作进度（不过后来发现其实是他比较忙，没空管我）。后期也仅仅是对文章表达可能有歧义的地方提建议。这种散养式的风格非常适合我，因为我从来就是一个比较自律，以及喜欢按自己节奏做事的人。</p>

<h2>写作格式和工具</h2>

<p>我之前在某个出版社老师的要求下，曾经也尝试在 Mac 下用 Word 写作。但由于 Mac 下 Word 的糟糕体验以及对代码糟糕的排版支持，那完全就是一段不堪回首的痛苦过程。</p>

<p>而张春雨老师鼓励我用任何喜欢的工具写作，这一点是我同意合作的很大原因。我的博客都是用 markdown 语法来完成的，所以我一开始就打算用 markdown 来写作。</p>

<p>在软件上，我一开始选择 Mou 来写作，但是发现 Mou 对于篇幅超过 1 万字的文章，预览渲染会非常卡，CPU 长期达到 100% 占用。我的最新款 Macbook Air 的风扇呼呼狂响，让我不得不终止了 Mou 的进程。</p>

<p>之后有一段时间我就用 Evernote 或 Sublime text 来写作，它们麻烦之处就是 Evernote 写完之后还需要把图片转成 markdown 的链接。而
Sublime text 的问题就是无法方便地预览最后效果。</p>

<p>这一切的不便在我发现 <a href="https://www.gitbook.com/">gitbook</a> 后被改变。<a href="https://www.gitbook.com/">gitbook</a> 是一个专业的为 markdown 格式写作者提供的图书编写工具。它甚至集成了在线销售相关的功能。它也支持将书稿导出成 PDF、HTML 或 ePub 格式。</p>

<p>以下是 gitbook 的编辑界面（最左边是目录，中间是 markdown 源码，最右边是预览）：</p>

<p><img src="/images/gitbook-ui.jpg"></p>

<p>我用 <a href="https://www.gitbook.com/">gitbook</a> 完成了此书后半部分的编写。gitbook 有时候会出现两个中文字符在显示时重叠的问题，不过整体体验比 Mou 和 Evernote 要好多了。唯一的一次事故是 gitbook 对中文支持不太好，如果章节名不带因为的话，gitbook 会错误的地将章节覆盖到父级的图书目录，造成其他章节的内容被覆盖。我幸运的将书稿内容保存在了 Dropbox 目录下，所以恢复出来了。</p>

<h2>配图和示例代码</h2>

<p>对于写作中需要的示意图截图，简单的我就直接用 QQ 截图了，复杂的我使用的是 <a href="http://www.clarify-it.com/">Clarify</a>，它的标记功能比较丰富（不过中文支持比较差）。另外一些类图或架构图，我就直接使用 keynote 来做了。</p>

<p>考虑到技术书籍通常配图都比较少，所以我这次尝试，那时用比较多的配图来做辅助说明。另外我尽量把图书的涉及代码都放到网上，仅仅留一些关键的代码片段以节省篇幅。</p>

<h2>如何安排时间和控制进度</h2>

<p>由于有过写作的经验，所以我预先就估计好了这会是一个一年左右的工作。实际上它确实花了一年时间。</p>

<p>我希望把这个当做一个自己的 “创业项目” 来做，看自己能否执行好一个较长远的规划。我把图书编写拆分成每一个章节的写作工作，然后希望用 1~2 周完成一个章节。这样的好处是每周都可以看到明确的进展和产出。</p>

<p>我具体在做的时候是尝试用 Scrum 的方式来安排自己周末的时间。简单来说就是把书稿的内容进行拆分，然后对于细分到每一个章节的内容进行估分。接着我的每一个周末的目标就是把当周安排的章节写作完成。</p>

<p>当然，人都是需要休息的。所以周末两天我通常不会安排满。我会安排一整天用来写作，而另外一天做小量的修改和休息。如果有加班，就暂停写作。</p>

<p>虽然我没有跑过马拉松，但我感觉写作的体验和跑马拉松类似。前期的起跑和最后的冲刺都比较激动，但是中途长达一年的写作过程却是孤独，枯燥和寂寞的。这个时候，需要自己的坚持和自我鼓励。</p>

<h2>关于电子版</h2>

<p>该书我专门保留了电子版的版权，我本来希望把书放在多看上销售，主要是因为我个人就是多看的重度用户，而且我知道多看对电子书有加密保护。但是后来联系多看阅读时才发现他们已经不和个人作者合作了，他们建议我将版权授权给出版社。这让我感觉非常失望。多看阅读这种作法使得它无法颠覆传统出版社的渠道，另外如果竞争对手允许个人作者的话，多看阅读还可能失去不少优秀的图书的发行机会，进而影响它的电子书平台的地位。</p>

<p>在网上抱怨了此事以后，有一位朋友说可以协助我在豆瓣阅读发布此书。所以顺利的话，稍后会有豆瓣阅读的电子书版本销售。如果豆瓣阅读的出版进行得顺利，我也会将电子版发布在百度阅读、淘宝阅读等其它电子书平台上。</p>

<h2>关于作品收入</h2>

<p>技术书籍的写作通常都是不怎么挣钱的。那拿我的书来说，估计版税一共会有2万块钱。而写作此书大概花掉了我将近一年的周末时间。如果是要专门为了挣钱的话，可以有非常多其它的性价比更高的，更轻松的方式。</p>

<p>但是，如果可以重来，我还是会选择写这本书。传递知识的乐趣和成就感还是比挣钱更有意思一些。也希望有更多的一线开发者投入到写作分享的行列中。</p>

<h2>一些小结</h2>

<ul>
<li>推荐用 markdown 格式配合 <a href="https://www.gitbook.com/">gitbook</a> 写作。</li>
<li>推荐用 Scrum 的方式安排进度。</li>
<li>推荐用 <a href="http://www.clarify-it.com/">Clarify</a> 作配图标记。</li>
<li>书稿放在 <a href="https://www.dropbox.com/">Dropbox</a> 下自动同步会非常安全。当然，你需要学会科学上网。</li>
<li>如果想在 Mac 下写作，那还是找一个不需要 Word 方式审稿的出版社吧，与我合作的电子工业出版社就是这样。博文视点的张春雨老师和刘芸老师(微信号:ly15201392806)都非常不错。</li>
<li>从交稿到出版至少也有 1 个月时间，做好心理准备，前期不要宣传太猛，我这回从签售会到网上能够买到，将近过了一个月。我由于不懂事，签售时宣传得太狠，结果弄得跟饥饿营销似的。</li>
</ul>


<h2>写作者的未来</h2>

<p>未来互联网的发展会使得传播更加容易，所以我相信：好的内容会更容易获得读者，出版社和书商作为渠道的力量会越来越弱。到那个时候，或许写作真正的能成为很多人的职业，并给他们提供不菲的收入。</p>

<p>到那个时候，我希望我能够成为其中的一员，不但可以随意地选择工作时间和地点，还可以享受传递知识的乐趣和成就感，希望这一天能够早日到来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2015/01/01/2014-summary/"/>
    <updated>2015-01-01T21:03:18+08:00</updated>
    <id>http://blog.devtang.com/blog/2015/01/01/2014-summary</id>
    <content type="html"><![CDATA[<p>2014年对于我来说是重要的一年，因为一方面我刚好年满30岁了，另一方面我的家庭生活和工作都经历了很大的变化。值得总结的包括：</p>

<ol>
<li>通过分享，进一步提高了自己的技术影响力</li>
<li>创业进一步取得成绩</li>
</ol>


<h2>技术分享</h2>

<p>2014年，我的技术分享包括：</p>

<ol>
<li>在自己的博客上发布了58篇技术文章。</li>
<li>在InfoQ网站发表了35期“iOS开发周报”。</li>
<li>在《程序员》杂志和CSDN网站上发表文章4篇，分别是《从Facebook看移动开发的发展》、《iOS应用安全开发概述》、《WWDC2014，苹果的“软件”发布会》、《那些好用的iOS开发工具》。</li>
<li>在InfoQ网站和《架构师》迷你书上发表文章4篇，分别是 《作为码农，我们为什么要写作》、《ReactiveCocoa &ndash; iOS开发的新框架》、《深入理解Tagged Pointer》、《专访《iOS测试指南》作者羋峮》。</li>
<li>受朋友邀请，在深圳微信、人人网和豆瓣做了三场技术分享，分享的主题都是：《深入Objective-C对象模型》。</li>
<li>11月2日在CSDN主办的MDCC移动开发者大会上做了一次分享，主题是：“猿题库的流量优化之路”。</li>
<li>12月20日在InfoQ主办的ArchSummit北京上做了一次分享，主题是：“猿题库客户端的技术细节”。</li>
<li>完成了图书<a href="https://github.com/tangqiaoboy/iOS-Pro">《iOS开发进阶》</a>的写作，100本签售版很快卖光，不过正式出版得到2015年1月中旬。</li>
<li>开源了两个猿题库客户端的iOS基础库：<a href="https://github.com/yuantiku/YTKKeyValueStore">YTKKeyValueStore</a> 和 <a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a>，分别得到了400多和700多的star。</li>
<li>微信公共帐号：iOSDevTips 发表了将近100篇推送，得到了10000多的粉丝。我的微博 <a href="http://www.weibo.com/tangqiaoboy">@唐巧_boy</a> 分享了上百条技术内容，得到了13000多的粉丝。</li>
</ol>


<p>年初的时候我还会怀疑自己的影响力，但现在已经习惯了成为iOS界的“大V”了。微博上分享技术类信息转发常常超过50次，也会常常被人@提醒来请教问题。</p>

<p>那我是如何树立起自己的技术影响力的呢？这其实主要是通过写博客的方式。我没有想到，从我2010年底开始学iOS开发，到现在短短4年时间，通过博客我能够获得这么大的影响力。现在我也看到越来越多的人加入到技术分享的行列中，用原创的技术博客给整个社区带来知识的分享，同时收获自己的成长和影响力。</p>

<h2>关于创业</h2>

<p>我们今年顺利拿到了<a href="http://tech.sina.com.cn/i/2014-07-22/11209510273.shtml">C轮1500万美元的融资</a>，估值达到1.25亿美元。我自己的创业感悟就是觉得决策团队非常牛逼，另外大家的执行力都非常强。我今年除了做日常的iOS开发外，还承担了一些别的事情，包括：</p>

<ul>
<li>指导了一位iOS开发零基础的实习生，现在他能够独立的进行开发，非常高兴看着他取得这么大的进步。</li>
<li>指导了一位实习生完成了Latex渲染引擎在移动端的移植（但其实主要是他的工作出色），这个工作使得我们的客户端在显示公式上和市面上所有同类应用相比具有决定性优势。</li>
<li>承担了校园招聘的组织工作，大家都被出面试题搞得焦头烂额的，不过最终我们还是搞定了，也收获了不少很有潜力的应届生。</li>
<li>开始负责小猿搜题这个项目，开始更多地思考产品方面的东西，更多的沟通工作，也开始为更多事情焦虑。</li>
</ul>


<p>负责小猿搜题项目对我是一个新的挑战，之前我作为一个iOS程序员，基本上都只需要专注于技术层面上的实现。而现在我不但需要参与产品的讨论，也需要做更多的组织沟通工作。我们团队仍然保持着强大的执行力，小猿搜题从7月底立项到9月底上线只经历了短短2个月时间。而我们的评测数据显示，我们在搜索质量上毫不逊于竞争对手。但我们需要改进的事情还有很多，希望小猿搜题的用户量和活跃度能够超过猿题库，成为又一个拥有海量初高中生用户的产品。</p>

<h2>读书</h2>

<p>今年为了更加深入的掌握Swift的函数式编程特性，学习了Scala语言以及coursea上的Funtional Programming相关的课程，不过仍然没有找到感觉。我感觉可能后面多写一些Swift程序才能有深入的理解。</p>

<p>今年也读了不少产品的书，包括《我的互联网方法论》、《思考的技术》、《失控》、《定位》等。</p>

<h2>个人Milestone</h2>

<ul>
<li>完成 《iOS开发进阶》的写作</li>
<li>创业完成C轮融资，开始负责小猿搜题项目</li>
<li>有了宝宝</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在创业两周年]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/01/startup-2nd-year-summary/"/>
    <updated>2014-10-01T22:06:20+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/01/startup-2nd-year-summary</id>
    <content type="html"><![CDATA[<p>一年前写了一篇名为<a href="http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note/">《写在创业一周年》</a>的文章，眼看创业已经两年多了，我就寻思着是不是再写一个创业两周年的总结。之所以拖了几个月，一是因为刚刚满两年的时候，我们公司刚刚拿下了<a href="http://tech.sina.com.cn/i/2014-07-22/11209510273.shtml">1500万美元的C轮融资</a>，但是还没有对外公开，所以不方便写。二是因为最近在忙<a href="http://www.yuansouti.com/">小猿搜题</a>这个新项目，顾不过来。现在正好国庆了，可以有时间好好思考总结下。</p>

<p>如果说创业第一年，我努力提高了自己的基本功：包括技术实力，沟通能力，执行力，情绪控制等。那么创业第二年，我的提高可能就是更多的思考了。为什么我们能够在短短两年时间就做到1.25亿美元的估值？我觉得核心的原因就是：正确的决策+强大的执行力。执行力在以前已经说过很多次了，这次想分享一下我们的决策。</p>

<p>创业两年，在我看来我们经历了两次重要的决策。</p>

<p>第一次重要决策是：放弃做粉笔网转而做猿题库。这其实可以拆成两件事情：一、放弃粉笔网，二、决定做猿题库。有些创业公司成功的关键是坚持，有些创业公司成功的关键是转型。在我看来这两者并不矛盾，其实关键是你想清楚了所有的事情。</p>

<p>放弃粉笔网是因为我们想清楚了这个模式是有问题的，所以我们并没有在这上面投入更多的市场推广费用，为团队节省了大量资金。这次试错，我们花的时间不到半年。不过也是因为运营粉笔网，我们发现了新的方向。我们的市场运营同事在邀请老师加入粉笔网时，发现了学生在手机上做题的需求，从而为团队找到了新的努力方向。</p>

<p><img src="/images/2013-summary-fenbi-close.jpg"></p>

<p>我们团队的特点就是执行力强，猿题库从计划到上线，我们只花了3个月。猿题库行测上线之后，收到了来自用户的良好反馈，这使得团队一下子确定了方向是正确的，大家的信心都恢复了。</p>

<p>第二次重要的决策是：切入K12市场。我们本来打算把所有职业类考试的客户端都做一遍。但是我们的CEO李勇觉得这个模式如果被竞争者抢先用来做K12市场后，我们会很难受。所以我们主动放弃了很多职业类考试类客户端的开发，转而做猿题库高考。</p>

<p>正因为这次决策，使得我们能够在短短半年时间，就积累起全中国超过10%的高考用户（每9个高考学生，就有一个用猿题库高考），随后的猿题库初高中整合版本也非常受学生欢迎，登上了AppStore教育榜首（我们没有刷榜）。也因为这次决策，才使得我们能够有C轮1.25亿美元这么高的估值。</p>

<p><img src="/images/ape_appstore_top.jpg"></p>

<p>虽然我没能参与这两次决策，但是我能感受到公司的管理层在创业上的深度思考，每一步都是经过仔细分析和推敲的。也因为这样，我们团队的大多数人就能够专心到事情的执行层面，把具体的事情做好。</p>

<p>另外，我们公司非常强调“透明”，李勇会通过邮件或者周五全体会议的方式，将公司的想法传递给每一个人，大家能够知道每一个决策背后的原因，从而在做事情的时候有一个最根本的指导。李勇也多次强调大家有问题要说出来，通过沟通达到相互之间信息的透明。</p>

<p>未来，猿题库应该还会经历很多重要决策，例如怎样用移动互联网的特点获得更多用户，例如如何给用户提供更多增值服务，获得收入。在线教育这个创业方向，与移动互联网结合起来，到底能有多大的想像空间，还需要我们一步一步探索。</p>

<p>我很期待着与团队同事一起，为教育开辟一块新的市场，最终改变教育。</p>

<p>最后，欢迎大家加入我们，这里有我们的<a href="http://www.yuantiku.com/campus/">职位介绍</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[适合码农工作时玩的游戏：Scrum]]></title>
    <link href="http://blog.devtang.com/blog/2014/09/13/scrum-introduction/"/>
    <updated>2014-09-13T18:23:17+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/09/13/scrum-introduction</id>
    <content type="html"><![CDATA[<p><img src="/images/scrum_logo.jpg"></p>

<h1>前言</h1>

<p>昨天遇到一个来自微软的面试者，在面试的最后，我简单介绍了一下我们团队使用一周一次的Scrum来做项目管理。他回答说：”我在微软也用Scrum，不过我们一周两次，时间在周二和周四上午，每次15分钟“。我听了就笑了，我说：“同学，你说的这个应该是Scrum的站立会议，Scrum实际上有4个会议，站立会议只是其中一个。另外，标准的站立会议应该每天一次，不是每周两次。”接着我给他介绍了Scrum的4个会议，每个会议的意义是什么，他若有所思。</p>

<p>今天和同事吃饭说起这件事情，同事pw说：在他所了解到的使用Scrum的公司里面，我们应该是执行Scrum做得最规范的，同时我们从Scrum实践中，收获了非常多。</p>

<p>大约在3年前（当时我们团队还在网易），我们团队开始尝试用Scrum来进行软件开发的项目管理。在经过了3年的摸索和调整后，我们不但多次保证了项目的顺利上线，而且建立起了适合自己团队的工作方式。</p>

<p>正如Scrum官方指南所说，“Scrum是易于理解，但难以精通的”，在此向大家分享我们实践的心得体会，希望更多的开发团队能够运用Scrum来流化自己的开发流程。</p>

<h1>Scrum是游戏规则</h1>

<p>在<a href="https://www.scrum.org/Scrum-Guide">Scrum官方网站</a>上，提供了中文版本的<a href="https://www.scrum.org/Portals/0/Documents/Scrum%20Guides/2013/Scrum-Guide-CN.pdf#zoom=100">《Scrum指南》</a>，这份只有14页的文档的封面上，写下了其最核心原则：游戏规则。</p>

<p><img src="/images/scrum_guide_cover.jpg"></p>

<p>什么是游戏规则？游戏规则是玩游戏的人为了更好地娱乐而制定的规则。所以Scrum的规则是为了让大家更开心，更有效地工作，而不是约束大家。事实上由于Scrum只是一个框架，所以在实践Scrum时，更多的规则需要团队成员共同制定，这更加体现了游戏规则的思想——大家自己制定的规则，必定是得到大家一致同意的、能让大家舒服工作的规则。</p>

<h1>Scrum是基于经验的</h1>

<p>Scrum强调经验的重要性，但是经验又是需要不断调整的，所以Scrum通过迭代增量的开发方式，来每次调整整个团队的经验，从而来优化可预测性。</p>

<p>例如，我们在开发猿题库时，在每轮Scrum的结束时，我们会开回顾会议，将大家每天处理待办事项的速度（我们称做日均Story Point）总结在Wiki中，如下图所示。这样当我们估计一个新一轮的迭代工作是否能够完成时，就可以参考前面几十次的经验，做出更加理性地判断。</p>

<p><img src="/images/scrum_story_point.jpg"></p>

<h1>Scrum的三大支柱</h1>

<p><img src="/images/scrum_keys.jpg"></p>

<p>透明性、检视、调整是Scrum的三大支柱。</p>

<ul>
<li>透明性是指：团队成员要达到对信息的完全共享，以便对观察到的信息有相同的理解。</li>
<li>检视是指：团队成员要不停地检查自己的状态，类似汽车的定期检查一样，通过检视了解当前项目的状态。</li>
<li>调整是指：团队成员发现出现了会影响项目进度的事件后，要及时寻找对策。</li>
</ul>


<p>以上的说法有些学术化，我们可以这样理解：</p>

<p>群体智商常常会出现低于个体智商的现象，这是因为个体之间的信息通常不一致，每个人的信息都是片面的，所以造成了观点的片面，而通常情况下团队领导由于接受到的信息更全面，所以他的决策考虑会更周到一些。</p>

<p>但是Scrum又强调团队需要是“自组织”的，这就需要群体进行决策而不是领导。为了群体更好的决策，所以Scrum特别强调信息的透明，这样大家的信息都是充分共享的，而检视是一种保证信息透明的方法，即定期地查看自己和团队的状态，有了信息的透明，这样团队成员就能共同发现项目执行中的问题，进而一起寻找解决办法，从而达到“自组织”的团队。</p>

<h1>Scrum的基础游戏规则</h1>

<p>Scrum定义了基础的游戏规则，在基础的游戏规则之上，团队可以依据自己的经验，制定更细致的规则。但更细致的规则不应该违背基础的规则。这就像国家的宪法一样，其它法律不能与宪法违背。</p>

<p>那我们来看看Scrum有哪些基础的游戏规则。</p>

<h2>角色定义</h2>

<p><img src="/images/scrum_roles.jpg"></p>

<p>玩三国杀的同学都知道，玩之前大家会抽身份：主公、反賊、忠臣、内奸。而Scrum的游戏规则里面，有以下几种身份角色：</p>

<ul>
<li><p>产品负责人：产品负责人是管理产品待办列表的唯一责任人，也是产品最终的责任人。（稍后我们在介绍计划会议时，解释什么是产品待办列表。）简单来说，最终如果产品没做好，应该扣产品负责人的工资。</p></li>
<li><p>开发团队：开发团队是负责将每轮Scrum迭代中计划的功能（可能是产品稿+美术稿的形式），交付成可发布的产品的各种专业人员。这里的各种专业人员包括：服务器端开发、Javascript前端开发、客户端开发、测试人员等。开发团队是真正在玩这个Scrum游戏的人，其他人（例如产品负责人都只是部分参与）。</p></li>
<li><p>Scrum Master：Scrum Master类似于杀人游戏中的法官，即游戏组织者。Scrum Master并不是团队的领导，他仅仅是做一些组织工作，而对于一个“自组织”的团队来说，其实真正需要组织的事情也不太多，所以他常常由开发团队中的某一个人兼任。</p></li>
</ul>


<h3>没有子团队</h3>

<p>在Scrum的官方文档中，这样说道：</p>

<blockquote><p>Scrum 不认可开发团队中的所谓“子团队”,无论是测试还是业务分析的成员都不能划分为“子团队”。此规则无一例外。</p></blockquote>

<p>所以我们看到，Scrum在定义角色的时候，强调开发团队中一个整体，包含把产品发布出来的所有相关的专业技术人员，并且开发团队共同承担开发的责任，只有这样，大家才能形成利益共同体，共同努力把产品做好。</p>

<p>这一点也解释了为什么很多大公司玩不好Scrum。拿百度举例，百度的一个项目就有很多“子团队”。在百度，前端开发人员属于前端组，移动端开发人员属于移动端组，测试有专门的QA组，PM也有专门的组。这样的划分，进而造成大家的绩效评估并不是完全由项目执行的好坏来决定，而PM也需要花很大精力去推动大家，这样的团队没有共同的利益，是很难做到“自组织”的。</p>

<h3>强调平等</h3>

<p>Scrum中仅定义了“开发团队”这个整体的角色，在“开发团队”内部，大家都是平等的。因为只有这样，大家才能更加自由的共享信息，共同决策，否则决策权仍然掌握在少部分人手里。在Scrum的官方文档中，是这样说的：</p>

<blockquote><p>Scrum 不认可开发团队成员的头衔，无论承担哪种工作他们都叫做开发人员。此规则无一例外。</p></blockquote>

<h3>游戏人数规则</h3>

<p>开发团队还有一个不能不说的特点，就是他的规模必须足够小，因为他强调信息的透明，如果人数过大，光沟通的成本就大到无法承受了，所以官方文档上推荐的人数是 10人以内（不包括产品负责人和Scrum Master，除非他们也参与开发）。</p>

<p>但是在实际执行中，由于业务的增长，团队人数很容易就超过10人。比如我们猿题库在创业时只有不到10人，现在已经成长到几十人了。这个时候，比较好的做法是进行团队的切分，比如我们试过将猿题库的服务器端和客户端进行拆分，这样保证每个团队还是在10人以内。如果以后再增长，可能客户端会再进行拆分成iOS团队和Android团队。</p>

<h3>游戏时间</h3>

<p>Scrum对每一轮的迭代时间并没有严格的规定，但它要求是小于一个月。对于每一轮的迭代，Scrum把它称作Sprint（冲刺）。</p>

<p>作为创业公司，我们在最近两年都实践着一周一次Sprint的方式来工作。一周一次Sprint能够保证调整足够快，Sprint执行中是不鼓励需求改动的。所以一周一次的Sprint能够做到，对于比较急迫的需求改动，在下次Sprint时（下周）就可以执行。</p>

<p>一周一次的Sprint也有不少问题，由于偏离本文主题，所以就不展开介绍了。现在我们的猿题库直播课项目组也在尝试进行2周一次的Sprint。总之，Sprint多长是由开发团队根据项目的具体特点来决定的，只要不超过一个月即可。</p>

<h2>游戏玩法</h2>

<p>讲了半天，终于讲到核心了，到底怎么玩这个游戏啊！为了更好的理解，我们先看看杀人游戏的玩法，杀人游戏定义了如下几个事件：</p>

<ol>
<li>天黑请闭眼，这个时候大家都闭上眼睛</li>
<li>杀手睁眼，杀手杀人，杀手闭眼</li>
<li>警察睁眼，警察检查，警察闭眼</li>
<li>天亮了，宣布谁死了，大家讨论并投票谁是杀手，投出的嫌疑人被杀死。如果警察或杀手死了，宣布游戏结束，否则跳到第1步。</li>
</ol>


<p>刚好，Scrum也定义了4个事件，分别是：</p>

<ol>
<li>计划会议</li>
<li>每日站立会议</li>
<li>评审会议</li>
<li>回顾会议</li>
</ol>


<p>以下我们来详细介绍一下这4个会议到底要具体怎么做。</p>

<h3>计划会议</h3>

<p>计划会议主要通过讨论，完成两件事情：做什么、怎么做。</p>

<p>关于“做什么”：产品负责人会给出一个产品待办列表，然后由团队成员来根据预计的工作量以及以往的表现，来挑选接下来的Sprint需要完成的待办项。这里的特点是：由开发团队成员自己来挑选待办项，而不是由传统意义上的Tech Leader或产品负责人来挑选。这样保证了开发任务是由团队成员自己决定的，他更有责任心把事情完成。同时作为产品负责人，有必要非常明确地告诉开发团队每一个待办项的意义和重要性，这样开发团队才能做出有利于产品的挑选工作。</p>

<p>关于“怎么做”：开发团队从待办列表中挑选完需要完成的待办项之后，就需要对每个要做的待办项进行评估。评估的工作就是讨论具体怎么做，这包括技术架构、实现细节的讨论。只有讨论得非常清楚之后，这项工作的工作量才会比较清楚。</p>

<p>在讨论怎么做之后，一些敏捷公司推荐使用“出牌”的方式来评估工作量，我们也采用了这种方式，我们还专门做了一套Scrum扑克，用于出牌。如下图所示：</p>

<p><img src="/images/scrum_card.jpg"></p>

<p>出牌的规则是每个人出一张牌，用牌上的数字表示当前工作的工作量。通常大家还会事先约定好数字2代表的工作量，以保证大家的标准相同。为了避免相互影响，大家先把要出的牌扣着，然后同时翻开。之后，出最高分的和出最低分的同学要表达意见，说明为什么自己估计成这样，大家讨论，这样的过程可以保证大家的信息都是透明的，即没有忽略掉的技术实现难度或细节，在信息充分共享的情况下，通常大家第二次出牌时就可以达成一致了。</p>

<h3>每日站立会议</h3>

<p>每日站立会议是进行检视的方法。通常选择固定时间（我们是每天早上10点10分开），以养成团队工作习惯来避免组织成本。站立会议要尽量的短，通常控制在15分钟以内，选择站着开会，也是让大家有更大的预期快速结束。</p>

<p>站立会议主要是为了沟通，以及发现潜在可能的问题，在站立会议上，团队成员每个人要讲3句话：</p>

<ol>
<li>我昨天做了什么</li>
<li>我今天打算做什么</li>
<li>我遇到了什么问题</li>
</ol>


<p>通过这3句话来达到高效沟通的目的，对于会上提到的问题，通常是下来相关人员自行解决。</p>

<p>站立会议通常能够发现项目进展的状态是否顺利，从而尽早采取相应的措施。时间较长的Sprint可以配合燃尽图，更方便地审视项目进展速度。</p>

<h3>评审会议</h3>

<p>Sprint 评审会议在 Sprint 结束时举行，用于检查计划中的工作，哪些完成了，哪些没有完成。在我们的实践中，我们会让开发的同事演示自己所做的功能，然后PM会看这个功能是否达到了要求。</p>

<h3>回顾会议</h3>

<p>回顾会议是开发团队检视自己，发现团队运转中的问题，并且定制游戏规则的过程。通过对前一个Sprint中的人、关系、过程、工具进行检视，团队成员能够总结出做得好的，和做得不好的。进而制定一个改进的方案。</p>

<p>回顾会议是Scrum创建“自组织”团队的关键，它将团队自我改进变成了一个例行的会议，在这个会议中，讨论的都是大家对该游戏的感受，包括好的和不好的，最终大家为了玩得更爽，就会发扬好的，努力避免不好的，成为一个能够自我进化的集体。</p>

<p>需要注意的是，回顾会议不应该成为吐槽大会，大家应该本着发现问题，解决问题的态度来讨论。例如：如果在回顾会议仅仅是抱怨产品老是改需求，或者抱怨时间不够，而不提出解决方案的话，是非常不好的。</p>

<p>提出问题是容易的，麻烦的是提出解决方案。我们的老大郭常圳提出了一个办法，即我们思考：“如果再来一次，我们能不能做得更好”？如果我们发现，如果再来一次，由于客观原则，我们可能仍然无法避免同样的问题，那么我们就选择坦然接受而不是抱怨。</p>

<p>因为很多时候本来就没有完美的、没有任何问题的解决方案，这就像软件都有Bug一样，如果Bug不可避免，我们就选择发现的时候尽量修复而不是编码的时候避免。</p>

<h3>框架图</h3>

<p>下图介绍了Scrum的整个框架：</p>

<p><img src="/images/scrum_meetings.jpg"></p>

<h2>一些问题</h2>

<h3>有什么辅助Scrum的工具？</h3>

<p>我们使用的是Redmine的Scrum插件来开相关的Scrum会议。我们Scrum的回顾会议总结放在内部的Wiki上。也有团队喜欢直接用白板+便签来完成Scrum的相关会议。像JIRA一类的专业项目管理软件，也都支持Scrum。</p>

<h3>游戏超时怎么办？</h3>

<p>游戏超时通常就意味着游戏结束。在Scrum这个游戏中，团队成员不接受Sprint延期。所以不管有没有完成所有任务，评审会议和回顾会议都需要按时开，没有完成的任务需要进行仔细讨论，分析其原因到底是什么，从而在下一轮Sprint中尽量避免出现同样的问题。</p>

<h3>开发团队自己挑任务，会不会造成项目进度很慢？</h3>

<p>通常情况下不会。如果我们真正把Scrum做好，大家能享受到Scrum带来的各种好处，例如团队每个人都能参与决策团队做事方式，每个人都能积极的追求效率，而一次次成功的Scrum，带给大家的成就感也是巨大的。</p>

<p>好的Scrum执行还能保证团队不会随意加班，我们已经很久没有周末加班了，平时晚上大部分时间也都能做到按时下班，这对于互联网公司来说，几乎是不可想像的。</p>

<p>不加班只是一个附属品，最重要的是按时发布产品，我们创业2年多来从来没有延期发布过产品。这样使得我们的运营推广计划能够非常有序地执行。</p>

<p>需要强调的是，不加班并不是代表我们的工作轻松，通常情况下我们的Scrum安排还是比较紧张的，因为我们都想创业时跑得快一些。不加班也不是我们的原则，我们的原则是按时发布产品，所以当有一些特殊情况产生时，我们也会适当的加班。我们只是不把加班当作一个常态的工作方式，因为我们认为工作效率比工作时长更为重要。另一方面我们认为创业是长跑，保持良好的发布节奏已经非常好了，长期加班造成的身体懈怠可能会造成工作效率的损失。</p>

<h3>Scrum适合所有团队吗？</h3>

<p>首先Scrum是非常适合程序员的，因为程序员天生就不喜欢约束。Scrum的“自组织”团队的思想很容易让程序员感觉到自己是团队的主人。另外Scrum是非常反会议的，4个会议都严格地规定了时间长度，所以可以让程序员有充足的时间花在编码上。Scrum也是比较反需求临时变更的，由于Sprint周期短（我们才一周），所以变更可以根据重要程度放到下一个Sprint中。</p>

<p>Scrum非常强调团队作为一个整体来做事情，所以并没有刻意地去评估每个人具体的工作量。这需要团队每个人都比较自觉。当然，由于强调透明和检视，所以团队内如果有人懈怠的话，团队里其他人是很容易发现的。</p>

<p>所以，如果你的团队人数在10人左右，又能保证团队是一个整体为项目负责，那就有了尝试Scrum的基础。</p>

<h3>为什么很多公司用不好Scrum？</h3>

<p>Scrum指南里面也提到，Scrum是“易于学习，难于精通的”。所以Scrum本来就比较难做好。我感觉到几个比较容易出现的问题是：</p>

<ol>
<li><p>团队里面有人不信Scrum能比以前的软件开发方式更好。游戏规则使终是游戏规则，如果有人不想玩游戏的话，游戏玩起来就没有那么愉快了。真正想做好Scrum就得认真学习Scrum指南，然后努力遵守Scrum的规则。只有当大家都努力玩这个游戏时，才能享受游戏的乐趣。</p></li>
<li><p>随意更改Scrum的规则。例如我以前在有道的团队就把Scrum的每日站会改成了每周二，周四开一个坐会，开会的方式也变成产品经理询问进度，各个技术人员汇报的方式，会议一次要开半个多小时。这一下子就把每日站会做得变味了。</p></li>
<li><p>难以组建团队。之前说过像百度这类大公司，其公司文化不是一朝一夕形成的。Scrum的工作方式要求大家都为项目完全负责，而很多传统公司按职能来划分团队，例如PM团队、客户端团队、前端团队等，这会影响Scrum的执行。</p></li>
</ol>


<h3>Scrum是终极大招吗</h3>

<p>Scrum不是银弹，它并不能解决所有问题，实际上，很多时候它根本不提供解决问题的方法。Scrum本身只是一个框架，通过这个框架，我们更容易发现项目运行中的问题，通过定期的回顾会议来解决问题。</p>

<h1>结束语</h1>

<p>本文旨在通过介绍Scrum的核心思想和基本框架，吸引大家了解Scrum。要实践Scrum，还是需要进一步的学习才行。欢迎大家详细阅读<a href="https://www.scrum.org/Portals/0/Documents/Scrum%20Guides/2013/Scrum-Guide-CN.pdf#zoom=100">《Scrum指南》</a>，然后尝试使用Scrum来让自己每天的工作变得轻松愉快。</p>

<p>PS：我们的公司猿题库创业两年，做在线教育方向，不久前顺利拿到了1500万美元的C轮融资。我们现在很缺人，也欢迎大家加入我们，和我们一起玩Scrum游戏，感兴趣的可以看：<a href="http://www.yuantiku.com/campus/">职位介绍</a>。</p>

<p>愿大家玩得开心～</p>
]]></content>
  </entry>
  
</feed>
