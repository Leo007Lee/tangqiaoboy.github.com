<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: summary | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/summary/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2012-03-18T22:34:00+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[象写程序一样写博客：搭建基于github的博客]]></title>
    <link href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/"/>
    <updated>2012-02-10T19:55:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github</id>
    <content type="html"><![CDATA[<p>github真是无所不能。其<a href="http://pages.github.com/">Pages功能</a>支持上传html，并且在页面中显示。于是有好事者做了一个基于github的博客管理工具：<a href="http://octopress.org/">octopress</a>，基本原理是用git来管理你的文章，然后最终发布到github上成为一个独立博客站点。由于github支持CNAME域名指向，所以如果有独立域名的话，可以基于这些做出一个专业的博客站点出来。</p>

<p>本博客就是完全基于此搭建起来的，在使用了2个月之后，我将原系统根据中国人的需求做了一些配置，去掉了GFW会挡住的google font api，以及替换掉了速度超慢的国外的评论系统，也加上了分享到国内的微博的功能。现在把这些都总结出来，希望大家都可以方便地搭建基于github的博客来。</p>

<!--more-->


<h2>安装</h2>

<p>首先说说怎么安装相应的工具。其实这些内容在 <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> 上都有，我只是把它大概翻译了一下。</p>

<h3>安装rvm和ruby</h3>

<p>参考文档：<a href="http://octopress.org/docs/setup/rvm/">http://octopress.org/docs/setup/rvm/</a>，主要3步：</p>

<p>首先安装：
<code>
bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code>
然后设置classpath:
```
echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' >> ~/.bash_profile
source ~/.bash_profile</p>

<h1>If using Zsh do this instead</h1>

<p>echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' >> ~/.zshrc
source ~/.zshrc
<code>
最后安装ruby:
</code>
rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
rvm rubygems latest
```</p>

<h3>安装Octopress</h3>

<p>首先从github上将源码clone下来：
<code>
git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
ruby --version  # Should report Ruby 1.9.2
</code></p>

<p>然后安装依赖:
<code>
gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code>
最后安装Octopress
<code>
rake install
</code></p>

<h3>配置</h3>

<p>安装好之后可以简单配置一下：</p>

<ul>
<li>主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。
注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。</li>
<li>修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。</li>
</ul>


<h2>设置github账号</h2>

<p>基于github的博客当然需要先注册github账号，Github的账号注册地址是：<a href="https://github.com/signup/free">https://github.com/signup/free</a> 。申请好github账号后，建一个名为 username.github.com 的代码仓库。这里注意username必须是和你的账号名一致。</p>

<h2>写博客方法</h2>

<p>然后就可以写博客啦～ 写博客主要是用以下几个命令，<a href="http://octopress.org/docs/blogging/">这里</a>有详细介绍：</p>

<ul>
<li>rake new_post['article name'] 生成博文框架，然后修改生成的文件即可</li>
<li>rake generate 生成静态文件</li>
<li>rake watch 检测文件变化，实时生成新内容</li>
<li>rake preview 在本机4000端口生成访问内容</li>
<li>rake deploy 发布文件</li>
</ul>


<p>博文是采用markdown语法，另外增加了一些扩充的插件，markdown的介绍文章网上可以搜到很多，比如<a href="http://daringfireball.net/projects/markdown/">这个</a>。</p>

<h2>高级配置</h2>

<p>我主要介绍一下如何配置评论和分享到微博功能。步骤如下：</p>

<ul>
<li>在_config.yml中增加一项： weibo_share: true</li>
<li>修改 source/_includes/post/sharing.html ，增加：
```
   // 下面的大括号是全角的，如果复制，请自行改成半角
  ｛% if site.weibo_share %｝

<pre><code>  ｛% include post/weibo.html %｝
</code></pre>

<p>  ｛% endif %｝
```</p></li>
<li>增加文件：source/_includes/post/weibo.html</li>
<li>访问 <a href="http://www.jiathis.com/">http://www.jiathis.com/</a> ，获取分享的代码</li>
<li>访问 <a href="http://uyan.cc/">http://uyan.cc/</a> ，获得评论的代码</li>
<li>将上面2步的代码都加入到weibo.html中即可</li>
</ul>


<h2>Tips</h2>

<h4>从wordpress迁移到github</h4>

<p>这儿有一篇文章介绍了如何做迁移：
<a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></p>

<h4>图片</h4>

<p>如果要在文章中上传图片，直接copy到 /source/images目录下即可。在文章中可以直接引用。也可以选一些大的图床站点，例如flickr之类的放在那边。</p>

<h4>域名</h4>

<p>如果你象我一样有自己的域名，可以将域名指向这个博客，具体步骤是：</p>

<ul>
<li>在域名管理中，建立一个CNAME指向，将你的域名指向 yourname.github.com</li>
<li>建一个名为CNAME的文件在source目录下，然后将自己的域名输入进去。</li>
<li>将内容push到github后，第一次生效大概等1小时，之后你就可以用自己的域名访问了。</li>
</ul>


<h4>参考</h4>

<p>这儿还有一些参考的文章：</p>

<ul>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">http://www.yangzhiping.com/tech/octopress.html</a></li>
<li><a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我们必须自学]]></title>
    <link href="http://blog.devtang.com/blog/2012/01/20/we-must-self-learning/"/>
    <updated>2012-01-20T23:53:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/01/20/we-must-self-learning</id>
    <content type="html"><![CDATA[<p>前两天看到一个文章，题名为<a href="http://www.aqee.net/all-programmers-are-self-taught/">《所有的程序员都是自学成才》</a>。当时没有什么特别的想法，只是觉得自己也确实是基本上靠自学来掌握新的知识的。但是今天在公车上没事好好想了一想，想明白了，原来对于程序员来说，只能自学才能成才。</p>

<!--more-->


<p>这个道理似乎有点奇怪，因为我们从小都是由老师教授新知识的。我自己也实验过，掌握同样的高中课本上的知识，自己自学的速度通常比老师讲授的速度要慢一倍的时间。即一个知识点，如果你自己要看2小时的书才能理解的话，有好的老师给你讲解的话，只需要一个小时就够了。所以，我一直希望在学习各种东西的时候都能去听一些课程，因为我认为这样节省了我学习的时间。</p>

<p>但是这个道理在程序员这一行行不通，为什么这么说呢？原因有2点：</p>

<ol>
<li>计算机编程相关的知识更新速度很快。同时，国内的IT类资料的翻译质量相当差，原创的优秀书籍也很少。所以，我们通常需要靠阅读英文才能掌握最新的资料。</li>
<li>计算机编程知识需要较多的专业知识积累和实践。</li>
</ol>


<p>如果一个培训机构有一个老师，他强到能够通过自己做一些项目来积累很多专业知识和实践，并且不断地从国外资料上学习最新的技术。那么这个人在企业里面会比在国内的培训机构更有施展自己能力的空间。国内的培训机构因为受众面的原因，基本上还是培养那种没有自学能力，只能做低级技术活的代码民工，所以对老师的技术要求不会那么高，自然也不会给出很诱人的薪水。但是企业就不一样了，企业需要不停地利用新技术来增强自己的产品竞争力，所以对于IT企业来说，产品的竞争就是人才的竞争，所以给优秀的人能够开出很高的薪水。</p>

<p>所以，我们不能期望从IT类培训机构中学习到最新的技术，一切只能通过我们自学。当然，自学之后在同行之间相互交流，对于我们的技术成长也是很有用的。</p>

<p>所以，各位同行，别想有人能够教你，一切还是靠自己吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011年个人总结]]></title>
    <link href="http://blog.devtang.com/blog/2012/01/01/2011-summary/"/>
    <updated>2012-01-01T18:47:00+08:00</updated>
    <id>http://blog.devtang.com/blog/2012/01/01/2011-summary</id>
    <content type="html"><![CDATA[<p>2011年的过去了，总结一下今年的成长和收获。</p>

<h3>流水账</h3>

<p>2011年是我完整工作的一年。不过这一年的工作也变动频繁。</p>

<p>首先是从1月份专门搞uvs，把uvs升级成ouvs。升级后增加了对于时间段搜索的支持。另一方面，周末在家做的topcoder component终于拿到了一次第一。这是一个做IBM Symphony插件的项目，因为之前在IBM实习一直做相关的东西，所以能够很快的做出来，那个东西tricky的东西很多，所以基本上没有人做。不过除我之外还有一个会做的，竞争就只是我和他之间了，不过最终我比他得分稍高一点，拿到了800$的第一名奖金，另外digital run的排名还多拿了100多$。一月份的时候把这个钱通过wireless
transfer转到了我的工商银行账号，然后马上换成了人民币。第一次尝到拿美元，还是很开心的。</p>

<!--more-->


<p>Topcoder比赛结果，<a href="http://community.topcoder.com/tc?module=CompContestDetails&amp;pj=30014856">来源</a>
<img src="/images/topcoder_component_rank.png"></p>

<p>3月份，oxygen离职去了知乎。其实我也明白微博的竞争似乎已经结束，某浪和某迅基本已经占位成功。在产品上没有新意，宣传上没有增加投入的情况下，要超过他们似乎是不可能的事。并且我也渐渐意识到微博本身的价值有些被过高估计，新浪的股票一路从50多涨到120多，现在又回归50多似乎说明了这一点。也是从3月份开始，我开始带实习生tianye了。这是我第一次带实习生，感觉自己很多细节上还是没有处理好，比起郭老大来说，有很多考虑不周的地方。不过至少我是尽力想做好这个mentor的。</p>

<p><img src="/images/sina_stock_2011.png"></p>

<p>也是从3月份开始，我开始跟着perfectworks做前端开发了。前端开发在春节就翻过一些书，有一些基本概念了。perfectworks在前端开发这块很牛，也很希望跟着他多学习一些东西。因为前端的tricky很多，如果没有牛人带的话，成长会很慢。后来果然在他的指导下，进步很快，没多久就开始写前端代码了，后来因为转组，没有再做前端，但js相关的开发经验在后来给我带来了挺多优势，比如做笔记的一些功能的时候，就是内嵌web浏览器来完成的，这里面就涉及挺多的js开发。由于有前端开发的经验，这部分的开发工作在我转到做笔记开发之后都派上了用场。</p>

<p>5月份做了一次组内的talk，讲java gc。这也是我们开始尝试把有道的技术分享的文化带到微博组。开始的分享都是大家先自己研究，然后做报告。做java
gc的分享也让我好好学习了一下java的内存回收技术。后来面试的时候发现，真正研究过这块的人还真是少之又少。从5月份开始，我们也尝试进行用scrum的方式进行项目开发。每2周一个sprint。后来回有道发现，在实施scrum开发实践方面，我们是贯彻的最彻底的。我们坚持了每天的站会，出牌方式的评估时间，严格按照scrum的要求来做项目计划和功能分解。每天会详细标明每个功能点的开发进度以及遇到的问题。后来了解到其他组的实践，都比我们山寨得多，比如有些组开发时间是由产品经理定的，有些组没有站会，有些组根本没有详细做功能分解，更别说每天更新status了。这一点也让我认识到微博团队是一个很优秀的团队。</p>

<p>6月份，我经历了很大的变动,最终选择回到有道，在选组上，river给了我们很多帮助，各组的leader的热情也让我们受宠若惊。一开始我是坚定想选择infra组，做搜索的底层开发的，因为这样我的工作也算是有延续的。但是后来了解到ouvs开发已经基本完毕，只剩下一些bug fix或者小修小改的事情，我就感觉没那么有热情了。加上jwh说云存储这边需要iOS开发的人。正好当时xc把他的mac bookpro转让给了我，让我也有机会去了解iphone开发。其实从去年就觉得移动开发这块会是一个趋势，可能造就很多伟大的公司和产品。当时就买了android开发相关的书籍在看。所以自己觉得这正好是一个机会，可以转到移动开发这个领域。在决定之前，自己还是犹豫了好久，因为在后端做了一年多了，多少也积累了不少经验。转到移动开发，又是一个全新的开始，一切又需要重头做起。不过最终还是觉得应该乘年轻做自己喜欢做的事情，加上自己看好这个领域，所以就决定去云存储组做有道笔记的开发了。</p>

<p>7月份初，微博的工作交接完毕，我专心开始学习iOS开发。其实公司给我的时间不多，差不多只有2周的时间学习，中间还要处理一些交接的遗留问题以及iphone版javascript相关的bug。对，我差不多刚进去就开始改js的bug了。那段时间是我最辛苦的一段时间，因为组内也没有对iOS开发特别熟的人，我只有自己学习，而公司内部的iOS交流气氛又不太好，各组的iOS开发同事交流不多。我基本上把周末和晚上的时间都用来学习iOS开发了。半个月之后，基本能够上手写代码了。之后做了2次关于iphone开发的talk,拉huangdx做了一次facebook320的Talk,给测试的同事做了一次iphone模拟器使用的talk,另外也组织建了一个iOS开发的泡泡群，拉上了网站部的同事来一起交流。基本上有一个交流的环境了，不过大家交流的习惯还不怎么强，所以群里面很多时候都比较冷清，这一点使我比较苦恼。</p>

<p>9月初，完成了有道笔记手写和涂鸦功能的开发。中间也被拉去开发了有道词典的图片广告功能。9月底开始思考如何做ipad版笔记。</p>

<p>10月份开始做ipad版的开发，最终于12月初提交上线。上线后排名一路上升，最高达到了效率类第一名的位置。现在一直稳定在效率类前5名。</p>

<p>2011-12-20的app store截图：<img src="/images/ynote_ipad_rank_2011-12-20.png"></p>

<p>10月份做了一个个人项目，图书馆借书系统的改造。把借书改成分布式的，每个人都要承担图书的保管任务，这样就不会丢书了。虽然只用了3天时间，但是能在工作时间做个人项目感觉还是挺爽的。</p>

<p>12月份开始带第二个实习生maojj了。希望能把他带好。</p>

<h3>主要工作</h3>

<p>总结起来，自己这一年主要的工作是：</p>

<ul>
<li>1月-3月 微博搜索功能开发和维护</li>
<li>4月-6月 微博前端开发</li>
<li>7月-12月 有道笔记iphone,ipad版开发</li>
</ul>


<h3>技术成长</h3>

<p>今年是自己技术语言扩张最快的一年，学习并掌握了：</p>

<ul>
<li>javascript、objectiveC 2种新的开发语言。</li>
<li>对于shell脚本的掌握也有提升。</li>
<li>git版本管理。基本可以用git来做代码管理了。</li>
<li>正在看python语言，打算进一步提高自己的脚本能力。</li>
</ul>


<p>值得一提的是，由于iphone开发的中文资料太少，今年接触和阅读了大量英文书和视频。在听完stanford的iphone开发课程和苹果的WWDC2011视频后，英语的听力水平提高不少。iphone开发的各种问题，也基本只能在stackoverflow.com上找到解答，所以现在已经很习惯直接阅读英文资料了。</p>

<h3>读书</h3>

<p>这一年，我也看了很多书，包括：</p>

<ul>
<li>后端开发的各种书：《java程序员职场全攻略》等</li>
<li>前端开发的各种书：《ppk谈javascript》, 《Professional Javascript for Web Developers》等</li>
<li>iphone开发的各种书：《iphone3开发基础教程》《iphone开发秘籍》、《iOS4 in Action》等</li>
<li>工作效率类的书：《git权威指南》，《鸟哥的linux私房菜》，《vim book》，《番茄工作法》等</li>
<li>传记类：《乔布斯传》，《编程人生》，《黑客与画家》，《软件随想录》</li>
</ul>


<h3>变化</h3>

<p>这一年感觉自己比较大的变化：</p>

<ul>
<li>在买了mac book后，由于mac book下的游戏比较少，所以更加注重学习脚本和工具了。脚本能力有不少长进。</li>
<li>在做完图书馆个人项目后，更加强调执行力了。推动了公司内部iOS开发的交流。也更加注意通过写博客或wiki来总结知识。</li>
<li>感觉身体由于久坐更差了，脖子和肩膀，还有手腕都常常有疼痛现象。所以开始注意加强锻炼了。除了早上打五禽戏，晚上周三会去游泳。</li>
</ul>


<h3>个人Milestone</h3>

<ul>
<li>2011-04-07 开始维护自己的原创博客, 原本在<a href="http://tangqiaoboy.blog.163.com">网易博客</a>上,2011-11-05购买了个人域名devtang.com, 12月份将博客移动到github下，地址是: <a href="http://blog.devtang.com">http://blog.devtang.com</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
