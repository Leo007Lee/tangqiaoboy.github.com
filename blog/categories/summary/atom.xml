<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: summary | 唐巧的技术博客]]></title>
  <link href="http://blog.devtang.com/blog/categories/summary/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2014-12-01T21:36:39+08:00</updated>
  <id>http://blog.devtang.com/</id>
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[写在创业两周年]]></title>
    <link href="http://blog.devtang.com/blog/2014/10/01/startup-2nd-year-summary/"/>
    <updated>2014-10-01T22:06:20+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/10/01/startup-2nd-year-summary</id>
    <content type="html"><![CDATA[<p>一年前写了一篇名为<a href="http://blog.devtang.com/blog/2013/06/17/startup-anniversary-note/">《写在创业一周年》</a>的文章，眼看创业已经两年多了，我就寻思着是不是再写一个创业两周年的总结。之所以拖了几个月，一是因为刚刚满两年的时候，我们公司刚刚拿下了<a href="http://tech.sina.com.cn/i/2014-07-22/11209510273.shtml">1500万美元的C轮融资</a>，但是还没有对外公开，所以不方便写。二是因为最近在忙<a href="http://www.yuansouti.com/">小猿搜题</a>这个新项目，顾不过来。现在正好国庆了，可以有时间好好思考总结下。</p>

<p>如果说创业第一年，我努力提高了自己的基本功：包括技术实力，沟通能力，执行力，情绪控制等。那么创业第二年，我的提高可能就是更多的思考了。为什么我们能够在短短两年时间就做到1.25亿美元的估值？我觉得核心的原因就是：正确的决策+强大的执行力。执行力在以前已经说过很多次了，这次想分享一下我们的决策。</p>

<p>创业两年，在我看来我们经历了两次重要的决策。</p>

<p>第一次重要决策是：放弃做粉笔网转而做猿题库。这其实可以拆成两件事情：一、放弃粉笔网，二、决定做猿题库。有些创业公司成功的关键是坚持，有些创业公司成功的关键是转型。在我看来这两者并不矛盾，其实关键是你想清楚了所有的事情。</p>

<p>放弃粉笔网是因为我们想清楚了这个模式是有问题的，所以我们并没有在这上面投入更多的市场推广费用，为团队节省了大量资金。这次试错，我们花的时间不到半年。不过也是因为运营粉笔网，我们发现了新的方向。我们的市场运营同事在邀请老师加入粉笔网时，发现了学生在手机上做题的需求，从而为团队找到了新的努力方向。</p>

<p><img src="/images/2013-summary-fenbi-close.jpg"></p>

<p>我们团队的特点就是执行力强，猿题库从计划到上线，我们只花了3个月。猿题库行测上线之后，收到了来自用户的良好反馈，这使得团队一下子确定了方向是正确的，大家的信心都恢复了。</p>

<p>第二次重要的决策是：切入K12市场。我们本来打算把所有职业类考试的客户端都做一遍。但是我们的CEO李勇觉得这个模式如果被竞争者抢先用来做K12市场后，我们会很难受。所以我们主动放弃了很多职业类考试类客户端的开发，转而做猿题库高考。</p>

<p>正因为这次决策，使得我们能够在短短半年时间，就积累起全中国超过10%的高考用户（每9个高考学生，就有一个用猿题库高考），随后的猿题库初高中整合版本也非常受学生欢迎，登上了AppStore教育榜首（我们没有刷榜）。也因为这次决策，才使得我们能够有C轮1.25亿美元这么高的估值。</p>

<p><img src="/images/ape_appstore_top.jpg"></p>

<p>虽然我没能参与这两次决策，但是我能感受到公司的管理层在创业上的深度思考，每一步都是经过仔细分析和推敲的。也因为这样，我们团队的大多数人就能够专心到事情的执行层面，把具体的事情做好。</p>

<p>另外，我们公司非常强调“透明”，李勇会通过邮件或者周五全体会议的方式，将公司的想法传递给每一个人，大家能够知道每一个决策背后的原因，从而在做事情的时候有一个最根本的指导。李勇也多次强调大家有问题要说出来，通过沟通达到相互之间信息的透明。</p>

<p>未来，猿题库应该还会经历很多重要决策，例如怎样用移动互联网的特点获得更多用户，例如如何给用户提供更多增值服务，获得收入。在线教育这个创业方向，与移动互联网结合起来，到底能有多大的想像空间，还需要我们一步一步探索。</p>

<p>我很期待着与团队同事一起，为教育开辟一块新的市场，最终改变教育。</p>

<p>最后，欢迎大家加入我们，这里有我们的<a href="http://www.yuantiku.com/campus/">职位介绍</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[适合码农工作时玩的游戏：Scrum]]></title>
    <link href="http://blog.devtang.com/blog/2014/09/13/scrum-introduction/"/>
    <updated>2014-09-13T18:23:17+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/09/13/scrum-introduction</id>
    <content type="html"><![CDATA[<p><img src="/images/scrum_logo.jpg"></p>

<h1>前言</h1>

<p>昨天遇到一个来自微软的面试者，在面试的最后，我简单介绍了一下我们团队使用一周一次的Scrum来做项目管理。他回答说：”我在微软也用Scrum，不过我们一周两次，时间在周二和周四上午，每次15分钟“。我听了就笑了，我说：“同学，你说的这个应该是Scrum的站立会议，Scrum实际上有4个会议，站立会议只是其中一个。另外，标准的站立会议应该每天一次，不是每周两次。”接着我给他介绍了Scrum的4个会议，每个会议的意义是什么，他若有所思。</p>

<p>今天和同事吃饭说起这件事情，同事pw说：在他所了解到的使用Scrum的公司里面，我们应该是执行Scrum做得最规范的，同时我们从Scrum实践中，收获了非常多。</p>

<p>大约在3年前（当时我们团队还在网易），我们团队开始尝试用Scrum来进行软件开发的项目管理。在经过了3年的摸索和调整后，我们不但多次保证了项目的顺利上线，而且建立起了适合自己团队的工作方式。</p>

<p>正如Scrum官方指南所说，“Scrum是易于理解，但难以精通的”，在此向大家分享我们实践的心得体会，希望更多的开发团队能够运用Scrum来流化自己的开发流程。</p>

<h1>Scrum是游戏规则</h1>

<p>在<a href="https://www.scrum.org/Scrum-Guide">Scrum官方网站</a>上，提供了中文版本的<a href="https://www.scrum.org/Portals/0/Documents/Scrum%20Guides/2013/Scrum-Guide-CN.pdf#zoom=100">《Scrum指南》</a>，这份只有14页的文档的封面上，写下了其最核心原则：游戏规则。</p>

<p><img src="/images/scrum_guide_cover.jpg"></p>

<p>什么是游戏规则？游戏规则是玩游戏的人为了更好地娱乐而制定的规则。所以Scrum的规则是为了让大家更开心，更有效地工作，而不是约束大家。事实上由于Scrum只是一个框架，所以在实践Scrum时，更多的规则需要团队成员共同制定，这更加体现了游戏规则的思想——大家自己制定的规则，必定是得到大家一致同意的、能让大家舒服工作的规则。</p>

<h1>Scrum是基于经验的</h1>

<p>Scrum强调经验的重要性，但是经验又是需要不断调整的，所以Scrum通过迭代增量的开发方式，来每次调整整个团队的经验，从而来优化可预测性。</p>

<p>例如，我们在开发猿题库时，在每轮Scrum的结束时，我们会开回顾会议，将大家每天处理待办事项的速度（我们称做日均Story Point）总结在Wiki中，如下图所示。这样当我们估计一个新一轮的迭代工作是否能够完成时，就可以参考前面几十次的经验，做出更加理性地判断。</p>

<p><img src="/images/scrum_story_point.jpg"></p>

<h1>Scrum的三大支柱</h1>

<p><img src="/images/scrum_keys.jpg"></p>

<p>透明性、检视、调整是Scrum的三大支柱。</p>

<ul>
<li>透明性是指：团队成员要达到对信息的完全共享，以便对观察到的信息有相同的理解。</li>
<li>检视是指：团队成员要不停地检查自己的状态，类似汽车的定期检查一样，通过检视了解当前项目的状态。</li>
<li>调整是指：团队成员发现出现了会影响项目进度的事件后，要及时寻找对策。</li>
</ul>


<p>以上的说法有些学术化，我们可以这样理解：</p>

<p>群体智商常常会出现低于个体智商的现象，这是因为个体之间的信息通常不一致，每个人的信息都是片面的，所以造成了观点的片面，而通常情况下团队领导由于接受到的信息更全面，所以他的决策考虑会更周到一些。</p>

<p>但是Scrum又强调团队需要是“自组织”的，这就需要群体进行决策而不是领导。为了群体更好的决策，所以Scrum特别强调信息的透明，这样大家的信息都是充分共享的，而检视是一种保证信息透明的方法，即定期地查看自己和团队的状态，有了信息的透明，这样团队成员就能共同发现项目执行中的问题，进而一起寻找解决办法，从而达到“自组织”的团队。</p>

<h1>Scrum的基础游戏规则</h1>

<p>Scrum定义了基础的游戏规则，在基础的游戏规则之上，团队可以依据自己的经验，制定更细致的规则。但更细致的规则不应该违背基础的规则。这就像国家的宪法一样，其它法律不能与宪法违背。</p>

<p>那我们来看看Scrum有哪些基础的游戏规则。</p>

<h2>角色定义</h2>

<p><img src="/images/scrum_roles.jpg"></p>

<p>玩三国杀的同学都知道，玩之前大家会抽身份：主公、反賊、忠臣、内奸。而Scrum的游戏规则里面，有以下几种身份角色：</p>

<ul>
<li><p>产品负责人：产品负责人是管理产品待办列表的唯一责任人，也是产品最终的责任人。（稍后我们在介绍计划会议时，解释什么是产品待办列表。）简单来说，最终如果产品没做好，应该扣产品负责人的工资。</p></li>
<li><p>开发团队：开发团队是负责将每轮Scrum迭代中计划的功能（可能是产品稿+美术稿的形式），交付成可发布的产品的各种专业人员。这里的各种专业人员包括：服务器端开发、Javascript前端开发、客户端开发、测试人员等。开发团队是真正在玩这个Scrum游戏的人，其他人（例如产品负责人都只是部分参与）。</p></li>
<li><p>Scrum Master：Scrum Master类似于杀人游戏中的法官，即游戏组织者。Scrum Master并不是团队的领导，他仅仅是做一些组织工作，而对于一个“自组织”的团队来说，其实真正需要组织的事情也不太多，所以他常常由开发团队中的某一个人兼任。</p></li>
</ul>


<h3>没有子团队</h3>

<p>在Scrum的官方文档中，这样说道：</p>

<blockquote><p>Scrum 不认可开发团队中的所谓“子团队”,无论是测试还是业务分析的成员都不能划分为“子团队”。此规则无一例外。</p></blockquote>

<p>所以我们看到，Scrum在定义角色的时候，强调开发团队中一个整体，包含把产品发布出来的所有相关的专业技术人员，并且开发团队共同承担开发的责任，只有这样，大家才能形成利益共同体，共同努力把产品做好。</p>

<p>这一点也解释了为什么很多大公司玩不好Scrum。拿百度举例，百度的一个项目就有很多“子团队”。在百度，前端开发人员属于前端组，移动端开发人员属于移动端组，测试有专门的QA组，PM也有专门的组。这样的划分，进而造成大家的绩效评估并不是完全由项目执行的好坏来决定，而PM也需要花很大精力去推动大家，这样的团队没有共同的利益，是很难做到“自组织”的。</p>

<h3>强调平等</h3>

<p>Scrum中仅定义了“开发团队”这个整体的角色，在“开发团队”内部，大家都是平等的。因为只有这样，大家才能更加自由的共享信息，共同决策，否则决策权仍然掌握在少部分人手里。在Scrum的官方文档中，是这样说的：</p>

<blockquote><p>Scrum 不认可开发团队成员的头衔，无论承担哪种工作他们都叫做开发人员。此规则无一例外。</p></blockquote>

<h3>游戏人数规则</h3>

<p>开发团队还有一个不能不说的特点，就是他的规模必须足够小，因为他强调信息的透明，如果人数过大，光沟通的成本就大到无法承受了，所以官方文档上推荐的人数是 10人以内（不包括产品负责人和Scrum Master，除非他们也参与开发）。</p>

<p>但是在实际执行中，由于业务的增长，团队人数很容易就超过10人。比如我们猿题库在创业时只有不到10人，现在已经成长到几十人了。这个时候，比较好的做法是进行团队的切分，比如我们试过将猿题库的服务器端和客户端进行拆分，这样保证每个团队还是在10人以内。如果以后再增长，可能客户端会再进行拆分成iOS团队和Android团队。</p>

<h3>游戏时间</h3>

<p>Scrum对每一轮的迭代时间并没有严格的规定，但它要求是小于一个月。对于每一轮的迭代，Scrum把它称作Sprint（冲刺）。</p>

<p>作为创业公司，我们在最近两年都实践着一周一次Sprint的方式来工作。一周一次Sprint能够保证调整足够快，Sprint执行中是不鼓励需求改动的。所以一周一次的Sprint能够做到，对于比较急迫的需求改动，在下次Sprint时（下周）就可以执行。</p>

<p>一周一次的Sprint也有不少问题，由于偏离本文主题，所以就不展开介绍了。现在我们的猿题库直播课项目组也在尝试进行2周一次的Sprint。总之，Sprint多长是由开发团队根据项目的具体特点来决定的，只要不超过一个月即可。</p>

<h2>游戏玩法</h2>

<p>讲了半天，终于讲到核心了，到底怎么玩这个游戏啊！为了更好的理解，我们先看看杀人游戏的玩法，杀人游戏定义了如下几个事件：</p>

<ol>
<li>天黑请闭眼，这个时候大家都闭上眼睛</li>
<li>杀手睁眼，杀手杀人，杀手闭眼</li>
<li>警察睁眼，警察检查，警察闭眼</li>
<li>天亮了，宣布谁死了，大家讨论并投票谁是杀手，投出的嫌疑人被杀死。如果警察或杀手死了，宣布游戏结束，否则跳到第1步。</li>
</ol>


<p>刚好，Scrum也定义了4个事件，分别是：</p>

<ol>
<li>计划会议</li>
<li>每日站立会议</li>
<li>评审会议</li>
<li>回顾会议</li>
</ol>


<p>以下我们来详细介绍一下这4个会议到底要具体怎么做。</p>

<h3>计划会议</h3>

<p>计划会议主要通过讨论，完成两件事情：做什么、怎么做。</p>

<p>关于“做什么”：产品负责人会给出一个产品待办列表，然后由团队成员来根据预计的工作量以及以往的表现，来挑选接下来的Sprint需要完成的待办项。这里的特点是：由开发团队成员自己来挑选待办项，而不是由传统意义上的Tech Leader或产品负责人来挑选。这样保证了开发任务是由团队成员自己决定的，他更有责任心把事情完成。同时作为产品负责人，有必要非常明确地告诉开发团队每一个待办项的意义和重要性，这样开发团队才能做出有利于产品的挑选工作。</p>

<p>关于“怎么做”：开发团队从待办列表中挑选完需要完成的待办项之后，就需要对每个要做的待办项进行评估。评估的工作就是讨论具体怎么做，这包括技术架构、实现细节的讨论。只有讨论得非常清楚之后，这项工作的工作量才会比较清楚。</p>

<p>在讨论怎么做之后，一些敏捷公司推荐使用“出牌”的方式来评估工作量，我们也采用了这种方式，我们还专门做了一套Scrum扑克，用于出牌。如下图所示：</p>

<p><img src="/images/scrum_card.jpg"></p>

<p>出牌的规则是每个人出一张牌，用牌上的数字表示当前工作的工作量。通常大家还会事先约定好数字2代表的工作量，以保证大家的标准相同。为了避免相互影响，大家先把要出的牌扣着，然后同时翻开。之后，出最高分的和出最低分的同学要表达意见，说明为什么自己估计成这样，大家讨论，这样的过程可以保证大家的信息都是透明的，即没有忽略掉的技术实现难度或细节，在信息充分共享的情况下，通常大家第二次出牌时就可以达成一致了。</p>

<h3>每日站立会议</h3>

<p>每日站立会议是进行检视的方法。通常选择固定时间（我们是每天早上10点10分开），以养成团队工作习惯来避免组织成本。站立会议要尽量的短，通常控制在15分钟以内，选择站着开会，也是让大家有更大的预期快速结束。</p>

<p>站立会议主要是为了沟通，以及发现潜在可能的问题，在站立会议上，团队成员每个人要讲3句话：</p>

<ol>
<li>我昨天做了什么</li>
<li>我今天打算做什么</li>
<li>我遇到了什么问题</li>
</ol>


<p>通过这3句话来达到高效沟通的目的，对于会上提到的问题，通常是下来相关人员自行解决。</p>

<p>站立会议通常能够发现项目进展的状态是否顺利，从而尽早采取相应的措施。时间较长的Sprint可以配合燃尽图，更方便地审视项目进展速度。</p>

<h3>评审会议</h3>

<p>Sprint 评审会议在 Sprint 结束时举行，用于检查计划中的工作，哪些完成了，哪些没有完成。在我们的实践中，我们会让开发的同事演示自己所做的功能，然后PM会看这个功能是否达到了要求。</p>

<h3>回顾会议</h3>

<p>回顾会议是开发团队检视自己，发现团队运转中的问题，并且定制游戏规则的过程。通过对前一个Sprint中的人、关系、过程、工具进行检视，团队成员能够总结出做得好的，和做得不好的。进而制定一个改进的方案。</p>

<p>回顾会议是Scrum创建“自组织”团队的关键，它将团队自我改进变成了一个例行的会议，在这个会议中，讨论的都是大家对该游戏的感受，包括好的和不好的，最终大家为了玩得更爽，就会发扬好的，努力避免不好的，成为一个能够自我进化的集体。</p>

<p>需要注意的是，回顾会议不应该成为吐槽大会，大家应该本着发现问题，解决问题的态度来讨论。例如：如果在回顾会议仅仅是抱怨产品老是改需求，或者抱怨时间不够，而不提出解决方案的话，是非常不好的。</p>

<p>提出问题是容易的，麻烦的是提出解决方案。我们的老大郭常圳提出了一个办法，即我们思考：“如果再来一次，我们能不能做得更好”？如果我们发现，如果再来一次，由于客观原则，我们可能仍然无法避免同样的问题，那么我们就选择坦然接受而不是抱怨。</p>

<p>因为很多时候本来就没有完美的、没有任何问题的解决方案，这就像软件都有Bug一样，如果Bug不可避免，我们就选择发现的时候尽量修复而不是编码的时候避免。</p>

<h3>框架图</h3>

<p>下图介绍了Scrum的整个框架：</p>

<p><img src="/images/scrum_meetings.jpg"></p>

<h2>一些问题</h2>

<h3>有什么辅助Scrum的工具？</h3>

<p>我们使用的是Redmine的Scrum插件来开相关的Scrum会议。我们Scrum的回顾会议总结放在内部的Wiki上。也有团队喜欢直接用白板+便签来完成Scrum的相关会议。像JIRA一类的专业项目管理软件，也都支持Scrum。</p>

<h3>游戏超时怎么办？</h3>

<p>游戏超时通常就意味着游戏结束。在Scrum这个游戏中，团队成员不接受Sprint延期。所以不管有没有完成所有任务，评审会议和回顾会议都需要按时开，没有完成的任务需要进行仔细讨论，分析其原因到底是什么，从而在下一轮Sprint中尽量避免出现同样的问题。</p>

<h3>开发团队自己挑任务，会不会造成项目进度很慢？</h3>

<p>通常情况下不会。如果我们真正把Scrum做好，大家能享受到Scrum带来的各种好处，例如团队每个人都能参与决策团队做事方式，每个人都能积极的追求效率，而一次次成功的Scrum，带给大家的成就感也是巨大的。</p>

<p>好的Scrum执行还能保证团队不会随意加班，我们已经很久没有周末加班了，平时晚上大部分时间也都能做到按时下班，这对于互联网公司来说，几乎是不可想像的。</p>

<p>不加班只是一个附属品，最重要的是按时发布产品，我们创业2年多来从来没有延期发布过产品。这样使得我们的运营推广计划能够非常有序地执行。</p>

<p>需要强调的是，不加班并不是代表我们的工作轻松，通常情况下我们的Scrum安排还是比较紧张的，因为我们都想创业时跑得快一些。不加班也不是我们的原则，我们的原则是按时发布产品，所以当有一些特殊情况产生时，我们也会适当的加班。我们只是不把加班当作一个常态的工作方式，因为我们认为工作效率比工作时长更为重要。另一方面我们认为创业是长跑，保持良好的发布节奏已经非常好了，长期加班造成的身体懈怠可能会造成工作效率的损失。</p>

<h3>Scrum适合所有团队吗？</h3>

<p>首先Scrum是非常适合程序员的，因为程序员天生就不喜欢约束。Scrum的“自组织”团队的思想很容易让程序员感觉到自己是团队的主人。另外Scrum是非常反会议的，4个会议都严格地规定了时间长度，所以可以让程序员有充足的时间花在编码上。Scrum也是比较反需求临时变更的，由于Sprint周期短（我们才一周），所以变更可以根据重要程度放到下一个Sprint中。</p>

<p>Scrum非常强调团队作为一个整体来做事情，所以并没有刻意地去评估每个人具体的工作量。这需要团队每个人都比较自觉。当然，由于强调透明和检视，所以团队内如果有人懈怠的话，团队里其他人是很容易发现的。</p>

<p>所以，如果你的团队人数在10人左右，又能保证团队是一个整体为项目负责，那就有了尝试Scrum的基础。</p>

<h3>为什么很多公司用不好Scrum？</h3>

<p>Scrum指南里面也提到，Scrum是“易于学习，难于精通的”。所以Scrum本来就比较难做好。我感觉到几个比较容易出现的问题是：</p>

<ol>
<li><p>团队里面有人不信Scrum能比以前的软件开发方式更好。游戏规则使终是游戏规则，如果有人不想玩游戏的话，游戏玩起来就没有那么愉快了。真正想做好Scrum就得认真学习Scrum指南，然后努力遵守Scrum的规则。只有当大家都努力玩这个游戏时，才能享受游戏的乐趣。</p></li>
<li><p>随意更改Scrum的规则。例如我以前在有道的团队就把Scrum的每日站会改成了每周二，周四开一个坐会，开会的方式也变成产品经理询问进度，各个技术人员汇报的方式，会议一次要开半个多小时。这一下子就把每日站会做得变味了。</p></li>
<li><p>难以组建团队。之前说过像百度这类大公司，其公司文化不是一朝一夕形成的。Scrum的工作方式要求大家都为项目完全负责，而很多传统公司按职能来划分团队，例如PM团队、客户端团队、前端团队等，这会影响Scrum的执行。</p></li>
</ol>


<h3>Scrum是终极大招吗</h3>

<p>Scrum不是银弹，它并不能解决所有问题，实际上，很多时候它根本不提供解决问题的方法。Scrum本身只是一个框架，通过这个框架，我们更容易发现项目运行中的问题，通过定期的回顾会议来解决问题。</p>

<h1>结束语</h1>

<p>本文旨在通过介绍Scrum的核心思想和基本框架，吸引大家了解Scrum。要实践Scrum，还是需要进一步的学习才行。欢迎大家详细阅读<a href="https://www.scrum.org/Portals/0/Documents/Scrum%20Guides/2013/Scrum-Guide-CN.pdf#zoom=100">《Scrum指南》</a>，然后尝试使用Scrum来让自己每天的工作变得轻松愉快。</p>

<p>PS：我们的公司猿题库创业两年，做在线教育方向，不久前顺利拿到了1500万美元的C轮融资。我们现在很缺人，也欢迎大家加入我们，和我们一起玩Scrum游戏，感兴趣的可以看：<a href="http://www.yuantiku.com/campus/">职位介绍</a>。</p>

<p>愿大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将博客从GitHub迁移到GitCafe]]></title>
    <link href="http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog/"/>
    <updated>2014-06-02T17:22:02+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/06/02/use-gitcafe-to-host-blog</id>
    <content type="html"><![CDATA[<p>我之前一直使用<a href="https://pages.github.com/">Github Pages功能</a>以及<a href="http://octopress.org/">Octopress</a>来搭建个人博客，我也写了一篇文章<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">《象写程序一样写博客：搭建基于github的博客》</a>来分享博客搭建的技术细节。</p>

<p>但是自从我的博客每天访问量超过2000次以后，我就发现博客的访问速度还是一个不可忽视的问题。通过<a href="http://www.jiankongbao.com/">监控宝</a>和<a href="http://www.google.com/analytics/">Google Analytics</a>，我发现有些博客文章的平均打开时间长达4秒钟。于是我开始考虑将博客搭建在更快的服务器上面。</p>

<p>我的首先考虑是购买独立的VPS，<a href="https://www.linode.com/pricing">Linode</a>每月30$的价格还是略贵，于是我买的是 <a href="https://www.digitalocean.com/?refcode=f54eef197afd">DigitalOcean</a>，<a href="https://www.digitalocean.com/?refcode=f54eef197afd">DigitalOcean</a>算下来每月只需要5$。于是在一个周末，我花时间购买了DigitalOcean家的VPS，安装了Nginx，然后在上面运行了一个脚本，定时将我github博客的内容自动更新过来（其实就是定期<code>git pull</code>一下我博客的repo）。</p>

<p>就这样运行了一个月，我发现虽然<a href="https://www.digitalocean.com/?refcode=f54eef197afd">DigitalOcean</a>服务器的ping值相比github要快一些。但是从监控数据上看，整体的网页访问速度并没有什么提高。就在我在微博上抱怨的时候，一个朋友推荐我试试<a href="http://gitcafe.com/signup?invited_by=tangqiaoboy">GitCafe</a>。于是我就尝试了一下，结果你猜怎么着？我被吓坏了。</p>

<p>ping值直接从200ms左右减少到3ms左右，如下图所示：</p>

<p><img src="/images/gitcafe-ping.jpg"></p>

<p>监控宝的统计显示，首页平均打开时间从原来的1800ms减少到350ms左右，快了5倍，如下图所示：</p>

<p><img src="/images/gitcafe-jiankong.jpg"></p>

<p>所以我强烈建议各位基于Github Pages功能来搭建个人博客的朋友，将博客内容镜像到<a href="http://gitcafe.com/signup?invited_by=tangqiaoboy">GitCafe</a>上。如果你有个人的独立域名，那么镜像之后就可以随时将博客地址在Github和Gitcafe之间切换了。对于各位博主来说，这样做没有任何风险，因为你可以随时再切换回去。当然，免费用了人家的服务，如果你能像我这样，在网站的底部附上感谢内容，那是再好不过的了。</p>

<p>以下为大家介绍详细的迁移过程。</p>

<h2>迁移教程</h2>

<h3>注册</h3>

<p>如果你还没有注册过<a href="http://gitcafe.com/signup?invited_by=tangqiaoboy">GitCafe</a>，首先需要<a href="https://gitcafe.com/signup">点这里</a>注册一下。</p>

<p>注册完成之后，去<a href="https://gitcafe.com/account/public_keys">公钥管理</a>那儿添加一下你的ssh公钥，这样以后提交代码会方便很多。当然你也可以不设置这一步，每次提交通过密码来验证。</p>

<h3>在GitCafe上新建一个博客项目</h3>

<p>然后我们需要先在GitCafe上新建一个博客项目。GitCafe的博客搭建官方教程藏得比较深，所以我第一次还没有找到，教程地址在<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki">这里</a>。具体来说，就是创建一个与用户名(如果是组织，就是组织名)相同名称的项目。如果你创建的项目名与用户名相同，GitCafe会自动识别成这是一个Page项目，如下所示：</p>

<p><img src="/images/gitcafe-create-page.jpg"></p>

<h3>设置多个Git Remote源</h3>

<p>接下来我们需要将原本提交到Github上的博客内容同步提交到GitCafe。因为我的博客是基于<a href="http://octopress.org/">Octopress</a>的，我介绍一下Octopress的做法，其它博客引擎的做法类似。</p>

<p>对于Octopress，我们只需要每次提交网站内容时，执行完 <code>rake deploy</code>之后，再执行以下脚本即可（你可以将该脚本中的代码仓库地址换成你的，然后将其保存成一个脚 本文件，需要时执行一下即可）：</p>

<p>``` bash</p>

<p>cd _deploy</p>

<h1>添加 gitcafe 源</h1>

<p>git remote add gitcafe git@gitcafe.com:tangqiaoboy/tangqiaoboy.git >> /dev/null 2>&amp;1</p>

<h1>提交博客内容</h1>

<p>echo &ldquo;### Pushing to GitCafe&hellip;&rdquo;
git push -u gitcafe master:gitcafe-pages
echo &ldquo;### Done&rdquo;%</p>

<p>```</p>

<p>大概解释一下以上内容，Octopress在发布时会将自己的 <code>_delpoy</code>目录切换到master分支，然后将生成的博客内容放到<code>_delpoy</code>目录中，然后执行<code>git push</code>操作。正常情况下，默认内容是push到github上的。我们执行的以上脚本，就是为该项目增加了一个名为<code>gitcafe</code>的远程仓库，然后将master分支push到<code>gitcafe</code>的<code>gitcafe-pages</code>分支。</p>

<h3>修改Rakefile (可选)</h3>

<p>除了以上方法外，你也可以直接修改<code>Rakefile</code>。在其第269行后增加如下代码，也可以达到同样的目的，这样你每次就仍然只需要执行<code>rake deploy</code>即可同时将博客同步到github和gitcafe：</p>

<p><code>ruby
system "git remote add gitcafe git@gitcafe.com:tangqiaoboy/tangqiaoboy.git &gt;&gt; /dev/null 2&gt;&amp;1"
system "git push -u gitcafe master:gitcafe-pages"
</code></p>

<p>插入代码的示例位置如下：</p>

<p><img src="/images/gitcafe-edit-rakefile.jpg"></p>

<h3>设置域名</h3>

<p>GitCafe的自定义域名设置比github要友好得多，它不但提供了图形界面设置，并且支持同时设置多个域名。在<code>项目管理</code>&ndash;><code>域名管理</code>中，我们可以找到相应的设置项，如下所示：</p>

<p><img src="/images/gitcafe-set-domain.jpg"></p>

<p>在设置完之后，我们需要去域名解析的服务商那儿，将对应的域名用<code>A记录</code>类型，解析到<code>117.79.146.98</code>即可。</p>

<h3>添加对GitCafe的感谢(可选)</h3>

<p>如果你也想像我一样，想在博客底部添加对GitCafe的感谢，可以参考<a href="https://github.com/tangqiaoboy/tangqiaoboy.github.com/commit/a8ff6914d6fca786baf5702de3da01d408bd7b43">这个提交</a>。它通过修改Octopress的<code>source/_includes/custom/footer.html</code>模版文件完成。</p>

<h2>感谢</h2>

<p>最后再次感谢GitCafe，上个月在QCon大会上了解到他们的发展思路和Github很不一样。虽然它还是一家创业公司，但是我期待看到它最终能够推动国内开源和技术社区的发展。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术人员如何坚持写作]]></title>
    <link href="http://blog.devtang.com/blog/2014/05/24/how-to-persist-writing/"/>
    <updated>2014-05-24T14:00:12+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/05/24/how-to-persist-writing</id>
    <content type="html"><![CDATA[<p><img src="/images/writing.jpg"></p>

<h2>我和朋友的故事</h2>

<p>这个月我给<a href="http://www.infoq.com/cn">InfoQ网站</a>、<a href="http://programmer.csdn.net/">《程序员》</a>的投稿所获的稿费，加上去人人网分享技术所得到的礼物，一共有将近3000块。看到这个数字之后我自己都吓了一跳，不知不觉中，写作和分享竟然给自己带来了这么大的直观收入。</p>

<p>但是相比那些非金钱上的收获，这些直接收入又显得微不足道。我在<a href="http://blog.devtang.com/blog/2014/01/08/why-we-need-write/">《作为码农，我们为什么要写作》</a>一文中，总结了写作给自己带来的非金钱上的收获，包括：<code>提高自己对知识的掌握层次</code>、<code>提高表达和沟通的能力</code>、<code>错误内容反馈</code>、<code>认识朋友</code>、<code>了解更多相关信息</code>、<code>提高影响力</code>和<code>获得传递知识的乐趣</code>。</p>

<p>由于我自己从写作中获得了巨大的好处，所以我尝试向身边的朋友推荐这个自我提高的方式，但是非常令人惊讶的是，即使知道这里面会有巨大的好处，我身边的很多朋友仍然不能坚持写作。我从他们中收集到的负面反馈包括：</p>

<ol>
<li><p>写作太花时间。我的朋友A发现，完成一篇给InfoQ的投稿需要花费他周末2天的时间（包括查找资料和写作，和InfoQ编辑的沟通，多次改稿等）。而从稿费得到的直接收入，远远不能弥补他所花费的时间。通常人们都喜欢将自己的月工资除以22，然后算出来每天自己的时间成本。当发现自己的写作直接收入远远不能匹配工作的收入时，很多人都会选择放弃。</p></li>
<li><p>自己不擅长写作。我的朋友B对于Origami非常精通，我本来打算向他约一篇深入介绍Origami的稿件，但是当然得知稿件的稿费只有千字150元时，他就放弃了。拿他的话来说，写文章憋出几个字可比写代码费劲多了，为了这篇文章，他可能得花费数周才能完成，最终的稿费收入可能只有几百块。</p></li>
<li><p>写作对自己收获不大。我的朋友C是一个技术牛人，但是他习惯通过记笔记的方式来整理知识，对于一些知识点，因为是消化过的，所以他就只需要在笔记中将关键的内容记录下来，就可以方便地在后期进行知识的回顾。而如果他要写文章的话，因为文章是面向其他读者，他就需要非常仔细地介绍知识的前因后果，做各种铺垫，还需要做到有条理，表达清晰。这些如果要做好，配图、举例子、提供参考资料等工作是免不了的，所以让我的朋友C觉得实在太花时间了，性价比太低。</p></li>
<li><p>自己不能坚持。我的朋友D完全同意我的观点，认为写作能够带来的巨大好处，但是他就是坚持不下来。这就像有些人不能坚持锻炼身体，有些人不能坚持早睡早起，有些人不能坚持控制饮食一样，对于一些有好处但是需要和自己的潜意识做斗争的事情，很容易被自己打败。</p></li>
</ol>


<h2>坚持写作的关键</h2>

<p>他们说得有道理吗？我认为非常有道理。而且我认为，我的ABCD四个朋友，都会在各自领域成为大牛，因为他们都热爱编程，喜欢专研，并且有着认真做事情的态度。所以反过来，我认为坚持写作并不是一个人通往成功的必经之路，但是写作是帮助你成功的一个重要的加分项。</p>

<p>那我们为什么坚持写作？我只想到一个理由：爱好。</p>

<p>但是我不同意爱好就等同于擅长的事情。通常情况下某一个人因为在天赋上擅长做某件事情，然后就会在这件事情上持续收获满足感，进而在该件事情上比别人投入更多时间。但是也有那种反过来的，因为爱好一件事情，从而不断地坚持做那件事情，最终因为投入巨大的时间而成功。</p>

<p>我个人坚持写作就属于后者。高中时，我的语文成绩一直在应试教育的阴影之下，由于并不擅长记忆，我的语文成绩一直非常差，高考时语文差一点不及格，满分150的考卷最终只有92分。但是我内心深处还是喜欢表达的，所以最终工作后还是坚持将自己的学习收获写成文章表达出来，慢慢写多了就有一些感觉了，最终能够熟练地进行技术写作。</p>

<p>我个人对于编程也是这样，由于初高中时对于编程的痴迷，得以花费大量的课余时间学习编程。其实我还是比较笨的，例如高中时为了看懂一个非递归的枚举代码就花了近一个月。那个时候还坚持买《程序员》杂志，虽然大部分看不懂=。= ，下图是今年春节回家在家里看到一本11年前买的《程序杂》杂志。</p>

<p><img src="/images/programmer-2003.jpg"></p>

<p>所以，你不需要一定擅长写作，只需要有一个喜欢表达和分享的心就可以。</p>

<p>对于爱好，李笑来的<a href="http://book.douban.com/subject/3609132/">《把时间当作朋友》</a>一书中的观点更加极端。他在书的第一章“心智的力量”中认为：只要人足够强大，能够控制自己的心智，那么就可以无视兴趣的力量，坚持做对自己有收获的事情，然后反而过由于长久坚持而收获成功，得到最终的满足感，最后通过满足感反过来得到兴趣。他的原话是：</p>

<p><blockquote><p></p></p><p><p>只要一件事儿你能做好，并且做到比谁都好，或者至少比大多数人好，你没办法对那件事情没兴趣。</p></p><p><p>往往并不是有兴趣才能做好，而是做好了才有兴趣。</p></p><p><p></p></blockquote></p>

<p>但是我终究认为人不是机器，我个人更喜欢随性一些，如果做A和B两件事情都能带来成功，我更倾向于用我个人的兴趣或直觉来选择，而不是“控制心智”，完全理智地看A和B哪个收益更大。</p>

<p>本文接下来的部分是写给那些内心爱好写作与分享的朋友，以及那些能够“控制心智”的朋友。我们将讨论如何坚持写作。</p>

<h2>如何坚持写作</h2>

<p>在有了兴趣之后，我们来解决上面ABCD四个朋友提出的各种问题，看如何能坚持写作。对于ABCD提出的各种问题，我们可以尝试以下这些解决办法：</p>

<ol>
<li><p>对于不擅长写作的朋友，可以尝试刚开始不要写那么深入的文章，也不要太追求完美而忽略效率。写作能力的提高本来就循序渐进的，刚开始写简单一些，总归比不写要好得多。我刚开始的写作内容，就是尝试把苹果WWDC视频中的内容看懂后，用自己的话再讲一遍。慢慢的，就可以写一些原创的深入文章了。</p></li>
<li><p>对于觉得写作太花时间的朋友，可以尝试把写作内容变短。例如每天用200-500个字总结一些今天在技术上的收获。慢慢坚持，就可以提高自己的表达能力。我个人就喜欢用微博或微信公共帐号来发表简短的原创内容，虽然很多时候就是介绍一个架构或新闻，但是思考怎么用简短的几个字表达清楚，并且能吸引读者转发或阅读，也是能有不少小的提高的。</p></li>
<li><p>对于觉得写作收获不大的朋友，如果你把写作当爱好，就不应该计较收获了。另外，我认为写作的收获在早期可能不明显，但是当你的写作积累了一定量的时候，收获就会被成倍地放大，就像我现在这样。我从写作上获得的收入是巨大的。</p></li>
<li><p>对于不能坚持的朋友，也可以尝试上面说的方法2，即每天写少量的内容，这样时间开销会比较少。</p></li>
</ol>


<p>最后，学习和模仿别人的写法也是一个不错的提高方式，像 <a href="http://onevcat.com/">onevcat</a> 和 <a href="http://macshuo.com/">池建强</a> 的文章就比我写得风趣得多，我也在尝试多一些有趣的表达方式。</p>

<h2>推荐</h2>

<p>最后推荐大家在有一定写作能力后，尝试给 <a href="http://www.infoq.com/cn">InfoQ网站</a> 或<a href="http://programmer.csdn.net/">《程序员》</a>杂志投稿，通常他们对于稿件会有更加严格的审核，所以即使稿件被拒，也能让自己找到未来提高的地方。</p>

<p>当你给InfoQ的原创文章投稿超过3篇被发表后，就可以申请成为兼职编辑，InfoQ编辑每月有一次集体的“我是吃货”聚会，各种海吃海喝之后，还可以和InfoQ CEO Kevin、男神池建强、张龙老师、交际花显峰等其他编辑当面交流技术，实在是一次难得的机会。</p>

<p>每年InfoQ兼职编辑还可以用3篇原创稿件换取5800元的QCon门票，并可以采访QCon上来自全国各地的技术高手。比如今年的<a href="http://www.qconbeijing.com/">QCon会</a>上，我就<a href="http://www.infoq.com/cn/news/2014/04/interview-ios-test-guide-author">采访</a>了<a href="http://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/product-description/B00JPVNFKM">《iOS测试指南》</a>的作者羋峮。虽然大家看到了最终的<a href="http://www.infoq.com/cn/news/2014/04/interview-ios-test-guide-author">采访稿件</a>，但是亲自面对面交流的收获很难完全体现在稿件中的，比如有一条羋峮对于测试的看法：“只测试需要测试的逻辑”这一条，虽然只是采访之后随口所说，但对我的影响还是非常大的，但我很难将其思想体现在稿件中。</p>

<p>希望本文能让那些喜欢写作和分享的人，都能坚持自己的这个爱好，最终从中得到巨大的回报！</p>

<p>愿大家玩得开心～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从Facebook看移动开发的发展]]></title>
    <link href="http://blog.devtang.com/blog/2014/04/16/mobile-development-view-from-facebook/"/>
    <updated>2014-04-16T20:37:59+08:00</updated>
    <id>http://blog.devtang.com/blog/2014/04/16/mobile-development-view-from-facebook</id>
    <content type="html"><![CDATA[<p><img src="/images/facebook-logo.jpg"></p>

<h2>从Facebook谈起</h2>

<p>Facebook最近绝对是互联网界的新闻明星。它首先是进行了大手笔的收购：2014年2月，Facebook 以 160 亿美元现金加股票，以及30 亿美元受限制股票福利的方式<a href="http://tech.ifeng.com/internet/special/fb-whatsapp/content-1/detail_2014_02/21/34032969_0.shtml">收购移动 IM 应用 WhatsApp</a>，总收购成本 190 亿美元。然后是继续发布了新产品：2014年2月，Facebook发布了一个新的移动端新闻阅读应用<a href="https://www.facebook.com/paper">Paper</a>。最后，Facebook最近还将自己使用的大量工具开源，包括开源了Paper的加载效果<a href="https://github.com/facebook/Shimmer">Shimmer</a>，LLDB的增强工具<a href="https://github.com/facebook/chisel">chisel</a>，以及Key-Value Observing工具<a href="https://github.com/facebook/KVOController">KVOController</a>，如果说这些开源工具让程序员如获至宝的话，那么Facebook将Paper的交互设计工具<a href="http://facebook.github.io/origami/">Origami</a>免费开放，则是对广大设计师的福音，极大地方便了移动交互设计工作的开展。</p>

<p>2014年对于Facebook来说也是一个值得纪念的日子。因为从2004年2月4日Facebook产品上线到现在，Facebook刚刚走过10个年头。10年前，Facebook的创始人扎克伯格才19岁，是哈佛大学的一名学生。转眼间10年后，Facebook已经成长为全球最大的社交网络，月活跃用户达到12亿，市值约1200亿美元。</p>

<p>业界内大多讨论的话题都围绕在Facebook收购WhatsApp这件事情上，而作为一个移动开发者，我更加看重Facebook 发布Paper这件事情。因为Paper并不是一个简单的应用，它有着非常优秀的交互效果，并且在产品设计和技术上都使用了许多前沿的技术，那就让我们看看，Paper的开发到底有何不同之处？</p>

<h2>交互设计</h2>

<p>我们首先从产品设计上看Paper的不同之处。Paper虽然只是一个新闻客户端，但从大家对Paper的评价上，我们发现优秀的交互再一次成为大家关注的焦点。回想那些成功的应用，大多都有着令人心动的交互效果，例如：Tweetie的下拉刷新，现在基本上成为iPhone上内容刷新的标准。Path跳出来的红心让人心动，很多朋友甚至会没事点那个红心，欣赏那流畅的按钮散开效果。还有Mailbox，用流畅的手势操作，将邮件管理与任务管理完美结合起来。</p>

<p>国外成功的优秀应用也在影响着国内。交互设计不同于平面设计，不能简单地用Photoshop展现，而交互设计对于移动应用的成功又异常关键，所以需要花费不少时间来设计，因此产品经理很难兼顾地做交互设计。所以，在国内的一线互联网公司里，交互设计师这个职位慢慢成了移动应用的标配。但是在大部分的非一线互联网公司里面，移动开发的设计仍然停留在由产品经理简单潦草的完成阶段。所以，Facebook这次Paper的成功发布，再一次给移动开发的从业者指出了交互设计的重要性。</p>

<p>回顾中国互联网产业的发展我们可以发现，产品经理（Product Manager）这个职位也是最近五、六年才成为互联网公司的标配的，想必在不远的将来，除着交互设计越来越重要，移动交互设计师也会成为每一个互联网公司重要的必备职位。</p>

<p>另一方面，由于工具的欠缺，大量的交互设计师的工作效率非常低下，他们为了做出一个新颖的效果常常需要花费大量精力。这次Facebook免费开放出基于苹果Quartz Composer的增强工具集<a href="http://facebook.github.io/origami/">Origami</a>，使得交互设计工作得到更好的辅助。而且在Facebook的带动下，<a href="http://qcdesigners.com/index.php/forums/topic/100/it-s-finally-here-j-qc-1-0-a-u/">jQC 1.0</a>也出现了。jQC是一个与Facebook之前开源的Origami兼容的工具，提供了15个新的Patch来提高Quartz Composer的功能。</p>

<p>不过另一方面，该工具仍然需要设计师具备一定的基础编码能力，所以对于广大设计师来说，交互设计工具Origami对设计师带来的既是机会，同时也是挑战。</p>

<h2>移动开发技术</h2>

<p>随着iOS依赖管理工具Cocoapods和大量第三方开源库成熟起来，业界积累了大量的优秀开源项目。这次Facebook开发Paper使用了<a href="http://blog.rpplusplus.me/blog/2014/02/11/facebook-paper-used-3rd/">将近100个第三方开源库</a>，极大地减化了自己的应用开发任务。相信随着移动开发的发展，移动开发的生态圈会越来越成熟，基础的开源组件也将将越来越丰富，广大开发者都将从中受益。</p>

<p>另一方面，Facebook的工程师在<a href="http://www.quora.com/What-exactly-did-Jason-Prado-mean-when-he-said-Xcode-cannot-handle-our-scale/answer/Scott-Goodson-1">Quora上反馈</a>说Paper在Xcode下打开需要40多秒钟，编译一次需要30分钟。这反映出大量的开源库的使用也给iOS集成编译环境Xcode提出了新的挑战，相信苹果会花大力气解决Xcode的性能问题。</p>

<h2>总结</h2>

<p>Facebook发布的Paper让我看到了移动开发领域的快速发展，大量新的工具和开源技术给了设计师和程序员机会和挑战，相信在移动互联网快速发展的浪潮中，会涌现出越来越多优秀的移动应用。谁会是未来移动互联网的霸主？让我们拭目以待。</p>

<h2>版权说明</h2>

<p>本文已发表在《程序员》杂志2014年4月刊上，链接为：<a href="http://www.csdn.net/article/2014-04-16/2819341">http://www.csdn.net/article/2014-04-16/2819341</a></p>
]]></content>
  </entry>
  
</feed>
